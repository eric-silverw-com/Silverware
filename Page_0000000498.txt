OBJECT Page 498 Reservation
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Reservation;
               ESM=Reservas;
               FRC=RÇservation;
               ENC=Reservation];
    DeleteAllowed=No;
    SourceTable=Table338;
    DataCaptionExpr=CaptionText;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 FormIsOpen := TRUE;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 29      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ESM=&L°nea;
                                 FRC=&Ligne;
                                 ENC=&Line];
                      Image=Line }
      { 30      ;2   ;Action    ;
                      Name=AvailableToReserve;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=&Available to Reserve;
                                 ESM=&Disponible para reserva;
                                 FRC=&Disponible pour rÇserver;
                                 ENC=&Available to Reserve];
                      ToolTipML=[ENU=View all the quantities on documents or in inventory that are available to reserve for the item on the line. The two actions, Auto Reserve and Reserve from Current Line make reservations from the quantities in this view.;
                                 ESM=Ver todas las cantidades del producto de la l°nea que est†n disponibles para reservar en los documentos o en el inventario. Las dos acciones, Reserva autom†tica y Reservar desde l°nea actual efect£an la reserva de las cantidades de esta vista.;
                                 FRC=Affichez toutes les quantitÇs sur les documents ou dans l'inventaire qui peuvent àtre rÇservÇes pour l'article sur la ligne. Les deux actions, RÇservation automatique et RÇserver Ö partir de la ligne courante effectuent des rÇservations Ö partir des quantitÇs dans cette vue.;
                                 ENC=View all the quantities on documents or in inventory that are available to reserve for the item on the line. The two actions, Auto Reserve and Reserve from Current Line make reservations from the quantities in this view.];
                      ApplicationArea=#Reservation;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ItemReservation;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DrillDownTotalQuantity;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      AccessByPermission=TableData 27=R;
                      CaptionML=[ENU=&Reservation Entries;
                                 ESM=Movs. &reserva;
                                 FRC=êcritures rÇser&vation;
                                 ENC=&Reservation Entries];
                      ToolTipML=[ENU=View all reservations that are made for the item, either manually or automatically.;
                                 ESM=Permite ver todas las reservas realizadas para el producto, ya sean manuales o autom†ticas.;
                                 FRC=Affichez toutes les rÇservations effectuÇes pour l'article, soit manuellement, soit automatiquement.;
                                 ENC=View all reservations that are made for the item, either manually or automatically.];
                      ApplicationArea=#Reservation;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ReservationLedger;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DrillDownReservedThisLine;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 35      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESM=Acci&ones;
                                 FRC=F&onctions;
                                 ENC=F&unctions];
                      Image=Action }
      { 36      ;2   ;Action    ;
                      Name=Auto Reserve;
                      CaptionML=[ENU=&Auto Reserve;
                                 ESM=Reservar &auto.;
                                 FRC=RÇserve &automatique;
                                 ENC=&Auto Reserve];
                      ToolTipML=[ENU="Automatically reserve the first available quantity for the item on the line. ";
                                 ESM="Reservar autom†ticamente la primera cantidad disponible del producto de la l°nea. ";
                                 FRC="RÇserver automatiquement la premiäre quantitÇ disponible pour l'article sur la ligne. ";
                                 ENC="Automatically reserve the first available quantity for the item on the line. "];
                      ApplicationArea=#Reservation;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AutoReserve;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 AutoReserve;
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=Reserve from Current Line;
                      CaptionML=[ENU=&Reserve from Current Line;
                                 ESM=Reservar desde &l°nea actual;
                                 FRC=&RÇserver de la ligne courante;
                                 ENC=&Reserve from Current Line];
                      ToolTipML=[ENU=Open the view of quantities available to reserve and select which to reserve.;
                                 ESM=Abrir la vista de las cantidades disponibles para reservar y seleccionar cu†les reservar.;
                                 FRC=Ouvrir l'affichage des quantitÇs disponibles Ö rÇserver et sÇlectionner celles Ö rÇserver.;
                                 ENC=Open the view of quantities available to reserve and select which to reserve.];
                      ApplicationArea=#Reservation;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=LineReserve;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 RemainingQtyToReserveBase@1000 : Decimal;
                                 QtyReservedBefore@1001 : Decimal;
                                 RemainingQtyToReserve@1002 : Decimal;
                               BEGIN
                                 RemainingQtyToReserveBase := QtyToReserveBase - QtyReservedBase;
                                 IF RemainingQtyToReserveBase = 0 THEN
                                   ERROR(Text000);
                                 QtyReservedBefore := QtyReservedBase;
                                 IF HandleItemTracking THEN
                                   ReservMgt.SetItemTrackingHandling(2);
                                 RemainingQtyToReserve := QtyToReserve - QtyReserved;
                                 ReservMgt.AutoReserveOneLine(
                                   "Entry No.",RemainingQtyToReserve,RemainingQtyToReserveBase,ReservEntry.Description,
                                   ReservEntry."Shipment Date");
                                 UpdateReservFrom;
                                 IF QtyReservedBefore = QtyReservedBase THEN
                                   ERROR(Text002);
                               END;
                                }
      { 43      ;2   ;Action    ;
                      Name=CancelReservationCurrentLine;
                      AccessByPermission=TableData 27=R;
                      CaptionML=[ENU=&Cancel Reservation from Current Line;
                                 ESM=&Cancelar reserva desde l°nea actual;
                                 FRC=&Annuler rÇservation de la ligne courante;
                                 ENC=&Cancel Reservation from Current Line];
                      ToolTipML=[ENU=Cancel the selected reservation entry.;
                                 ESM=Cancelar el movimiento de reserva seleccionado.;
                                 FRC=Annuler l'Çcriture rÇservation sÇlectionnÇe.;
                                 ENC=Cancel the selected reservation entry.];
                      ApplicationArea=#Reservation;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Cancel;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReservEntry3@1001 : Record 337;
                                 RecordsFound@1002 : Boolean;
                               BEGIN
                                 IF NOT CONFIRM(Text003,FALSE,"Summary Type") THEN
                                   EXIT;
                                 CLEAR(ReservEntry2);
                                 ReservEntry2 := ReservEntry;
                                 ReservEntry2.SetPointerFilter;
                                 ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                                 ReservEntry2.SETRANGE("Disallow Cancellation",FALSE);
                                 IF ReservEntry2.FINDSET THEN
                                   REPEAT
                                     ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive);
                                     IF RelatesToSummEntry(ReservEntry3,Rec) THEN BEGIN
                                       ReservEngineMgt.CancelReservation(ReservEntry2);
                                       RecordsFound := TRUE;
                                     END;
                                   UNTIL ReservEntry2.NEXT = 0;

                                 IF RecordsFound THEN
                                   UpdateReservFrom
                                 ELSE
                                   ERROR(Text005);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 13  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESM=General;
                           FRC=GÇnÇral;
                           ENC=General] }

    { 9   ;2   ;Field     ;
                Name=ItemNo;
                CaptionML=[ENU=Item No.;
                           ESM=Nß producto;
                           FRC=N¯ d'article;
                           ENC=Item No.];
                ToolTipML=[ENU=Specifies the item number of the item that the reservation is for.;
                           ESM=Especifica el n£mero de producto del producto para el que se realiza la reserva.;
                           FRC=SpÇcifie le numÇro de l'article faisant l'objet d'une rÇservation.;
                           ENC=Specifies the item number of the item that the reservation is for.];
                ApplicationArea=#Reservation;
                SourceExpr=ReservEntry."Item No.";
                Editable=FALSE }

    { 41  ;2   ;Field     ;
                CaptionML=[ENU=Shipment Date;
                           ESM=Fecha env°o;
                           FRC=Date de livraison;
                           ENC=Shipment Date];
                ToolTipML=[ENU=Specifies the shipment date, expected receipt date, or posting date for the reservation.;
                           ESM=Especifica la fecha de env°o, la fecha de recepci¢n esperada o la fecha de registro para la reserva.;
                           FRC=SpÇcifie la date de livraison, la date de rÇception prÇvue ou la date de report de la rÇservation.;
                           ENC=Specifies the shipment date, expected receipt date, or posting date for the reservation.];
                ApplicationArea=#Reservation;
                SourceExpr=ReservEntry."Shipment Date";
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Description;
                           ESM=Descripci¢n;
                           FRC=Description;
                           ENC=Description];
                ToolTipML=[ENU=Specifies a description of the reservation in the window.;
                           ESM=Especifica una descripci¢n de la reserva en la ventana.;
                           FRC=SpÇcifie la description de la rÇservation dans la fenàtre.;
                           ENC=Specifies a description of the reservation in the window.];
                ApplicationArea=#Reservation;
                SourceExpr=ReservEntry.Description }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Quantity to Reserve;
                           ESM=Cdad. a reservar;
                           FRC=QuantitÇ Ö rÇserver;
                           ENC=Quantity to Reserve];
                ToolTipML=[ENU=Specifies the total quantity of the item that must be reserved for the line.;
                           ESM=Especifica la cantidad total del producto que se debe reservar para la l°nea.;
                           FRC=SpÇcifie la quantitÇ totale Ö rÇserver pour l'article de la ligne.;
                           ENC=Specifies the total quantity of the item that must be reserved for the line.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserveBase;
                Editable=FALSE }

    { 27  ;2   ;Field     ;
                CaptionML=[ENU=Reserved Quantity;
                           ESM=Cantidad reservada;
                           FRC=QuantitÇ rÇservÇe;
                           ENC=Reserved Quantity];
                ToolTipML=[ENU=Specifies the quantity of the item reserved for the line.;
                           ESM=Especifica la cantidad del producto reservada para la l°nea.;
                           FRC=SpÇcifie la quantitÇ de l'article rÇservÇe pour la ligne.;
                           ENC=Specifies the quantity of the item reserved for the line.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                SourceExpr=QtyReservedBase;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                Name=UnreservedQuantity;
                CaptionML=[ENU=Unreserved Quantity;
                           ESM=Cdad. no reservada;
                           FRC=QuantitÇ non rÇservÇe;
                           ENC=Unreserved Quantity];
                ToolTipML=[ENU=Specifies the difference between the Quantity to Reserve field and the Reserved Quantity field.;
                           ESM=Especifica la diferencia entre el campo Cdad. a reservar y el campo Cantidad reservada.;
                           FRC=SpÇcifie la diffÇrence entre le champ QuantitÇ Ö rÇserver et le champ QuantitÇ rÇservÇe.;
                           ENC=Specifies the difference between the Quantity to Reserve field and the Reserved Quantity field.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserveBase - QtyReservedBase;
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which type of line or entry is summarized in the entry summary.;
                           ESM=Especifica los tipos de l°nea o movimiento que se muestran en el resumen de movimientos.;
                           FRC=SpÇcifie le type de ligne ou d'Çcriture rÇcapitulÇ dans l'Çcriture document rÇservation.;
                           ENC=Specifies which type of line or entry is summarized in the entry summary.];
                ApplicationArea=#Reservation;
                SourceExpr="Summary Type";
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                Name=Total Quantity;
                CaptionML=[ENU=Total Quantity;
                           ESM=Cantidad total;
                           FRC=QuantitÇ totale;
                           ENC=Total Quantity];
                ToolTipML=[ENU=Specifies the total quantity of the item in inventory.;
                           ESM=Especifica la cantidad total del producto en inventario.;
                           FRC=SpÇcifie la quantitÇ totale de l'article dans l'inventaire.;
                           ENC=Specifies the total quantity of the item in inventory.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Total Quantity");
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownTotalQuantity;
                            END;
                             }

    { 16  ;2   ;Field     ;
                Name=TotalReservedQuantity;
                CaptionML=[ENU=Total Reserved Quantity;
                           ESM=Cantidad total reservada;
                           FRC=QuantitÇ totale rÇservÇe;
                           ENC=Total Reserved Quantity];
                ToolTipML=[ENU=Specifies the total quantity of the item that is reserved on documents or entries.;
                           ESM=Especifica la cantidad total del producto que est† reservada en documentos o movimientos.;
                           FRC=SpÇcifie la quantitÇ totale de l'article qui est rÇservÇe sur les documents ou les Çcritures.;
                           ENC=Specifies the total quantity of the item that is reserved on documents or entries.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Total Reserved Quantity");
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownReservedQuantity;
                            END;
                             }

    { 8   ;2   ;Field     ;
                Name=QtyAllocatedInWarehouse;
                CaptionML=[ENU=Qty. Allocated in Warehouse;
                           ESM=Cant. asignada en AlmacÇn;
                           FRC=QuantitÇ rÇpartie entrepìt;
                           ENC=Qty. Allocated in Warehouse];
                ToolTipML=[ENU=Specifies the quantity of the item that is allocated to activities in the warehouse.;
                           ESM=Especifica la cantidad del producto que se asigna a actividades de almacÇn.;
                           FRC=SpÇcifie la quantitÇ de l'article qui est affectÇe aux activitÇs de l'entrepìt.;
                           ENC=Specifies the quantity of the item that is allocated to activities in the warehouse.];
                ApplicationArea=#Warehouse;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Qty. Alloc. in Warehouse");
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Reserved Qty. on Picks and Shipments;
                           ESM=Cdad. reservada en picking y env°os;
                           FRC=QuantitÇ rÇservÇe sur prÇlävements et livraisons;
                           ENC=Reserved Qty. on Picks and Shipments];
                ToolTipML=[ENU=Specifies the sum of the overlap quantities.;
                           ESM=Especifica la suma de las cantidades superpuestas.;
                           FRC=SpÇcifie la somme des quantitÇs de chevauchement.;
                           ENC=Specifies the sum of the overlap quantities.];
                ApplicationArea=#Warehouse;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Res. Qty. on Picks & Shipmts.");
                Visible=FALSE;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                Name=TotalAvailableQuantity;
                CaptionML=[ENU=Total Available Quantity;
                           ESM=Cantidad total disponible;
                           FRC=QuantitÇ totale disponible;
                           ENC=Total Available Quantity];
                ToolTipML=[ENU=Specifies the quantity that is available for the user to reserve from entries of the type.;
                           ESM=Especifica la cantidad disponible para que el usuario realice la reserva a partir de movimientos de este tipo.;
                           FRC=Affiche la quantitÇ disponible que l'utilisateur peut rÇserver Ö partir des Çcritures du type.;
                           ENC=Specifies the quantity that is available for the user to reserve from entries of the type.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Total Available Quantity");
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity of the item that is reserved but does not have specific item tracking numbers in the reservation.;
                           ESM=Especifica la cantidad del producto que est† reservada, pero que todav°a no dispone de n£meros espec°ficos de seguimiento de producto en la reserva.;
                           FRC=Indique la quantitÇ de l'article qui est rÇservÇe mais dont la rÇservation ne spÇcifie pas de numÇros traáabilitÇ.;
                           ENC=Specifies the quantity of the item that is reserved but does not have specific item tracking numbers in the reservation.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                SourceExpr="Non-specific Reserved Qty.";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                Name=Current Reserved Quantity;
                CaptionML=[ENU=Current Reserved Quantity;
                           ESM=Cdad. reservada actualmente;
                           FRC=RÇservation en cours;
                           ENC=Current Reserved Quantity];
                ToolTipML=[ENU=Specifies how many items in the entry are reserved for the line opened in the Reservation window.;
                           ESM=Especifica cu†ntos productos que constan en el movimiento est†n reservados para la l°nea pendiente en la ventana Reservas.;
                           FRC=SpÇcifie combien d'articles de l'Çcriture sont rÇservÇs pour la ligne ouverte dans la fenàtre RÇservation.;
                           ENC=Specifies how many items in the entry are reserved for the line opened in the Reservation window.];
                ApplicationArea=#Reservation;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty(ReservedThisLine(Rec));
                OnDrillDown=BEGIN
                              DrillDownReservedThisLine;
                            END;
                             }

    { 38  ;1   ;Field     ;
                Name=NoteText;
                ApplicationArea=#Reservation;
                CaptionClass=FORMAT(STRSUBSTNO(Text009,NonSpecificQty,FIELDCAPTION("Total Reserved Quantity")));
                Visible=NoteTextVisible;
                Editable=FALSE;
                MultiLine=Yes }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           ESM=Filtros;
                           FRC=Filtres;
                           ENC=Filters] }

    { 46  ;2   ;Field     ;
                CaptionML=[ENU=Variant Code;
                           ESM=C¢d. variante;
                           FRC=Code variante;
                           ENC=Variant Code];
                ToolTipML=[ENU=Specifies the variant code for the reservation.;
                           ESM=Especifica el c¢digo de variante de la reserva.;
                           FRC=SpÇcifie le code variante pour la rÇservation.;
                           ENC=Specifies the variant code for the reservation.];
                ApplicationArea=#Reservation;
                SourceExpr=ReservEntry."Variant Code";
                Editable=FALSE }

    { 31  ;2   ;Field     ;
                CaptionML=[ENU=Location Code;
                           ESM=C¢d. almacÇn;
                           FRC=Code d'emplacement;
                           ENC=Location Code];
                ToolTipML=[ENU=Specifies the location code for the reservation.;
                           ESM=Especifica el c¢digo de almacÇn de la reserva.;
                           FRC=SpÇcifie le code emplacement pour la rÇservation.;
                           ENC=Specifies the location code for the reservation.];
                ApplicationArea=#Reservation;
                SourceExpr=ReservEntry."Location Code";
                Editable=FALSE }

    { 50  ;2   ;Field     ;
                CaptionML=[ENU=Serial No.;
                           ESM=Nß serie;
                           FRC=N¯ de sÇrie;
                           ENC=Serial No.];
                ToolTipML=[ENU=Specifies the serial number for an item in the reservation.;
                           ESM=Especifica el n£mero de serie para un producto en la reserva.;
                           FRC=SpÇcifie le numÇro de sÇrie d'un article de la rÇservation.;
                           ENC=Specifies the serial number for an item in the reservation.];
                ApplicationArea=#ItemTracking;
                SourceExpr=ReservEntry."Serial No.";
                Editable=FALSE }

    { 44  ;2   ;Field     ;
                CaptionML=[ENU=Lot No.;
                           ESM=Nß lote;
                           FRC=N¯ de lot;
                           ENC=Lot No.];
                ToolTipML=[ENU=Specifies the lot number for the reservation.;
                           ESM=Especifica el n£mero de lote de la reserva.;
                           FRC=SpÇcifie le numÇro de lot de la rÇservation.;
                           ENC=Specifies the lot number for the reservation.];
                ApplicationArea=#ItemTracking;
                SourceExpr=ReservEntry."Lot No.";
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.;ESM=Completamente reservado/a.;FRC=Totalement rÇservÇ.;ENC=Fully reserved.';
      Text001@1001 : TextConst 'ENU=Full automatic Reservation is not possible.\Reserve manually.;ESM=No es posible la reserva autom†tica completa.\Reservar manualmente.;FRC=RÇservation automatique impossible.\RÇservez manuellement.;ENC=Full automatic Reservation is not possible.\Reserve manually.';
      Text002@1002 : TextConst 'ENU=There is nothing available to reserve.;ESM=No hay nada disponible para reservar.;FRC=Il n''y a rien de disponible Ö rÇserver.;ENC=There is nothing available to reserve.';
      Text003@1003 : TextConst 'ENU=Do you want to cancel all reservations in the %1?;ESM=®Confirma que desea cancelar todas las reservas en el/la %1?;FRC=Voulez-vous annuler toutes les rÇservations dans le %1?;ENC=Do you want to cancel all reservations in the %1?';
      Text005@1004 : TextConst 'ENU=There are no reservations to cancel.;ESM=No hay reservas que cancelar.;FRC=Il n''y a pas de rÇservation Ö annuler.;ENC=There are no reservations to cancel.';
      ReservEntry@1005 : Record 337;
      ReservEntry2@1006 : Record 337;
      SalesLine@1007 : Record 37;
      PurchLine@1008 : Record 39;
      ItemJnlLine@1009 : Record 83;
      ReqLine@1010 : Record 246;
      ProdOrderLine@1011 : Record 5406;
      ProdOrderComp@1012 : Record 5407;
      AssemblyHeader@1052 : Record 900;
      AssemblyLine@1039 : Record 901;
      PlanningComponent@1013 : Record 99000829;
      ServiceLine@1014 : Record 5902;
      TransLine@1015 : Record 5741;
      JobPlanningLine@1016 : Record 1003;
      ReservMgt@1027 : Codeunit 99000845;
      ReservEngineMgt@1028 : Codeunit 99000831;
      ReserveSalesLine@1029 : Codeunit 99000832;
      ReserveReqLine@1030 : Codeunit 99000833;
      ReservePurchLine@1031 : Codeunit 99000834;
      ReserveItemJnlLine@1032 : Codeunit 99000835;
      ReserveProdOrderLine@1033 : Codeunit 99000837;
      ReserveProdOrderComp@1034 : Codeunit 99000838;
      AssemblyHeaderReserve@1060 : Codeunit 925;
      AssemblyLineReserve@1055 : Codeunit 926;
      ReservePlanningComponent@1035 : Codeunit 99000840;
      ReserveServiceLine@1036 : Codeunit 99000842;
      ReserveTransLine@1037 : Codeunit 99000836;
      JobPlanningLineReserve@1058 : Codeunit 1032;
      CreateReservEntry@1038 : Codeunit 99000830;
      AvailableSalesLines@1073 : Page 499;
      AvailablePurchLines@1072 : Page 501;
      AvailableItemLedgEntries@1071 : Page 504;
      AvailableReqLines@1070 : Page 500;
      AvailableProdOrderLines@1069 : Page 99000897;
      AvailableProdOrderComps@1068 : Page 99000898;
      AvailablePlanningComponents@1067 : Page 99000900;
      AvailableServiceLines@1066 : Page 5999;
      AvailableTransLines@1065 : Page 99000896;
      AvailableItemTrackingLines@1064 : Page 6503;
      AvailableJobPlanningLines@1063 : Page 1032;
      AvailableAssemblyHeaders@1046 : Page 925;
      AvailableAssemblyLines@1019 : Page 926;
      QtyToReserve@1017 : Decimal;
      QtyToReserveBase@1040 : Decimal;
      QtyReserved@1018 : Decimal;
      QtyReservedBase@1041 : Decimal;
      ItemTrackingQtyToReserve@1023 : Decimal;
      ItemTrackingQtyToReserveBase@1022 : Decimal;
      NonSpecificQty@1057 : Decimal;
      CaptionText@1044 : Text;
      FullAutoReservation@1045 : Boolean;
      FormIsOpen@1047 : Boolean;
      HandleItemTracking@1048 : Boolean;
      Text006@1050 : TextConst 'ENU=Do you want to reserve specific serial or lot numbers?;ESM=®Confirma que desea reservar n£meros de serie o lote espec°ficos?;FRC=Voulez-vous rÇserver des numÇros de lot ou de sÇrie en particulier?;ENC=Do you want to reserve specific serial or lot numbers?';
      Text007@1051 : TextConst '@@@="%1 = Serial No.; %2 = Lot No.";ENU=, %1 %2;ESM=, %1 %2;FRC=, %1 %2;ENC=, %1 %2';
      Text008@1054 : TextConst 'ENU=Action canceled.;ESM=Acci¢n cancelada.;FRC=Action annulÇe.;ENC=Action cancelled.';
      Text009@1056 : TextConst 'ENU=%1 of the %2 are nonspecific and may be available.;ESM=%1 de %2 no son espec°ficos y es posible que estÇn disponibles.;FRC=Les %1 de %2 ne sont pas spÇcifiques et peuvent àtre disponibles.;ENC=%1 of the %2 are nonspecific and may be available.';
      NoteTextVisible@1126 : Boolean INDATASET;

    [External]
    PROCEDURE SetSalesLine@1(VAR CurrentSalesLine@1000 : Record 37);
    BEGIN
      CurrentSalesLine.TESTFIELD("Job No.",'');
      CurrentSalesLine.TESTFIELD("Drop Shipment",FALSE);
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      CurrentSalesLine.TESTFIELD("Shipment Date");

      SalesLine := CurrentSalesLine;
      ReservEntry.SetSource(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",'',0);
      ReservEntry."Item No." := SalesLine."No.";
      ReservEntry."Variant Code" := SalesLine."Variant Code";
      ReservEntry."Location Code" := SalesLine."Location Code";
      ReservEntry."Shipment Date" := SalesLine."Shipment Date";

      CaptionText := ReserveSalesLine.Caption(SalesLine);
      UpdateReservFrom;

      OnAfterSetSalesLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetReqLine@2(VAR CurrentReqLine@1000 : Record 246);
    BEGIN
      CurrentReqLine.TESTFIELD("Sales Order No.",'');
      CurrentReqLine.TESTFIELD("Sales Order Line No.",0);
      CurrentReqLine.TESTFIELD("Sell-to Customer No.",'');
      CurrentReqLine.TESTFIELD(Type,CurrentReqLine.Type::Item);
      CurrentReqLine.TESTFIELD("Due Date");

      ReqLine := CurrentReqLine;
      ReservEntry.SetSource(
        DATABASE::"Requisition Line",0,ReqLine."Worksheet Template Name",ReqLine."Line No.",ReqLine."Journal Batch Name",0);
      ReservEntry."Item No." := ReqLine."No.";
      ReservEntry."Variant Code" := ReqLine."Variant Code";
      ReservEntry."Location Code" := ReqLine."Location Code";
      ReservEntry."Shipment Date" := ReqLine."Due Date";

      CaptionText := ReserveReqLine.Caption(ReqLine);
      UpdateReservFrom;

      OnAfterSetReqLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetPurchLine@3(VAR CurrentPurchLine@1000 : Record 39);
    BEGIN
      CurrentPurchLine.TESTFIELD("Job No.",'');
      CurrentPurchLine.TESTFIELD("Drop Shipment",FALSE);
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      CurrentPurchLine.TESTFIELD("Expected Receipt Date");

      PurchLine := CurrentPurchLine;
      ReservEntry.SetSource(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",'',0);
      ReservEntry."Item No." := PurchLine."No.";
      ReservEntry."Variant Code" := PurchLine."Variant Code";
      ReservEntry."Location Code" := PurchLine."Location Code";
      ReservEntry."Shipment Date" := PurchLine."Expected Receipt Date";

      CaptionText := ReservePurchLine.Caption(PurchLine);
      UpdateReservFrom;

      OnAfterSetPurchLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetItemJnlLine@4(VAR CurrentItemJnlLine@1000 : Record 83);
    BEGIN
      CurrentItemJnlLine.TESTFIELD("Drop Shipment",FALSE);
      CurrentItemJnlLine.TESTFIELD("Posting Date");

      ItemJnlLine := CurrentItemJnlLine;
      ReservEntry.SetSource(
        DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",
        ItemJnlLine."Journal Batch Name",0);
      ReservEntry."Item No." := ItemJnlLine."Item No.";
      ReservEntry."Variant Code" := ItemJnlLine."Variant Code";
      ReservEntry."Location Code" := ItemJnlLine."Location Code";
      ReservEntry."Shipment Date" := ItemJnlLine."Posting Date";

      CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
      UpdateReservFrom;

      OnAfterSetItemJnlLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetProdOrderLine@9(VAR CurrentProdOrderLine@1000 : Record 5406);
    BEGIN
      CurrentProdOrderLine.TESTFIELD("Due Date");

      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry.SetSource(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",0,'',ProdOrderLine."Line No.");
      ReservEntry."Item No." := ProdOrderLine."Item No.";
      ReservEntry."Variant Code" := ProdOrderLine."Variant Code";
      ReservEntry."Location Code" := ProdOrderLine."Location Code";
      ReservEntry."Shipment Date" := ProdOrderLine."Due Date";

      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
      UpdateReservFrom;

      OnAfterSetProdOrderLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetProdOrderComponent@13(VAR CurrentProdOrderComp@1000 : Record 5407);
    BEGIN
      CurrentProdOrderComp.TESTFIELD("Due Date");

      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry.SetSource(
        DATABASE::"Prod. Order Component",ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Line No.",
        '',ProdOrderComp."Prod. Order Line No.");
      ReservEntry."Item No." := ProdOrderComp."Item No.";
      ReservEntry."Variant Code" := ProdOrderComp."Variant Code";
      ReservEntry."Location Code" := ProdOrderComp."Location Code";
      ReservEntry."Shipment Date" := ProdOrderComp."Due Date";

      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
      UpdateReservFrom;

      OnAfterSetProdOrderComponent(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetAssemblyHeader@23(VAR CurrentAssemblyHeader@1000 : Record 900);
    BEGIN
      CurrentAssemblyHeader.TESTFIELD("Due Date");

      AssemblyHeader := CurrentAssemblyHeader;
      ReservEntry.SetSource(DATABASE::"Assembly Header",AssemblyHeader."Document Type",AssemblyHeader."No.",0,'',0);
      ReservEntry."Item No." := AssemblyHeader."Item No.";
      ReservEntry."Variant Code" := AssemblyHeader."Variant Code";
      ReservEntry."Location Code" := AssemblyHeader."Location Code";
      ReservEntry."Shipment Date" := AssemblyHeader."Due Date";

      CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
      UpdateReservFrom;

      OnAfterSetAssemblyHeader(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetAssemblyLine@22(VAR CurrentAssemblyLine@1000 : Record 901);
    BEGIN
      CurrentAssemblyLine.TESTFIELD(Type,CurrentAssemblyLine.Type::Item);
      CurrentAssemblyLine.TESTFIELD("Due Date");

      AssemblyLine := CurrentAssemblyLine;
      ReservEntry.SetSource(
        DATABASE::"Assembly Line",AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.",'',0);
      ReservEntry."Item No." := AssemblyLine."No.";
      ReservEntry."Variant Code" := AssemblyLine."Variant Code";
      ReservEntry."Location Code" := AssemblyLine."Location Code";
      ReservEntry."Shipment Date" := AssemblyLine."Due Date";

      CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
      UpdateReservFrom;

      OnAfterSetAssemblyLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetPlanningComponent@18(VAR CurrentPlanningComponent@1000 : Record 99000829);
    BEGIN
      CurrentPlanningComponent.TESTFIELD("Due Date");

      PlanningComponent := CurrentPlanningComponent;
      ReservEntry.SetSource(
        DATABASE::"Planning Component",0,PlanningComponent."Worksheet Template Name",PlanningComponent."Line No.",
        PlanningComponent."Worksheet Batch Name",PlanningComponent."Worksheet Line No.");
      ReservEntry."Item No." := PlanningComponent."Item No.";
      ReservEntry."Variant Code" := PlanningComponent."Variant Code";
      ReservEntry."Location Code" := PlanningComponent."Location Code";
      ReservEntry."Shipment Date" := PlanningComponent."Due Date";

      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
      UpdateReservFrom;

      OnAfterSetPlanningComponent(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetTransLine@47(CurrentTransLine@1000 : Record 5741;Direction@1001 : 'Outbound,Inbound');
    BEGIN
      CLEARALL;

      TransLine := CurrentTransLine;
      ReservEntry.SetSource(
        DATABASE::"Transfer Line",Direction,CurrentTransLine."Document No.",CurrentTransLine."Line No.",
        '',CurrentTransLine."Derived From Line No.");
      ReservEntry."Item No." := CurrentTransLine."Item No.";
      ReservEntry."Variant Code" := CurrentTransLine."Variant Code";
      CASE Direction OF
        Direction::Outbound:
          BEGIN
            ReservEntry."Location Code" := CurrentTransLine."Transfer-from Code";
            ReservEntry."Shipment Date" := CurrentTransLine."Shipment Date";
          END;
        Direction::Inbound:
          BEGIN
            ReservEntry."Location Code" := CurrentTransLine."Transfer-to Code";
            ReservEntry."Shipment Date" := CurrentTransLine."Receipt Date";
          END;
      END;

      ReservEntry."Qty. per Unit of Measure" := CurrentTransLine."Qty. per Unit of Measure";

      CaptionText := ReserveTransLine.Caption(TransLine);
      UpdateReservFrom;

      OnAfterSetTransLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetServiceLine@15(VAR CurrentServiceLine@1000 : Record 5902);
    BEGIN
      CurrentServiceLine.TESTFIELD(Type,CurrentServiceLine.Type::Item);
      CurrentServiceLine.TESTFIELD("Needed by Date");

      ServiceLine := CurrentServiceLine;
      ReservEntry.SetSource(
        DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",'',0);
      ReservEntry."Item No." := ServiceLine."No.";
      ReservEntry."Variant Code" := ServiceLine."Variant Code";
      ReservEntry."Location Code" := ServiceLine."Location Code";
      ReservEntry."Shipment Date" := ServiceLine."Needed by Date";

      CaptionText := ReserveServiceLine.Caption(ServiceLine);
      UpdateReservFrom;

      OnAfterSetServiceLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetJobPlanningLine@20(VAR CurrentJobPlanningLine@1000 : Record 1003);
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      CurrentJobPlanningLine.TESTFIELD("Planning Date");

      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry.SetSource(
        DATABASE::"Job Planning Line",JobPlanningLine.Status,JobPlanningLine."Job No.",
        JobPlanningLine."Job Contract Entry No.",'',0);
      ReservEntry."Item No." := JobPlanningLine."No.";
      ReservEntry."Variant Code" := JobPlanningLine."Variant Code";
      ReservEntry."Location Code" := JobPlanningLine."Location Code";
      ReservEntry."Shipment Date" := JobPlanningLine."Planning Date";

      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
      UpdateReservFrom;

      OnAfterSetJobPlanningLine(Rec,ReservEntry);
    END;

    [External]
    PROCEDURE SetReservEntry@16(ReservEntry2@1000 : Record 337);
    BEGIN
      ReservEntry := ReservEntry2;
      UpdateReservMgt;
    END;

    LOCAL PROCEDURE FilterReservEntry@11(VAR FilterReservEntry@1000 : Record 337;FromReservSummEntry@1001 : Record 338);
    BEGIN
      FilterReservEntry.SETRANGE("Item No.",ReservEntry."Item No.");

      CASE FromReservSummEntry."Entry No." OF
        1:
          BEGIN // Item Ledger Entry
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
            FilterReservEntry.SETRANGE("Source Subtype",0);
            FilterReservEntry.SETRANGE("Expected Receipt Date");
          END;
        11,12,13,14,15,16:
          BEGIN // Purchase Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 11);
          END;
        21:
          BEGIN // Requisition Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Requisition Line");
            FilterReservEntry.SETRANGE("Source Subtype",0);
          END;
        31,32,33,34,35,36:
          BEGIN // Sales Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 31);
          END;
        41,42,43,44,45:
          BEGIN // Item Journal Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 41);
          END;
        61,62,63,64:
          BEGIN // prod. order
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 61);
          END;
        71,72,73,74:
          BEGIN // prod. order
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 71);
          END;
        91:
          BEGIN // Planning Component
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Planning Component");
            FilterReservEntry.SETRANGE("Source Subtype",0);
          END;
        101,102:
          BEGIN // Transfer Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Transfer Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 101);
          END;
        110:
          BEGIN // Service Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Service Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 109);
          END;
        131,132,133,134:
          BEGIN // Job Planning Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Job Planning Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 131);
          END;
        141,142,143,144,145:
          BEGIN // Assembly Header
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Assembly Header");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 141);
          END;
        151,152,153,154,155:
          BEGIN // Assembly Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Assembly Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 151);
          END;
      END;

      OnFilterReservEntryOnAfterFilterSource(FilterReservEntry,FromReservSummEntry,ReservEntry);

      FilterReservEntry.SETRANGE(
        "Reservation Status",FilterReservEntry."Reservation Status"::Reservation);
      FilterReservEntry.SETRANGE("Location Code",ReservEntry."Location Code");
      FilterReservEntry.SETRANGE("Variant Code",ReservEntry."Variant Code");
      IF ReservEntry.TrackingExists THEN BEGIN
        FilterReservEntry.SETRANGE("Serial No.",ReservEntry."Serial No.");
        FilterReservEntry.SETRANGE("Lot No.",ReservEntry."Lot No.");
      END;
      FilterReservEntry.SETRANGE(Positive,ReservMgt.IsPositive);
    END;

    LOCAL PROCEDURE RelatesToSummEntry@5(VAR FilterReservEntry@1000 : Record 337;FromReservSummEntry@1001 : Record 338) : Boolean;
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      CASE FromReservSummEntry."Entry No." OF
        1: // Item Ledger Entry
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Item Ledger Entry") AND
            (FilterReservEntry."Source Subtype" = 0));
        11,12,13,14,15,16: // Purchase Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Purchase Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 11));
        21: // Requisition Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Requisition Line") AND
            (FilterReservEntry."Source Subtype" = 0));
        31,32,33,34,35,36: // Sales Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Sales Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 31));
        41,42,43,44,45: // Item Journal Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Item Journal Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 41));
        61,62,63,64: // Prod. Order
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Prod. Order Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 61));
        71,72,73,74: // Prod. Order Component
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Prod. Order Component") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 71));
        91: // Planning Component
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Planning Component") AND
            (FilterReservEntry."Source Subtype" = 0));
        101,102: // Transfer Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Transfer Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 101));
        110: // Service Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Service Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 109));
        131,132,133,134: // Job Planning Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Job Planning Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 131));
        141,142,143,144,145: // Assembly Header
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Assembly Header") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 141));
        151,152,153,154,155: // Assembly Line
          EXIT((FilterReservEntry."Source Type" = DATABASE::"Assembly Line") AND
            (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 151));
      END;

      IsHandled := FALSE;
      OnAfterRelatesToSummEntry(FromReservSummEntry,FilterReservEntry,IsHandled);
      EXIT(IsHandled);
    END;

    LOCAL PROCEDURE UpdateReservFrom@12();
    VAR
      EntrySummary@1000 : Record 338;
      QtyPerUOM@1001 : Decimal;
      QtyReservedIT@1002 : Decimal;
    BEGIN
      IF NOT FormIsOpen THEN
        GetSerialLotNo(ItemTrackingQtyToReserve,ItemTrackingQtyToReserveBase);

      QtyPerUOM := GetQtyPerUOMFromSource;

      UpdateReservMgt;
      ReservMgt.UpdateStatistics(
        Rec,ReservEntry."Shipment Date",HandleItemTracking);

      IF HandleItemTracking THEN BEGIN
        EntrySummary := Rec;
        QtyReservedBase := 0;
        IF FINDSET THEN
          REPEAT
            QtyReservedBase += ReservedThisLine(Rec);
          UNTIL NEXT = 0;
        QtyReservedIT := ROUND(QtyReservedBase / QtyPerUOM,0.00001);
        IF ABS(QtyReserved - QtyReservedIT) > 0.00001 THEN
          QtyReserved := QtyReservedIT;
        QtyToReserveBase := ItemTrackingQtyToReserveBase;
        IF ABS(ItemTrackingQtyToReserve - QtyToReserve) > 0.00001 THEN
          QtyToReserve := ItemTrackingQtyToReserve;
        Rec := EntrySummary;
      END;

      UpdateNonSpecific; // Late Binding

      OnAfterUpdateReservFrom;

      IF FormIsOpen THEN
        CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE UpdateReservMgt@7();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Item Journal Line":
          ReservMgt.SetItemJnlLine(ItemJnlLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Assembly Header":
          ReservMgt.SetAssemblyHeader(AssemblyHeader);
        DATABASE::"Assembly Line":
          ReservMgt.SetAssemblyLine(AssemblyLine);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceLine);
        DATABASE::"Job Planning Line":
          ReservMgt.SetJobPlanningLine(JobPlanningLine);
      END;
      ReservMgt.SetSerialLotNo(ReservEntry."Serial No.",ReservEntry."Lot No.");
    END;

    LOCAL PROCEDURE DrillDownTotalQuantity@6();
    VAR
      Location@1002 : Record 14;
      CreatePick@1001 : Codeunit 7312;
    BEGIN
      IF HandleItemTracking AND ("Entry No." <> 1) THEN BEGIN
        CLEAR(AvailableItemTrackingLines);
        AvailableItemTrackingLines.SetItemTrackingLine("Table ID","Source Subtype",ReservEntry,
          ReservMgt.IsPositive,ReservEntry."Shipment Date");
        AvailableItemTrackingLines.RUNMODAL;
        EXIT;
      END;

      ReservEntry2 := ReservEntry;
      IF NOT Location.GET(ReservEntry2."Location Code") THEN
        CLEAR(Location);
      CASE "Entry No." OF
        1:
          BEGIN // Item Ledger Entry
            CLEAR(AvailableItemLedgEntries);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableItemLedgEntries.SetSalesLine(SalesLine,ReservEntry2);
                  IF Location."Bin Mandatory" OR Location."Require Pick" THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserveBase - QtyReservedBase);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableItemLedgEntries.SetReqLine(ReqLine,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableItemLedgEntries.SetPurchLine(PurchLine,ReservEntry2);
                  IF Location."Bin Mandatory" OR Location."Require Pick" AND
                     (PurchLine."Document Type" = PurchLine."Document Type"::"Return Order")
                  THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableItemLedgEntries.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableItemLedgEntries.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  IF Location."Bin Mandatory" OR Location."Require Pick" THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableItemLedgEntries.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableItemLedgEntries.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  IF Location."Bin Mandatory" OR Location."Require Pick" THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableItemLedgEntries.SetServiceLine(ServiceLine,ReservEntry2);
                  AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserveBase - QtyReservedBase);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableItemLedgEntries.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserveBase - QtyReservedBase);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableItemLedgEntries.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserveBase - QtyReservedBase);
                  AvailableItemLedgEntries.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableItemLedgEntries.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserveBase - QtyReservedBase);
                  AvailableItemLedgEntries.RUNMODAL;
                END ;
            END;
          END;
        11,12,13,14,15,16:
          BEGIN // Purchase Line
            CLEAR(AvailablePurchLines);
            AvailablePurchLines.SetCurrentSubType("Entry No." - 11);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailablePurchLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailablePurchLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailablePurchLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailablePurchLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailablePurchLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailablePurchLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailablePurchLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailablePurchLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailablePurchLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailablePurchLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailablePurchLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END ;
            END;
          END;
        21:
          BEGIN // Requisition Line
            CLEAR(AvailableReqLines);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableReqLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableReqLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableReqLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableReqLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableReqLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableReqLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableReqLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableReqLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableJobPlanningLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableJobPlanningLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableJobPlanningLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END ;
            END;
          END;
        31,32,33,34,35,36:
          BEGIN // Sales Line
            CLEAR(AvailableSalesLines);
            AvailableSalesLines.SetCurrentSubType("Entry No." - 31);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableSalesLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableSalesLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableSalesLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableSalesLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableSalesLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableSalesLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableSalesLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableSalesLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableSalesLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableSalesLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableSalesLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END ;
            END;
          END;
        61,62,63,64:
          BEGIN
            CLEAR(AvailableProdOrderLines);
            AvailableProdOrderLines.SetCurrentSubType("Entry No." - 61);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableProdOrderLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableProdOrderLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableProdOrderLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableProdOrderLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableProdOrderLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableProdOrderLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableProdOrderLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableProdOrderLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableProdOrderLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableProdOrderLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableProdOrderLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END ;
            END;
          END;
        71,72,73,74:
          BEGIN
            CLEAR(AvailableProdOrderComps);
            AvailableProdOrderComps.SetCurrentSubType("Entry No." - 71);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableProdOrderComps.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableProdOrderComps.SetReqLine(ReqLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableProdOrderComps.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableProdOrderComps.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableProdOrderComps.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableProdOrderComps.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableProdOrderComps.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableProdOrderComps.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableProdOrderComps.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableProdOrderComps.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableProdOrderComps.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END ;
            END;
          END;
        91:
          BEGIN
            CLEAR(AvailablePlanningComponents);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailablePlanningComponents.SetSalesLine(SalesLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailablePlanningComponents.SetReqLine(ReqLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailablePlanningComponents.SetPurchLine(PurchLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailablePlanningComponents.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailablePlanningComponents.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailablePlanningComponents.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailablePlanningComponents.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailablePlanningComponents.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailablePlanningComponents.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailablePlanningComponents.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailablePlanningComponents.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END ;
            END;
          END;
        101,102:
          BEGIN
            CLEAR(AvailableTransLines);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableTransLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableTransLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableTransLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableTransLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableTransLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableTransLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableTransLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableTransLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableTransLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableTransLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableTransLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END ;
            END;
          END;
        110:
          BEGIN // Service Line
            CLEAR(AvailableServiceLines);
            AvailableServiceLines.SetCurrentSubType("Entry No." - 109);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableServiceLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableServiceLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableServiceLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableServiceLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableServiceLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableServiceLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableServiceLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableServiceLines.SetServInvLine(ServiceLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableServiceLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableServiceLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableServiceLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END ;
            END;
          END;
        131,132,133,134:
          BEGIN // Job Planning Line
            CLEAR(AvailableJobPlanningLines);
            AvailableJobPlanningLines.SetCurrentSubType("Entry No." - 131);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableJobPlanningLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableJobPlanningLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableJobPlanningLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableJobPlanningLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableJobPlanningLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableJobPlanningLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableJobPlanningLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableJobPlanningLines.SetServLine(ServiceLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableJobPlanningLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableJobPlanningLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableJobPlanningLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableJobPlanningLines.RUNMODAL;
                END ;
            END;
          END;
        141,  142:
          BEGIN // Asm Header
            CLEAR(AvailableAssemblyHeaders);
            AvailableAssemblyHeaders.SetCurrentSubType("Entry No." - 141);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableAssemblyHeaders.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableAssemblyHeaders.SetReqLine(ReqLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableAssemblyHeaders.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableAssemblyHeaders.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableAssemblyHeaders.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableAssemblyHeaders.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableAssemblyHeaders.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableAssemblyHeaders.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableAssemblyHeaders.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableAssemblyHeaders.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableAssemblyHeaders.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableAssemblyHeaders.RUNMODAL;
                END ;
            END;
          END;
        151,152:
          BEGIN // Asm Line
            CLEAR(AvailableAssemblyLines);
            AvailableAssemblyLines.SetCurrentSubType("Entry No." - 151);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableAssemblyLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableAssemblyLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableAssemblyLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableAssemblyLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableAssemblyLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableAssemblyLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableAssemblyLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableAssemblyLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Job Planning Line":
                BEGIN
                  AvailableAssemblyLines.SetJobPlanningLine(JobPlanningLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END;
              DATABASE::"Assembly Header":
                BEGIN
                  AvailableAssemblyLines.SetAssemblyHeader(AssemblyHeader,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END ;
              DATABASE::"Assembly Line":
                BEGIN
                  AvailableAssemblyLines.SetAssemblyLine(AssemblyLine,ReservEntry2);
                  AvailableAssemblyLines.RUNMODAL;
                END ;
            END;
          END;
      END;

      UpdateReservFrom;
    END;

    LOCAL PROCEDURE DrillDownReservedQuantity@8();
    BEGIN
      ReservEntry2.RESET;

      ReservEntry2.SETCURRENTKEY(
        "Item No.","Source Type","Source Subtype","Reservation Status","Location Code","Variant Code",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");

      FilterReservEntry(ReservEntry2,Rec);
      PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry2);

      UpdateReservFrom;
    END;

    LOCAL PROCEDURE DrillDownReservedThisLine@10();
    VAR
      ReservEntry3@1000 : Record 337;
      LotSNMatch@1001 : Boolean;
    BEGIN
      CLEAR(ReservEntry2);

      ReservEntry2.SETCURRENTKEY(
        "Item No.","Source Type","Source Subtype","Reservation Status","Location Code","Variant Code",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");

      FilterReservEntry(ReservEntry2,Rec);
      IF ReservEntry2.FIND('-') THEN
        REPEAT
          ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive);

          IF ReservEntry.TrackingExists THEN
            LotSNMatch := (ReservEntry3."Serial No." = ReservEntry."Serial No.") AND
              (ReservEntry3."Lot No." = ReservEntry."Lot No.")
          ELSE
            LotSNMatch := TRUE;

          ReservEntry2.MARK((ReservEntry3."Source Type" = ReservEntry."Source Type") AND
            (ReservEntry3."Source Subtype" = ReservEntry."Source Subtype") AND
            (ReservEntry3."Source ID" = ReservEntry."Source ID") AND
            (ReservEntry3."Source Batch Name" = ReservEntry."Source Batch Name") AND
            (ReservEntry3."Source Prod. Order Line" = ReservEntry."Source Prod. Order Line") AND
            (ReservEntry3."Source Ref. No." = ReservEntry."Source Ref. No.") AND
            ((LotSNMatch AND HandleItemTracking) OR
             NOT HandleItemTracking));
        UNTIL ReservEntry2.NEXT = 0;

      ReservEntry2.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry2);

      UpdateReservFrom;
    END;

    [External]
    PROCEDURE ReservedThisLine@14(ReservSummEntry2@1002 : TEMPORARY Record 338) ReservedQuantity : Decimal;
    VAR
      ReservEntry3@1001 : Record 337;
    BEGIN
      CLEAR(ReservEntry2);

      ReservEntry2.SETCURRENTKEY(
        "Item No.","Source Type","Source Subtype","Reservation Status","Location Code","Variant Code",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");
      ReservedQuantity := 0;

      FilterReservEntry(ReservEntry2,ReservSummEntry2);
      IF ReservEntry2.FIND('-') THEN
        REPEAT
          ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive);
          IF (ReservEntry3."Source Type" = ReservEntry."Source Type") AND
             (ReservEntry3."Source Subtype" = ReservEntry."Source Subtype") AND
             (ReservEntry3."Source ID" = ReservEntry."Source ID") AND
             (ReservEntry3."Source Batch Name" = ReservEntry."Source Batch Name") AND
             (ReservEntry3."Source Prod. Order Line" = ReservEntry."Source Prod. Order Line") AND
             (ReservEntry3."Source Ref. No." = ReservEntry."Source Ref. No.") AND
             (((ReservEntry3."Serial No." = ReservEntry."Serial No.") AND
               (ReservEntry3."Lot No." = ReservEntry."Lot No.") AND
               HandleItemTracking) OR
              NOT HandleItemTracking)
          THEN
            ReservedQuantity += ReservEntry2."Quantity (Base)" * CreateReservEntry.SignFactor(ReservEntry2);
        UNTIL ReservEntry2.NEXT = 0;

      EXIT(ReservedQuantity);
    END;

    LOCAL PROCEDURE GetSerialLotNo@17(VAR ItemTrackingQtyToReserve@1001 : Decimal;VAR ItemTrackingQtyToReserveBase@1006 : Decimal);
    VAR
      Item@1000 : Record 27;
      ReservEntry2@1002 : Record 337;
      TempReservEntry@1003 : TEMPORARY Record 337;
      TempTrackingSpecification@1005 : TEMPORARY Record 336;
      ItemTrackingMgt@1004 : Codeunit 6500;
      SignFactor@1007 : Integer;
    BEGIN
      Item.GET(ReservEntry."Item No.");
      IF Item."Item Tracking Code" = '' THEN
        EXIT;
      ReservEntry2 := ReservEntry;
      ReservEntry2.SetPointerFilter;
      ItemTrackingMgt.SumUpItemTracking(ReservEntry2,TempTrackingSpecification,TRUE,TRUE);

      IF TempTrackingSpecification.FIND('-') THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text006)) THEN
          EXIT;
        REPEAT
          TempReservEntry.TRANSFERFIELDS(TempTrackingSpecification);
          TempReservEntry.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;

        IF PAGE.RUNMODAL(PAGE::"Item Tracking List",TempReservEntry) = ACTION::LookupOK THEN BEGIN
          ReservEntry."Serial No." := TempReservEntry."Serial No.";
          ReservEntry."Lot No." := TempReservEntry."Lot No.";
          CaptionText += STRSUBSTNO(Text007,ReservEntry."Serial No.",ReservEntry."Lot No.");
          SignFactor := CreateReservEntry.SignFactor(TempReservEntry);
          ItemTrackingQtyToReserveBase := TempReservEntry."Quantity (Base)" * SignFactor;
          ItemTrackingQtyToReserve := ROUND(ItemTrackingQtyToReserveBase / TempReservEntry."Qty. per Unit of Measure",0.00001);
          HandleItemTracking := TRUE;
        END ELSE
          ERROR(Text008);
      END;
    END;

    LOCAL PROCEDURE UpdateNonSpecific@19();
    BEGIN
      SETFILTER("Non-specific Reserved Qty.",'>%1',0);
      NoteTextVisible := NOT ISEMPTY;
      NonSpecificQty := "Non-specific Reserved Qty.";
      SETRANGE("Non-specific Reserved Qty.");
    END;

    [External]
    PROCEDURE AutoReserve@21();
    BEGIN
      IF ABS(QtyToReserveBase) - ABS(QtyReservedBase) = 0 THEN
        ERROR(Text000);

      ReservMgt.AutoReserve(
        FullAutoReservation,ReservEntry.Description,
        ReservEntry."Shipment Date",QtyToReserve - QtyReserved,QtyToReserveBase - QtyReservedBase);
      IF NOT FullAutoReservation THEN
        MESSAGE(Text001);
      UpdateReservFrom;
    END;

    LOCAL PROCEDURE GetQtyPerUOMFromSource@24() : Decimal;
    BEGIN
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          EXIT(GetQtyPerUomFromSalesLine);
        DATABASE::"Requisition Line":
          EXIT(GetQtyPerUomFromReqLine);
        DATABASE::"Purchase Line":
          EXIT(GetQtyPerUomFromPurchLine);
        DATABASE::"Item Journal Line":
          EXIT(GetQtyPerUomFromItemJnlLine);
        DATABASE::"Prod. Order Line":
          EXIT(GetQtyPerUomFromProdOrderLine);
        DATABASE::"Prod. Order Component":
          EXIT(GetQtyPerUomFromProdOrderComponent);
        DATABASE::"Assembly Header":
          EXIT(GetQtyPerUomFromAssemblyHeader);
        DATABASE::"Assembly Line":
          EXIT(GetQtyPerUomFromAssemblyLine);
        DATABASE::"Planning Component":
          EXIT(GetQtyPerUomFromPlanningComponent);
        DATABASE::"Transfer Line":
          EXIT(GetQtyPerUomFromTransferLine);
        DATABASE::"Service Line":
          EXIT(GetQtyPerUomFromServiceLine);
        DATABASE::"Job Planning Line":
          EXIT(GetQtyPerUomFromJobPlanningLine);
      END;
    END;

    LOCAL PROCEDURE GetQtyPerUomFromSalesLine@25() : Decimal;
    BEGIN
      SalesLine.FIND;
      SalesLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
        SalesLine."Reserved Quantity" := -SalesLine."Reserved Quantity";
        SalesLine."Reserved Qty. (Base)" := -SalesLine."Reserved Qty. (Base)";
      END;
      QtyReserved := SalesLine."Reserved Quantity";
      QtyReservedBase := SalesLine."Reserved Qty. (Base)";
      QtyToReserve := SalesLine."Outstanding Quantity";
      QtyToReserveBase := SalesLine."Outstanding Qty. (Base)";
      EXIT(SalesLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromReqLine@26() : Decimal;
    BEGIN
      ReqLine.FIND;
      ReqLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := ReqLine."Reserved Quantity";
      QtyReservedBase := ReqLine."Reserved Qty. (Base)";
      QtyToReserve := ReqLine.Quantity;
      QtyToReserveBase := ReqLine."Quantity (Base)";
      EXIT(ReqLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromPurchLine@27() : Decimal;
    BEGIN
      PurchLine.FIND;
      PurchLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
        PurchLine."Reserved Quantity" := -PurchLine."Reserved Quantity";
        PurchLine."Reserved Qty. (Base)" := -PurchLine."Reserved Qty. (Base)";
      END;
      QtyReserved := PurchLine."Reserved Quantity";
      QtyReservedBase := PurchLine."Reserved Qty. (Base)";
      QtyToReserve := PurchLine."Outstanding Quantity";
      QtyToReserveBase := PurchLine."Outstanding Qty. (Base)";
      EXIT(PurchLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromItemJnlLine@28() : Decimal;
    BEGIN
      ItemJnlLine.FIND;
      ItemJnlLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := ItemJnlLine."Reserved Quantity";
      QtyReservedBase := ItemJnlLine."Reserved Qty. (Base)";
      QtyToReserve := ItemJnlLine.Quantity;
      QtyToReserveBase := ItemJnlLine."Quantity (Base)";
      EXIT(ItemJnlLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromProdOrderLine@29() : Decimal;
    BEGIN
      ProdOrderLine.FIND;
      ProdOrderLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := ProdOrderLine."Reserved Quantity";
      QtyReservedBase := ProdOrderLine."Reserved Qty. (Base)";
      QtyToReserve := ProdOrderLine."Remaining Quantity";
      QtyToReserveBase := ProdOrderLine."Remaining Qty. (Base)";
      EXIT(ProdOrderLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromProdOrderComponent@30() : Decimal;
    BEGIN
      ProdOrderComp.FIND;
      ProdOrderComp.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := ProdOrderComp."Reserved Quantity";
      QtyReservedBase := ProdOrderComp."Reserved Qty. (Base)";
      QtyToReserve := ProdOrderComp."Remaining Quantity";
      QtyToReserveBase := ProdOrderComp."Remaining Qty. (Base)";
      EXIT(ProdOrderComp."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromAssemblyHeader@31() : Decimal;
    BEGIN
      AssemblyHeader.FIND;
      AssemblyHeader.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := AssemblyHeader."Reserved Quantity";
      QtyReservedBase := AssemblyHeader."Reserved Qty. (Base)";
      QtyToReserve := AssemblyHeader."Remaining Quantity";
      QtyToReserveBase := AssemblyHeader."Remaining Quantity (Base)";
      EXIT(AssemblyHeader."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromAssemblyLine@32() : Decimal;
    BEGIN
      AssemblyLine.FIND;
      AssemblyLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := AssemblyLine."Reserved Quantity";
      QtyReservedBase := AssemblyLine."Reserved Qty. (Base)";
      QtyToReserve := AssemblyLine."Remaining Quantity";
      QtyToReserveBase := AssemblyLine."Remaining Quantity (Base)";
      EXIT(AssemblyLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromPlanningComponent@33() : Decimal;
    BEGIN
      PlanningComponent.FIND;
      PlanningComponent.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := PlanningComponent."Reserved Quantity";
      QtyReservedBase := PlanningComponent."Reserved Qty. (Base)";
      QtyToReserve := PlanningComponent."Expected Quantity";
      QtyToReserveBase := PlanningComponent."Expected Quantity (Base)";
      EXIT(PlanningComponent."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromTransferLine@34() : Decimal;
    BEGIN
      TransLine.FIND;
      IF ReservEntry."Source Subtype" = 0 THEN BEGIN // Outbound
        TransLine.CALCFIELDS("Reserved Quantity Outbnd.","Reserved Qty. Outbnd. (Base)");
        QtyReserved := TransLine."Reserved Quantity Outbnd.";
        QtyReservedBase := TransLine."Reserved Qty. Outbnd. (Base)";
        QtyToReserve := TransLine."Outstanding Quantity";
        QtyToReserveBase := TransLine."Outstanding Qty. (Base)";
      END ELSE BEGIN // Inbound
        TransLine.CALCFIELDS("Reserved Quantity Inbnd.","Reserved Qty. Inbnd. (Base)");
        QtyReserved := TransLine."Reserved Quantity Inbnd.";
        QtyReservedBase := TransLine."Reserved Qty. Inbnd. (Base)";
        QtyToReserve := TransLine."Outstanding Quantity";
        QtyToReserveBase := TransLine."Outstanding Qty. (Base)";
      END;
      EXIT(TransLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromServiceLine@35() : Decimal;
    BEGIN
      ServiceLine.FIND;
      ServiceLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := ServiceLine."Reserved Quantity";
      QtyReservedBase := ServiceLine."Reserved Qty. (Base)";
      QtyToReserve := ServiceLine."Outstanding Quantity";
      QtyToReserveBase := ServiceLine."Outstanding Qty. (Base)";
      EXIT(ServiceLine."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE GetQtyPerUomFromJobPlanningLine@36() : Decimal;
    BEGIN
      JobPlanningLine.FIND;
      IF JobPlanningLine.UpdatePlanned THEN BEGIN
        JobPlanningLine.MODIFY(TRUE);
        COMMIT;
      END;
      JobPlanningLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      QtyReserved := JobPlanningLine."Reserved Quantity";
      QtyReservedBase := JobPlanningLine."Reserved Qty. (Base)";
      QtyToReserve := JobPlanningLine."Remaining Qty.";
      QtyToReserveBase := JobPlanningLine."Remaining Qty. (Base)";
      EXIT(JobPlanningLine."Qty. per Unit of Measure");
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRelatesToSummEntry@52(FromEntrySummary@1000 : Record 338;VAR FilterReservEntry@1001 : Record 337;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnAfterUpdateReservFrom@37();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetSalesLine@39(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetReqLine@40(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetPurchLine@41(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetTransLine@42(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetServiceLine@43(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetProdOrderLine@44(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetProdOrderComponent@45(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetItemJnlLine@46(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetJobPlanningLine@48(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetAssemblyHeader@49(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetAssemblyLine@50(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetPlanningComponent@51(VAR EntrySummary@1001 : Record 338;ReservEntry@1000 : Record 337);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFilterReservEntryOnAfterFilterSource@38(VAR ReservationEntry@1000 : Record 337;FromEntrySummary@1001 : Record 338;ReservEntry@1002 : Record 337);
    BEGIN
    END;

    BEGIN
    END.
  }
}

