OBJECT Table 6086331 Bank Transaction Inbox
{
  OBJECT-PROPERTIES
  {
    Date=05/10/17;
    Time=[ 1:00:00 AM];
    Version List=EMW16.00.10.2.60;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Duplicate := IsDuplicate;
             END;

    OnModify=BEGIN
               IF xRec.Status = xRec.Status::Accepted THEN
                 TESTFIELD(Status,Status::Error);

               IF Status = Status::Error THEN BEGIN
                 Status := Status::Pending;
                 CLEAR("Try Processed Date/Time");
                 CLEAR("Error Text");
               END;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Bank Transactions Inbox;
    LookupPageID=Page6086345;
    DrillDownPageID=Page6086345;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Card No.            ;Code20        ;TableRelation="Continia User Credit Card"."Card No.";
                                                   OnValidate=VAR
                                                                UserCreditCard@1160040000 : Record 6086311;
                                                              BEGIN
                                                                UserCreditCard.SETCURRENTKEY("Card No.");
                                                                UserCreditCard.SETRANGE("Card No.","Card No.");
                                                                IF UserCreditCard.FINDFIRST THEN
                                                                  VALIDATE("Continia User ID",UserCreditCard."Continia User ID");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Card No. }
    { 3   ;   ;Card Name           ;Text50        ;CaptionML=ENU=Card Name }
    { 5   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 6   ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 7   ;   ;Currency Code       ;Code10        ;ValidateTableRelation=No;
                                                   CaptionML=ENU=Currency Code }
    { 8   ;   ;Currency Exch. Rate ;Decimal       ;CaptionML=ENU=Currency Exchange Rate;
                                                   DecimalPlaces=0:15 }
    { 9   ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 10  ;   ;Bank-Currency Amount;Decimal       ;CaptionML=ENU=Bank-Currency Amount;
                                                   AutoFormatType=1 }
    { 11  ;   ;Entry Type          ;Integer       ;CaptionML=ENU=Entry Type }
    { 12  ;   ;Business Category ID;Code50        ;CaptionML=ENU=Business Category ID }
    { 13  ;   ;Business No.        ;Code20        ;CaptionML=ENU=Business No. }
    { 14  ;   ;Business Name       ;Text250       ;CaptionML=ENU=Business Name }
    { 15  ;   ;Business Address    ;Text80        ;CaptionML=ENU=Business Address }
    { 16  ;   ;Business Address 2  ;Text80        ;CaptionML=ENU=Business Address 2 }
    { 17  ;   ;Business Address 3  ;Text80        ;CaptionML=ENU=Business Address 3 }
    { 18  ;   ;Business Country/Region;Code20     ;CaptionML=ENU=Business Country/Region }
    { 19  ;   ;Business Post Code  ;Code10        ;CaptionML=ENU=Business Post Code }
    { 20  ;   ;Document Time       ;Time          ;CaptionML=ENU=Document Time;
                                                   Editable=No }
    { 22  ;   ;Transaction ID      ;Text50        ;CaptionML=ENU=Transaction ID;
                                                   Editable=No }
    { 40  ;   ;Bank Code           ;Code10        ;TableRelation="CEM Bank";
                                                   CaptionML=ENU=Bank Code }
    { 41  ;   ;Bank Country/Region ;Code10        ;TableRelation="Bank Agreement"."Country/Region Code" WHERE (Bank Code=FIELD(Bank Code));
                                                   CaptionML=ENU=Bank Country/Region }
    { 50  ;   ;Continia User ID    ;Code50        ;TableRelation="Continia User Setup";
                                                   OnValidate=VAR
                                                                UserCreditCard@1160040000 : Record 6086311;
                                                              BEGIN
                                                                IF "Continia User ID" = '' THEN
                                                                  EXIT;

                                                                UserCreditCard.SETCURRENTKEY("Card No.");
                                                                UserCreditCard.SETRANGE("Card No.","Card No.");
                                                                UserCreditCard.FINDFIRST;
                                                                UserCreditCard.TESTFIELD("Continia User ID","Continia User ID");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Continia User ID }
    { 51  ;   ;Exclude Entry       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Exclude Entry" THEN
                                                                  "Error Text" := Text002
                                                                ELSE
                                                                  CLEAR("Error Text");
                                                              END;

                                                   CaptionML=ENU=Exclude Entry }
    { 60  ;   ;Transaction Type    ;Option        ;CaptionML=ENU=Transaction Type;
                                                   OptionCaptionML=ENU=Normal,Balancing;
                                                   OptionString=Normal,Balancing }
    { 74  ;   ;Bank Statement Transaction;Boolean ;CaptionML=ENU=Bank Statement Transaction }
    { 92  ;   ;Try Processed Date/Time;DateTime   ;CaptionML=ENU=Try Processed Date Time }
    { 94  ;   ;Imported Date/Time  ;DateTime      ;CaptionML=ENU=Imported Date Time }
    { 95  ;   ;Imported by User ID ;Code50        ;CaptionML=ENU=Imported by }
    { 96  ;   ;Processed Date/Time ;DateTime      ;CaptionML=ENU=Processed Date Time }
    { 97  ;   ;Processed by User ID;Code50        ;CaptionML=ENU=Processed by }
    { 98  ;   ;Error Text          ;Text250       ;CaptionML=ENU=Error Text }
    { 99  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Pending,Error,Accepted;
                                                   OptionString=Pending,Error,Accepted }
    { 100 ;   ;Agreement ID        ;Text30        ;TableRelation="Bank Agreement"."Agreement ID" WHERE (Bank Code=FIELD(Bank Code));
                                                   CaptionML=ENU=Agreement ID }
    { 180 ;   ;Expense Type        ;Code20        ;TableRelation="Expense Type";
                                                   OnValidate=VAR
                                                                ExpenseType@1160040000 : Record 6086307;
                                                              BEGIN
                                                                ExpenseType.GET("Expense Type");
                                                                VALIDATE("Exclude Entry",ExpenseType."Exclude Transactions");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Expense Type }
    { 250 ;   ;Duplicate           ;Boolean       ;CaptionML=ENU=Duplicate }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Status,Try Processed Date/Time           }
    {    ;Bank Code,Bank Country/Region,Status     }
    {    ;Card No.,Status,Posting Date             }
    {    ;Transaction ID                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NotValidStatus@1160040002 : TextConst 'ENU=is not valid';
      Text001@1160040000 : TextConst 'ENU=You cannot rename a %1.';
      Text002@1160040001 : TextConst 'ENU=This transaction will not be handled as it is excluded';
      CreditCardPostingAccTxt@1160040003 : TextConst 'ENU=Use default posting account (%1 %2),Manually set up posting account';
      SetupPostingAccNowTxt@1160040004 : TextConst 'ENU=Do you want to set up the posting account now?';
      DuplicateTransaction@1160040005 : TextConst 'ENU=This transaction came from the bank twice. Further processing is not allowed.';

    PROCEDURE MatchCard@1160040003();
    VAR
      ContiniaUserSetup@1160040002 : Record 6086002;
      UserCreditCard@1160040001 : Record 6086311;
      InboxTransaction@1160040000 : Record 6086331;
      EMSetup@1160040003 : Record 6086300;
      CreditCardForm@1160040004 : Page 6086331;
      PostingAccountAction@1160040005 : 'DoNothing,UseDefault,SetupManually';
    BEGIN
      TESTFIELD("Continia User ID",'');
      TESTFIELD("Card No.");
      IF PAGE.RUNMODAL(0,ContiniaUserSetup) = ACTION::LookupOK THEN BEGIN
        EMSetup.GET;
        IF EMSetup."Card Transaction Bal. No." <> '' THEN BEGIN
          PostingAccountAction :=
            STRMENU(
             STRSUBSTNO(CreditCardPostingAccTxt,EMSetup."Card Transaction Bal. Type",EMSetup."Card Transaction Bal. No."),1);
          IF PostingAccountAction = PostingAccountAction::DoNothing THEN
            ERROR('');
        END ELSE
          IF CONFIRM(SetupPostingAccNowTxt,TRUE) THEN
            PostingAccountAction := PostingAccountAction::SetupManually;

        UserCreditCard.INIT;
        UserCreditCard."Continia User ID" := ContiniaUserSetup."Continia User ID";
        UserCreditCard."Card No." := "Card No.";
        IF PostingAccountAction = PostingAccountAction::UseDefault THEN BEGIN
          UserCreditCard."Account Type" := EMSetup."Card Transaction Bal. Type";
          UserCreditCard."Account No." := EMSetup."Card Transaction Bal. No.";
        END;
        UserCreditCard.INSERT(TRUE);

        InboxTransaction.SETCURRENTKEY("Card No.",Status);
        InboxTransaction.SETRANGE("Card No.",UserCreditCard."Card No.");
        InboxTransaction.SETFILTER(Status,'%1|%2',InboxTransaction.Status::Pending,InboxTransaction.Status::Error);
        InboxTransaction.SETRANGE("Continia User ID",'');
        InboxTransaction.MODIFYALL("Error Text",'');
        InboxTransaction.MODIFYALL("Continia User ID",UserCreditCard."Continia User ID");

        IF PostingAccountAction = PostingAccountAction::SetupManually THEN BEGIN
          UserCreditCard.SETRANGE("Continia User ID",ContiniaUserSetup."Continia User ID");
          PAGE.RUN(0,UserCreditCard);
        END;
      END;
    END;

    PROCEDURE UnMatchCard@1160040007();
    VAR
      EmployeeCard@1160040001 : Record 6086311;
      InboxTransaction@1160040000 : Record 6086331;
    BEGIN
      TESTFIELD("Continia User ID");
      IF Status = Status::Accepted THEN
        FIELDERROR(Status,NotValidStatus);

      EmployeeCard.SETRANGE("Card No.","Card No.");
      IF EmployeeCard.FINDFIRST THEN
        EmployeeCard.DELETE;

      InboxTransaction.SETCURRENTKEY("Card No.",Status);
      InboxTransaction.SETRANGE("Card No.","Card No.");
      InboxTransaction.SETFILTER(Status,'%1|%2',InboxTransaction.Status::Pending,InboxTransaction.Status::Error);
      InboxTransaction.MODIFYALL("Continia User ID",'');
    END;

    PROCEDURE UploadFile@1160040000(ReconciliationFile@1160040002 : Boolean);
    VAR
      Bank@1160040000 : Record 6086314;
      BankAgreement@1160040001 : Record 6086315;
    BEGIN
      IF BankAgreement.COUNT = 1 THEN
        BankAgreement.FINDFIRST
      ELSE
        IF PAGE.RUNMODAL(0,BankAgreement) <> ACTION::LookupOK THEN
          EXIT;

      Bank.GET(BankAgreement."Bank Code",BankAgreement."Country/Region Code");
      UploadFileFromBank(Bank,ReconciliationFile);
    END;

    LOCAL PROCEDURE UploadFileFromBank@1160040001(Bank@1160040000 : Record 6086314;ReconciliationFile@1160040004 : Boolean);
    VAR
      CEM@1160040002 : Codeunit 6086305;
      UserFileMgt@1160040003 : Codeunit 6086319;
      Filename@1160040001 : Text[1024];
    BEGIN
      Filename := UserFileMgt.OpenBankfile;
      IF Filename <> '' THEN BEGIN
        CEM.UploadBankFile(Bank,Filename,ReconciliationFile);
        CEM.RUN;
      END;
    END;

    LOCAL PROCEDURE IsDuplicate@1160040002() : Boolean;
    VAR
      BankTrans@1160040000 : Record 6086330;
      BankTransInbox@1160040001 : Record 6086331;
      EMSetup@1160040002 : Record 6086300;
    BEGIN
      IF "Transaction ID" <> '' THEN
        EXIT;

      EMSetup.GET;
      IF EMSetup."Ignore BT Duplicate Check" THEN
        EXIT(FALSE);

      BankTransInbox.SETCURRENTKEY("Card No.",Status,"Posting Date");
      BankTransInbox.SETFILTER("Entry No.",'<>%1',"Entry No.");
      BankTransInbox.SETRANGE("Card No.","Card No.");
      BankTransInbox.SETRANGE(Status,BankTransInbox.Status::Pending,BankTransInbox.Status::Error);
      BankTransInbox.SETRANGE("Posting Date","Posting Date");
      BankTransInbox.SETRANGE("Document Time","Document Time");
      BankTransInbox.SETRANGE("Currency Code","Currency Code");
      BankTransInbox.SETRANGE(Amount,Amount);
      BankTransInbox.SETRANGE("Bank Statement Transaction","Bank Statement Transaction");
      IF BankTransInbox.FINDFIRST THEN
        EXIT(IsExcludedDuplicate);

      BankTrans.SETCURRENTKEY("Card No.");
      BankTrans.SETFILTER("Entry No.",'<>%1',"Entry No.");
      BankTrans.SETRANGE("Card No.","Card No.");
      BankTrans.SETRANGE("Posting Date","Posting Date");
      BankTrans.SETRANGE("Document Time","Document Time");
      BankTrans.SETRANGE("Currency Code","Currency Code");
      BankTrans.SETRANGE(Amount,Amount);
      BankTrans.SETRANGE("Bank Statement Transaction","Bank Statement Transaction");
      IF BankTrans.FINDFIRST THEN
        EXIT(IsExcludedDuplicate);
    END;

    LOCAL PROCEDURE IsExcludedDuplicate@1160040004() : Boolean;
    VAR
      NotDuplicate@1160040000 : Record 6086335;
    BEGIN
      NotDuplicate.SETRANGE("Business Name","Business Name");
      NotDuplicate.SETFILTER("Maximum Amount(LCY)",'<=%1',ABS("Bank-Currency Amount"));
      EXIT(NOT NotDuplicate.FINDFIRST);
    END;

    PROCEDURE MarkNotDuplicate@1160040005();
    VAR
      NotDuplicate@1160040000 : Record 6086335;
    BEGIN
      NotDuplicate.MakeNotDuplicate(Rec);
    END;

    PROCEDURE IsDuplicateFromBank@1160040006(TransactionID@1160040002 : Text[50];IsStatement@1000 : Boolean) : Boolean;
    VAR
      BankTransInbox@1160040000 : Record 6086331;
      BankTrans@1160040001 : Record 6086330;
    BEGIN
      IF TransactionID = '' THEN
        EXIT(FALSE);

      BankTransInbox.SETCURRENTKEY("Transaction ID");
      BankTransInbox.SETRANGE("Transaction ID",TransactionID);
      BankTransInbox.SETRANGE("Bank Statement Transaction",IsStatement);
      IF NOT BankTransInbox.ISEMPTY THEN
        EXIT(TRUE);

      BankTrans.SETCURRENTKEY("Transaction ID");
      BankTrans.SETRANGE("Transaction ID",TransactionID);
      BankTrans.SETRANGE("Bank Statement Transaction",IsStatement);
      IF NOT BankTrans.ISEMPTY THEN
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

