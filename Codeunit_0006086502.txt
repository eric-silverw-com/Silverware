OBJECT Codeunit 6086502 Continia Configuration Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=03/07/18;
    Time=[ 1:00:00 AM];
    Version List=DCW13.70.00.4.50.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcludeField@1160040003 : TEMPORARY Record 2000000041;
      ValidateField@1160040004 : TEMPORARY Record 2000000041;
      ReplaceField@1160040005 : Record 6085613;
      GlobalXmlDoc@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      GlobalXmTableList@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      GlobalXmRecNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      GlobalXmlRecAttrib@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      GlobalFilename@1001 : Text[1024];
      GlobalTableNo@1002 : Integer;
      GlobalRecNo@1003 : Integer;

    PROCEDURE CreateXmlDoc@6(Filename@1000 : Text[1024]);
    BEGIN
      IF (GlobalFilename = Filename) THEN
        EXIT;

      CLEAR(GlobalXmlDoc);
      GlobalXmlDoc := GlobalXmlDoc.XmlDocument;
      GlobalXmlDoc.Load(Filename);
      GlobalFilename := Filename;
    END;

    PROCEDURE GetXmlDoc@3(VAR XmlDoc@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      XmlDoc := GlobalXmlDoc;
    END;

    PROCEDURE SaveXmlDoc@16(VAR XmlNode@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      IF STRPOS(GlobalFilename,'.xml') = 0 THEN
        GlobalFilename := GlobalFilename + '.xml';

      GlobalXmlDoc.AppendChild(XmlNode);
      GlobalXmlDoc.Save(GlobalFilename);

      ClearGlobals;
      CLEAR(XmlNode);
    END;

    PROCEDURE ClearGlobals@7();
    BEGIN
      GlobalFilename := '';
      GlobalTableNo := 0;
      GlobalRecNo := 0;

      CLEAR(GlobalXmlDoc);
      CLEAR(GlobalXmTableList);
      CLEAR(GlobalXmRecNode);
      CLEAR(GlobalXmlRecAttrib);
    END;

    LOCAL PROCEDURE CheckGlobals@12(TableNo@1001 : Integer;RecordNo@1000 : Integer);
    BEGIN
      IF TableNo <> GlobalTableNo THEN BEGIN
        CLEAR(GlobalXmTableList);
        GlobalXmTableList := GlobalXmlDoc.SelectSingleNode('Data/Table[@TableNo="' + FORMAT(TableNo) + '"]').SelectNodes('Record');
      END;

      IF (TableNo <> GlobalTableNo) OR (RecordNo <> GlobalRecNo) THEN BEGIN
        CLEAR(GlobalXmRecNode);
        CLEAR(GlobalXmlRecAttrib);

        GlobalXmRecNode := GlobalXmTableList.Item(RecordNo);
        GlobalXmlRecAttrib := GlobalXmRecNode.Attributes;
      END;

      GlobalTableNo := TableNo;
      GlobalRecNo := RecordNo;
    END;

    PROCEDURE CreateXmlNode@2(VAR XmlNode@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Filename@1000 : Text[1024]);
    BEGIN
      CLEAR(GlobalXmlDoc);
      CLEAR(XmlNode);

      GlobalFilename := Filename;
      GlobalXmlDoc := GlobalXmlDoc.XmlDocument;
      XmlNode := GlobalXmlDoc.CreateNode('element','Data','');
    END;

    PROCEDURE GetTableCount@1160040005(TableNo@1160040000 : Integer) TableCount : Integer;
    VAR
      XmlDoc@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      GetXmlDoc(XmlDoc);
      XmlNode := XmlDoc.SelectSingleNode('Data/Table[@TableNo="' + FORMAT(TableNo) + '"]');
      IF NOT ISNULL(XmlNode) THEN
        TableCount := XmlNode.ChildNodes.Count;

      CLEAR(XmlDoc);
      CLEAR(XmlNode);
    END;

    PROCEDURE GetFieldCount@19(TableNo@1160040003 : Integer;RecordNo@1160040002 : Integer) FieldCount : Integer;
    VAR
      XmlDoc@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlAttrib@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
    BEGIN
      GetXmlDoc(XmlDoc);
      XmlNode := XmlDoc.SelectSingleNode('Data/Table[@TableNo="' + FORMAT(TableNo) + '"]').SelectNodes('Record').Item(RecordNo);
      XmlAttrib := XmlNode.Attributes;
      IF NOT ISNULL(XmlAttrib) THEN
        FieldCount := XmlAttrib.Count;

      CLEAR(XmlDoc);
      CLEAR(XmlNode);
      CLEAR(XmlAttrib);
    END;

    PROCEDURE GetFieldValue@25(TableNo@1160040003 : Integer;RecordNo@1160040002 : Integer;FieldNo@1160040004 : Integer;VAR TableFieldNo@1004 : Integer;VAR TableFieldValue@1005 : Text[250]) Found : Boolean;
    VAR
      FieldName@1006 : Text[1024];
    BEGIN
      TableFieldNo := 0;
      TableFieldValue := '';

      CheckGlobals(TableNo,RecordNo);

      IF NOT ISNULL(GlobalXmlRecAttrib) THEN BEGIN
        FieldName := GlobalXmlRecAttrib.Item(FieldNo).Name;
        EVALUATE(TableFieldNo,COPYSTR(FieldName,STRPOS(FieldName,'Field')+5));
        TableFieldValue := GlobalXmlRecAttrib.Item(FieldNo).Value;
        Found := TRUE;
      END;
    END;

    PROCEDURE GetAttribValue@1160040010(TableNo@1160040003 : Integer;RecordNo@1160040002 : Integer;FieldNo@1160040004 : Integer) Value : Text[250];
    VAR
      XmlAttrib@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      CheckGlobals(TableNo,RecordNo);

      IF NOT ISNULL(GlobalXmlRecAttrib) THEN
        XmlAttrib := GlobalXmlRecAttrib.GetNamedItem('Field' + FORMAT(FieldNo));

      IF NOT ISNULL(XmlAttrib) THEN BEGIN
        Value := XmlAttrib.Value;
        IF Value = '0' THEN
          Value := '';
      END;

      CLEAR(XmlAttrib);
    END;

    PROCEDURE ClearPrimaryKey@6085576(VAR RecRef@6085577 : RecordRef);
    VAR
      RecIDTree@6085578 : Record 6085763;
      KeyRef@6085579 : KeyRef;
      FieldRef@6085580 : FieldRef;
      i@6085581 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        CASE FORMAT(FieldRef.TYPE) OF
          'Code','Text' : FieldRef.VALUE := '';
          'Integer', 'BigInteger', 'Decimal','Option' : FieldRef.VALUE := 0;
          'Date' :  FieldRef.VALUE := 0D;
          'Time' :  FieldRef.VALUE := 0T;
          'Boolean' : FieldRef.VALUE := 0;
        END;
      END;
    END;

    PROCEDURE ImportRecord@1160040003(TableNo@1160040002 : Integer;RecordNo@1160040001 : Integer;VAR RecRef@1160040000 : RecordRef) : Boolean;
    VAR
      Field@1160040006 : Record 2000000041;
      FieldRef@1160040004 : FieldRef;
      IsValidateField@1002 : Boolean;
      FieldNo@1160040007 : Integer;
      FieldTotal@1004 : Integer;
      FieldCount@1160040010 : Integer;
      FieldValue@1160040008 : Text[250];
    BEGIN
      FieldTotal := GetFieldCount(TableNo,RecordNo);
      IF FieldTotal < 1 THEN
        EXIT;

      RecRef.INIT;
      ClearPrimaryKey(RecRef);

      FOR FieldCount := 0 TO FieldTotal - 1 DO BEGIN
        IF GetFieldValue(TableNo,RecordNo,FieldCount,FieldNo,FieldValue) THEN BEGIN
          IF RecRef.FIELDEXIST(FieldNo) THEN BEGIN
            FieldRef := RecRef.FIELD(FieldNo);

            IF UPPERCASE(FORMAT(FieldRef.CLASS)) <> 'FLOWFIELD' THEN BEGIN
              Field.GET(TableNo,FieldRef.NUMBER);

              IF NOT ExcludeField.GET(Field.TableNo,Field."No.") THEN BEGIN
                IsValidateField := ValidateField.GET(Field.TableNo,Field."No.");
                AddFieldValue(FieldRef,Field,FieldValue,IsValidateField);
              END;
            END;
          END;
        END;
      END;

      IF NOT RecRef.INSERT THEN
        RecRef.MODIFY;
    END;

    PROCEDURE ExportRecord@1160040004(TableNo@1160040001 : Integer;VAR RecRef@1160040000 : RecordRef;VAR XmlNode@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XmlLib@1001 : Codeunit 6085573;
      TableNode@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RecNode@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TableNode := XmlNode.SelectSingleNode('Table[@TableNo="' + FORMAT(TableNo) + '"]');

      IF ISNULL(TableNode) THEN BEGIN
        XmlLib.CreateXmlNode(XmlNode,'Table','',TableNode);
        XmlLib.SetXmlNodeAttr(TableNode,'TableNo',FORMAT(TableNo));
      END;

      XmlLib.CreateXmlNode(TableNode,'Record','',RecNode);
      AddRecToNode(TableNo,RecRef,RecNode);

      CLEAR(TableNode);
    END;

    PROCEDURE AddRecToNode@1160040000(TableNo@1160040007 : Integer;RecRef@1160040008 : RecordRef;VAR Node@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Field@1160040002 : Record 2000000041;
      FieldRef@1160040003 : FieldRef;
      XmlLib@1000 : Codeunit 6085573;
      TempBool@1160040004 : Boolean;
      TempDate@1160040005 : Date;
      TempDec@1160040006 : Decimal;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      IF Field.FINDSET THEN
        REPEAT
          IF NOT ExcludeField.GET(Field.TableNo,Field."No.") THEN BEGIN
            FieldRef := RecRef.FIELD(Field."No.");
            IF NOT (UPPERCASE(FORMAT(FieldRef.CLASS)) = 'FLOWFIELD') THEN
              IF ReplaceField.GET(Field.TableNo,Field."No.") THEN BEGIN
                XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),ReplaceField.Value);
                ReplaceField.DELETE;
              END ELSE
                CASE Field.Type OF
                  Field.Type::Boolean:
                    BEGIN
                      IF UPPERCASE(FORMAT(FieldRef.VALUE,0,9)) = 'TRUE' THEN
                        TempBool := TRUE
                      ELSE IF UPPERCASE(FORMAT(FieldRef.VALUE,0,9)) = 'FALSE' THEN
                        TempBool := FALSE
                      ELSE
                        EVALUATE(TempBool,FORMAT(FieldRef.VALUE,0,9));

                      XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),XmlLib.Bool2Text(TempBool));
                    END;
                  Field.Type::Date:
                    BEGIN
                      EVALUATE(TempDate,FORMAT(FieldRef.VALUE,0,9),9);
                      XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),XmlLib.Date2Text(TempDate));
                    END;
                  Field.Type::Decimal:
                    BEGIN
                      EVALUATE(TempDec,FORMAT(FieldRef.VALUE,0,9));
                      XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),XmlLib.Dec2Text(TempDec));
                    END;
                  ELSE
                    XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),FORMAT(FieldRef.VALUE,0,9));
                END;
          END;
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE AddExcludeField@1160040001(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer);
    BEGIN
      IF ExcludeField.GET(TableNo,FieldNo) THEN
        EXIT;

      ExcludeField.TableNo := TableNo;
      ExcludeField."No." := FieldNo;
      ExcludeField.INSERT;
    END;

    PROCEDURE AddValidateField@1160040008(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer);
    BEGIN
      IF ValidateField.GET(TableNo,FieldNo) THEN
        EXIT;

      ValidateField.TableNo := TableNo;
      ValidateField."No." := FieldNo;
      ValidateField.INSERT;
    END;

    PROCEDURE AddReplaceField@1160040009(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer;Value@1160040002 : Text[250]);
    BEGIN
      IF ReplaceField.GET(TableNo,FieldNo) THEN
        EXIT;

      ReplaceField."Table No." := TableNo;
      ReplaceField."Field No." := FieldNo;
      ReplaceField.Value := Value;
      ReplaceField.INSERT;
    END;

    PROCEDURE AddFieldValue@1(VAR FieldRef@1006 : FieldRef;Field@1001 : Record 2000000041;FieldValue@1000 : Text[250];ValidateField@1005 : Boolean);
    VAR
      XmlLib@1007 : Codeunit 6085573;
      TempBool@1004 : Boolean;
      TempDate@1003 : Date;
      TempDec@1002 : Decimal;
    BEGIN
      CASE Field.Type OF
        Field.Type::Boolean:
          IF ValidateField THEN
            FieldRef.VALIDATE(XmlLib.Text2Bool(FieldValue))
          ELSE
            FieldRef.VALUE := XmlLib.Text2Bool(FieldValue);

        Field.Type::Text,Field.Type::Code,Field.Type::GUID:
          IF ValidateField THEN
            FieldRef.VALIDATE(FieldValue)
          ELSE
            FieldRef.VALUE := FieldValue;

        Field.Type::Date:
          IF ValidateField THEN
            FieldRef.VALIDATE(XmlLib.Text2Date(FieldValue))
          ELSE
            FieldRef.VALUE := XmlLib.Text2Date(FieldValue);

        Field.Type::Decimal:
          IF ValidateField THEN
            FieldRef.VALIDATE(XmlLib.Text2Dec(FieldValue))
          ELSE
            FieldRef.VALUE := XmlLib.Text2Dec(FieldValue);

        Field.Type::Integer,Field.Type::Option:
          IF ValidateField THEN
            FieldRef.VALIDATE(XmlLib.Text2Int(FieldValue))
          ELSE
            FieldRef.VALUE := XmlLib.Text2Int(FieldValue);
      END;
    END;

    EVENT GlobalXmlDoc@1000::ondataavailable@198();
    BEGIN
    END;

    EVENT GlobalXmlDoc@1000::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}

