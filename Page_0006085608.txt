OBJECT Page 6085608 Document Page Client Addin
{
  OBJECT-PROPERTIES
  {
    Date=02/07/18;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.4.50.05;
  }
  PROPERTIES
  {
    Permissions=TableData 6085780=rimd;
    CaptionML=ENU=Document Page Client Addin;
    LinksAllowed=No;
    SourceTable=Table6085591;
    PageType=List;
    OnOpenPage=BEGIN
                 CurrZoom := 50;
                 Setup.GET;
                 ShowCaptureUI := NOT WebClientMgt.IsWebClient;
                 ShowCaptureWebUI := WebClientMgt.IsWebClient;
               END;

    OnAfterGetRecord=BEGIN
                       IF ("Document No." <> xRec."Document No.") OR ("Page No." <> xRec."Page No.") THEN BEGIN
                         IF ("Document No." <> xRec."Document No.") THEN
                           Document.GET("Document No.");
                         UpdateImage;
                         CaptureAddinLib.BuildCaptureEnabledCommand(FALSE,CaptureXmlDoc);
                         SendCommand(CaptureXmlDoc);
                       END ELSE IF (SendAllPendingCommands AND (NOT ISNULL(CaptureXmlDoc))) THEN BEGIN
                         SendAllPendingCommands := FALSE;
                         CaptureAddinLib.BuildCaptureEnabledCommand(FALSE,CaptureXmlDoc);
                         SendCommand(CaptureXmlDoc);
                       END;
                     END;

  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Field  ;
                Name=CaptureUI;
                SourceExpr=CaptureUISource;
                Visible=SHOWCAPTUREUI;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.UI;PublicKeyToken=44fe4ac2c6480df6];
                OnControlAddIn=BEGIN
                                 OnControlAddIn(Index,Data);
                               END;

                ShowCaption=No }

    { 6085573;1;Field     ;
                Name=CaptureUIWeb;
                SourceExpr=CaptureUISource;
                Visible=SHOWCAPTUREWEBUI;
                ControlAddIn=[Continia.DocumentCapture.Dynamics.Nav.Web.UI;PublicKeyToken=652b4f7dbff5f5b3];
                OnControlAddIn=VAR
                                 InXmlDoc@1161054001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
                                 XmlLib@1161054000 : Codeunit 6085573;
                               BEGIN
                               END;

                ShowCaption=No }

  }
  CODE
  {
    VAR
      Document@1160040000 : Record 6085590;
      Setup@1000000019 : Record 6085573;
      CaptureMgnt@1000000014 : Codeunit 6085576;
      CaptureAddinLib@1000000013 : Codeunit 6085660;
      WebClientMgt@6085574 : Codeunit 6085662;
      FileMgt@6085575 : Codeunit 419;
      CaptureXmlDoc@1000000010 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CaptureUISource@1000000000 : Text;
      CurrentFilename@6085576 : Text;
      Channel@1000000011 : Code[50];
      CurrentPageText@1000000005 : Text[250];
      CurrentZoomText@1000000009 : Text[30];
      HeaderFieldsFormName@1000000008 : Text[50];
      LineFieldsFormName@1000000003 : Text[50];
      MatchQty@1000000007 : Decimal;
      CurrZoom@1000000004 : Decimal;
      CurrentPageNo@1000000006 : Integer;
      SendAllPendingCommands@1000000012 : Boolean;
      DisableCapture@1000000018 : Boolean;
      ShowCaptureUI@1000000021 : Boolean INDATASET;
      ShowCaptureWebUI@6085573 : Boolean;
      ForceUpdate@1160040001 : Boolean;

    PROCEDURE UpdateImage@1000000006();
    VAR
      Page@1160040000 : Record 6085591;
      TIFFMgt@6085574 : Codeunit 6085609;
      ImageDataUrl@6085573 : Text;
    BEGIN
      IF ("Document No." = '') THEN BEGIN
        CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
        CaptureAddinLib.BuildSetActivePageCommand(0,CurrentPageText,CaptureXmlDoc);
        EXIT;
      END;

      IF NOT Page.GET("Document No.","Page No.") THEN
        EXIT;

      IF (("Document No." <> xRec."Document No.") OR (ForceUpdate)) AND NOT WebClientMgt.IsWebClient THEN BEGIN
        IF NOT WebClientMgt.IsWebClient THEN BEGIN
          // CurrentFileName is always a temporary client side file.
          IF CurrentFilename <> '' THEN
            FileMgt.DeleteClientFile(CurrentFilename);

          CurrentFilename := Document.GetTiffFileName;

          CaptureAddinLib.BuildSetImageCommand(CurrentFilename,TRUE,CaptureXmlDoc);
        END;
      END;

      ForceUpdate := FALSE;

      IF WebClientMgt.IsWebClient THEN BEGIN
        ImageDataUrl := TIFFMgt.GetPageAsDataUrl(Document.GetTiffServerFileName,"Page No.");
        CaptureAddinLib.BuildSetImageDataCommand(ImageDataUrl,TRUE,CaptureXmlDoc);
      END;

      CaptureAddinLib.BuildSetActivePageCommand("Page No.",CurrentPageText,CaptureXmlDoc);

      CaptureAddinLib.BuildScrollTopCommand(CaptureXmlDoc);

      Zoom(CurrZoom);
    END;

    PROCEDURE Zoom@1000000000(ZoomPct@1000000000 : Decimal);
    BEGIN
      IF ZoomPct < 1 THEN
        ZoomPct := 1;
      CurrZoom := ZoomPct;
      CurrentZoomText := FORMAT(CurrZoom) + '%';

      CaptureAddinLib.BuildZoomCommand(CurrZoom,CaptureXmlDoc);
      CaptureAddinLib.BuildZoomTextCommand(CurrentZoomText,CaptureXmlDoc);
    END;

    PROCEDURE SendCommand@1000000002(VAR XmlDoc@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      NewXmlDoc@161024012 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CaptureAddinLib.XmlToText(XmlDoc,CaptureUISource);

      CaptureAddinLib.TextToXml(NewXmlDoc,CaptureUISource);

      IF WebClientMgt.IsWebClient THEN
        CurrPage.CaptureUIWeb.SourceValueChanged(CaptureUISource);

      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE SetConfig@1000000004(NewHeaderFieldsFormName@1000000001 : Text[50];NewLineFieldsFormName@1000000000 : Text[50];NewChannel@1000000002 : Code[50]);
    BEGIN
      HeaderFieldsFormName := NewHeaderFieldsFormName;
      LineFieldsFormName := NewLineFieldsFormName;
      Channel := NewChannel;
    END;

    PROCEDURE HandleSimpleCommand@1000000011(Command@1000000000 : Text[1024]);
    BEGIN
      CASE Command OF
        'ZoomIn':
          Zoom(CurrZoom + 5);

        'ZoomOut':
          Zoom(CurrZoom - 5);
      END;

      SendCommand(CaptureXmlDoc);
    END;

    PROCEDURE HandleXmlCommand@1000000007(Command@1000000000 : Text[1024];VAR InXmlDoc@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XmlLib@1000000003 : Codeunit 6085573;
      Area@1000000008 : Code[10];
      FieldCode@1000000009 : Code[20];
      PageNo@1000000002 : Integer;
      Top@1000000004 : Integer;
      Left@1000000005 : Integer;
      Right@1000000006 : Integer;
      Bottom@1000000007 : Integer;
      IsValue@1000000010 : Boolean;
      LineNo@1000000011 : Integer;
    BEGIN
      CASE Command OF
        'ZoomTextChanged':
          BEGIN
            CurrentZoomText := XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Text');
            IF EVALUATE(CurrZoom,DELCHR(CurrentZoomText,'=','%')) THEN;
            Zoom(CurrZoom);
          END;
      END;

      IF NOT ISNULL(CaptureXmlDoc) THEN
        SendCommand(CaptureXmlDoc);
      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE SetSendAllPendingCommands@1000000005(NewSendAllPendingCommands@1000000000 : Boolean);
    BEGIN
      SendAllPendingCommands := NewSendAllPendingCommands;
    END;

    PROCEDURE ClearImage@1161054000();
    BEGIN
      CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
      CaptureAddinLib.BuildSetActivePageCommand(0,CurrentPageText,CaptureXmlDoc);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdatePage@1161054001();
    VAR
      Doc@1000 : Record 6085590;
    BEGIN
      IF NOT Doc.GET("Document No.") THEN
        EXIT;

      UpdateImage;
      CaptureAddinLib.BuildCaptureEnabledCommand(FALSE,CaptureXmlDoc);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE SetForceUpdate@1160040000(NewForceUpdate@1160040000 : Boolean);
    BEGIN
      ForceUpdate := NewForceUpdate;
    END;

    LOCAL PROCEDURE OnControlAddIn@3(index@1000 : Integer;data@1001 : Text);
    VAR
      InXmlDoc@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlLib@1002 : Codeunit 6085573;
    BEGIN
      CLEAR(CaptureXmlDoc);
      IF index = 0 THEN
        HandleSimpleCommand(data)
      ELSE BEGIN
        CaptureAddinLib.TextToXml(InXmlDoc,data);
        IF WebClientMgt.IsWebClient THEN
          HandleXmlCommand(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Event'),InXmlDoc)
        ELSE
          HandleXmlCommand(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Command'),InXmlDoc);
      END;
    END;

    EVENT CaptureUIWeb@-6085573::OnControlAddIn@1(index@1001 : Integer;data@1000 : Text);
    BEGIN
      OnControlAddIn(index,data);
    END;

    EVENT CaptureUIWeb@-6085573::AddInReady@2();
    BEGIN
      UpdateImage;
      SendCommand(CaptureXmlDoc);
    END;

    BEGIN
    {
      The reason for this form to be a list is to avoid default RTC right-click functionality
    }
    END.
  }
}

