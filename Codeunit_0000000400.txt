OBJECT Codeunit 400 SMTP Mail
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    Permissions=TableData 409=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SMTPMailSetup@1003 : Record 409;
      Mail@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage";
      Text002@1002 : TextConst '@@@="%1=file name";ENU=Attachment %1 does not exist or can not be accessed from the program.;ESM=El adjunto %1 no existe o no se puede obtener acceso a ‚ste desde el programa.;FRC=La piŠce jointe %1 n''existe pas ou ne peut pas ˆtre atteinte depuis le programme.;ENC=Attachment %1 does not exist or can not be accessed from the program.';
      SendResult@1004 : Text;
      Text003@1005 : TextConst '@@@="%1=an error message";ENU=The mail system returned the following error: "%1".;ESM=El sistema de correo devolvi¢ el siguiente error: "%1".;FRC=Le systŠme de messagerie a renvoy‚ l''erreur suivanteÿ: ®ÿ%1ÿ¯.;ENC=The mail system returned the following error: "%1".';
      SendErr@1001 : TextConst 'ENU=The email couldn''t be sent.;ESM=No se pudo enviar el correo electr¢nico.;FRC=Le courriel n''a pas pu ˆtre envoy‚.;ENC=The email couldn''t be sent.';
      RecipientErr@1006 : TextConst '@@@="%1 = email address";ENU=Could not add recipient %1.;ESM=No se pudo agregar el destinatario %1.;FRC=Impossible d''ajouter le destinataire %1.;ENC=Could not add recipient %1.';
      BodyErr@1007 : TextConst 'ENU=Could not add text to email body.;ESM=No se pudo agregar texto al cuerpo del correo electr¢nico.;FRC=Impossible d''ajouter le texte au corps du message.;ENC=Could not add text to email body.';
      AttachErr@1008 : TextConst 'ENU=Could not add an attachment to the email.;ESM=No se pudo agregar un anexo al correo electr¢nico.;FRC=Impossible d''ajouter une piŠce jointe au courriel.;ENC=Could not add an attachment to the email.';

    [External]
    PROCEDURE CreateMessage@1(SenderName@1008 : Text;SenderAddress@1000 : Text;Recipients@1001 : Text;Subject@1004 : Text;Body@1005 : Text;HtmlFormatted@1006 : Boolean);
    BEGIN
      OnBeforeCreateMessage(SenderName,SenderAddress,Recipients,Subject,Body,HtmlFormatted);

      IF Recipients <> '' THEN
        CheckValidEmailAddresses(Recipients);
      CheckValidEmailAddresses(SenderAddress);
      SMTPMailSetup.GetSetup;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      IF NOT ISNULL(Mail) THEN BEGIN
        Mail.Dispose;
        CLEAR(Mail);
      END;
      SendResult := '';
      Mail := Mail.SmtpMessage;
      Mail.FromName := SenderName;
      Mail.FromAddress := SenderAddress;
      Mail."To" := Recipients;
      Mail.Subject := Subject;
      Mail.Body := Body;
      Mail.HtmlFormatted := HtmlFormatted;

      IF HtmlFormatted THEN
        Mail.ConvertBase64ImagesToContentId;
    END;

    [External]
    PROCEDURE TrySend@10() : Boolean;
    VAR
      Password@1000 : Text;
    BEGIN
      OnBeforeTrySend;
      SendResult := '';
      Password := SMTPMailSetup.GetPassword;
      WITH SMTPMailSetup DO
        SendResult :=
          Mail.Send(
            "SMTP Server",
            "SMTP Server Port",
            Authentication <> Authentication::Anonymous,
            "User ID",
            Password,
            "Secure Connection");
      Mail.Dispose;
      CLEAR(Mail);

      EXIT(SendResult = '');
    END;

    [External]
    PROCEDURE Send@3();
    BEGIN
      IF NOT TrySend THEN
        ShowErrorNotification(SendErr,SendResult);
    END;

    [External]
    PROCEDURE AddRecipients@4(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      OnBeforeAddRecipients(Recipients);

      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddRecipients(Recipients);
      IF Result <> '' THEN
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AddCC@5(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      OnBeforeAddCC(Recipients);

      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddCC(Recipients);
      IF Result <> '' THEN
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AddBCC@6(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      OnBeforeAddBCC(Recipients);

      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddBCC(Recipients);
      IF Result <> '' THEN
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AppendBody@7(BodyPart@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      Result := Mail.AppendBody(BodyPart);
      IF Result <> '' THEN
        ShowErrorNotification(BodyErr,Result);
    END;

    PROCEDURE AddAttachment@2(Attachment@1000 : Text;FileName@1002 : Text);
    VAR
      FileManagement@1003 : Codeunit 419;
      Result@1001 : Text;
    BEGIN
      IF Attachment = '' THEN
        EXIT;
      IF NOT EXISTS(Attachment) THEN
        ERROR(Text002,Attachment);

      FileName := FileManagement.StripNotsupportChrInFileName(FileName);
      FileName := DELCHR(FileName,'=',';'); // Used for splitting multiple file names in Mail .NET component

      FileManagement.IsAllowedPath(Attachment,FALSE);
      Result := Mail.AddAttachmentWithName(Attachment,FileName);

      IF Result <> '' THEN
        ShowErrorNotification(AttachErr,Result);
    END;

    [External]
    PROCEDURE AddAttachmentStream@15(AttachmentStream@1000 : InStream;AttachmentName@1001 : Text);
    VAR
      FileManagement@1002 : Codeunit 419;
    BEGIN
      AttachmentName := FileManagement.StripNotsupportChrInFileName(AttachmentName);

      Mail.AddAttachment(AttachmentStream,AttachmentName);
    END;

    [External]
    PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text);
    VAR
      MailManagement@1002 : Codeunit 9520;
    BEGIN
      MailManagement.CheckValidEmailAddresses(Recipients);
    END;

    [External]
    PROCEDURE GetLastSendMailErrorText@9() : Text;
    BEGIN
      EXIT(SendResult);
    END;

    [External]
    PROCEDURE GetSMTPMessage@35(VAR SMTPMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage");
    BEGIN
      SMTPMessage := Mail;
    END;

    [External]
    PROCEDURE IsEnabled@11() : Boolean;
    BEGIN
      SMTPMailSetup.GetSetup;
      EXIT(NOT (SMTPMailSetup."SMTP Server" = ''));
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleSMTPRegisterServiceConnection@14(VAR ServiceConnection@1000 : Record 1400);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      SMTPMailSetup.GetSetup;
      RecRef.GETTABLE(SMTPMailSetup);

      ServiceConnection.Status := ServiceConnection.Status::Enabled;
      IF SMTPMailSetup."SMTP Server" = '' THEN
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH SMTPMailSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"SMTP Mail Setup");
    END;

    [External]
    PROCEDURE GetBody@13() : Text;
    BEGIN
      EXIT(Mail.Body);
    END;

    [Integration(TRUE)]
    PROCEDURE OnBeforeTrySend@32();
    BEGIN
    END;

    LOCAL PROCEDURE ShowErrorNotification@20(ErrorMessage@1000 : Text;SmtpResult@1002 : Text);
    VAR
      NotificationLifecycleMgt@1009 : Codeunit 1511;
      Notification@1001 : Notification;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        Notification.MESSAGE := ErrorMessage;
        Notification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
        Notification.ADDACTION('Details',CODEUNIT::"SMTP Mail",'ShowNotificationDetail');
        Notification.SETDATA('Details',STRSUBSTNO(Text003,SmtpResult));
        NotificationLifecycleMgt.SendNotification(Notification,SMTPMailSetup.RECORDID);
        ERROR('');
      END;
      ERROR(Text003,SmtpResult);
    END;

    PROCEDURE ShowNotificationDetail@22(Notification@1000 : Notification);
    BEGIN
      MESSAGE(Notification.GETDATA('Details'));
    END;

    [External]
    PROCEDURE GetO365SmtpServer@17() : Text[250];
    BEGIN
      EXIT('smtp.office365.com')
    END;

    [External]
    PROCEDURE GetOutlookSmtpServer@21() : Text[250];
    BEGIN
      EXIT('smtp-mail.outlook.com')
    END;

    [External]
    PROCEDURE GetGmailSmtpServer@23() : Text[250];
    BEGIN
      EXIT('smtp.gmail.com')
    END;

    [External]
    PROCEDURE GetYahooSmtpServer@24() : Text[250];
    BEGIN
      EXIT('smtp.mail.yahoo.com')
    END;

    [External]
    PROCEDURE GetDefaultSmtpPort@18() : Integer;
    BEGIN
      EXIT(587);
    END;

    [External]
    PROCEDURE GetYahooSmtpPort@36() : Integer;
    BEGIN
      EXIT(465);
    END;

    [External]
    PROCEDURE GetDefaultSmtpAuthType@19() : Integer;
    VAR
      SMTPMailSetup@1000 : Record 409;
    BEGIN
      EXIT(SMTPMailSetup.Authentication::Basic);
    END;

    LOCAL PROCEDURE ApplyDefaultSmtpConnectionSettings@25(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      SMTPMailSetupConfig.Authentication := GetDefaultSmtpAuthType;
      SMTPMailSetupConfig."Secure Connection" := TRUE;
    END;

    [External]
    PROCEDURE ApplyOffice365Smtp@12(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed by the Microsoft Office 365 team.
      // Current source: http://technet.microsoft.com/library/dn554323.aspx
      SMTPMailSetupConfig."SMTP Server" := GetO365SmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyOutlookSmtp@34(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetOutlookSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyGmailSmtp@33(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetGmailSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyYahooSmtp@31(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetYahooSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetYahooSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE IsOffice365Setup@16(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetO365SmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsOutlookSetup@38(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetOutlookSmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsGmailSetup@39(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetGmailSmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsYahooSetup@40(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig."SMTP Server" <> GetYahooSmtpServer THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."SMTP Server Port" <> GetYahooSmtpPort THEN
        EXIT(FALSE);

      EXIT(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    LOCAL PROCEDURE IsSmtpConnectionSetup@26(VAR SMTPMailSetupConfig@1000 : Record 409) : Boolean;
    BEGIN
      IF SMTPMailSetupConfig.Authentication <> GetDefaultSmtpAuthType THEN
        EXIT(FALSE);

      IF SMTPMailSetupConfig."Secure Connection" <> TRUE THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateMessage@27(VAR SenderName@1005 : Text;VAR SenderAddress@1004 : Text;VAR Recipients@1003 : Text;VAR Subject@1002 : Text;VAR Body@1001 : Text;HtmlFormatted@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddRecipients@29(VAR Recipients@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddCC@30(VAR Recipients@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddBCC@37(VAR Recipients@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

