OBJECT Report 26 Copy Account Schedule
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:46 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Account Schedule;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   MESSAGE(CopySuccessMsg);
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;SourceAccScheduleName;
               DataItemTable=Table84;
               OnPreDataItem=BEGIN
                               AssertTargetAccountScheduleNameNotEmpty(InputAccScheduleName);
                               AssertTargetAccountScheduleNameNotExisting(InputAccScheduleName);
                               AssertSourceAccountScheduleNameExists(SourceAccScheduleName);
                               AssertSourceAccountScheduleNameOnlyOne(SourceAccScheduleName);
                             END;

               OnAfterGetRecord=VAR
                                  SourceAccScheduleLine@1001 : Record 85;
                                BEGIN
                                  CreateNewAccountScheduleName(InputAccScheduleName,SourceAccScheduleName);

                                  SourceAccScheduleLine.SETRANGE("Schedule Name",Name);
                                  IF SourceAccScheduleLine.FINDSET THEN
                                    REPEAT
                                      CreateNewAccountScheduleLine(InputAccScheduleName,SourceAccScheduleLine);
                                    UNTIL SourceAccScheduleLine.NEXT = 0;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 3   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 1   ;1   ;Group     ;
                  CaptionML=ENU=Options }

      { 2   ;2   ;Field     ;
                  Name=NewAccountScheduleName;
                  CaptionML=ENU=New Account Schedule Name;
                  ToolTipML=ENU=Specifies the name of the new account schedule after copying.;
                  ApplicationArea=#Basic,#Suite;
                  NotBlank=Yes;
                  SourceExpr=InputAccScheduleName }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      InputAccScheduleName@1000 : Code[10];
      CopySuccessMsg@1005 : TextConst 'ENU=The new account schedule has been created successfully.';
      MissingSourceErr@1004 : TextConst 'ENU=There is no account schedule to copy from.';
      MultipleSourcesErr@1003 : TextConst 'ENU=You can only copy one account schedule at a time.';
      TargetExistsErr@1002 : TextConst 'ENU=The new account schedule already exists.';
      TargetNameMissingErr@1001 : TextConst 'ENU=You must specify a name for the new account schedule.';

    PROCEDURE GetNewAccountScheduleName@1() : Code[10];
    BEGIN
      EXIT(InputAccScheduleName);
    END;

    LOCAL PROCEDURE AssertTargetAccountScheduleNameNotEmpty@9(TargetAccountScheduleName@1000 : Code[10]);
    BEGIN
      IF TargetAccountScheduleName = '' THEN
        ERROR(TargetNameMissingErr);
    END;

    LOCAL PROCEDURE AssertTargetAccountScheduleNameNotExisting@10(TargetAccountScheduleName@1000 : Code[10]);
    VAR
      AccScheduleName@1001 : Record 84;
    BEGIN
      IF AccScheduleName.GET(TargetAccountScheduleName) THEN
        ERROR(TargetExistsErr);
    END;

    LOCAL PROCEDURE AssertSourceAccountScheduleNameExists@11(VAR FromAccScheduleName@1000 : Record 84);
    VAR
      AccScheduleName@1001 : Record 84;
    BEGIN
      AccScheduleName.COPYFILTERS(FromAccScheduleName);
      IF AccScheduleName.ISEMPTY THEN
        ERROR(MissingSourceErr);
    END;

    LOCAL PROCEDURE AssertSourceAccountScheduleNameOnlyOne@12(VAR FromAccScheduleName@1000 : Record 84);
    VAR
      AccScheduleName@1001 : Record 84;
    BEGIN
      AccScheduleName.COPYFILTERS(FromAccScheduleName);
      IF AccScheduleName.COUNT > 1 THEN
        ERROR(MultipleSourcesErr);
    END;

    LOCAL PROCEDURE CreateNewAccountScheduleName@3(NewName@1001 : Code[10];FromAccScheduleName@1002 : Record 84);
    VAR
      AccScheduleName@1000 : Record 84;
    BEGIN
      IF AccScheduleName.GET(NewName) THEN
        EXIT;

      AccScheduleName.INIT;
      AccScheduleName.TRANSFERFIELDS(FromAccScheduleName);
      AccScheduleName.Name := NewName;
      AccScheduleName.INSERT;
    END;

    LOCAL PROCEDURE CreateNewAccountScheduleLine@4(NewName@1002 : Code[10];FromAccScheduleLine@1001 : Record 85);
    VAR
      AccScheduleLine@1000 : Record 85;
    BEGIN
      IF AccScheduleLine.GET(NewName,FromAccScheduleLine."Line No.") THEN
        EXIT;

      AccScheduleLine.INIT;
      AccScheduleLine.TRANSFERFIELDS(FromAccScheduleLine);
      AccScheduleLine."Schedule Name" := NewName;
      AccScheduleLine.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

