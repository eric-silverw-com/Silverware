OBJECT Report 6250 Auto Posting Errors
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Auto Posting Errors;
               ESM=Errores de registro autom tico;
               FRC=Erreurs de report automatique;
               ENC=Auto Posting Errors];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 3502;    ;DataItem;                    ;
               DataItemTable=Table232;
               DataItemTableView=SORTING(Journal Template Name,Name);
               OnPreDataItem=BEGIN
                               GLSetup.GET;
                               SalesSetup.GET;
                               PurchSetup.GET;
                               AmountLCY := 0;
                               BalanceLCY := 0;
                             END;
                              }

    { 68  ;1   ;Column  ;JnlTmplName_GenJnlBatch;
               SourceExpr="Journal Template Name" }

    { 69  ;1   ;Column  ;Name_GenJnlBatch    ;
               SourceExpr=Name }

    { 3   ;1   ;Column  ;CompanyName         ;
               SourceExpr=COMPANYPROPERTY.DISPLAYNAME }

    { 1   ;1   ;Column  ;GeneralJnlTestCaption;
               SourceExpr=GeneralJnlTestLbl }

    { 5444;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               PrintOnlyIfDetail=Yes }

    { 8   ;2   ;Column  ;JnlTemplateName_GenJnlBatch;
               SourceExpr="Gen. Journal Batch"."Journal Template Name" }

    { 10  ;2   ;Column  ;JnlName_GenJnlBatch ;
               SourceExpr="Gen. Journal Batch".Name }

    { 60  ;2   ;Column  ;GenJnlLineFilter    ;
               SourceExpr=GenJnlLineFilter }

    { 53  ;2   ;Column  ;GenJnlLineFilterTableCaption;
               SourceExpr="Gen. Journal Line".TABLECAPTION + ': ' + GenJnlLineFilter }

    { 70  ;2   ;Column  ;Number_Integer      ;
               SourceExpr=Number }

    { 4   ;2   ;Column  ;PageNoCaption       ;
               SourceExpr=PageNoLbl }

    { 7   ;2   ;Column  ;JnlTmplNameCaption_GenJnlBatch;
               SourceExpr="Gen. Journal Batch".FIELDCAPTION("Journal Template Name") }

    { 9   ;2   ;Column  ;JournalBatchCaption ;
               SourceExpr=JnlBatchNameLbl }

    { 11  ;2   ;Column  ;PostingDateCaption  ;
               SourceExpr=PostingDateLbl }

    { 12  ;2   ;Column  ;DocumentTypeCaption ;
               SourceExpr=DocumentTypeLbl }

    { 13  ;2   ;Column  ;DocNoCaption_GenJnlLine;
               SourceExpr="Gen. Journal Line".FIELDCAPTION("Document No.") }

    { 14  ;2   ;Column  ;AccountTypeCaption  ;
               SourceExpr=AccountTypeLbl }

    { 15  ;2   ;Column  ;AccNoCaption_GenJnlLine;
               SourceExpr="Gen. Journal Line".FIELDCAPTION("Account No.") }

    { 16  ;2   ;Column  ;AccNameCaption      ;
               SourceExpr=AccNameLbl }

    { 17  ;2   ;Column  ;DescCaption_GenJnlLine;
               SourceExpr="Gen. Journal Line".FIELDCAPTION(Description) }

    { 18  ;2   ;Column  ;PostingTypeCaption  ;
               SourceExpr=GenPostingTypeLbl }

    { 19  ;2   ;Column  ;GenBusPostGroupCaption;
               SourceExpr=GenBusPostingGroupLbl }

    { 20  ;2   ;Column  ;GenProdPostGroupCaption;
               SourceExpr=GenProdPostingGroupLbl }

    { 21  ;2   ;Column  ;AmountCaption_GenJnlLine;
               SourceExpr="Gen. Journal Line".FIELDCAPTION(Amount) }

    { 22  ;2   ;Column  ;BalAccNoCaption_GenJnlLine;
               SourceExpr="Gen. Journal Line".FIELDCAPTION("Bal. Account No.") }

    { 23  ;2   ;Column  ;BalLCYCaption_GenJnlLine;
               SourceExpr="Gen. Journal Line".FIELDCAPTION("Balance (LCY)") }

    { 7024;2   ;DataItem;                    ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Line No.);
               OnPreDataItem=BEGIN
                               COPYFILTER("Journal Batch Name","Gen. Journal Batch".Name);
                               GenJnlLineFilter := GETFILTERS;

                               GenJnlTemplate.GET("Gen. Journal Batch"."Journal Template Name");
                               IF GenJnlTemplate.Recurring THEN BEGIN
                                 IF GETFILTER("Posting Date") <> '' THEN
                                   AddError(
                                     STRSUBSTNO(
                                       Text000Txt,
                                       FIELDCAPTION("Posting Date")));
                                 SETRANGE("Posting Date",0D,WORKDATE);
                                 IF GETFILTER("Expiration Date") <> '' THEN
                                   AddError(
                                     STRSUBSTNO(
                                       Text000Txt,
                                       FIELDCAPTION("Expiration Date")));
                                 SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
                               END;

                               IF "Gen. Journal Batch"."No. Series" <> '' THEN BEGIN
                                 NoSeries.GET("Gen. Journal Batch"."No. Series");
                                 LastEntrdDocNo := '';
                                 LastEntrdDate := 0D;
                               END;

                               TempGenJournalLineCustVendIC.RESET;
                               TempGenJournalLineCustVendIC.DELETEALL;
                               VATEntryCreated := FALSE;

                               GenJnlLine2.RESET;
                               GenJnlLine2.COPYFILTERS("Gen. Journal Line");

                               TempGLAccNetChange.DELETEALL;
                             END;

               OnAfterGetRecord=VAR
                                  DimMgt@1001 : Codeunit 408;
                                  TableID@1002 : ARRAY [10] OF Integer;
                                  No@1003 : ARRAY [10] OF Code[20];
                                BEGIN
                                  IF "Currency Code" = '' THEN
                                    "Amount (LCY)" := Amount;

                                  UpdateLineBalance;

                                  AccName := '';
                                  BalAccName := '';

                                  IF NOT EmptyLine THEN BEGIN
                                    MakeRecurringTexts("Gen. Journal Line");

                                    AmountError := FALSE;

                                    IF ("Account No." = '') AND ("Bal. Account No." = '') THEN
                                      AddError(STRSUBSTNO(Text001Txt,FIELDCAPTION("Account No."),FIELDCAPTION("Bal. Account No.")))
                                    ELSE
                                      IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                      THEN
                                        TestFixedAssetFields("Gen. Journal Line");
                                    CheckICDocument;
                                    OnAfterGetGenJnlLineAccount("Gen. Journal Line");
                                    OnAfterGetGenJnlLineBalanceAccount("Gen. Journal Line");

                                    IF ("Account No." <> '') AND
                                       NOT "System-Created Entry" AND
                                       (Amount = 0) AND
                                       NOT GenJnlTemplate.Recurring AND
                                       NOT "Allow Zero-Amount Posting" AND
                                       ("Account Type" <> "Account Type"::"Fixed Asset")
                                    THEN
                                      WarningIfZeroAmt("Gen. Journal Line");

                                    CheckRecurringLine("Gen. Journal Line");
                                    CheckAllocations("Gen. Journal Line");
                                    OnAfterGetGenJnlLinePostingDate("Gen. Journal Line");

                                    IF "Document Date" <> 0D THEN
                                      IF ("Document Date" <> NORMALDATE("Document Date")) AND
                                         (("Account Type" <> "Account Type"::"G/L Account") OR
                                          ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
                                      THEN
                                        AddError(
                                          STRSUBSTNO(
                                            Text013Txt,FIELDCAPTION("Document Date")));

                                    IF "Document No." = '' THEN
                                      AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Document No.")))
                                    ELSE
                                      IF "Gen. Journal Batch"."No. Series" <> '' THEN BEGIN
                                        IF (LastEntrdDocNo <> '') AND
                                           ("Document No." <> LastEntrdDocNo) AND
                                           ("Document No." <> INCSTR(LastEntrdDocNo))
                                        THEN
                                          AddError(Text016Txt);
                                        LastEntrdDocNo := "Document No.";
                                      END;

                                    IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) AND
                                       ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
                                    THEN
                                      AddError(
                                        STRSUBSTNO(
                                          Text017Txt,
                                          FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type")));

                                    IF Amount * "Amount (LCY)" < 0 THEN
                                      AddError(
                                        STRSUBSTNO(
                                          Text008Txt,FIELDCAPTION("Amount (LCY)"),FIELDCAPTION(Amount)));

                                    OnAfterGetGenJnlLineAccountType("Gen. Journal Line");

                                    IF ("Account No." <> '') AND ("Bal. Account No." <> '') THEN BEGIN
                                      PurchPostingType := FALSE;
                                      SalesPostingType := FALSE;
                                    END;
                                    IF "Account No." <> '' THEN
                                      CheckAccountTypes("Account Type",AccName);
                                    IF "Bal. Account No." <> '' THEN BEGIN
                                      CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line","Gen. Journal Line");
                                      CheckAccountTypes("Account Type",BalAccName);
                                      CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line","Gen. Journal Line");
                                    END;

                                    IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
                                      AddError(DimMgt.GetDimCombErr);

                                    TableID[1] := DimMgt.TypeToTableID1("Account Type");
                                    No[1] := "Account No.";
                                    TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
                                    No[2] := "Bal. Account No.";
                                    TableID[3] := DATABASE::Job;
                                    No[3] := "Job No.";
                                    TableID[4] := DATABASE::"Salesperson/Purchaser";
                                    No[4] := "Salespers./Purch. Code";
                                    TableID[5] := DATABASE::Campaign;
                                    No[5] := "Campaign No.";
                                    IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
                                      AddError(DimMgt.GetDimValuePostingErr);
                                  END;

                                  CheckBalance;
                                  AmountLCY += "Amount (LCY)";
                                  BalanceLCY += "Balance (LCY)";
                                END;

               ReqFilterFields=Posting Date;
               DataItemLinkReference=Gen. Journal Batch;
               DataItemLink=Journal Template Name=FIELD(Journal Template Name),
                            Journal Batch Name=FIELD(Name) }

    { 24  ;3   ;Column  ;PostingDate_GenJnlLine;
               SourceExpr=FORMAT("Posting Date") }

    { 25  ;3   ;Column  ;DocType_GenJnlLine  ;
               SourceExpr="Document Type" }

    { 26  ;3   ;Column  ;DocNo_GenJnlLine    ;
               SourceExpr="Document No." }

    { 5   ;3   ;Column  ;ExtDocNo_GenJnlLine ;
               SourceExpr="External Document No." }

    { 27  ;3   ;Column  ;AccountType_GenJnlLine;
               SourceExpr="Account Type" }

    { 28  ;3   ;Column  ;AccountNo_GenJnlLine;
               SourceExpr="Account No." }

    { 29  ;3   ;Column  ;AccName             ;
               SourceExpr=AccName }

    { 30  ;3   ;Column  ;Description_GenJnlLine;
               SourceExpr=Description }

    { 31  ;3   ;Column  ;GenPostType_GenJnlLine;
               SourceExpr="Gen. Posting Type" }

    { 32  ;3   ;Column  ;GenBusPosGroup_GenJnlLine;
               SourceExpr="Gen. Bus. Posting Group" }

    { 33  ;3   ;Column  ;GenProdPostGroup_GenJnlLine;
               SourceExpr="Gen. Prod. Posting Group" }

    { 34  ;3   ;Column  ;Amount_GenJnlLine   ;
               SourceExpr=Amount }

    { 35  ;3   ;Column  ;CurrencyCode_GenJnlLine;
               SourceExpr="Currency Code" }

    { 36  ;3   ;Column  ;BalAccNo_GenJnlLine ;
               SourceExpr="Bal. Account No." }

    { 37  ;3   ;Column  ;BalanceLCY_GenJnlLine;
               SourceExpr="Balance (LCY)" }

    { 58  ;3   ;Column  ;AmountLCY           ;
               SourceExpr=AmountLCY }

    { 61  ;3   ;Column  ;BalanceLCY          ;
               SourceExpr=BalanceLCY }

    { 39  ;3   ;Column  ;AmountLCY_GenJnlLine;
               SourceExpr="Amount (LCY)" }

    { 2766;3   ;Column  ;JnlTmplName_GenJnlLine;
               SourceExpr="Journal Template Name" }

    { 4759;3   ;Column  ;JnlBatchName_GenJnlLine;
               SourceExpr="Journal Batch Name" }

    { 8309;3   ;Column  ;LineNo_GenJnlLine   ;
               SourceExpr="Line No." }

    { 38  ;3   ;Column  ;TotalLCYCaption     ;
               SourceExpr=AmountLCYLbl }

    { 9775;3   ;DataItem;DimensionLoop       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               IF NOT ShowDim THEN
                                 CurrReport.BREAK;
                               DimSetEntry.RESET;
                               DimSetEntry.SETRANGE("Dimension Set ID","Gen. Journal Line"."Dimension Set ID")
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    IF NOT DimSetEntry.FINDSET THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF NOT Continue THEN
                                      CurrReport.BREAK;

                                  DimText := GetDimensionText(DimSetEntry);
                                END;
                                 }

    { 59  ;4   ;Column  ;DimText             ;
               SourceExpr=DimText }

    { 56  ;4   ;Column  ;Number_DimensionLoop;
               SourceExpr=Number }

    { 57  ;4   ;Column  ;DimensionsCaption   ;
               SourceExpr=DimensionsLbl }

    { 100 ;3   ;DataItem;                    ;
               DataItemTable=Table221;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Journal Line No.,Line No.);
               DataItemLink=Journal Template Name=FIELD(Journal Template Name),
                            Journal Batch Name=FIELD(Journal Batch Name),
                            Journal Line No.=FIELD(Line No.) }

    { 101 ;4   ;Column  ;AccountNo_GenJnlAllocation;
               SourceExpr="Account No." }

    { 102 ;4   ;Column  ;AccountName_GenJnlAllocation;
               SourceExpr="Account Name" }

    { 103 ;4   ;Column  ;AllocationQuantity_GenJnlAllocation;
               SourceExpr="Allocation Quantity" }

    { 104 ;4   ;Column  ;AllocationPct_GenJnlAllocation;
               SourceExpr="Allocation %" }

    { 105 ;4   ;Column  ;Amount_GenJnlAllocation;
               SourceExpr=Amount }

    { 106 ;4   ;Column  ;JournalLineNo_GenJnlAllocation;
               SourceExpr="Journal Line No." }

    { 107 ;4   ;Column  ;LineNo_GenJnlAllocation;
               SourceExpr="Line No." }

    { 108 ;4   ;Column  ;JournalBatchName_GenJnlAllocation;
               SourceExpr="Journal Batch Name" }

    { 109 ;4   ;Column  ;AccountNoCaption_GenJnlAllocation;
               SourceExpr=FIELDCAPTION("Account No.") }

    { 110 ;4   ;Column  ;AccountNameCaption_GenJnlAllocation;
               SourceExpr=FIELDCAPTION("Account Name") }

    { 111 ;4   ;Column  ;AllocationQuantityCaption_GenJnlAllocation;
               SourceExpr=FIELDCAPTION("Allocation Quantity") }

    { 112 ;4   ;Column  ;AllocationPctCaption_GenJnlAllocation;
               SourceExpr=FIELDCAPTION("Allocation %") }

    { 113 ;4   ;Column  ;AmountCaption_GenJnlAllocation;
               SourceExpr=FIELDCAPTION(Amount) }

    { 2   ;4   ;Column  ;Recurring_GenJnlTemplate;
               SourceExpr=GenJnlTemplate.Recurring }

    { 114 ;4   ;DataItem;DimensionLoopAllocations;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               IF NOT ShowDim THEN
                                 CurrReport.BREAK;
                               DimSetEntry.RESET;
                               DimSetEntry.SETRANGE("Dimension Set ID","Gen. Jnl. Allocation"."Dimension Set ID")
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    IF NOT DimSetEntry.FINDFIRST THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF NOT Continue THEN
                                      CurrReport.BREAK;

                                  AllocationDimText := GetDimensionText(DimSetEntry);
                                END;
                                 }

    { 115 ;5   ;Column  ;AllocationDimText   ;
               SourceExpr=AllocationDimText }

    { 116 ;5   ;Column  ;Number_DimensionLoopAllocations;
               SourceExpr=Number }

    { 117 ;5   ;Column  ;DimensionAllocationsCaption;
               SourceExpr=DimensionAllocationsLbl }

    { 1162;3   ;DataItem;ErrorLoop           ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1,ErrorCounter);
                             END;

               OnPostDataItem=BEGIN
                                ErrorCounter := 0;
                              END;
                               }

    { 43  ;4   ;Column  ;ErrorTextNumber     ;
               SourceExpr=ErrorText[Number] }

    { 42  ;4   ;Column  ;WarningCaption      ;
               SourceExpr=WarningLbl }

    { 5127;2   ;DataItem;ReconcileLoop       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               SETRANGE(Number,1,TempGLAccNetChange.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    TempGLAccNetChange.FIND('-')
                                  ELSE
                                    TempGLAccNetChange.NEXT;
                                END;

               OnPostDataItem=BEGIN
                                TempGLAccNetChange.DELETEALL;
                              END;
                               }

    { 49  ;3   ;Column  ;GLAccNetChangeNo    ;
               SourceExpr=TempGLAccNetChange."No." }

    { 50  ;3   ;Column  ;GLAccNetChangeName  ;
               SourceExpr=TempGLAccNetChange.Name }

    { 51  ;3   ;Column  ;GLAccNetChangeNetChangeJnl;
               SourceExpr=TempGLAccNetChange."Net Change in Jnl." }

    { 52  ;3   ;Column  ;GLAccNetChangeBalafterPost;
               SourceExpr=TempGLAccNetChange."Balance after Posting" }

    { 44  ;3   ;Column  ;ReconciliationCaption;
               SourceExpr=ReconciliationLbl }

    { 45  ;3   ;Column  ;NoCaption           ;
               SourceExpr=NoLbl }

    { 46  ;3   ;Column  ;NameCaption         ;
               SourceExpr=NameLbl }

    { 47  ;3   ;Column  ;NetChangeinJnlCaption;
               SourceExpr=NetChangeinJnlLbl }

    { 48  ;3   ;Column  ;BalafterPostingCaption;
               SourceExpr=BalafterPostingLbl }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1   ;2   ;Field     ;
                  Name=ShowDim;
                  CaptionML=[ENU=Show Dimensions;
                             ESM=Mostrar dimensiones;
                             FRC=Afficher dimensions;
                             ENC=Show Dimensions];
                  ToolTipML=[ENU=Specifies if you want dimensions information for the journal lines to be included in the report.;
                             ESM=Especifica si desea que se incluya en el informe la informaci¢n de dimensiones de las l¡neas del diario.;
                             FRC=Spcifie si vous souhaitez inclure des informations sur les dimensions pour les lignes journal dans le rapport.;
                             ENC=Specifies if you want dimensions information for the journal lines to be included in the report.];
                  ApplicationArea=#Dimensions;
                  SourceExpr=ShowDim }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000Txt@1000 : TextConst '@@@="%1=Posting or Expiration Date";ENU=%1 cannot be filtered when you post recurring journals.;ESM=No se puede filtrar %1 cuando registra diarios peri¢dicos.;FRC=%1 ne peut tre filtr lorsque vous reportez des journaux rcurrents.;ENC=%1 cannot be filtered when you post recurring journals.';
      Text001Txt@1001 : TextConst '@@@="%1=Account Number, %2=Balance Account Number";ENU=%1 or %2 must be specified.;ESM=Debe especificar %1 o %2.;FRC=%1 ou %2 doit tre spcifi.;ENC=%1 or %2 must be specified.';
      Text002Txt@1002 : TextConst '@@@="%1=Gen. Posting Type";ENU=%1 must be specified.;ESM=Debe especificar %1.;FRC=%1 doit tre spcifi(e).;ENC=%1 must be specified.';
      Text003Txt@1003 : TextConst '@@@="%1=VAT Amount, %2=VAT Base Amount, %3=Amont";ENU=%1 + %2 must be %3.;ESM=%1 + %2 debe ser %3.;FRC=%1 + %2 doit tre quivalent  %3.;ENC=%1 + %2 must be %3.';
      Text004Txt@1004 : TextConst '@@@="%1=Gen. Posting Type field caption, %2=Account Type field caption, %3=Account Type";ENU=%1 must be " " when %2 is %3.;ESM=%1 debe contener un " " cuando %2 es %3.;FRC=%1 doit tre " " lorsque %2 est %3.;ENC=%1 must be " " when %2 is %3.';
      Text005Txt@1005 : TextConst '@@@="%1=Gen. Bus. Posting Group field caption, %2=Gen. Bus. Posting Group field caption, %3=VAT Bus. Posting Group field caption, %4=VAT Bus. Posting Group field caption, %5=Account Type field caption, %6=Account Type";ENU=%1, %2, %3 or %4 must not be completed when %5 is %6.;ESM=%1, %2, %3 o %4 no se deben completar cuando %5 es %6.;FRC=%1, %2, %3 ou %4 ne doit pas tre renseign quand %5 vaut %6.;ENC=%1, %2, %3 or %4 must not be completed when %5 is %6.';
      Text006Txt@1006 : TextConst '@@@="%1=GenJnlLine Amount field caption";ENU=%1 must be negative.;ESM=El %1 debe ser negativo.;FRC=%1 doit tre ngatif/ve.;ENC=%1 must be negative.';
      Text007Txt@1007 : TextConst '@@@="%1=GenJnlLine Amount field caption";ENU=%1 must be positive.;ESM=El %1 debe ser positivo.;FRC=%1 doit tre positif/ve.;ENC=%1 must be positive.';
      Text008Txt@1008 : TextConst '@@@="%1=Amount LCY, %2=Amount";ENU=%1 must have the same sign as %2.;ESM=%1 y %2 deben tener el mismo signo.;FRC=%1 doit avoir le mme signe que %2.;ENC=%1 must have the same sign as %2.';
      Text009Txt@1009 : TextConst '@@@="%1=Job No.";ENU=%1 cannot be specified.;ESM=No se puede especificar %1.;FRC=%1 ne peut pas tre spcifi(e).;ENC=%1 cannot be specified.';
      Text010Txt@1010 : TextConst '@@@="%1=Check Printed";ENU=%1 must be Yes.;ESM=%1 debe ser S¡.;FRC=%1 doit tre Oui.;ENC=%1 must be Yes.';
      Text011Txt@1011 : TextConst '@@@="%1=Bal. VAT Amount, %2=Bal. VAT Base Amount, %3=Amont";ENU=%1 + %2 must be -%3.;ESM=%1 + %2 debe ser -%3.;FRC=%1 + %2 doit tre quivalent  -%3.;ENC=%1 + %2 must be -%3.';
      Text012Txt@1012 : TextConst '@@@="%1=Sales/Purch. LCY, %2=Amount";ENU=%1 must have a different sign than %2.;ESM=%1 y %2 deben tener un signo diferente.;FRC=%1 doit avoir un signe diffrent de %2.;ENC=%1 must have a different sign than %2.';
      Text013Txt@1013 : TextConst '@@@="%1=Posting or Document Date";ENU=%1 must only be a closing date for G/L entries.;ESM=%1 solo puede ser una fecha £ltima en movimientos de contabilidad.;FRC=%1 doit uniquement tre une date de fermeture pour les critures GL.;ENC=%1 must only be a closing date for G/L entries.';
      Text014Txt@1014 : TextConst '@@@="%1=Posting Date";ENU=%1 is not within your allowed range of posting dates.;ESM=%1 no se encuentra en su rango permitido de fechas de registro.;FRC=%1 ne se trouve pas dans la plage autorise de dates de report.;ENC=%1 is not within your allowed range of posting dates.';
      Text015Txt@1015 : TextConst 'ENU=The lines are not listed according to Posting Date because they were not entered in that order.;ESM=Las l¡neas no se muestran por fecha de registro ya que no fueron introducidas en esa secuencia.;FRC=Les lignes ne sont pas rpertories selon la date de report, car elles n''ont pas t entres dans cet ordre.;ENC=The lines are not listed according to Posting Date because they were not entered in that order.';
      Text016Txt@1016 : TextConst 'ENU=There is a gap in the number series.;ESM=Hay un salto en la serie numrica.;FRC=La srie de numros prsente un cart.;ENC=There is a gap in the number series.';
      Text017Txt@1017 : TextConst '@@@="%1=Account Type, %2=Bal. Account Type";ENU=%1 or %2 must be G/L Account or Bank Account.;ESM=%1 o %2 deben ser de tipo Cuenta o Banco.;FRC=%1 ou %2 doit tre un compte du grand livre ou un compte bancaire.;ENC=%1 or %2 must be G/L Account or Bank Account.';
      Text018Txt@1018 : TextConst '@@@="%1=Payment Discount Percent";ENU=%1 must be 0.;ESM=%1 debe ser 0.;FRC=%1 doit tre 0.;ENC=%1 must be 0.';
      Text019Txt@1019 : TextConst '@@@="%1=Bal. Account No.";ENU=%1 cannot be specified when using recurring journals.;ESM=%1 no se puede especificar mediante diarios peri¢dicos.;FRC=%1 ne peut pas tre spcifi lors de l''utilisation de journaux rcurrents.;ENC=%1 cannot be specified when using recurring journals.';
      Text020Txt@1020 : TextConst '@@@="%1=Recurring Method field caption, %2=Recurring Method, %3=Bal. Account Type field caption, %4=Bal. Account Type";ENU="%1 must not be %2 when %3 = %4.";ESM="%1 no debe ser %2 cuando %3 = %4.";FRC="%1 ne doit pas tre %2 quand %3=%4.";ENC="%1 must not be %2 when %3 = %4."';
      Text021Txt@1021 : TextConst 'ENU=Allocations can only be used with recurring journals.;ESM=Solo se pueden usar asignaciones con diarios peri¢dicos.;FRC=Les affectations ne peuvent tre utilises qu''avec des journaux rcurrents.;ENC=Allocations can only be used with recurring journals.';
      Text022Txt@1022 : TextConst '@@@="%1=GenJnlAlloc. Account No. field caption, %2=GenJnlAlloc. Count";ENU=Specify %1 in the %2 allocation lines.;ESM=Especifique %1 en las l¡neas de asignaci¢n %2.;FRC=Spcifiez %1 dans les lignes affectation %2.;ENC=Specify %1 in the %2 allocation lines.';
      Text023Txt@1023 : TextConst 'ENU=<Month Text>;ESM=<Texto de mes>;FRC=<Texte mois>;ENC=<Month Text>';
      Text024Txt@1024 : TextConst '@@@=%1 - document type, %2 - document number, %3 - posting date;ENU=%1 %2 posted on %3, must be separated by an empty line.;ESM="%1 %2 registrado el %3; debe estar separado por una l¡nea vac¡a.";FRC=%1 %2 reports sur %3 doivent tre spars par une ligne vide.;ENC=%1 %2 posted on %3, must be separated by an empty line.';
      Text025Txt@1025 : TextConst '@@@="%1=LastDocType, %2=LastDocNo, %3=DocBalance";ENU=%1 %2 is out of balance by %3.;ESM=%1 %2 descuadrado por %3.;FRC=%1 %2 est hors balance de %3.;ENC=%1 %2 is out of balance by %3.';
      Text026Txt@1026 : TextConst '@@@="%1=LastDocType, %2=LastDocNo, %3=DocBalanceReverse";ENU=The reversing entries for %1 %2 are out of balance by %3.;ESM=Los movs. reversi¢n para %1 %2 est n descuadrados por %3.;FRC=Les critures de contrepassation pour %1 %2 sont hors balance de %3.;ENC=The reversing entries for %1 %2 are out of balance by %3.';
      Text027Txt@1027 : TextConst '@@@="%1=LastDate, %2=DateBalance";ENU=As of %1, the lines are out of balance by %2.;ESM=Para %1, las l¡neas est n descuadradas por %2.;FRC=· dater du %1, les lignes sont hors balance de %2.;ENC=As of %1, the lines are out of balance by %2.';
      Text028Txt@1028 : TextConst '@@@="%1=LastDate, %2=DateBalanceReverse";ENU=As of %1, the reversing entries are out of balance by %2.;ESM=Para %1, los movs. reversi¢n est n descuadrados por %2.;FRC=· dater du %1, les critures de contrepassation sont hors balance de %2.;ENC=As of %1, the reversing entries are out of balance by %2.';
      Text029Txt@1029 : TextConst '@@@="%1=TotalBalance";ENU=The total of the lines is out of balance by %1.;ESM=El total de las l¡neas est  descuadrado por %1.;FRC=Le total des lignes est hors balance de %1.;ENC=The total of the lines is out of balance by %1.';
      Text030Txt@1030 : TextConst '@@@="%1=TotalBalance";ENU=The total of the reversing entries is out of balance by %1.;ESM=El total de los movs. reversi¢n est  descuadrado por %1.;FRC=Le total des critures de contrepassation est hors balance de %1.;ENC=The total of the reversing entries is out of balance by %1.';
      Text031Txt@1031 : TextConst '@@@="%1=GLAcc.TABLECAPTION, %2=Account No.";ENU=%1 %2 does not exist.;ESM=No existe %1 %2.;FRC=%1 %2 n''existe pas.;ENC=%1 %2 does not exist.';
      Text032Txt@1032 : TextConst '@@@="%1=GLAcc. Account Type field caption, %2=GLAcc.Account Type, %3=GLAcc. table caption, %4=Account No.";ENU=%1 must be %2 for %3 %4.;ESM=%1 debe ser %2 para %3 %4.;FRC=%1 doit tre %2 pour %3 %4.;ENC=%1 must be %2 for %3 %4.';
      Text036Txt@1033 : TextConst '@@@="%1=VATPostingSetup table caption, %2=VAT Bus. Posting Group, %3=VAT Prod. Posting Group";ENU=%1 %2 %3 does not exist.;ESM=No existe %1 %2 %3.;FRC=%1 %2 %3 n''existe pas.;ENC=%1 %2 %3 does not exist.';
      Text037Txt@1034 : TextConst '@@@="%1=VAT Calculation Type field caption, %2=VATPostingSetup.VAT Calculation Type";ENU=%1 must be %2.;ESM=%1 debe ser %2.;FRC=%1 doit tre %2.;ENC=%1 must be %2.';
      Text038Txt@1035 : TextConst '@@@="%1=Currency Code";ENU=The currency %1 cannot be found. Check the currency table.;ESM=No se encuentra la divisa %1. Compruebe la tabla de divisas.;FRC=La devise %1 est introuvable. Vrifiez dans la table des devises.;ENC=The currency %1 cannot be found. Cheque the currency table.';
      Text039Txt@1036 : TextConst '@@@="%1=Document Type, %2=Document No.";ENU=Sales %1 %2 already exists.;ESM=Ya existe la venta %1 %2.;FRC=Le document %1 vente %2 existe dj.;ENC=Sales %1 %2 already exists.';
      Text040Txt@1037 : TextConst '@@@="%1=Document Type, %2=Document No.";ENU=Purchase %1 %2 already exists.;ESM=Ya existe la compra %1 %2.;FRC=Le document %1 achat %2 existe dj.;ENC=Purchase %1 %2 already exists.';
      Text041Txt@1038 : TextConst '@@@="%1=External Document No. field caption";ENU=%1 must be entered.;ESM=Se debe indicar %1.;FRC=%1 doit tre entr(e).;ENC=%1 must be entered.';
      Text042Txt@1039 : TextConst '@@@="%1=Bank Payment Type, %2=Currency Code, %3=TABLECAPTION, %4= BankAcc. Table caption";ENU=%1 must not be filled when %2 is different in %3 and %4.;ESM=No se debe completar %1 cuando %2 es diferente en %3 y %4.;FRC=%1 ne doit pas tre renseign(e) quand %2 est diffrent dans %3 et %4.;ENC=%1 must not be filled when %2 is different in %3 and %4.';
      Text043Txt@1040 : TextConst '@@@="%1=FA.TABLECAPTION, %2=Account No., %3=FA.Budgeted Asset field caption, %4=TRUE";ENU="%1 %2 must not have %3 = %4.";ESM="%1 %2 no debe ser %3 = %4.";FRC="%1 %2 ne doit pas avoir %3 = %4.";ENC="%1 %2 must not have %3 = %4."';
      Text044Txt@1041 : TextConst '@@@="%1=Job No. field caption";ENU=%1 must not be specified in fixed asset journal lines.;ESM=No se debe especificar %1 en las l¡neas de diario de activos fijos.;FRC=%1 ne doit pas tre spcifi dans les lignes de journal des immobilisations.;ENC=%1 must not be specified in fixed asset journal lines.';
      Text045Txt@1042 : TextConst '@@@="%1=FA Posting Type field caption";ENU=%1 must be specified in fixed asset journal lines.;ESM=Se debe especificar %1 en las l¡neas de diario de activos fijos.;FRC=%1 doit tre spcifi dans les lignes de journal des immobilisations.;ENC=%1 must be specified in fixed asset journal lines.';
      Text046Txt@1043 : TextConst '@@@="%1=Depreciation Book Code field caption, %2=Duplicate in Depreciation Book field caption";ENU=%1 must be different than %2.;ESM=%1 debe ser diferente de %2.;FRC=%1 doit tre diffrent de %2.;ENC=%1 must be different than %2.';
      Text047Txt@1044 : TextConst '@@@="%1=Account Type field caption, %2=Bal. Account Type field caption, %3=Account Type";ENU=%1 and %2 must not both be %3.;ESM=%1 y %2 no deben ser %3.;FRC=%1 et %2 ne doivent pas tre tous les deux %3.;ENC=%1 and %2 must not both be %3.';
      Text049Txt@1046 : TextConst '@@@="%1=Gen. Posting Type field caption, 2%=FA Posting Type field caption, %3=FA Posting Type";ENU="%1 must not be specified when %2 = %3.";ESM="No se debe especificar %1 cuando %2 = %3.";FRC="%1 ne doit pas tre dfini(e) quand %2 = %3.";ENC="%1 must not be specified when %2 = %3."';
      Text050Txt@1047 : TextConst '@@@="%1=FA Posting Type field caption, %2=FA Posting Type";ENU="must not be specified together with %1 = %2.";ESM="no se debe especificar conjuntamente con %1 = %2.";FRC="ne doit pas tre dfini(e) avec %1 = %2.";ENC="must not be specified together with %1 = %2."';
      Text051Txt@1048 : TextConst '@@@="%1=Posting Date field caption,%2=FA Posting Date";ENU=%1 must be identical to %2.;ESM=%1 debe ser idntico a %2.;FRC=%1 doit tre identique  %2.;ENC=%1 must be identical to %2.';
      Text052Txt@1049 : TextConst '@@@="%1=FA Posting Date field caption";ENU=%1 cannot be a closing date.;ESM=%1 no puede ser una fecha de cierre.;FRC=%1 ne peut pas tre une date de fermeture.;ENC=%1 cannot be a closing date.';
      Text053Txt@1050 : TextConst '@@@="%1=FA Posting Date field caption";ENU=%1 is not within your range of allowed posting dates.;ESM=%1 no est  dentro del rango de fechas permitidas de registro.;FRC=%1 ne se trouve pas dans la plage de dates de report autorises.;ENC=%1 is not within your range of allowed posting dates.';
      Text054Txt@1051 : TextConst '@@@="%1=Depreciation Book Code field caption,%2=Depreciation Book Code";ENU=Insurance integration is not activated for %1 %2.;ESM=No se ha activado la integraci¢n de seguro para %1 %2.;FRC=L''intgration des assurances n''est pas active pour %1 %2.;ENC=Insurance integration is not activated for %1 %2.';
      Text055Txt@1052 : TextConst '@@@="%1=FA Error Entry No. field caption";ENU=must not be specified when %1 is specified.;ESM=no se debe especificar cuando se ha seleccionado %1.;FRC=ne doit pas tre dfini(e) quand %1 est dfini(e).;ENC=must not be specified when %1 is specified.';
      Text056Txt@1053 : TextConst '@@@="%1=FA Posting Type";ENU=When G/L integration is not activated, %1 must not be posted in the general journal.;ESM=Si no se ha activado la integraci¢n con contabilidad, no se debe registrar %1 en el diario general.;FRC=Lorsque l''intgration GL n''est pas active, %1 ne doit pas tre report dans le journal gnral.;ENC=When G/L integration is not activated, %1 must not be posted in the general journal.';
      Text057Txt@1054 : TextConst '@@@="%1=Depr. until FA Posting Date field caption";ENU=When G/L integration is not activated, %1 must not be specified in the general journal.;ESM=Si no se ha activado la integraci¢n con contabilidad, no se debe especificar %1 en el diario general.;FRC=Lorsque l''intgration GL n''est pas active, %1 ne doit pas tre spcifi dans le journal gnral.;ENC=When G/L integration is not activated, %1 must not be specified in the general journal.';
      Text058Txt@1055 : TextConst '@@@="%1=FA Posting Type field caption";ENU=%1 must not be specified.;ESM=No se debe especificar %1.;FRC=%1 ne doit pas tre dfini(e).;ENC=%1 must not be specified.';
      Text059Txt@1056 : TextConst 'ENU=The combination of Customer and Gen. Posting Type Purchase is not allowed.;ESM=La combinaci¢n de cliente y grupos de registro de compras no est  permitida.;FRC=La combinaison client et type de report gnral de l''achat n''est pas permise.;ENC=The combination of Customer and Gen. Posting Type Purchase is not allowed.';
      Text060Txt@1057 : TextConst 'ENU=The combination of Vendor and Gen. Posting Type Sales is not allowed.;ESM=La combinaci¢n de proveedor y ventas de tipo de registro gen. no est  permitida.;FRC=La combinaison fournisseur et type de report gnral de la vente n''est pas permise.;ENC=The combination of Vendor and Gen. Posting Type Sales is not allowed.';
      Text061Txt@1058 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only with Allocations.;ESM=Los mtodos recurrentes de saldo y saldo de reversi¢n pueden usarse solo con cuotas.;FRC=Les modes rcurrents Solde et Solde inversion ne peuvent tre utiliss qu''avec des affectations.;ENC=The Balance and Reversing Balance recurring methods can be used only with Allocations.';
      Text062Txt@1059 : TextConst '@@@="%1=GenJnlLine  Amount";ENU=%1 must not be 0.;ESM=%1 no debe ser 0.;FRC=%1 ne doit pas tre 0.;ENC=%1 must not be 0.';
      GLSetup@1060 : Record 98;
      SalesSetup@1061 : Record 311;
      PurchSetup@1062 : Record 312;
      UserSetup@1063 : Record 91;
      AccountingPeriod@1064 : Record 50;
      GLAcc@1065 : Record 15;
      Currency@1066 : Record 4;
      Cust@1067 : Record 18;
      Vend@1068 : Record 23;
      BankAccPostingGr@1069 : Record 277;
      BankAcc@1070 : Record 270;
      GenJnlTemplate@1071 : Record 80;
      GenJnlLine2@1072 : Record 81;
      TempGenJnlLine@1125 : TEMPORARY Record 81;
      TempGenJournalLineCustVendIC@1045 : TEMPORARY Record 81;
      GenJnlAlloc@1073 : Record 221;
      OldCustLedgEntry@1074 : Record 21;
      OldVendLedgEntry@1075 : Record 25;
      VATPostingSetup@1076 : Record 325;
      NoSeries@1077 : Record 308;
      FA@1078 : Record 5600;
      ICPartner@1132 : Record 413;
      DeprBook@1079 : Record 5611;
      FADeprBook@1080 : Record 5612;
      FASetup@1081 : Record 5603;
      TempGLAccNetChange@1082 : TEMPORARY Record 269;
      DimSetEntry@1083 : Record 480;
      Employee@1945 : Record 5200;
      DataMigrationError@1103 : Record 1797;
      GenJnlLineFilter@1085 : Text;
      AllowPostingFrom@1086 : Date;
      AllowPostingTo@1087 : Date;
      AllowFAPostingFrom@1088 : Date;
      AllowFAPostingTo@1089 : Date;
      LastDate@1090 : Date;
      LastDocType@1091 : 'Document,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      LastDocNo@1092 : Code[20];
      LastEntrdDocNo@1093 : Code[20];
      LastEntrdDate@1094 : Date;
      BalanceLCY@1138 : Decimal;
      AmountLCY@1131 : Decimal;
      DocBalance@1095 : Decimal;
      DocBalanceReverse@1096 : Decimal;
      DateBalance@1097 : Decimal;
      DateBalanceReverse@1098 : Decimal;
      TotalBalance@1099 : Decimal;
      TotalBalanceReverse@1100 : Decimal;
      AccName@1101 : Text[50];
      LastLineNo@1102 : Integer;
      Day@1104 : Integer;
      Week@1105 : Integer;
      Month@1106 : Integer;
      MonthText@1107 : Text[30];
      AmountError@1108 : Boolean;
      ErrorCounter@1109 : Integer;
      ErrorText@1110 : ARRAY [50] OF Text[250];
      TempErrorText@1111 : Text[250];
      BalAccName@1112 : Text[50];
      VATEntryCreated@1114 : Boolean;
      CustPosting@1115 : Boolean;
      VendPosting@1116 : Boolean;
      SalesPostingType@1117 : Boolean;
      PurchPostingType@1118 : Boolean;
      DimText@1119 : Text[75];
      AllocationDimText@1140 : Text[75];
      ShowDim@1121 : Boolean;
      Continue@1122 : Boolean;
      Text063Txt@1123 : TextConst 'ENU=Document,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund;ESM=Documento,Pago,Factura,Nota de crdito,Documento inters,Recordatorio,Reembolso;FRC=Document,Paiement,Facture,Note de crdit,Note de frais financiers,Rappel,Remboursement;ENC=Document,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      Text064Txt@1124 : TextConst '@@@="%1=GenJnlLine External Document No. field caption, %2=GenJnlLine External Document No., %3=TempGenJnlLine Line No., %4=GenJnlLine Document No.field caption, %5=TempGenJnlLine Document No.";ENU=%1 %2 is already used in line %3 (%4 %5).;ESM=%1 %2 se utiliza ya en la l¡nea %3 (%4 %5).;FRC=%1 %2 est dj utilis(e)  la ligne %3 (%4 %5).;ENC=%1 %2 is already used in line %3 (%4 %5).';
      Text065Txt@1126 : TextConst '@@@="%1=Account Type, %2=Cust.Blocked, %3=Document Type field caption, %4=Document Type";ENU=%1 must not be blocked with type %2 when %3 is %4.;ESM=%1 no debe estar bloqueado con el tipo %2 cuando %3 es %4.;FRC=Le %1 ne doit pas tre bloqu avec le type %2 lorsque %3 est %4.;ENC=%1 must not be blocked with type %2 when %3 is %4.';
      CurrentICPartner@1128 : Code[20];
      Text066Txt@1129 : TextConst '@@@="%1=Account No. field caption, %2=Bal. Account No. field caption";ENU=You cannot enter G/L Account or Bank Account in both %1 and %2.;ESM=No puede introducir una cuenta o una cuenta bancaria en %1 y en %2.;FRC=Vous ne pouvez pas entrer le compte du grand livre ou le compte bancaire  la fois dans %1 et dans %2.;ENC=You cannot enter G/L Account or Bank Account in both %1 and %2.';
      Text067Txt@1130 : TextConst '@@@="%1=Customer table caption, %2=Account No., %3=ICPartner table caption, %4=IC Partner Code";ENU=%1 %2 is linked to %3 %4.;ESM=%1 %2 tiene un v¡nculo con %3 %4.;FRC=%1 %2 est li  %3 %4.;ENC=%1 %2 is linked to %3 %4.';
      Text069Txt@1134 : TextConst '@@@="%1=IC Partner G/L Acc. No. field caption, %2=IC Direction field caption, %3=IC Direction";ENU=%1 must not be specified when %2 is %3.;ESM=No debe especificarse %1 cuando %2 es %3.;FRC=%1 ne doit pas tre indiqu lorsque %2 est %3.;ENC=%1 must not be specified when %2 is %3.';
      Text070Txt@1135 : TextConst '@@@="%1=IC Partner G/L Acc. No. field caption";ENU=%1 must not be specified when the document is not an intercompany transaction.;ESM=No debe especificarse %1 si el documento no es una transacci¢n entre empresas vinculadas.;FRC=%1 ne doit pas tre indiqu si le document n''est pas une transaction intersocits.;ENC=%1 must not be specified when the document is not an intercompany transaction.';
      Text071Txt@1137 : TextConst '@@@="%1=Job table caption, %2=Job No.";ENU=%1 %2 does not exist.;ESM=No existe %1 %2.;FRC=%1 %2 n''existe pas.;ENC=%1 %2 does not exist.';
      Text072Txt@1136 : TextConst '@@@="%1=Job Blocked field caption, %2=Job Blocked, %3=Job table caption, %4=Job No.";ENU=%1 must not be %2 for %3 %4.;ESM=%1 no debe ser %2 para %3 %4.;FRC=%1 ne doit pas tre %2 pour %3 %4.;ENC=%1 must not be %2 for %3 %4.';
      Text073Txt@1102601000 : TextConst '@@@="%1=Document No. field caption, %2=Document No.";ENU=%1 %2 already exists.;ESM=Ya existe %1 %2.;FRC=%1 %2 existe dj.;ENC=%1 %2 already exists.';
      PostingErrorTxt@1113 : TextConst '@@@="%1=Gen. Journal Line Journal Batch Name, %2=Gen. Journal Line Document No., %3=Text";ENU=Posting error on batch %1- Document Number %2 %3;ESM=Error de registro en lote %1- N£mero de documento %2 %3;FRC=Erreur de report du lot %1 - Numro de document %2 %3;ENC=Posting error on batch %1- Document Number %2 %3';
      GPMigrationTypeTxt@1084 : TextConst '@@@={Locked};ENU=Great Plains;ESM=Great Plains;FRC=Great Plains;ENC=Great Plains';
      GeneralJnlTestLbl@4487 : TextConst 'ENU=General Journal - Test;ESM=Diario general - Prueba;FRC=F. compta : Impression test;ENC=General Journal - Test';
      PageNoLbl@8565 : TextConst 'ENU=Page;ESM=P gina;FRC=Page;ENC=Page';
      JnlBatchNameLbl@3422 : TextConst 'ENU=Journal Batch;ESM=Lote de diario;FRC=Lot journal;ENC=Journal Batch';
      PostingDateLbl@7627 : TextConst 'ENU=Posting Date;ESM=Fecha de registro;FRC=Date de report;ENC=Posting Date';
      DocumentTypeLbl@7853 : TextConst 'ENU=Document Type;ESM=Tipo de documento;FRC=Type de document;ENC=Document Type';
      AccountTypeLbl@5964 : TextConst 'ENU=Account Type;ESM=Tipo de cuenta;FRC=Type compte;ENC=Account Type';
      AccNameLbl@8342 : TextConst 'ENU=Name;ESM=Nombre;FRC=Nom;ENC=Name';
      GenPostingTypeLbl@6614 : TextConst 'ENU=Gen. Posting Type;ESM=Tipo de registro general;FRC=Type de report gnral;ENC=Gen. Posting Type';
      GenBusPostingGroupLbl@9852 : TextConst 'ENU=Gen. Bus. Posting Group;ESM=Grupo de registro de negocio general;FRC=Groupe de report de march;ENC=Gen. Bus. Posting Group';
      GenProdPostingGroupLbl@8547 : TextConst 'ENU=Gen. Prod. Posting Group;ESM=Grupo de registro de producci¢n general;FRC=Groupe de report de produit;ENC=Gen. Prod. Posting Group';
      AmountLCYLbl@7335 : TextConst 'ENU=Total ($);ESM=Total ($);FRC=Total ($);ENC=Total ($)';
      DimensionsLbl@2995 : TextConst 'ENU=Dimensions;ESM=Dimensiones;FRC=Dimensions;ENC=Dimensions';
      WarningLbl@5070 : TextConst 'ENU=Warning!;ESM=Advertencia;FRC=Attentionÿ!;ENC=Warning!';
      ReconciliationLbl@4137 : TextConst 'ENU=Reconciliation;ESM=Conciliaci¢n;FRC=Rapprochement;ENC=Reconciliation';
      NoLbl@4841 : TextConst 'ENU=No.;ESM=N.§;FRC=Nø;ENC=No.';
      NameLbl@3866 : TextConst 'ENU=Name;ESM=Nombre;FRC=Nom;ENC=Name';
      NetChangeinJnlLbl@9374 : TextConst 'ENU=Net Change in Jnl.;ESM=Saldo periodo en diario;FRC=Solde feuille;ENC=Net Change in Jnl.';
      BalafterPostingLbl@5926 : TextConst 'ENU=Balance after Posting;ESM=Saldo despus del registro;FRC=Solde aprs report;ENC=Balance after Posting';
      DimensionAllocationsLbl@4488 : TextConst 'ENU=Allocation Dimensions;ESM=Dimensiones de asignaci¢n;FRC=Dimensions d''affectation;ENC=Allocation Dimensions';

    LOCAL PROCEDURE CheckRecurringLine@5(GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO
        IF GenJnlTemplate.Recurring THEN BEGIN
          IF "Recurring Method" = 0 THEN
            AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Recurring Method")));
          IF FORMAT("Recurring Frequency") = '' THEN
            AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Recurring Frequency")));
          IF "Bal. Account No." <> '' THEN
            AddError(
              STRSUBSTNO(
                Text019Txt,
                FIELDCAPTION("Bal. Account No.")));
          CASE "Recurring Method" OF
            "Recurring Method"::"V  Variable","Recurring Method"::"RV Reversing Variable",
            "Recurring Method"::"F  Fixed","Recurring Method"::"RF Reversing Fixed":
              WarningIfZeroAmt("Gen. Journal Line");
            "Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance":
              WarningIfNonZeroAmt("Gen. Journal Line");
          END;
          IF "Recurring Method" > "Recurring Method"::"V  Variable" THEN BEGIN
            IF "Account Type" = "Account Type"::"Fixed Asset" THEN
              AddError(
                STRSUBSTNO(
                  Text020Txt,
                  FIELDCAPTION("Recurring Method"),"Recurring Method",
                  FIELDCAPTION("Account Type"),"Account Type"));
            IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN
              AddError(
                STRSUBSTNO(
                  Text020Txt,
                  FIELDCAPTION("Recurring Method"),"Recurring Method",
                  FIELDCAPTION("Bal. Account Type"),"Bal. Account Type"));
          END;
        END ELSE BEGIN
          IF "Recurring Method" <> 0 THEN
            AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Recurring Method")));
          IF FORMAT("Recurring Frequency") <> '' THEN
            AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Recurring Frequency")));
        END;
    END;

    LOCAL PROCEDURE CheckAllocations@6(GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Recurring Method" IN
           ["Recurring Method"::"B  Balance",
            "Recurring Method"::"RB Reversing Balance"]
        THEN BEGIN
          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          IF NOT GenJnlAlloc.FINDFIRST THEN
            AddError(Text061Txt);
        END;

        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        GenJnlAlloc.SETFILTER(Amount,'<>0');
        IF GenJnlAlloc.FINDFIRST THEN
          IF NOT GenJnlTemplate.Recurring THEN
            AddError(Text021Txt)
          ELSE BEGIN
            GenJnlAlloc.SETRANGE("Account No.",'');
            IF GenJnlAlloc.FINDFIRST THEN
              AddError(
                STRSUBSTNO(
                  Text022Txt,
                  GenJnlAlloc.FIELDCAPTION("Account No."),GenJnlAlloc.COUNT));
          END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@1(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO
        IF ("Posting Date" <> 0D) AND ("Account No." <> '') AND ("Recurring Method" <> 0) THEN BEGIN
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text023Txt);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          IF NOT AccountingPeriod.FINDLAST THEN
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
    END;

    LOCAL PROCEDURE CheckBalance@7();
    VAR
      GenJnlLine@1000 : Record 81;
      NextGenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine := "Gen. Journal Line";
      LastLineNo := "Gen. Journal Line"."Line No.";
      NextGenJnlLine := "Gen. Journal Line";
      IF NextGenJnlLine.NEXT = 0 THEN;
      MakeRecurringTexts(NextGenJnlLine);
      WITH GenJnlLine DO
        IF NOT EmptyLine THEN BEGIN
          DocBalance := DocBalance + "Balance (LCY)";
          DateBalance := DateBalance + "Balance (LCY)";
          TotalBalance := TotalBalance + "Balance (LCY)";
          IF "Recurring Method" >= "Recurring Method"::"RF Reversing Fixed" THEN BEGIN
            DocBalanceReverse := DocBalanceReverse + "Balance (LCY)";
            DateBalanceReverse := DateBalanceReverse + "Balance (LCY)";
            TotalBalanceReverse := TotalBalanceReverse + "Balance (LCY)";
          END;
          LastDocType := "Document Type";
          LastDocNo := "Document No.";
          LastDate := "Posting Date";
          IF TotalBalance = 0 THEN
            VATEntryCreated := FALSE;
          IF GenJnlTemplate."Force Doc. Balance" THEN BEGIN
            VATEntryCreated :=
              VATEntryCreated OR
              (("Account Type" = "Account Type"::"G/L Account") AND ("Account No." <> '') AND
               ("Gen. Posting Type" IN ["Gen. Posting Type"::Purchase,"Gen. Posting Type"::Sale])) OR
              (("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '') AND
               ("Bal. Gen. Posting Type" IN ["Bal. Gen. Posting Type"::Purchase,"Bal. Gen. Posting Type"::Sale]));
            TempGenJournalLineCustVendIC.IsCustVendICAdded(GenJnlLine);
            IF (TempGenJournalLineCustVendIC.COUNT > 1) AND VATEntryCreated THEN
              AddError(
                STRSUBSTNO(
                  Text024Txt,
                  "Document Type","Document No.","Posting Date"));
          END;
        END;

      WITH NextGenJnlLine DO BEGIN
        IF (LastDate <> 0D) AND (LastDocNo <> '') AND
           (("Posting Date" <> LastDate) OR
            ("Document Type" <> LastDocType) OR
            ("Document No." <> LastDocNo) OR
            ("Line No." = LastLineNo))
        THEN BEGIN
          IF GenJnlTemplate."Force Doc. Balance" THEN BEGIN
            CASE TRUE OF
              DocBalance <> 0:
                AddError(
                  STRSUBSTNO(
                    Text025Txt,
                    SELECTSTR(LastDocType + 1,Text063Txt),LastDocNo,DocBalance));
              DocBalanceReverse <> 0:
                AddError(
                  STRSUBSTNO(
                    Text026Txt,
                    SELECTSTR(LastDocType + 1,Text063Txt),LastDocNo,DocBalanceReverse));
            END;
            DocBalance := 0;
            DocBalanceReverse := 0;
          END;
          IF ("Posting Date" <> LastDate) OR
             ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo)
          THEN BEGIN
            TempGenJournalLineCustVendIC.RESET;
            TempGenJournalLineCustVendIC.DELETEALL;
            VATEntryCreated := FALSE;
            CustPosting := FALSE;
            VendPosting := FALSE;
            SalesPostingType := FALSE;
            PurchPostingType := FALSE;
          END;
        END;

        IF (LastDate <> 0D) AND (("Posting Date" <> LastDate) OR ("Line No." = LastLineNo)) THEN BEGIN
          CASE TRUE OF
            DateBalance <> 0:
              AddError(
                STRSUBSTNO(
                  Text027Txt,
                  LastDate,DateBalance));
            DateBalanceReverse <> 0:
              AddError(
                STRSUBSTNO(
                  Text028Txt,
                  LastDate,DateBalanceReverse));
          END;
          DocBalance := 0;
          DocBalanceReverse := 0;
          DateBalance := 0;
          DateBalanceReverse := 0;
        END;

        IF "Line No." = LastLineNo THEN BEGIN
          CASE TRUE OF
            TotalBalance <> 0:
              AddError(
                STRSUBSTNO(
                  Text029Txt,
                  TotalBalance));
            TotalBalanceReverse <> 0:
              AddError(
                STRSUBSTNO(
                  Text030Txt,
                  TotalBalanceReverse));
          END;
          DocBalance := 0;
          DocBalanceReverse := 0;
          DateBalance := 0;
          DateBalanceReverse := 0;
          TotalBalance := 0;
          TotalBalanceReverse := 0;
          LastDate := 0D;
          LastDocType := 0;
          LastDocNo := '';
        END;
      END;
    END;

    LOCAL PROCEDURE AddError@2(Text@1000 : Text[250]);
    BEGIN
      ErrorCounter := ErrorCounter + 1;
      ErrorText[ErrorCounter] := Text;

      IF DataMigrationError.FINDLAST THEN
        DataMigrationError.Id := DataMigrationError.Id + 1
      ELSE
        DataMigrationError.Id := 1;
      DataMigrationError.INIT;
      DataMigrationError."Migration Type" := GPMigrationTypeTxt;
      DataMigrationError."Error Message" :=
        STRSUBSTNO(PostingErrorTxt,"Gen. Journal Line"."Journal Batch Name","Gen. Journal Line"."Document No.",Text);
      DataMigrationError.INSERT;
    END;

    LOCAL PROCEDURE ReconcileGLAccNo@8(GLAccNo@1000 : Code[20];ReconcileAmount@1001 : Decimal);
    BEGIN
      IF NOT TempGLAccNetChange.GET(GLAccNo) THEN BEGIN
        GLAcc.GET(GLAccNo);
        GLAcc.CALCFIELDS("Balance at Date");
        TempGLAccNetChange.INIT;
        TempGLAccNetChange."No." := GLAcc."No.";
        TempGLAccNetChange.Name := GLAcc.Name;
        TempGLAccNetChange."Balance after Posting" := GLAcc."Balance at Date";
        TempGLAccNetChange.INSERT;
      END;
      TempGLAccNetChange."Net Change in Jnl." := TempGLAccNetChange."Net Change in Jnl." + ReconcileAmount;
      TempGLAccNetChange."Balance after Posting" := TempGLAccNetChange."Balance after Posting" + ReconcileAmount;
      TempGLAccNetChange.MODIFY;
    END;

    LOCAL PROCEDURE CheckGLAcc@4(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT GLAcc.GET("Account No.") THEN
          AddError(
            STRSUBSTNO(
              Text031Txt,
              GLAcc.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := GLAcc.Name;

          IF GLAcc.Blocked THEN
            AddError(
              STRSUBSTNO(
                Text032Txt,
                GLAcc.FIELDCAPTION(Blocked),FALSE,GLAcc.TABLECAPTION,"Account No."));
          IF GLAcc."Account Type" <> GLAcc."Account Type"::Posting THEN BEGIN
            GLAcc."Account Type" := GLAcc."Account Type"::Posting;
            AddError(
              STRSUBSTNO(
                Text032Txt,
                GLAcc.FIELDCAPTION("Account Type"),GLAcc."Account Type",GLAcc.TABLECAPTION,"Account No."));
          END;
          IF NOT "System-Created Entry" THEN
            IF "Posting Date" = NORMALDATE("Posting Date") THEN
              IF NOT GLAcc."Direct Posting" THEN
                AddError(
                  STRSUBSTNO(
                    Text032Txt,
                    GLAcc.FIELDCAPTION("Direct Posting"),TRUE,GLAcc.TABLECAPTION,"Account No."));

          IF "Gen. Posting Type" > 0 THEN BEGIN
            CASE "Gen. Posting Type" OF
              "Gen. Posting Type"::Sale:
                SalesPostingType := TRUE;
              "Gen. Posting Type"::Purchase:
                PurchPostingType := TRUE;
            END;
            TestPostingType;

            IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
              AddError(
                STRSUBSTNO(
                  Text036Txt,
                  VATPostingSetup.TABLECAPTION,"VAT Bus. Posting Group","VAT Prod. Posting Group"))
            ELSE
              IF "VAT Calculation Type" <> VATPostingSetup."VAT Calculation Type" THEN
                AddError(
                  STRSUBSTNO(
                    Text037Txt,
                    FIELDCAPTION("VAT Calculation Type"),VATPostingSetup."VAT Calculation Type"))
          END;

          IF GLAcc."Reconciliation Account" THEN
            ReconcileGLAccNo("Account No.",ROUND("Amount (LCY)" / (1 + "VAT %" / 100)));
        END;
    END;

    LOCAL PROCEDURE CheckCust@9(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT Cust.GET("Account No.") THEN
          AddError(
            STRSUBSTNO(
              Text031Txt,
              Cust.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := Cust.Name;
          IF Cust."Privacy Blocked" THEN
            AddError(Cust.GetPrivacyBlockedGenericErrorText(Cust));
          IF ((Cust.Blocked = Cust.Blocked::All) OR
              ((Cust.Blocked = Cust.Blocked::Invoice) AND
               ("Document Type" IN ["Document Type"::Invoice,"Document Type"::" "]))
              )
          THEN
            AddError(
              STRSUBSTNO(
                Text065Txt,
                "Account Type",Cust.Blocked,FIELDCAPTION("Document Type"),"Document Type"));
          IF "Currency Code" <> '' THEN
            IF NOT Currency.GET("Currency Code") THEN
              AddError(
                STRSUBSTNO(
                  Text038Txt,
                  "Currency Code"));
          IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) THEN
            IF ICPartner.GET(Cust."IC Partner Code") THEN BEGIN
              IF ICPartner.Blocked THEN
                AddError(
                  STRSUBSTNO(
                    '%1 %2',
                    STRSUBSTNO(
                      Text067Txt,
                      Cust.TABLECAPTION,"Account No.",ICPartner.TABLECAPTION,"IC Partner Code"),
                    STRSUBSTNO(
                      Text032Txt,
                      ICPartner.FIELDCAPTION(Blocked),FALSE,ICPartner.TABLECAPTION,Cust."IC Partner Code")));
            END ELSE
              AddError(
                STRSUBSTNO(
                  '%1 %2',
                  STRSUBSTNO(
                    Text067Txt,
                    Cust.TABLECAPTION,"Account No.",ICPartner.TABLECAPTION,Cust."IC Partner Code"),
                  STRSUBSTNO(
                    Text031Txt,
                    ICPartner.TABLECAPTION,Cust."IC Partner Code")));
          CustPosting := TRUE;
          TestPostingType;

          IF "Recurring Method" = 0 THEN
            IF "Document Type" IN
               ["Document Type"::Invoice,"Document Type"::"Credit Memo",
                "Document Type"::"Finance Charge Memo","Document Type"::Reminder]
            THEN BEGIN
              OldCustLedgEntry.RESET;
              OldCustLedgEntry.SETCURRENTKEY("Document No.");
              OldCustLedgEntry.SETRANGE("Document Type","Document Type");
              OldCustLedgEntry.SETRANGE("Document No.","Document No.");
              IF OldCustLedgEntry.FINDFIRST THEN
                AddError(
                  STRSUBSTNO(
                    Text039Txt,"Document Type","Document No."));

              IF SalesSetup."Ext. Doc. No. Mandatory" OR
                 ("External Document No." <> '')
              THEN BEGIN
                IF "External Document No." = '' THEN
                  AddError(
                    STRSUBSTNO(
                      Text041Txt,FIELDCAPTION("External Document No.")));

                OldCustLedgEntry.RESET;
                OldCustLedgEntry.SETCURRENTKEY("External Document No.");
                OldCustLedgEntry.SETRANGE("Document Type","Document Type");
                OldCustLedgEntry.SETRANGE("Customer No.","Account No.");
                OldCustLedgEntry.SETRANGE("External Document No.","External Document No.");
                IF OldCustLedgEntry.FINDFIRST THEN
                  AddError(
                    STRSUBSTNO(
                      Text039Txt,
                      "Document Type","External Document No."));
                CheckAgainstPrevLines("Gen. Journal Line");
              END;
            END;
        END;
    END;

    LOCAL PROCEDURE CheckVend@10(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT Vend.GET("Account No.") THEN
          AddError(
            STRSUBSTNO(
              Text031Txt,
              Vend.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := Vend.Name;
          IF Vend."Privacy Blocked" THEN
            AddError(Vend.GetPrivacyBlockedGenericErrorText(Vend));
          IF ((Vend.Blocked = Vend.Blocked::All) OR
              ((Vend.Blocked = Vend.Blocked::Payment) AND ("Document Type" = "Document Type"::Payment))
              )
          THEN
            AddError(
              STRSUBSTNO(
                Text065Txt,
                "Account Type",Vend.Blocked,FIELDCAPTION("Document Type"),"Document Type"));
          IF "Currency Code" <> '' THEN
            IF NOT Currency.GET("Currency Code") THEN
              AddError(
                STRSUBSTNO(
                  Text038Txt,
                  "Currency Code"));

          IF (Vend."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) THEN
            IF ICPartner.GET(Vend."IC Partner Code") THEN BEGIN
              IF ICPartner.Blocked THEN
                AddError(
                  STRSUBSTNO(
                    '%1 %2',
                    STRSUBSTNO(
                      Text067Txt,
                      Vend.TABLECAPTION,"Account No.",ICPartner.TABLECAPTION,Vend."IC Partner Code"),
                    STRSUBSTNO(
                      Text032Txt,
                      ICPartner.FIELDCAPTION(Blocked),FALSE,ICPartner.TABLECAPTION,Vend."IC Partner Code")));
            END ELSE
              AddError(
                STRSUBSTNO(
                  '%1 %2',
                  STRSUBSTNO(
                    Text067Txt,
                    Vend.TABLECAPTION,"Account No.",ICPartner.TABLECAPTION,"IC Partner Code"),
                  STRSUBSTNO(
                    Text031Txt,
                    ICPartner.TABLECAPTION,Vend."IC Partner Code")));
          VendPosting := TRUE;
          TestPostingType;

          IF "Recurring Method" = 0 THEN
            IF "Document Type" IN
               ["Document Type"::Invoice,"Document Type"::"Credit Memo",
                "Document Type"::"Finance Charge Memo","Document Type"::Reminder]
            THEN BEGIN
              OldVendLedgEntry.RESET;
              OldVendLedgEntry.SETCURRENTKEY("Document No.");
              OldVendLedgEntry.SETRANGE("Document Type","Document Type");
              OldVendLedgEntry.SETRANGE("Document No.","Document No.");
              IF OldVendLedgEntry.FINDFIRST THEN
                AddError(
                  STRSUBSTNO(
                    Text040Txt,
                    "Document Type","Document No."));

              IF PurchSetup."Ext. Doc. No. Mandatory" OR
                 ("External Document No." <> '')
              THEN BEGIN
                IF "External Document No." = '' THEN
                  AddError(
                    STRSUBSTNO(
                      Text041Txt,FIELDCAPTION("External Document No.")));

                OldVendLedgEntry.RESET;
                OldVendLedgEntry.SETCURRENTKEY("External Document No.");
                OldVendLedgEntry.SETRANGE("Document Type","Document Type");
                OldVendLedgEntry.SETRANGE("Vendor No.","Account No.");
                OldVendLedgEntry.SETRANGE("External Document No.","External Document No.");
                IF OldVendLedgEntry.FINDFIRST THEN
                  AddError(
                    STRSUBSTNO(
                      Text040Txt,
                      "Document Type","External Document No."));
                CheckAgainstPrevLines("Gen. Journal Line");
              END;
            END;
        END;
    END;

    LOCAL PROCEDURE CheckEmployee@297(VAR GenJnlLine@1001 : Record 81;VAR AccName@1000 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT Employee.GET("Account No.") THEN
          AddError(STRSUBSTNO(Text031Txt,Employee.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := Employee."No.";
          IF Employee."Privacy Blocked" THEN
            AddError(STRSUBSTNO(Text032Txt,Employee.FIELDCAPTION("Privacy Blocked"),FALSE,Employee.TABLECAPTION,AccName))
        END;
    END;

    LOCAL PROCEDURE CheckBankAcc@11(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT BankAcc.GET("Account No.") THEN
          AddError(
            STRSUBSTNO(
              Text031Txt,
              BankAcc.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := BankAcc.Name;

          IF BankAcc.Blocked THEN
            AddError(
              STRSUBSTNO(
                Text032Txt,
                BankAcc.FIELDCAPTION(Blocked),FALSE,BankAcc.TABLECAPTION,"Account No."));
          IF ("Currency Code" <> BankAcc."Currency Code") AND (BankAcc."Currency Code" <> '') THEN
            AddError(
              STRSUBSTNO(
                Text037Txt,
                FIELDCAPTION("Currency Code"),BankAcc."Currency Code"));

          IF "Currency Code" <> '' THEN
            IF NOT Currency.GET("Currency Code") THEN
              AddError(
                STRSUBSTNO(
                  Text038Txt,
                  "Currency Code"));

          IF "Bank Payment Type" <> 0 THEN
            IF ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND (Amount < 0) THEN
              IF BankAcc."Currency Code" <> "Currency Code" THEN
                AddError(
                  STRSUBSTNO(
                    Text042Txt,
                    FIELDCAPTION("Bank Payment Type"),FIELDCAPTION("Currency Code"),
                    TABLECAPTION,BankAcc.TABLECAPTION));

          IF BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group") THEN
            IF BankAccPostingGr."G/L Bank Account No." <> '' THEN
              ReconcileGLAccNo(
                BankAccPostingGr."G/L Bank Account No.",
                ROUND("Amount (LCY)" / (1 + "VAT %" / 100)));
        END;
    END;

    LOCAL PROCEDURE CheckFixedAsset@23(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT FA.GET("Account No.") THEN
          AddError(
            STRSUBSTNO(
              Text031Txt,
              FA.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := FA.Description;
          IF FA.Blocked THEN
            AddError(
              STRSUBSTNO(
                Text032Txt,
                FA.FIELDCAPTION(Blocked),FALSE,FA.TABLECAPTION,"Account No."));
          IF FA.Inactive THEN
            AddError(
              STRSUBSTNO(
                Text032Txt,
                FA.FIELDCAPTION(Inactive),FALSE,FA.TABLECAPTION,"Account No."));
          IF FA."Budgeted Asset" THEN
            AddError(
              STRSUBSTNO(
                Text043Txt,
                FA.TABLECAPTION,"Account No.",FA.FIELDCAPTION("Budgeted Asset"),TRUE));
          IF DeprBook.GET("Depreciation Book Code") THEN
            CheckFAIntegration(GenJnlLine)
          ELSE
            AddError(
              STRSUBSTNO(
                Text031Txt,
                DeprBook.TABLECAPTION,"Depreciation Book Code"));
          IF NOT FADeprBook.GET(FA."No.","Depreciation Book Code") THEN
            AddError(
              STRSUBSTNO(
                Text036Txt,
                FADeprBook.TABLECAPTION,FA."No.","Depreciation Book Code"));
        END;
    END;

    LOCAL PROCEDURE CheckICPartner@26(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[50]);
    BEGIN
      WITH GenJnlLine DO
        IF NOT ICPartner.GET("Account No.") THEN
          AddError(
            STRSUBSTNO(
              Text031Txt,
              ICPartner.TABLECAPTION,"Account No."))
        ELSE BEGIN
          AccName := ICPartner.Name;
          IF ICPartner.Blocked THEN
            AddError(
              STRSUBSTNO(
                Text032Txt,
                ICPartner.FIELDCAPTION(Blocked),FALSE,ICPartner.TABLECAPTION,"Account No."));
        END;
    END;

    LOCAL PROCEDURE TestFixedAsset@13(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        CheckInitialFAFields(GenJnlLine);
        CheckFADocNo(GenJnlLine);
        CheckAccountTypeFAFields(GenJnlLine);
        CheckBalAccountTypeFAFields(GenJnlLine);
        TempErrorText :=
          '%1 ' +
          STRSUBSTNO(
            Text050Txt,
            FIELDCAPTION("FA Posting Type"),"FA Posting Type");
        IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN BEGIN
          IF "Depr. Acquisition Cost" THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Depr. Acquisition Cost")));
          IF "Salvage Value" <> 0 THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Salvage Value")));
          IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN
            IF Quantity <> 0 THEN
              AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION(Quantity)));
          IF "Insurance No." <> '' THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Insurance No.")));
        END;
        IF ("FA Posting Type" = "FA Posting Type"::Maintenance) AND "Depr. until FA Posting Date" THEN
          AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Depr. until FA Posting Date")));
        IF ("FA Posting Type" <> "FA Posting Type"::Maintenance) AND ("Maintenance Code" <> '') THEN
          AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Maintenance Code")));

        IF ("FA Posting Type" <> "FA Posting Type"::Depreciation) AND
           ("FA Posting Type" <> "FA Posting Type"::"Custom 1") AND
           ("No. of Depreciation Days" <> 0)
        THEN
          AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("No. of Depreciation Days")));

        IF ("FA Posting Type" = "FA Posting Type"::Disposal) AND "FA Reclassification Entry" THEN
          AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("FA Reclassification Entry")));

        IF ("FA Posting Type" = "FA Posting Type"::Disposal) AND ("Budgeted FA No." <> '') THEN
          AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Budgeted FA No.")));

        IF "FA Posting Date" = 0D THEN
          "FA Posting Date" := "Posting Date";
        IF DeprBook.GET("Depreciation Book Code") THEN
          IF DeprBook."Use Same FA+G/L Posting Dates" AND ("Posting Date" <> "FA Posting Date") THEN
            AddError(
              STRSUBSTNO(
                Text051Txt,
                FIELDCAPTION("Posting Date"),FIELDCAPTION("FA Posting Date")));
        CheckPostingDateFAFields(GenJnlLine);
        FASetup.GET;
        IF ("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") AND
           ("Insurance No." <> '') AND ("Depreciation Book Code" <> FASetup."Insurance Depr. Book")
        THEN
          AddError(
            STRSUBSTNO(
              Text054Txt,
              FIELDCAPTION("Depreciation Book Code"),"Depreciation Book Code"));

        IF "FA Error Entry No." > 0 THEN BEGIN
          TempErrorText :=
            '%1 ' +
            STRSUBSTNO(
              Text055Txt,
              FIELDCAPTION("FA Error Entry No."));
          IF "Depr. until FA Posting Date" THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Depr. until FA Posting Date")));
          IF "Depr. Acquisition Cost" THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Depr. Acquisition Cost")));
          IF "Duplicate in Depreciation Book" <> '' THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Duplicate in Depreciation Book")));
          IF "Use Duplication List" THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Use Duplication List")));
          IF "Salvage Value" <> 0 THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Salvage Value")));
          IF "Insurance No." <> '' THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Insurance No.")));
          IF "Budgeted FA No." <> '' THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Budgeted FA No.")));
          IF "Recurring Method" > 0 THEN
            AddError(STRSUBSTNO(TempErrorText,FIELDCAPTION("Recurring Method")));
          IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN
            AddError(STRSUBSTNO(TempErrorText,"FA Posting Type"));
        END;
      END;
    END;

    LOCAL PROCEDURE CheckFAIntegration@12(VAR GenJnlLine@1000 : Record 81);
    VAR
      GLIntegration@1001 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "FA Posting Type" = "FA Posting Type"::" " THEN
          EXIT;
        CASE "FA Posting Type" OF
          "FA Posting Type"::"Acquisition Cost":
            GLIntegration := DeprBook."G/L Integration - Acq. Cost";
          "FA Posting Type"::Depreciation:
            GLIntegration := DeprBook."G/L Integration - Depreciation";
          "FA Posting Type"::"Write-Down":
            GLIntegration := DeprBook."G/L Integration - Write-Down";
          "FA Posting Type"::Appreciation:
            GLIntegration := DeprBook."G/L Integration - Appreciation";
          "FA Posting Type"::"Custom 1":
            GLIntegration := DeprBook."G/L Integration - Custom 1";
          "FA Posting Type"::"Custom 2":
            GLIntegration := DeprBook."G/L Integration - Custom 2";
          "FA Posting Type"::Disposal:
            GLIntegration := DeprBook."G/L Integration - Disposal";
          "FA Posting Type"::Maintenance:
            GLIntegration := DeprBook."G/L Integration - Maintenance";
        END;
        IF NOT GLIntegration THEN
          AddError(
            STRSUBSTNO(
              Text056Txt,
              "FA Posting Type"));

        IF NOT DeprBook."G/L Integration - Depreciation" THEN BEGIN
          IF "Depr. until FA Posting Date" THEN
            AddError(
              STRSUBSTNO(
                Text057Txt,
                FIELDCAPTION("Depr. until FA Posting Date")));
          IF "Depr. Acquisition Cost" THEN
            AddError(
              STRSUBSTNO(
                Text057Txt,
                FIELDCAPTION("Depr. Acquisition Cost")));
        END;
      END;
    END;

    LOCAL PROCEDURE TestFixedAssetFields@14(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "FA Posting Type" <> "FA Posting Type"::" " THEN
          AddError(STRSUBSTNO(Text058Txt,FIELDCAPTION("FA Posting Type")));
        IF "Depreciation Book Code" <> '' THEN
          AddError(STRSUBSTNO(Text058Txt,FIELDCAPTION("Depreciation Book Code")));
      END;
    END;

    PROCEDURE TestPostingType@15();
    BEGIN
      CASE TRUE OF
        CustPosting AND PurchPostingType:
          AddError(Text059Txt);
        VendPosting AND SalesPostingType:
          AddError(Text060Txt);
      END;
    END;

    LOCAL PROCEDURE WarningIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GenJnlLine.Amount < 0) AND NOT AmountError THEN BEGIN
        AmountError := TRUE;
        AddError(STRSUBSTNO(Text007Txt,GenJnlLine.FIELDCAPTION(Amount)));
      END;
    END;

    LOCAL PROCEDURE WarningIfPositiveAmt@16(GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GenJnlLine.Amount > 0) AND NOT AmountError THEN BEGIN
        AmountError := TRUE;
        AddError(STRSUBSTNO(Text006Txt,GenJnlLine.FIELDCAPTION(Amount)));
      END;
    END;

    LOCAL PROCEDURE WarningIfZeroAmt@22(GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GenJnlLine.Amount = 0) AND NOT AmountError THEN BEGIN
        AmountError := TRUE;
        AddError(STRSUBSTNO(Text002Txt,GenJnlLine.FIELDCAPTION(Amount)));
      END;
    END;

    LOCAL PROCEDURE WarningIfNonZeroAmt@24(GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GenJnlLine.Amount <> 0) AND NOT AmountError THEN BEGIN
        AmountError := TRUE;
        AddError(STRSUBSTNO(Text062Txt,GenJnlLine.FIELDCAPTION(Amount)));
      END;
    END;

    LOCAL PROCEDURE CheckAgainstPrevLines@20(GenJnlLine@1000 : Record 81);
    VAR
      i@1001 : Integer;
      AccType@1002 : Integer;
      AccNo@1003 : Code[20];
      ErrorFound@1004 : Boolean;
    BEGIN
      IF (GenJnlLine."External Document No." = '') OR
         NOT (GenJnlLine."Account Type" IN
              [GenJnlLine."Account Type"::Customer,GenJnlLine."Account Type"::Vendor]) AND
         NOT (GenJnlLine."Bal. Account Type" IN
              [GenJnlLine."Bal. Account Type"::Customer,GenJnlLine."Bal. Account Type"::Vendor])
      THEN
        EXIT;

      IF GenJnlLine."Account Type" IN [GenJnlLine."Account Type"::Customer,GenJnlLine."Account Type"::Vendor] THEN BEGIN
        AccType := GenJnlLine."Account Type";
        AccNo := GenJnlLine."Account No.";
      END ELSE BEGIN
        AccType := GenJnlLine."Bal. Account Type";
        AccNo := GenJnlLine."Bal. Account No.";
      END;

      TempGenJnlLine.RESET;
      TempGenJnlLine.SETRANGE("External Document No.",GenJnlLine."External Document No.");

      WHILE (i < 2) AND NOT ErrorFound DO BEGIN
        i := i + 1;
        IF i = 1 THEN BEGIN
          TempGenJnlLine.SETRANGE("Account Type",AccType);
          TempGenJnlLine.SETRANGE("Account No.",AccNo);
          TempGenJnlLine.SETRANGE("Bal. Account Type");
          TempGenJnlLine.SETRANGE("Bal. Account No.");
        END ELSE BEGIN
          TempGenJnlLine.SETRANGE("Account Type");
          TempGenJnlLine.SETRANGE("Account No.");
          TempGenJnlLine.SETRANGE("Bal. Account Type",AccType);
          TempGenJnlLine.SETRANGE("Bal. Account No.",AccNo);
        END;
        IF TempGenJnlLine.FINDFIRST THEN BEGIN
          ErrorFound := TRUE;
          AddError(
            STRSUBSTNO(
              Text064Txt,GenJnlLine.FIELDCAPTION("External Document No."),GenJnlLine."External Document No.",
              TempGenJnlLine."Line No.",GenJnlLine.FIELDCAPTION("Document No."),TempGenJnlLine."Document No."));
        END;
      END;

      TempGenJnlLine.RESET;
      TempGenJnlLine := GenJnlLine;
      TempGenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE CheckICDocument@17();
    VAR
      GenJnlLine4@1000 : Record 81;
      ICGLAccount@1001 : Record 410;
    BEGIN
      WITH "Gen. Journal Line" DO
        IF GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany THEN BEGIN
          IF ("Posting Date" <> LastDate) OR ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo) THEN BEGIN
            GenJnlLine4.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
            GenJnlLine4.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlLine4.SETRANGE("Journal Batch Name","Journal Batch Name");
            GenJnlLine4.SETRANGE("Posting Date","Posting Date");
            GenJnlLine4.SETRANGE("Document No.","Document No.");
            GenJnlLine4.SETFILTER("IC Partner Code",'<>%1','');
            IF GenJnlLine4.FINDFIRST THEN
              CurrentICPartner := GenJnlLine4."IC Partner Code"
            ELSE
              CurrentICPartner := '';
          END;
          IF (CurrentICPartner <> '') AND ("IC Direction" = "IC Direction"::Outgoing) THEN
            IF ("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
               ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
               ("Account No." <> '') AND
               ("Bal. Account No." <> '')
            THEN
              AddError(STRSUBSTNO(Text066Txt,FIELDCAPTION("Account No."),FIELDCAPTION("Bal. Account No.")))
            ELSE BEGIN
              IF (("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND ("Account No." <> '')) XOR
                 (("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
                  ("Bal. Account No." <> ''))
              THEN
                IF "IC Partner G/L Acc. No." = '' THEN
                  AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("IC Partner G/L Acc. No.")))
                ELSE
                  IF ICGLAccount.GET("IC Partner G/L Acc. No.") THEN
                    IF ICGLAccount.Blocked THEN
                      AddError(STRSUBSTNO(Text032Txt,ICGLAccount.FIELDCAPTION(Blocked),FALSE,FIELDCAPTION("IC Partner G/L Acc. No."),
                          "IC Partner G/L Acc. No."));
              IF NOT ((("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
                       ("Account No." <> '')) XOR
                      (("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Account Type"::"Bank Account"]) AND
                       ("Bal. Account No." <> '')))
              THEN
                IF "IC Partner G/L Acc. No." <> '' THEN
                  AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("IC Partner G/L Acc. No.")));
            END
          ELSE
            IF "IC Partner G/L Acc. No." <> '' THEN BEGIN
              IF "IC Direction" = "IC Direction"::Incoming THEN
                AddError(STRSUBSTNO(Text069Txt,FIELDCAPTION("IC Partner G/L Acc. No."),
                    FIELDCAPTION("IC Direction"),FORMAT("IC Direction")));
              IF CurrentICPartner = '' THEN
                AddError(STRSUBSTNO(Text070Txt,FIELDCAPTION("IC Partner G/L Acc. No.")));
            END;
        END;
    END;

    LOCAL PROCEDURE TestJobFields@18(VAR GenJnlLine@1000 : Record 81);
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ("Job No." = '') OR ("Account Type" <> "Account Type"::"G/L Account") THEN
          EXIT;
        IF NOT Job.GET("Job No.") THEN
          AddError(STRSUBSTNO(Text071Txt,Job.TABLECAPTION,"Job No."))
        ELSE
          IF Job.Blocked > Job.Blocked::" " THEN
            AddError(
              STRSUBSTNO(
                Text072Txt,Job.FIELDCAPTION(Blocked),Job.Blocked,Job.TABLECAPTION,"Job No."));

        IF "Job Task No." = '' THEN
          AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Job Task No.")))
        ELSE
          IF NOT JobTask.GET("Job No.","Job Task No.") THEN
            AddError(STRSUBSTNO(Text071Txt,JobTask.TABLECAPTION,"Job Task No."))
      END;
    END;

    LOCAL PROCEDURE CheckFADocNo@19(GenJnlLine@1002 : Record 81);
    VAR
      DeprBook@1005 : Record 5611;
      FAJnlLine@1003 : Record 5621;
      OldFALedgEntry@1001 : Record 5601;
      OldMaintenanceLedgEntry@1000 : Record 5625;
      FANo@1004 : Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Account Type" = "Account Type"::"Fixed Asset" THEN
          FANo := "Account No.";
        IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN
          FANo := "Bal. Account No.";
        IF (FANo = '') OR
           ("FA Posting Type" = "FA Posting Type"::" ") OR
           ("Depreciation Book Code" = '') OR
           ("Document No." = '')
        THEN
          EXIT;
        IF NOT DeprBook.GET("Depreciation Book Code") THEN
          EXIT;
        IF DeprBook."Allow Identical Document No." THEN
          EXIT;

        FAJnlLine."FA Posting Type" := "FA Posting Type" - 1;
        IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN BEGIN
          OldFALedgEntry.SETCURRENTKEY(
            "FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type","Document No.");
          OldFALedgEntry.SETRANGE("FA No.",FANo);
          OldFALedgEntry.SETRANGE("Depreciation Book Code","Depreciation Book Code");
          OldFALedgEntry.SETRANGE("FA Posting Category",OldFALedgEntry."FA Posting Category"::" ");
          OldFALedgEntry.SETRANGE("FA Posting Type",FAJnlLine.ConvertToLedgEntry(FAJnlLine));
          OldFALedgEntry.SETRANGE("Document No.","Document No.");
          IF OldFALedgEntry.FINDFIRST THEN
            AddError(
              STRSUBSTNO(
                Text073Txt,
                FIELDCAPTION("Document No."),"Document No."));
        END ELSE BEGIN
          OldMaintenanceLedgEntry.SETCURRENTKEY(
            "FA No.","Depreciation Book Code","Document No.");
          OldMaintenanceLedgEntry.SETRANGE("FA No.",FANo);
          OldMaintenanceLedgEntry.SETRANGE("Depreciation Book Code","Depreciation Book Code");
          OldMaintenanceLedgEntry.SETRANGE("Document No.","Document No.");
          IF OldMaintenanceLedgEntry.FINDFIRST THEN
            AddError(
              STRSUBSTNO(
                Text073Txt,
                FIELDCAPTION("Document No."),"Document No."));
        END;
      END;
    END;

    PROCEDURE InitializeRequest@21(NewShowDim@1000 : Boolean);
    BEGIN
      ShowDim := NewShowDim;
    END;

    LOCAL PROCEDURE GetDimensionText@25(VAR DimensionSetEntry@1005 : Record 480) : Text[75];
    VAR
      DimensionText@1001 : Text[75];
      Separator@1003 : Code[10];
      DimValue@1002 : Text[45];
    BEGIN
      Separator := '';
      DimValue := '';
      Continue := FALSE;

      REPEAT
        DimValue := STRSUBSTNO('%1 - %2',DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code");
        IF MAXSTRLEN(DimensionText) < STRLEN(DimensionText + Separator + DimValue) THEN BEGIN
          Continue := TRUE;
          EXIT(DimensionText);
        END;
        DimensionText := DimensionText + Separator + DimValue;
        Separator := '; ';
      UNTIL DimSetEntry.NEXT = 0;
      EXIT(DimensionText);
    END;

    LOCAL PROCEDURE CheckAccountTypes@299(AccountType@1000 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee';VAR Name@1001 : Text[50]);
    BEGIN
      CASE AccountType OF
        AccountType::"G/L Account":
          CheckGLAcc("Gen. Journal Line",Name);
        AccountType::Customer:
          CheckCust("Gen. Journal Line",Name);
        AccountType::Vendor:
          CheckVend("Gen. Journal Line",Name);
        AccountType::"Bank Account":
          CheckBankAcc("Gen. Journal Line",Name);
        AccountType::"Fixed Asset":
          CheckFixedAsset("Gen. Journal Line",Name);
        AccountType::"IC Partner":
          CheckICPartner("Gen. Journal Line",Name);
        AccountType::Employee:
          CheckEmployee("Gen. Journal Line",Name);
      END;
    END;

    LOCAL PROCEDURE CheckInitialFAFields@28(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Job No." <> '' THEN
          AddError(
            STRSUBSTNO(
              Text044Txt,FIELDCAPTION("Job No.")));
        IF "FA Posting Type" = "FA Posting Type"::" " THEN
          AddError(
            STRSUBSTNO(
              Text045Txt,FIELDCAPTION("FA Posting Type")));
        IF "Depreciation Book Code" = '' THEN
          AddError(
            STRSUBSTNO(
              Text045Txt,FIELDCAPTION("Depreciation Book Code")));
        IF "Depreciation Book Code" = "Duplicate in Depreciation Book" THEN
          AddError(
            STRSUBSTNO(
              Text046Txt,
              FIELDCAPTION("Depreciation Book Code"),FIELDCAPTION("Duplicate in Depreciation Book")));
      END;
    END;

    LOCAL PROCEDURE CheckPostingDateFAFields@31(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "FA Posting Date" <> 0D THEN BEGIN
          IF "FA Posting Date" <> NORMALDATE("FA Posting Date") THEN
            AddError(
              STRSUBSTNO(
                Text052Txt,
                FIELDCAPTION("FA Posting Date")));
          IF NOT ("FA Posting Date" IN [DMY2DATE(1,1,2)..DMY2DATE(31,12,9998)]) THEN
            AddError(
              STRSUBSTNO(
                Text053Txt,
                FIELDCAPTION("FA Posting Date")));
          IF (AllowFAPostingFrom = 0D) AND (AllowFAPostingTo = 0D) THEN BEGIN
            IF USERID <> '' THEN
              IF UserSetup.GET(USERID) THEN BEGIN
                AllowFAPostingFrom := UserSetup."Allow FA Posting From";
                AllowFAPostingTo := UserSetup."Allow FA Posting To";
              END;
            IF (AllowFAPostingFrom = 0D) AND (AllowFAPostingTo = 0D) THEN BEGIN
              FASetup.GET;
              AllowFAPostingFrom := FASetup."Allow FA Posting From";
              AllowFAPostingTo := FASetup."Allow FA Posting To";
            END;
            IF AllowFAPostingTo = 0D THEN
              AllowFAPostingTo := DMY2DATE(31,12,9998);
          END;
          IF ("FA Posting Date" < AllowFAPostingFrom) OR
             ("FA Posting Date" > AllowFAPostingTo)
          THEN
            AddError(
              STRSUBSTNO(
                Text053Txt,
                FIELDCAPTION("FA Posting Date")));
        END;
    END;

    LOCAL PROCEDURE CheckAccountTypeFAFields@27(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Account Type" = "Bal. Account Type" THEN
          AddError(
            STRSUBSTNO(
              Text047Txt,
              FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"),"Account Type"));
        IF "Account Type" = "Account Type"::"Fixed Asset" THEN
          IF "FA Posting Type" IN
             ["FA Posting Type"::"Acquisition Cost","FA Posting Type"::Disposal,"FA Posting Type"::Maintenance]
          THEN BEGIN
            IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') THEN
              IF "Gen. Posting Type" = "Gen. Posting Type"::" " THEN
                AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Gen. Posting Type")));
          END ELSE BEGIN
            IF "Gen. Posting Type" <> "Gen. Posting Type"::" " THEN
              AddError(
                STRSUBSTNO(
                  Text049Txt,
                  FIELDCAPTION("Gen. Posting Type"),FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
            IF "Gen. Bus. Posting Group" <> '' THEN
              AddError(
                STRSUBSTNO(
                  Text049Txt,
                  FIELDCAPTION("Gen. Bus. Posting Group"),FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
            IF "Gen. Prod. Posting Group" <> '' THEN
              AddError(
                STRSUBSTNO(
                  Text049Txt,
                  FIELDCAPTION("Gen. Prod. Posting Group"),FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
          END;
      END;
    END;

    LOCAL PROCEDURE CheckBalAccountTypeFAFields@30(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN
          IF "FA Posting Type" IN
             ["FA Posting Type"::"Acquisition Cost","FA Posting Type"::Disposal,"FA Posting Type"::Maintenance]
          THEN BEGIN
            IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') THEN
              IF "Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::" " THEN
                AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Bal. Gen. Posting Type")));
          END ELSE BEGIN
            IF "Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" " THEN
              AddError(
                STRSUBSTNO(
                  Text049Txt,
                  FIELDCAPTION("Bal. Gen. Posting Type"),FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
            IF "Bal. Gen. Bus. Posting Group" <> '' THEN
              AddError(
                STRSUBSTNO(
                  Text049Txt,
                  FIELDCAPTION("Bal. Gen. Bus. Posting Group"),FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
            IF "Bal. Gen. Prod. Posting Group" <> '' THEN
              AddError(
                STRSUBSTNO(
                  Text049Txt,
                  FIELDCAPTION("Bal. Gen. Prod. Posting Group"),FIELDCAPTION("FA Posting Type"),"FA Posting Type"));
          END;
    END;

    LOCAL PROCEDURE OnAfterGetGenJnlLineAccount@29(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              BEGIN
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN BEGIN
                  IF "Gen. Posting Type" = 0 THEN
                    AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Gen. Posting Type")));
                END;
                IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                    AddError(
                      STRSUBSTNO(
                        Text003Txt,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                        FIELDCAPTION(Amount)));
                  IF "Currency Code" <> '' THEN
                    IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                      AddError(
                        STRSUBSTNO(
                          Text003Txt,FIELDCAPTION("VAT Amount (LCY)"),
                          FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)")));
                END;
                TestJobFields("Gen. Journal Line");
              END;
            "Account Type"::Customer,"Account Type"::Vendor:
              BEGIN
                IF "Gen. Posting Type" <> 0 THEN
                  AddError(
                    STRSUBSTNO(
                      Text004Txt,
                      FIELDCAPTION("Gen. Posting Type"),FIELDCAPTION("Account Type"),"Account Type"));
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN
                  AddError(
                    STRSUBSTNO(
                      Text005Txt,
                      FIELDCAPTION("Gen. Bus. Posting Group"),FIELDCAPTION("Gen. Prod. Posting Group"),
                      FIELDCAPTION("VAT Bus. Posting Group"),FIELDCAPTION("VAT Prod. Posting Group"),
                      FIELDCAPTION("Account Type"),"Account Type"));

                IF "Document Type" <> 0 THEN BEGIN
                  IF "Account Type" = "Account Type"::Customer THEN
                    CASE "Document Type" OF
                      "Document Type"::"Credit Memo":
                        WarningIfPositiveAmt("Gen. Journal Line");
                      "Document Type"::Payment:
                        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                           ("Applies-to Doc. No." <> '')
                        THEN
                          WarningIfNegativeAmt("Gen. Journal Line")
                        ELSE
                          WarningIfPositiveAmt("Gen. Journal Line");
                      "Document Type"::Refund:
                        WarningIfNegativeAmt("Gen. Journal Line");
                      ELSE
                        WarningIfNegativeAmt("Gen. Journal Line");
                    END
                  ELSE
                    CASE "Document Type" OF
                      "Document Type"::"Credit Memo":
                        WarningIfNegativeAmt("Gen. Journal Line");
                      "Document Type"::Payment:
                        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                           ("Applies-to Doc. No." <> '')
                        THEN
                          WarningIfPositiveAmt("Gen. Journal Line")
                        ELSE
                          WarningIfNegativeAmt("Gen. Journal Line");
                      "Document Type"::Refund:
                        WarningIfPositiveAmt("Gen. Journal Line");
                      ELSE
                        WarningIfPositiveAmt("Gen. Journal Line");
                    END
                END;

                IF Amount * "Sales/Purch. (LCY)" < 0 THEN
                  AddError(
                    STRSUBSTNO(
                      Text008Txt,
                      FIELDCAPTION("Sales/Purch. (LCY)"),FIELDCAPTION(Amount)));
                IF "Job No." <> '' THEN
                  AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Job No.")));
              END;
            "Account Type"::"Bank Account":
              BEGIN
                IF "Gen. Posting Type" <> 0 THEN
                  AddError(
                    STRSUBSTNO(
                      Text004Txt,
                      FIELDCAPTION("Gen. Posting Type"),FIELDCAPTION("Account Type"),"Account Type"));
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN
                  AddError(
                    STRSUBSTNO(
                      Text005Txt,
                      FIELDCAPTION("Gen. Bus. Posting Group"),FIELDCAPTION("Gen. Prod. Posting Group"),
                      FIELDCAPTION("VAT Bus. Posting Group"),FIELDCAPTION("VAT Prod. Posting Group"),
                      FIELDCAPTION("Account Type"),"Account Type"));

                IF "Job No." <> '' THEN
                  AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Job No.")));
                IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  IF NOT "Check Printed" THEN
                    AddError(STRSUBSTNO(Text010Txt,FIELDCAPTION("Check Printed")));
              END;
            "Account Type"::"Fixed Asset":
              TestFixedAsset("Gen. Journal Line");
          END;
    END;

    LOCAL PROCEDURE OnAfterGetGenJnlLineBalanceAccount@34(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "Bal. Account No." <> '' THEN
          CASE "Bal. Account Type" OF
            "Bal. Account Type"::"G/L Account":
              BEGIN
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN BEGIN
                  IF "Bal. Gen. Posting Type" = 0 THEN
                    AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Bal. Gen. Posting Type")));
                END;
                IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                    AddError(
                      STRSUBSTNO(
                        Text011Txt,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                        FIELDCAPTION(Amount)));
                  IF "Currency Code" <> '' THEN
                    IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                      AddError(
                        STRSUBSTNO(
                          Text011Txt,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                          FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)")));
                END;
              END;
            "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor:
              BEGIN
                IF "Bal. Gen. Posting Type" <> 0 THEN
                  AddError(
                    STRSUBSTNO(
                      Text004Txt,
                      FIELDCAPTION("Bal. Gen. Posting Type"),FIELDCAPTION("Bal. Account Type"),"Bal. Account Type"));
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN
                  AddError(
                    STRSUBSTNO(
                      Text005Txt,
                      FIELDCAPTION("Bal. Gen. Bus. Posting Group"),FIELDCAPTION("Bal. Gen. Prod. Posting Group"),
                      FIELDCAPTION("Bal. VAT Bus. Posting Group"),FIELDCAPTION("Bal. VAT Prod. Posting Group"),
                      FIELDCAPTION("Bal. Account Type"),"Bal. Account Type"));

                IF "Document Type" <> 0 THEN BEGIN
                  IF ("Bal. Account Type" = "Bal. Account Type"::Customer) =
                     ("Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"])
                  THEN
                    WarningIfNegativeAmt("Gen. Journal Line")
                  ELSE
                    WarningIfPositiveAmt("Gen. Journal Line")
                END;
                IF Amount * "Sales/Purch. (LCY)" > 0 THEN
                  AddError(
                    STRSUBSTNO(
                      Text012Txt,
                      FIELDCAPTION("Sales/Purch. (LCY)"),FIELDCAPTION(Amount)));
                IF "Job No." <> '' THEN
                  AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Job No.")));
              END;
            "Bal. Account Type"::"Bank Account":
              BEGIN
                IF "Bal. Gen. Posting Type" <> 0 THEN
                  AddError(
                    STRSUBSTNO(
                      Text004Txt,
                      FIELDCAPTION("Bal. Gen. Posting Type"),FIELDCAPTION("Bal. Account Type"),"Bal. Account Type"));
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN
                  AddError(
                    STRSUBSTNO(
                      Text005Txt,
                      FIELDCAPTION("Bal. Gen. Bus. Posting Group"),FIELDCAPTION("Bal. Gen. Prod. Posting Group"),
                      FIELDCAPTION("Bal. VAT Bus. Posting Group"),FIELDCAPTION("Bal. VAT Prod. Posting Group"),
                      FIELDCAPTION("Bal. Account Type"),"Bal. Account Type"));

                IF "Job No." <> '' THEN
                  AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Job No.")));
                IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  IF NOT "Check Printed" THEN
                    AddError(STRSUBSTNO(Text010Txt,FIELDCAPTION("Check Printed")));
              END;
            "Bal. Account Type"::"Fixed Asset":
              TestFixedAsset("Gen. Journal Line");
          END;
    END;

    LOCAL PROCEDURE OnAfterGetGenJnlLinePostingDate@32(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "Posting Date" = 0D THEN
          AddError(STRSUBSTNO(Text002Txt,FIELDCAPTION("Posting Date")))
        ELSE BEGIN
          IF "Posting Date" <> NORMALDATE("Posting Date") THEN
            IF ("Account Type" <> "Account Type"::"G/L Account") OR
               ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
            THEN
              AddError(
                STRSUBSTNO(
                  Text013Txt,FIELDCAPTION("Posting Date")));

          IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
            IF USERID <> '' THEN
              IF UserSetup.GET(USERID) THEN BEGIN
                AllowPostingFrom := UserSetup."Allow Posting From";
                AllowPostingTo := UserSetup."Allow Posting To";
              END;
            IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
              AllowPostingFrom := GLSetup."Allow Posting From";
              AllowPostingTo := GLSetup."Allow Posting To";
            END;
            IF AllowPostingTo = 0D THEN
              AllowPostingTo := DMY2DATE(31,12,9999);
          END;
          IF ("Posting Date" < AllowPostingFrom) OR ("Posting Date" > AllowPostingTo) THEN
            AddError(
              STRSUBSTNO(
                Text014Txt,FORMAT("Posting Date")));

          IF "Gen. Journal Batch"."No. Series" <> '' THEN BEGIN
            IF NoSeries."Date Order" AND ("Posting Date" < LastEntrdDate) THEN
              AddError(Text015Txt);
            LastEntrdDate := "Posting Date";
          END;
        END;
    END;

    LOCAL PROCEDURE OnAfterGetGenJnlLineAccountType@33(VAR GenJnlLine@1000 : Record 81);
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
        THEN
          IF "Applies-to Doc. No." <> '' THEN
            AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Applies-to Doc. No.")));

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Document Type" <> "Document Type"::Invoice)
        THEN BEGIN
          IF NOT PaymentTerms.GET("Payment Terms Code") THEN BEGIN
            IF "Pmt. Discount Date" <> 0D THEN
              AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Pmt. Discount Date")));
            IF "Payment Discount %" <> 0 THEN
              AddError(STRSUBSTNO(Text018Txt,FIELDCAPTION("Payment Discount %")));
          END;

          IF PaymentTerms.GET("Payment Terms Code") THEN
            IF ("Document Type" = "Document Type"::"Credit Memo") AND (NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos") THEN BEGIN
              IF "Pmt. Discount Date" <> 0D THEN
                AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Pmt. Discount Date")));
              IF "Payment Discount %" <> 0 THEN
                AddError(STRSUBSTNO(Text018Txt,FIELDCAPTION("Payment Discount %")));
            END;
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Applies-to Doc. No." <> '')
        THEN
          IF "Applies-to ID" <> '' THEN
            AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Applies-to ID")));

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          IF GenJnlLine2."Bank Payment Type" > 0 THEN
            AddError(STRSUBSTNO(Text009Txt,FIELDCAPTION("Bank Payment Type")));
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

