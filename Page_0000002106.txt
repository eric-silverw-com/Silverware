OBJECT Page 2106 O365 Item Card
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:45 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Price;
    SourceTable=Table27;
    DataCaptionExpr=Description;
    PageType=Card;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Item,History,Special Prices & Discounts,Approve,Request Approval,Details;
    OnInit=VAR
             O365SalesInitialSetup@6115 : Record 2110;
           BEGIN
             IsUsingVAT := O365SalesInitialSetup.IsUsingVAT;
             IsPhoneApp := ClientTypeManagement.IsPhoneClientType;
           END;

    OnOpenPage=BEGIN
                 IF Description = '' THEN
                   ItemCardStatus := ItemCardStatus::Delete
                 ELSE
                   ItemCardStatus := ItemCardStatus::Keep;
               END;

    OnNewRecord=BEGIN
                  OnNewRec;
                END;

    OnInsertRecord=BEGIN
                     IF Description = '' THEN
                       ItemCardStatus := ItemCardStatus::Delete
                     ELSE
                       ItemCardStatus := ItemCardStatus::Keep;

                     EXIT(TRUE);
                   END;

    OnModifyRecord=BEGIN
                     IF Description = '' THEN
                       ItemCardStatus := ItemCardStatus::Prompt
                     ELSE
                       ItemCardStatus := ItemCardStatus::Keep;

                     EXIT(TRUE);
                   END;

    OnQueryClosePage=BEGIN
                       EXIT(CanExitAfterProcessingItem);
                     END;

    OnAfterGetCurrRecord=VAR
                           VATProductPostingGroup@1000 : Record 324;
                           UnitOfMeasure@1001 : Record 204;
                         BEGIN
                           CreateItemFromTemplate;
                           IF VATProductPostingGroup.GET("VAT Prod. Posting Group") THEN
                             VATProductPostingGroupDescription := VATProductPostingGroup.Description;
                           IF UnitOfMeasure.GET("Base Unit of Measure") THEN
                             UnitOfMeasureDescription := UnitOfMeasure.GetDescriptionInCurrentLanguage;
                           IsPageEditable := CurrPage.EDITABLE;
                         END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Item;
                CaptionML=ENU=Price;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=Description2;
                ToolTipML=ENU=Specifies what you are selling.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Description;
                Visible=NOT IsPhoneApp }

    { 4   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies what you are selling.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Description;
                Visible=IsPhoneApp;
                ShowCaption=No }

    { 38  ;2   ;Field     ;
                CaptionML=ENU=Price;
                ToolTipML=ENU=Specifies the price for one unit.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Unit Price" }

    { 30  ;1   ;Group     ;
                CaptionML=ENU=Details;
                GroupType=Group }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=Price is per;
                ToolTipML=ENU=Specifies the price for one unit.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=UnitOfMeasureDescription;
                Editable=IsPageEditable;
                OnLookup=VAR
                           TempUnitOfMeasure@1000 : TEMPORARY Record 204;
                         BEGIN
                           TempUnitOfMeasure.CreateListInCurrentLanguage(TempUnitOfMeasure);
                           IF PAGE.RUNMODAL(PAGE::"O365 Units of Measure List",TempUnitOfMeasure) = ACTION::LookupOK THEN BEGIN
                             VALIDATE("Base Unit of Measure",TempUnitOfMeasure.Code);
                             UnitOfMeasureDescription := TempUnitOfMeasure.Description;
                           END;
                         END;

                QuickEntry=FALSE }

    { 8   ;2   ;Field     ;
                Name=Taxable;
                CaptionML=ENU=Add sales tax;
                ToolTipML=ENU=Specifies the tax group code for the tax-detail entry.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                NotBlank=Yes;
                SourceExpr=Taxable;
                Visible=NOT IsUsingVAT;
                Editable=IsPageEditable;
                OnValidate=VAR
                             TaxSetup@1020000 : Record 326;
                             TaxGroup@1020001 : Record 321;
                           BEGIN
                             IF TaxSetup.GET AND (TaxSetup."Non-Taxable Tax Group Code" <> '') THEN BEGIN
                               IF Taxable THEN
                                 TaxGroup.SETFILTER(Code,'<>%1',TaxSetup."Non-Taxable Tax Group Code")
                               ELSE
                                 TaxGroup.SETFILTER(Code,'%1',TaxSetup."Non-Taxable Tax Group Code")
                             END;
                             IF TaxGroup.FINDFIRST THEN
                               VALIDATE("Tax Group Code",TaxGroup.Code);
                           END;

                ShowMandatory=TRUE }

    { 13  ;2   ;Field     ;
                CaptionML=ENU=Tax;
                ToolTipML=ENU=Specifies the tax rate for this price.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                NotBlank=Yes;
                SourceExpr=VATProductPostingGroupDescription;
                Visible=IsUsingVAT;
                Editable=IsPageEditable;
                OnLookup=VAR
                           VATProductPostingGroup@1000 : Record 324;
                         BEGIN
                           IF PAGE.RUNMODAL(PAGE::"O365 VAT Product Posting Gr.",VATProductPostingGroup) = ACTION::LookupOK THEN BEGIN
                             VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup.Code);
                             VATProductPostingGroupDescription := VATProductPostingGroup.Description;
                           END;
                         END;

                QuickEntry=FALSE }

  }
  CODE
  {
    VAR
      ClientTypeManagement@1007 : Codeunit 4;
      ItemCardStatus@1000 : 'Keep,Delete,Prompt';
      ProcessNewItemOptionQst@1002 : TextConst 'ENU=Keep editing,Discard';
      ProcessNewItemInstructionTxt@1001 : TextConst 'ENU=Description is missing. Keep the price?';
      VATProductPostingGroupDescription@1027 : Text[50];
      NewMode@1006 : Boolean;
      IsUsingVAT@6115 : Boolean;
      Taxable@1020000 : Boolean;
      IsPageEditable@1003 : Boolean;
      UnitOfMeasureDescription@1004 : Text[10];
      IsPhoneApp@1005 : Boolean;

    LOCAL PROCEDURE OnNewRec@16();
    VAR
      DocumentNoVisibility@1000 : Codeunit 1400;
    BEGIN
      IF GUIALLOWED AND DocumentNoVisibility.ItemNoSeriesIsDefault THEN
        NewMode := TRUE;
    END;

    LOCAL PROCEDURE CanExitAfterProcessingItem@2() : Boolean;
    VAR
      Response@1000 : ',KeepEditing,Discard';
    BEGIN
      IF "No." = '' THEN
        EXIT(TRUE);

      IF ItemCardStatus = ItemCardStatus::Delete THEN BEGIN
        // workaround for bug: delete for new empty record returns false
        IF DELETE(TRUE) THEN;
        EXIT(TRUE);
      END;

      IF GUIALLOWED AND (ItemCardStatus = ItemCardStatus::Prompt) THEN
        CASE STRMENU(ProcessNewItemOptionQst,Response::KeepEditing,ProcessNewItemInstructionTxt) OF
          Response::Discard:
            EXIT(DELETE(TRUE));
          ELSE
            EXIT(FALSE);
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateItemFromTemplate@3();
    VAR
      ItemTemplate@1001 : Record 1301;
      Item@1000 : Record 27;
      TaxSetup@1020000 : Record 326;
      O365SalesManagement@1002 : Codeunit 2107;
    BEGIN
      IF NewMode THEN BEGIN
        IF ItemTemplate.NewItemFromTemplate(Item) THEN BEGIN
          COPY(Item);
          O365SalesManagement.SetItemDefaultValues(Item);
          CurrPage.UPDATE;
        END;
        ItemCardStatus := ItemCardStatus::Delete;
        NewMode := FALSE;
      END;
      IF TaxSetup.GET THEN
        Taxable := "Tax Group Code" <> TaxSetup."Non-Taxable Tax Group Code";
    END;

    BEGIN
    END.
  }
}

