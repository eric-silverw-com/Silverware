OBJECT Table 1432 Net Promoter Score Setup
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:14:31 PM;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=Net Promoter Score Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;API URL             ;BLOB          ;CaptionML=ENU=API URL }
    { 3   ;   ;Expire Time         ;DateTime      ;CaptionML=ENU=Expire Time }
    { 4   ;   ;Time Between Requests;Integer      ;ObsoleteState=Removed;
                                                   ObsoleteReason=This field is not needed and it is not used anymore.;
                                                   CaptionML=ENU=Time Between Requests }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NpsApiUrlTxt@1002 : TextConst '@@@={Locked};ENU=NpsApiUrl';
      NpsCacheLifeTimeTxt@1001 : TextConst '@@@={Locked};ENU=NpsCacheLifeTime';

    PROCEDURE GetApiUrl@2() : Text;
    VAR
      InStream@1000 : InStream;
      ApiUrl@1001 : Text;
    BEGIN
      SetApiUrl;

      IF NOT GET THEN
        EXIT('');

      ApiUrl := '';
      CALCFIELDS("API URL");
      IF "API URL".HASVALUE THEN BEGIN
        "API URL".CREATEINSTREAM(InStream);
        InStream.READ(ApiUrl);
      END;
      EXIT(ApiUrl);
    END;

    LOCAL PROCEDURE SetApiUrl@8();
    VAR
      AzureKeyVaultManagement@1001 : Codeunit 2200;
      OutStream@1005 : OutStream;
      ApiUrl@1003 : Text;
      CacheLifeTime@1006 : Integer;
    BEGIN
      IF GET THEN
        IF CURRENTDATETIME < "Expire Time" THEN
          EXIT;

      CacheLifeTime := MinCacheLifeTime;
      IF AzureKeyVaultManagement.IsEnable THEN
        IF AzureKeyVaultManagement.GetAzureKeyVaultSecret(ApiUrl,NpsApiUrlTxt) THEN
          CacheLifeTime := GetCacheLifeTime;

      LOCKTABLE;

      IF NOT GET THEN BEGIN
        INIT;
        "Primary Key" := '';
        INSERT;
      END;

      IF ApiUrl = '' THEN
        CLEAR("API URL")
      ELSE BEGIN
        "API URL".CREATEOUTSTREAM(OutStream);
        OutStream.WRITE(ApiUrl);
      END;
      "Expire Time" := CURRENTDATETIME + CacheLifeTime * MillisecondsInMinute;
      MODIFY;

      COMMIT;
    END;

    LOCAL PROCEDURE GetCacheLifeTime@9() : Integer;
    VAR
      AzureKeyVaultManagement@1001 : Codeunit 2200;
      CacheLifeTimeValue@1004 : Text;
      CacheLifeTimeNumber@1008 : Integer;
    BEGIN
      IF AzureKeyVaultManagement.GetAzureKeyVaultSecret(CacheLifeTimeValue,NpsCacheLifeTimeTxt) THEN
        IF EVALUATE(CacheLifeTimeNumber,CacheLifeTimeValue) THEN BEGIN
          IF CacheLifeTimeNumber < MinCacheLifeTime THEN
            CacheLifeTimeNumber := MinCacheLifeTime;
          EXIT(CacheLifeTimeNumber);
        END;
      EXIT(MinCacheLifeTime);
    END;

    LOCAL PROCEDURE MinCacheLifeTime@4() : Integer;
    BEGIN
      EXIT(1); // one minute
    END;

    LOCAL PROCEDURE MillisecondsInMinute@24() : Integer;
    BEGIN
      EXIT(60000);
    END;

    BEGIN
    END.
  }
}

