OBJECT Table 2103 O365 Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=O365 Sales Document;
               ESM=Documento de ventas de O365;
               FRC=Document vente O365;
               ENC=O365 Sales Document];
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESM=Tipo de documento;
                                                              FRC=Type document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESM=Cotizaci¢n,Pedido,Factura,Nota crÇdito,Pedido abierto,Devoluci¢n;
                                                                    FRC=Devis,Commande,Facture,Note de crÇdit,Commande ouverte,Retour;
                                                                    ENC=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ESM=Venta a-N.ß cliente;
                                                              FRC=N¯ dÇbiteur;
                                                              ENC=Sell-to Customer No.] }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ESM=N.ß;
                                                              FRC=N¯;
                                                              ENC=No.] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESM=Fecha vencimiento;
                                                              FRC=Date d'ÇchÇance;
                                                              ENC=Due Date] }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESM=C¢d. divisa;
                                                              FRC=Code devise;
                                                              ENC=Currency Code] }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Customer Name;
                                                              ESM=Venta a-Nombre;
                                                              FRC=Nom du dÇbiteur;
                                                              ENC=Sell-to Customer Name] }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=[ENU=Sell-to Contact;
                                                              ESM=Venta a-Atenci¢n;
                                                              FRC=Contact dÇbiteur;
                                                              ENC=Sell-to Contact] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ESM=Fecha emisi¢n documento;
                                                              FRC=Date document;
                                                              ENC=Document Date] }
    { 166 ;   ;Last Email Sent Time;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Max("O365 Document Sent History"."Created Date-Time" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(No.),
                                                                                                                           Posted=FIELD(Posted)));
                                                   CaptionML=[ENU=Last Email Sent Time;
                                                              ESM=Hora del £ltimo correo electr¢nico enviado;
                                                              FRC=Heure d'envoi du dernier courriel;
                                                              ENC=Last Email Sent Time] }
    { 167 ;   ;Last Email Sent Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History"."Job Last Status" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(No.),
                                                                                                                            Posted=FIELD(Posted),
                                                                                                                            Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=[ENU=Last Email Sent Status;
                                                              ESM=Estado del £ltimo correo electr¢nico enviado;
                                                              FRC=êtat de l'envoi du dernier courriel;
                                                              ENC=Last Email Sent Status];
                                                   OptionCaptionML=[ENU=Not Sent,In Process,Finished,Error;
                                                                    ESM=No enviado,En proceso,Finalizado,Error;
                                                                    FRC=Non envoyÇ,En cours,TerminÇ,Erreur;
                                                                    ENC=Not Sent,In Process,Finished,Error];
                                                   OptionString=Not Sent,In Process,Finished,Error }
    { 168 ;   ;Sent as Email       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("O365 Document Sent History" WHERE (Document Type=FIELD(Document Type),
                                                                                                         Document No.=FIELD(No.),
                                                                                                         Posted=FIELD(Posted),
                                                                                                         Job Last Status=CONST(Finished)));
                                                   CaptionML=[ENU=Sent as Email;
                                                              ESM=Enviado como correo electr¢nico;
                                                              FRC=EnvoyÇ en tant que courriel;
                                                              ENC=Sent as Email] }
    { 169 ;   ;Last Email Notif Cleared;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History".NotificationCleared WHERE (Document Type=FIELD(Document Type),
                                                                                                                              Document No.=FIELD(No.),
                                                                                                                              Posted=FIELD(Posted),
                                                                                                                              Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=[ENU=Last Email Notif Cleared;
                                                              ESM=Èltima notif. correo electr¢nico borrada;
                                                              FRC=Derniäre notification par courriel effacÇe;
                                                              ENC=Last Email Notif Cleared] }
    { 170 ;   ;IsTest              ;Boolean       ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=IsTest;
                                                              ESM=IsTest;
                                                              FRC=IsTest;
                                                              ENC=IsTest];
                                                   Editable=No }
    { 2100;   ;Posted              ;Boolean       ;CaptionML=[ENU=Posted;
                                                              ESM=Registrado;
                                                              FRC=ReportÇ;
                                                              ENC=Posted] }
    { 2101;   ;Canceled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(112),
                                                                                                 Cancelled Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Canceled;
                                                              ESM=Cancelado;
                                                              FRC=AnnulÇ;
                                                              ENC=Cancelled] }
    { 2102;   ;Currency Symbol     ;Text10        ;CaptionML=[ENU=Currency Symbol;
                                                              ESM=S°mbolo de divisa;
                                                              FRC=Symbole devise;
                                                              ENC=Currency Symbol] }
    { 2103;   ;Document Status     ;Option        ;CaptionML=[ENU=Document Status;
                                                              ESM=Estado documento;
                                                              FRC=êtat document;
                                                              ENC=Document Status];
                                                   OptionCaptionML=[ENU=Quote,Draft Invoice,Unpaid Invoice,Canceled Invoice,Paid Invoice,Overdue Invoice;
                                                                    ESM=Cotizaci¢n,Borrador de factura,Factura sin pagar,Factura cancelada,Factura pagada,Factura vencida;
                                                                    FRC=Devis,Facture provisoire,Facture impayÇe,Facture annulÇe,Facture payÇe,Facture Çchue;
                                                                    ENC=Quote,Draft Invoice,Unpaid Invoice,Cancelled Invoice,Paid Invoice,Overdue Invoice];
                                                   OptionString=Quote,Draft Invoice,Unpaid Invoice,Canceled Invoice,Paid Invoice,Overdue Invoice }
    { 2104;   ;Sales Amount        ;Decimal       ;CaptionML=[ENU=Sales Amount;
                                                              ESM=Importe ventas;
                                                              FRC=Montant vente;
                                                              ENC=Sales Amount] }
    { 2105;   ;Outstanding Amount  ;Decimal       ;CaptionML=[ENU=Outstanding Amount;
                                                              ESM=Importe pendiente;
                                                              FRC=Montant en commande;
                                                              ENC=Outstanding Amount] }
    { 2106;   ;Total Invoiced Amount;Text250      ;CaptionML=[ENU=Total Invoiced Amount;
                                                              ESM=Importe facturado total;
                                                              FRC=Montant total facturÇ;
                                                              ENC=Total Invoiced Amount] }
    { 2107;   ;Outstanding Status  ;Text250       ;CaptionML=[ENU=Outstanding Status;
                                                              ESM=Estado pendiente;
                                                              FRC=êtat en suspens;
                                                              ENC=Outstanding Status] }
    { 2108;   ;Document Icon       ;MediaSet      ;ObsoleteState=Pending;
                                                   ObsoleteReason=We no longer show a document icon.;
                                                   CaptionML=[ENU=Document Icon;
                                                              ESM=Icono de documento;
                                                              FRC=Icìne document;
                                                              ENC=Document Icon] }
    { 2109;   ;Payment Method      ;Code10        ;TableRelation="Payment Method" WHERE (Use for Invoicing=CONST(Yes));
                                                   CaptionML=[ENU=Payment Method;
                                                              ESM=Forma pago;
                                                              FRC=Mode de räglement;
                                                              ENC=Payment Method] }
    { 2110;   ;Display No.         ;Text20        ;CaptionML=[ENU=Display No.;
                                                              ESM=Mostrar nß;
                                                              FRC=N¯ affichage;
                                                              ENC=Display No.] }
    { 2111;   ;Quote Valid Until Date;Date        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Valid Until Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                                     No.=FIELD(No.)));
                                                   CaptionML=[ENU=Quote Valid Until Date;
                                                              ESM=Cotizaci¢n v†lida hasta fecha;
                                                              FRC=Devis valide jusqu'Ö;
                                                              ENC=Quote Valid Until Date] }
    { 2112;   ;Quote Accepted      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Accepted" WHERE (Document Type=FIELD(Document Type),
                                                                                                             No.=FIELD(No.)));
                                                   CaptionML=[ENU=Quote Accepted;
                                                              ESM=Cotizaci¢n aceptada;
                                                              FRC=Devis acceptÇ;
                                                              ENC=Quote Accepted] }
    { 2113;   ;Quote Sent to Customer;DateTime    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Sent to Customer" WHERE (Document Type=FIELD(Document Type),
                                                                                                                     No.=FIELD(No.)));
                                                   CaptionML=[ENU=Quote Sent to Customer;
                                                              ESM=Cotizaci¢n enviada al cliente;
                                                              FRC=Devis envoyÇ au client;
                                                              ENC=Quote Sent to Customer] }
    { 2114;   ;Quote Accepted Date ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Accepted Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.)));
                                                   CaptionML=[ENU=Quote Accepted Date;
                                                              ESM=Fecha de cotizaci¢n aceptada;
                                                              FRC=Date d'acceptation du devis;
                                                              ENC=Quote Accepted Date] }
  }
  KEYS
  {
    {    ;Document Type,No.,Posted                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Document Date,Sell-to Customer Name,Total Invoiced Amount,Display No.,Outstanding Status }
  }
  CODE
  {
    VAR
      OverdueTxt@1006 : TextConst 'ENU=Overdue;ESM=Vencido;FRC=êchu;ENC=Overdue';
      AmountTxt@1004 : TextConst '@@@="%1=Currency symbol %2= amount";ENU=%1%2;ESM=%2ˇ%1;FRC=%1%2;ENC=%1%2';
      FormatTxt@1013 : TextConst '@@@={LOCKED} Do not translate;ENU=<Precision,2:2><Standard Format,0>;ESM=<Precision,2:2><Standard Format,0>;FRC=<Precision,2:2><Standard Format,0>;ENC=<Precision,2:2><Standard Format,0>';
      PaidTxt@1005 : TextConst 'ENU=Paid;ESM=Pagado;FRC=PayÇ;ENC=Paid';
      CanceledTxt@1007 : TextConst 'ENU=Canceled;ESM=Cancelado;FRC=AnnulÇ;ENC=Cancelled';
      SortByDueDate@1008 : Boolean;
      DraftTxt@1014 : TextConst 'ENU=Draft;ESM=Borrador;FRC=Brouillon;ENC=Draft';
      DisplayNoLbl@1015 : TextConst '@@@="%1 = The posted invoice number";ENU=No. %1;ESM=Nß %1;FRC=N¯ %1;ENC=No. %1';
      SentTxt@1016 : TextConst '@@@="%1 = date";ENU=Sent %1;ESM=%1 enviado;FRC=EnvoyÇ %1;ENC=Sent %1';
      AcceptedTxt@1017 : TextConst '@@@="%1 = date";ENU=Accepted %1;ESM=%1 aceptado;FRC=AcceptÇ %1;ENC=Accepted %1';
      ExpiredTxt@1018 : TextConst 'ENU=Expired;ESM=Expirado;FRC=ExpirÇ;ENC=Expired';
      InvoiceSentTxt@1022 : TextConst 'ENU=Sent;ESM=Enviado;FRC=EnvoyÇ;ENC=Sent';
      HideInvoices@1000 : Boolean;
      TestTxt@1070 : TextConst 'ENU=Test;ESM=Examinar;FRC=Test;ENC=Test';
      InvoiceFailedTxt@1001 : TextConst 'ENU=Error;ESM=Error;FRC=Erreur;ENC=Error';

    [External]
    PROCEDURE UpdateFields@1();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      "Currency Symbol" := Currency.ResolveGLCurrencySymbol("Currency Code");

      IF Posted THEN
        GetAmountsPosted
      ELSE
        GetAmountsUnposted;

      IF "Document Type" = "Document Type"::Quote THEN
        CALCFIELDS("Quote Accepted","Quote Valid Until Date","Quote Sent to Customer","Quote Accepted Date");

      AssignDocumentStatus;
      SetBrickStatus;
      SetDisplayNo;
    END;

    LOCAL PROCEDURE AssignDocumentStatus@4();
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          BEGIN
            CASE TRUE OF
              "Quote Accepted":
                "Document Status" := "Document Status"::"Paid Invoice";
              QuoteIsExpired:
                "Document Status" := "Document Status"::"Canceled Invoice";
              "Quote Sent to Customer" <> 0DT:
                "Document Status" := "Document Status"::"Unpaid Invoice";
              ELSE
                "Document Status" := "Document Status"::"Draft Invoice";
            END;
            EXIT;
          END;
        "Document Type"::Invoice:
          CALCFIELDS(Canceled);
        ELSE
          EXIT;
      END;

      IF NOT Posted THEN BEGIN
        "Document Status" := "Document Status"::"Draft Invoice";
        EXIT;
      END;

      IF Canceled THEN BEGIN
        "Document Status" := "Document Status"::"Canceled Invoice";
        EXIT;
      END;

      IF "Outstanding Amount" <= 0 THEN BEGIN
        "Document Status" := "Document Status"::"Paid Invoice";
        EXIT;
      END;

      IF IsOverduePostedInvoice THEN BEGIN
        "Document Status" := "Document Status"::"Overdue Invoice";
        EXIT;
      END;

      "Document Status" := "Document Status"::"Unpaid Invoice";
    END;

    PROCEDURE IsOverduePostedInvoice@7() : Boolean;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.","Sell-to Customer No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.","No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      EXIT(NOT CustLedgerEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetAmountsUnposted@6();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET("Document Type","No.");
      SalesHeader.CALCFIELDS("Amount Including VAT");
      "Sales Amount" := SalesHeader."Amount Including VAT";
      "Payment Method" := SalesHeader."Payment Method Code";
    END;

    LOCAL PROCEDURE GetAmountsPosted@8();
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET("No.");
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT","Remaining Amount");
      "Sales Amount" := SalesInvoiceHeader."Amount Including VAT";
      "Outstanding Amount" := SalesInvoiceHeader."Remaining Amount";
      "Payment Method" := SalesInvoiceHeader."Payment Method Code";
    END;

    LOCAL PROCEDURE SetBrickStatus@10();
    BEGIN
      CALCFIELDS("Last Email Sent Time","Last Email Sent Status");

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        SetQuoteBrickStatus;
        EXIT;
      END;

      IF NOT Posted THEN BEGIN
        SetDraftInvoiceBrickStatus;
        EXIT;
      END;

      SetPostedDocumentBrickStatus;
    END;

    LOCAL PROCEDURE SetQuoteBrickStatus@30();
    VAR
      DummyZeroDateTime@1000 : DateTime;
    BEGIN
      CALCFIELDS("Last Email Sent Time","Last Email Sent Status");
      CASE TRUE OF
        "Quote Accepted":
          BEGIN
            "Outstanding Status" := STRSUBSTNO(AcceptedTxt,"Quote Accepted Date");
            "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          END;
        QuoteIsExpired:
          BEGIN
            "Outstanding Status" := ExpiredTxt;
            "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          END;
        "Last Email Sent Status" = "Last Email Sent Status"::Error:
          "Outstanding Status" := InvoiceFailedTxt;
        "Quote Sent to Customer" <> DummyZeroDateTime:
          BEGIN
            "Outstanding Status" := STRSUBSTNO(SentTxt,DT2DATE("Quote Sent to Customer"));
            "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          END;
        ELSE BEGIN
          "Outstanding Status" := DraftTxt;
          "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
        END;
      END;
    END;

    LOCAL PROCEDURE SetPostedDocumentBrickStatus@31();
    BEGIN
      "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
      IF "Outstanding Amount" <= 0 THEN BEGIN
        CALCFIELDS(Canceled);
        IF Canceled THEN
          "Outstanding Status" := CanceledTxt
        ELSE
          "Outstanding Status" := PaidTxt;
        EXIT;
      END;

      CALCFIELDS("Last Email Sent Time","Last Email Sent Status");
      CASE TRUE OF
        "Last Email Sent Status" = "Last Email Sent Status"::Error:
          "Outstanding Status" := InvoiceFailedTxt;
        IsOverduePostedInvoice:
          "Outstanding Status" := OverdueTxt;
        ELSE
          "Outstanding Status" := InvoiceSentTxt;
      END;
    END;

    LOCAL PROCEDURE SetDraftInvoiceBrickStatus@32();
    BEGIN
      "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));

      IF IsTest THEN
        "Outstanding Status" := TestTxt
      ELSE
        "Outstanding Status" := DraftTxt;
    END;

    LOCAL PROCEDURE SetDisplayNo@25();
    VAR
      CandidateDisplayNo@1000 : Text;
    BEGIN
      IF Posted THEN BEGIN
        CandidateDisplayNo := STRSUBSTNO(DisplayNoLbl,"No.");
        IF STRLEN(CandidateDisplayNo) <= MAXSTRLEN("Display No.") THEN
          "Display No." := COPYSTR(CandidateDisplayNo,1,MAXSTRLEN("Display No."))
        ELSE
          "Display No." := "No.";
      END ELSE
        CASE "Document Type" OF
          "Document Type"::Invoice:
            "Display No." := DraftTxt;
          "Document Type"::Quote:
            "Display No." := "No.";
          ELSE
            "Display No." := '';
        END;
    END;

    [External]
    PROCEDURE OnFind@5(Which@1000 : Text) : Boolean;
    VAR
      FilterPosted@1001 : Boolean;
    BEGIN
      CASE Which OF
        '+':
          Posted := TRUE; // Get last posted invoice
        '-':
          Posted := FALSE; // Get first sales header
        ELSE
          IF HasPostedFilter(FilterPosted) THEN
            Posted := Posted OR FilterPosted;
      END;

      IF Posted THEN
        EXIT(FindPostedDocument(Which));

      EXIT(FindUnpostedDocument(Which));
    END;

    [External]
    PROCEDURE OnNext@9(Steps@1000 : Integer) : Integer;
    VAR
      SalesInvoiceHeader@1005 : Record 112;
      SalesHeaderResults@1004 : Integer;
      SalesInvoiceHeaderResults@1003 : Integer;
      StepOffset@1002 : Integer;
      FilterPosted@1001 : Boolean;
    BEGIN
      IF NOT HideInvoices THEN
        SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);

      IF NOT Posted THEN BEGIN // Look for more Sales Headers
        SalesHeaderResults := GetNextUnpostedDocument(Steps);
        IF SalesHeaderResults <> 0 THEN
          EXIT(SalesHeaderResults);

        IF Steps < 0 THEN // No more sales headers and we are moving "back"
          EXIT(SalesHeaderResults); // therefore, no more recs, so this means we are done

        // No more sales headers, but we are moving forward so move on to sales invoice headers below
        IF NOT SalesInvoiceHeader.FINDSET THEN
          EXIT(0);

        StepOffset += 1; // need to adjust for one step that we did with FINDSET
      END ELSE
        SalesInvoiceHeader.TRANSFERFIELDS(Rec); // Continue from current posted doc

      IF HasPostedFilter(FilterPosted) AND (NOT FilterPosted) THEN
        EXIT(GetPreviousUnpostedDocument(Steps));

      IF NOT HideInvoices THEN BEGIN
        SalesInvoiceHeaderResults := SalesInvoiceHeader.NEXT(Steps - StepOffset);
        IF (SalesInvoiceHeaderResults + StepOffset) <> 0 THEN BEGIN
          SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
          EXIT(SalesInvoiceHeaderResults + StepOffset);
        END;
      END;

      EXIT(GetPreviousUnpostedDocument(Steps));
    END;

    LOCAL PROCEDURE SetSalesHeaderFilters@22(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SetSalesHeaderKey(SalesHeader);

      CopySalesHeaderFilters(SalesHeader);

      FILTERGROUP(-1);
      IF GETFILTER("Sell-to Customer Name") <> '' THEN BEGIN
        SalesHeader.FILTERGROUP(-1);
        CopySalesHeaderFilters(SalesHeader);
        SalesHeader.FILTERGROUP(0);
      END;
      FILTERGROUP(0);

      SalesHeader.TRANSFERFIELDS(Rec);
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderFilters@19(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      SetSalesInvoiceHeaderKey(SalesInvoiceHeader);

      CopySalesInvoiceHeaderFilters(SalesInvoiceHeader);

      FILTERGROUP(-1);
      IF GETFILTER("Sell-to Customer Name") <> '' THEN BEGIN
        SalesInvoiceHeader.FILTERGROUP(-1);
        CopySalesInvoiceHeaderFilters(SalesInvoiceHeader);
        SalesInvoiceHeader.FILTERGROUP(0);
      END;
      FILTERGROUP(0);

      SalesInvoiceHeader.TRANSFERFIELDS(Rec);
    END;

    LOCAL PROCEDURE CopySalesHeaderFilters@27(VAR SalesHeader@1000 : Record 36);
    BEGIN
      COPYFILTER("Document Type",SalesHeader."Document Type");
      COPYFILTER("No.",SalesHeader."No.");
      COPYFILTER("Sell-to Customer Name",SalesHeader."Sell-to Customer Name");
      COPYFILTER("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      COPYFILTER("Sell-to Contact",SalesHeader."Sell-to Contact");
      COPYFILTER("Document Date",SalesHeader."Document Date");
      COPYFILTER("Last Email Sent Status",SalesHeader."Last Email Sent Status");
      COPYFILTER("Last Email Notif Cleared",SalesHeader."Last Email Notif Cleared");
      COPYFILTER("Quote Sent to Customer",SalesHeader."Quote Sent to Customer");
      COPYFILTER("Quote Accepted",SalesHeader."Quote Accepted");
      COPYFILTER(IsTest,SalesHeader.IsTest);
    END;

    LOCAL PROCEDURE CopySalesInvoiceHeaderFilters@28(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      COPYFILTER("No.",SalesInvoiceHeader."No.");
      COPYFILTER("Outstanding Amount",SalesInvoiceHeader."Remaining Amount");
      COPYFILTER("Sell-to Customer Name",SalesInvoiceHeader."Sell-to Customer Name");
      COPYFILTER("Sell-to Customer No.",SalesInvoiceHeader."Sell-to Customer No.");
      COPYFILTER("Sell-to Contact",SalesInvoiceHeader."Sell-to Contact");
      COPYFILTER("Document Date",SalesInvoiceHeader."Document Date");
      COPYFILTER("Last Email Sent Status",SalesInvoiceHeader."Last Email Sent Status");
      COPYFILTER("Last Email Notif Cleared",SalesInvoiceHeader."Last Email Notif Cleared");
      COPYFILTER(Canceled,SalesInvoiceHeader.Cancelled);
    END;

    LOCAL PROCEDURE SetSalesHeaderAsRec@17(VAR SalesHeader@1000 : Record 36);
    BEGIN
      TRANSFERFIELDS(SalesHeader);
      Posted := FALSE;
      UpdateFields;
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderAsRec@18(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      TRANSFERFIELDS(SalesInvoiceHeader);
      Posted := TRUE;
      "Document Type" := "Document Type"::Invoice;
      UpdateFields;
    END;

    LOCAL PROCEDURE FindUnpostedDocument@16(Which@1001 : Text) : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1002 : Record 112;
      IsPosted@1003 : Boolean;
    BEGIN
      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(FALSE);

      SetSalesHeaderFilters(SalesHeader);
      IF SalesHeader.FIND(Which) THEN BEGIN
        SetSalesHeaderAsRec(SalesHeader);
        EXIT(TRUE);
      END;

      IF (STRPOS(Which,'<') > 0) AND (STRPOS(Which,'>') = 0) THEN // We are only interested in unposted docs previous to this one
        EXIT(FALSE); // since there are none, we should exit

      IF HasPostedFilter(IsPosted) AND (NOT IsPosted) THEN
        EXIT(FALSE);  // do not attempt search for posted doc

      IF HideInvoices THEN
        EXIT(FALSE);

      // Get the first posted doc since we no longer have any unposted docs
      SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);
      IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
        SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE FindPostedDocument@15(Which@1000 : Text) : Boolean;
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesHeader@1002 : Record 36;
      IsPosted@1003 : Boolean;
    BEGIN
      IF HideInvoices THEN
        EXIT;

      IF (NOT HasPostedFilter(IsPosted)) OR IsPosted THEN BEGIN
        SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);
        IF SalesInvoiceHeader.FIND(Which) THEN BEGIN
          SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
          EXIT(TRUE);
        END;
      END;

      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(FALSE); // do not attempt search for unposted doc

      // If Which contains '<' or is '+' then we should look for the last Sales Header because there are no posted invoices
      // that match the specified criteria.
      IF (STRPOS(Which,'<') > 0) OR (Which = '+') THEN BEGIN
        SetSalesHeaderFilters(SalesHeader);
        IF SalesHeader.FINDLAST THEN BEGIN
          SetSalesHeaderAsRec(SalesHeader);
          EXIT(TRUE);
        END;
      END;

      // No match
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetNextUnpostedDocument@14(Steps@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record 36;
      IsPosted@1003 : Boolean;
      SalesHeaderResults@1002 : Integer;
    BEGIN
      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(0);

      SetSalesHeaderFilters(SalesHeader);
      SalesHeaderResults := SalesHeader.NEXT(Steps);

      IF SalesHeaderResults <> 0 THEN
        SetSalesHeaderAsRec(SalesHeader);

      EXIT(SalesHeaderResults);
    END;

    LOCAL PROCEDURE GetPreviousUnpostedDocument@13(Steps@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeaderResults@1002 : Integer;
      IsPosted@1003 : Boolean;
    BEGIN
      IF Steps >= 0 THEN
        EXIT(0); // there must be negative steps

      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(0);

      SetSalesHeaderFilters(SalesHeader);

      IF NOT SalesHeader.FIND('+') THEN // step 1 entry back (i.e. get the last sales header)
        EXIT(0); // no previous sales header

      IF Steps < -1 THEN // there are more steps to do
        SalesHeaderResults := SalesHeader.NEXT(Steps + 1) - 1
      ELSE
        SalesHeaderResults := Steps;

      IF SalesHeaderResults <> 0 THEN
        SetSalesHeaderAsRec(SalesHeader);

      EXIT(SalesHeaderResults);
    END;

    LOCAL PROCEDURE HasPostedFilter@11(VAR FilterValue@1001 : Boolean) : Boolean;
    VAR
      PostedFilter@1000 : Boolean;
    BEGIN
      IF GETFILTER(Posted) = '' THEN
        EXIT(FALSE);

      IF NOT EVALUATE(PostedFilter,GETFILTER(Posted)) THEN
        EXIT(FALSE);

      FilterValue := PostedFilter;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderKey@20(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      IF SortByDueDate THEN BEGIN
        SalesInvoiceHeader.SETCURRENTKEY("Due Date","Document Date","No.");
        SalesInvoiceHeader.SETASCENDING("Due Date",TRUE);
      END ELSE BEGIN
        SalesInvoiceHeader.SETCURRENTKEY("Document Date","Due Date","No.");
        SalesInvoiceHeader.SETASCENDING("Due Date",FALSE);
      END;
      SalesInvoiceHeader.SETASCENDING("Document Date",FALSE);
      SalesInvoiceHeader.SETASCENDING("No.",FALSE);
    END;

    LOCAL PROCEDURE SetSalesHeaderKey@21(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.SETCURRENTKEY("Document Date","No.");
      SalesHeader.SETASCENDING("No.",FALSE);
      SalesHeader.SETASCENDING("Document Date",FALSE);
    END;

    [External]
    PROCEDURE SetSortByDocDate@24();
    BEGIN
      SortByDueDate := FALSE;
    END;

    [External]
    PROCEDURE SetSortByDueDate@23();
    BEGIN
      SortByDueDate := TRUE;
    END;

    LOCAL PROCEDURE QuoteIsExpired@34() : Boolean;
    BEGIN
      EXIT(("Quote Valid Until Date" <> 0D) AND ("Quote Valid Until Date" < WORKDATE));
    END;

    PROCEDURE OpenDocument@26();
    VAR
      SalesHeader@1001 : Record 36;
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      IF Posted THEN BEGIN
        IF NOT SalesInvoiceHeader.GET("No.") THEN
          EXIT;
        SalesInvoiceHeader.SETRECFILTER;
        PAGE.RUN(PAGE::"BC O365 Posted Sales Invoice",SalesInvoiceHeader);
      END ELSE BEGIN
        IF NOT SalesHeader.GET("Document Type","No.") THEN
          EXIT;
        SalesHeader.SETRECFILTER;
        CASE "Document Type" OF
          "Document Type"::Invoice:
            PAGE.RUN(PAGE::"BC O365 Sales Invoice",SalesHeader);
          "Document Type"::Quote:
            PAGE.RUN(PAGE::"BC O365 Sales Quote",SalesHeader);
        END;
      END;
    END;

    PROCEDURE IgnoreInvoices@37();
    BEGIN
      HideInvoices := TRUE;
    END;

    BEGIN
    END.
  }
}

