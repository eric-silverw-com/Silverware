OBJECT Page 1877 VAT Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:44 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 1877=rimd,
                TableData 1878=rimd,
                TableData 1879=rimd,
                TableData 5902=rimd;
    CaptionML=ENU=Tax Setup;
    PageType=NavigatePage;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 AutoVATSetupIsAllowed := WizardIsAllowed;
                 IF NOT AutoVATSetupIsAllowed THEN
                   Step := Step::Finish;

                 WizardNotification.ID := FORMAT(CREATEGUID);
                 EnableControls;
               END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::OK THEN
                         IF WizardIsAllowed AND (AssistedSetup.GetStatus(PAGE::"VAT Setup Wizard") = AssistedSetup.Status::"Not Completed") THEN
                           IF NOT CONFIRM(NAVNotSetUpQst,FALSE) THEN
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Enabled=BackActionEnabled;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(TRUE);
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Enabled=NextActionEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextStep(FALSE);
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Enabled=FinishActionEnabled;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 IF AutoVATSetupIsAllowed THEN
                                   FinishAction
                                 ELSE
                                   CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 98  ;1   ;Group     ;
                Visible=TopBannerVisible AND FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 20  ;1   ;Group     ;
                Name=<MediaRepositoryDone>;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                CaptionML=ENU=Welcome to Tax Setup;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 28  ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=This assisted setup guide helps you automate Tax calculations for sales and purchase documents. }

    { 27  ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=You will set up the Tax rates that apply to customers, vendors, and items in different markets, and then specify the accounts to post Tax to. If you sometimes use Tax rates that deviate from standard rates, there's also an option to enter clauses that explain why to tax authorities. }

    { 21  ;2   ;Group     ;
                CaptionML=ENU=Let's go!;
                GroupType=Group }

    { 22  ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to get started. }

    { 2   ;1   ;Group     ;
                Visible=VATBusPostGrpPartStepVisible;
                GroupType=Group }

    { 31  ;2   ;Group     ;
                CaptionML=ENU=Tax Business Posting Groups;
                GroupType=Group;
                InstructionalTextML=ENU=Tax business posting groups specify where you do business, or the type of business you do. See the options from a Tax perspective, and choose all that apply. In the next steps, you'll specify the Tax types to use for customers, vendors, and items in those markets. }

    { 3   ;2   ;Part      ;
                Name=VAT Bus. Post. Grp Part;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page1878;
                PartType=Page }

    { 6   ;1   ;Group     ;
                CaptionML=ENU=Tax Product Posting Setup;
                Visible=VATProdPostGrpPartStepVisible;
                GroupType=Group }

    { 8   ;2   ;Group     ;
                CaptionML=ENU=Tax Rates for Items and Services;
                Visible=VATProdRatesStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify types of products (items and services) that you buy or sell, and the Tax rates that apply. If the default Tax rates aren't correct, you can adjust them. You can also add lines if you use reduced Tax rates when buying or selling. }

    { 5   ;2   ;Group     ;
                CaptionML=ENU=G/L Accounts for Tax Amounts;
                Visible=VATProdAccountStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Get a clear picture of your finances by assigning G/L accounts for sales, purchases, and reversed charges Tax amounts to Tax product posting groups. For example, this lets you compare the Tax amount figures you'll report to Tax authorities to the figures posted in your general ledger. }

    { 7   ;2   ;Group     ;
                CaptionML=ENU=Optional: Clauses for Non-Standard Tax Rates;
                Visible=VATProdClausesStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Some tax authorities require explanations, and sometimes even references to regulatory statues, when non-standard Tax rates, such as reduced or zero, are used on invoices. You can enter the clauses, and they will be printed on sales documents that use non-standard Tax rates. }

    { 4   ;2   ;Part      ;
                Name=VATProdPostGrpPart;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page1879;
                PartType=Page }

    { 12  ;1   ;Group     ;
                CaptionML=ENU=Assign Tax Setup to Customer, Vendor, and Item Templates;
                Visible=TemplateStepVisible;
                GroupType=Group }

    { 26  ;2   ;Group     ;
                CaptionML=ENU=Default Tax Rates on Customer Templates;
                Visible=CustomerTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify default Tax rates for customer templates. When assigned to customers, customer templates apply default settings for posting things like revenue, costs, receivables, payables, inventory, and Tax rates. }

    { 18  ;2   ;Group     ;
                Visible=CustomerTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to do the same thing for vendor templates. }

    { 19  ;2   ;Group     ;
                CaptionML=ENU=Default Tax Rates on Vendor Templates;
                Visible=VendorTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify default Tax rates for vendor templates. When assigned to vendors, vendor templates apply default settings for posting, including Tax rates. }

    { 29  ;2   ;Group     ;
                Visible=VendorTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to repeat this for item templates. }

    { 16  ;2   ;Group     ;
                CaptionML=ENU=Default Tax Rates on Item Templates;
                Visible=ItemTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify default Tax rates for item templates. When assigned to items, item templates apply default settings for posting, including Tax rates. }

    { 9   ;2   ;Part      ;
                Name=VATAssistedSetupTemplate;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page1880;
                PartType=Page }

    { 17  ;1   ;Group     ;
                Visible=ManualVATStepVisible OR FinalStepVisible;
                GroupType=Group }

    { 33  ;2   ;Group     ;
                CaptionML=ENU=Manual setup required;
                Visible=ManualVATStepVisible;
                GroupType=Group }

    { 32  ;3   ;Group     ;
                Visible=ManualVATStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Looks like you've already posted one or more transactions that include Tax. To avoid mistakes, you'll have to manually set up Tax calculations. }

    { 24  ;3   ;Group     ;
                Visible=ManualVATStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=To do that now, choose a Tax posting setup. In the Tax Posting Setup window, add or edit the Tax business posting group, Tax product posting group, and other details as needed. }

    { 23  ;2   ;Group     ;
                CaptionML=ENU=That's it!;
                Visible=FinalStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Tax is set up and ready to go. }

    { 30  ;2   ;Group     ;
                Visible=FinalStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=To apply the settings, choose Finish. }

    { 25  ;2   ;Group     ;
                Visible=FinalStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=To review your Tax settings later, open the Tax Setup window. }

  }
  CODE
  {
    VAR
      AssistedSetup@1005 : Record 1803;
      MediaRepositoryStandard@1040 : Record 9400;
      MediaRepositoryDone@1041 : Record 9400;
      ClientTypeManagement@1016 : Codeunit 4;
      WizardNotification@1021 : Notification;
      Step@1012 : 'Start,VATBusPostingGroup,VATProdPostingRates,VATProdPostingAccounts,VATProdPostingClauses,CustomerTemplates,VendorTemplates,ItemTemplates,Finish';
      TopBannerVisible@1042 : Boolean;
      ManualVATStepVisible@1022 : Boolean;
      FirstStepVisible@1000 : Boolean;
      VATBusPostGrpPartStepVisible@1003 : Boolean;
      VATProdPostGrpPartStepVisible@1006 : Boolean;
      VATProdClausesStepVisible@1011 : Boolean;
      VATProdRatesStepVisible@1008 : Boolean;
      VATProdAccountStepVisible@1007 : Boolean;
      CustomerTemplateStepVisible@1017 : Boolean;
      VendorTemplateStepVisible@1019 : Boolean;
      ItemTemplateStepVisible@1002 : Boolean;
      TemplateStepVisible@1020 : Boolean;
      FinalStepVisible@1015 : Boolean;
      FinishActionEnabled@1009 : Boolean;
      BackActionEnabled@1013 : Boolean;
      NextActionEnabled@1014 : Boolean;
      NAVNotSetUpQst@1004 : TextConst 'ENU=Tax has not been set up.\\Are you sure you want to exit?';
      NoBusPostingGroupErr@1018 : TextConst 'ENU=You must to have at least one Tax business posting group.';
      VATAssistedRatesMsg@1103 : TextConst 'ENU=You must select at least one item or service.';
      VATAssistedBusPostingGrpMsg@1102 : TextConst 'ENU=You must select at least one Tax business posting group.';
      AutoVATSetupIsAllowed@1023 : Boolean;
      InvalidVATBusGrpMsg@1001 : TextConst '@@@="%1 is code for vat bus group which is not valid anymore ";ENU=%1 is not valid Tax Business group.';
      InvaledVATProductMsg@1024 : TextConst '@@@="%1 is code for vat product group which is not valid anymore ";ENU=%1 is not valid Tax product group.';
      EmptyGLAccountsWarning@1010 : Boolean;

    LOCAL PROCEDURE EnableControls@2();
    BEGIN
      ResetControls;

      CASE Step OF
        Step::Start:
          ShowStartStep;
        Step::VATBusPostingGroup:
          ShowVATBusPostingGroup;
        Step::VATProdPostingRates:
          ShowProdRatesGroup;
        Step::VATProdPostingAccounts:
          ShowProdAccountGroup;
        Step::VATProdPostingClauses:
          ShowProdClausesGroup;
        Step::CustomerTemplates:
          ShowCustomerTemplatesStep;
        Step::VendorTemplates:
          ShowVendorTemplatesStep;
        Step::ItemTemplates:
          ShowItemTemplatesStep;
        Step::Finish:
          IF AutoVATSetupIsAllowed THEN
            ShowFinishStep
          ELSE
            ShowManualStep;
      END;
    END;

    LOCAL PROCEDURE FinishAction@12();
    VAR
      VATAssistedSetupBusGrp@1003 : Record 1879;
      VATSetupPostingGroups@1001 : Record 1877;
    BEGIN
      IF NOT AutoVATSetupIsAllowed THEN
        EXIT;
      ClearVATProdPostingGrp;
      ClearVATBusPostingGrp;
      ClearVATSetup;

      VATAssistedSetupBusGrp.SETRANGE(Selected,TRUE);
      VATAssistedSetupBusGrp.SETRANGE(Default,FALSE);

      VATSetupPostingGroups.SETRANGE(Selected,TRUE);
      VATSetupPostingGroups.SETRANGE(Default,FALSE);

      IF NOT VATAssistedSetupBusGrp.FINDSET THEN
        ERROR(NoBusPostingGroupErr);

      REPEAT
        AddVATBusPostingGrp(VATAssistedSetupBusGrp.Code,VATAssistedSetupBusGrp.Description);
        IF VATSetupPostingGroups.FINDSET THEN
          REPEAT
            CreateVATPostingSetupLines(VATSetupPostingGroups,VATAssistedSetupBusGrp.Code);
          UNTIL VATSetupPostingGroups.NEXT = 0;
      UNTIL VATAssistedSetupBusGrp.NEXT = 0;

      CreatVATSetupWithoutBusPostingGrp;

      UpdateTemplates;

      ClearGenBusPostingGrpInvalidDefaults;
      ClearGenProdPostingGrpInvalidDefaults;

      AssistedSetup.SetStatus(PAGE::"VAT Setup Wizard",AssistedSetup.Status::Completed);
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE NextStep@41(Backwards@1000 : Boolean);
    BEGIN
      HideNotification;

      IF Backwards THEN
        Step := Step - 1
      ELSE
        IF StepValidation THEN
          Step := Step + 1;

      EnableControls;
    END;

    LOCAL PROCEDURE ShowManualStep@17();
    BEGIN
      ManualVATStepVisible := TRUE;
      BackActionEnabled := FALSE;
      NextActionEnabled := FALSE;
      FinishActionEnabled := TRUE;
    END;

    LOCAL PROCEDURE ShowStartStep@24();
    BEGIN
      FirstStepVisible := TRUE;
      FinishActionEnabled := FALSE;
      BackActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowVATBusPostingGroup@33();
    BEGIN
      VATBusPostGrpPartStepVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowProdClausesGroup@11();
    BEGIN
      VATProdPostGrpPartStepVisible := TRUE;
      VATProdClausesStepVisible := TRUE;
      CurrPage.VATProdPostGrpPart.PAGE.ShowVATClauses;
    END;

    LOCAL PROCEDURE ShowProdRatesGroup@18();
    BEGIN
      VATProdPostGrpPartStepVisible := TRUE;
      VATProdRatesStepVisible := TRUE;
      CurrPage.VATProdPostGrpPart.PAGE.ShowVATRates;
    END;

    LOCAL PROCEDURE ShowProdAccountGroup@19();
    BEGIN
      VATProdPostGrpPartStepVisible := TRUE;
      VATProdAccountStepVisible := TRUE;
      CurrPage.VATProdPostGrpPart.PAGE.ShowVATAccounts;
    END;

    LOCAL PROCEDURE ShowCustomerTemplatesStep@34();
    BEGIN
      CustomerTemplateStepVisible := TRUE;
      TemplateStepVisible := TRUE;
      CurrPage.VATAssistedSetupTemplate.PAGE.ShowCustomerTemplate;
      NextActionEnabled := TRUE;
    END;

    LOCAL PROCEDURE ShowVendorTemplatesStep@8();
    BEGIN
      VendorTemplateStepVisible := TRUE;
      TemplateStepVisible := TRUE;
      CurrPage.VATAssistedSetupTemplate.PAGE.ShowVendorTemplate;
      NextActionEnabled := TRUE;
    END;

    LOCAL PROCEDURE ShowItemTemplatesStep@10();
    BEGIN
      ItemTemplateStepVisible := TRUE;
      TemplateStepVisible := TRUE;
      CurrPage.VATAssistedSetupTemplate.PAGE.ShowItemTemplate;
      NextActionEnabled := TRUE;
    END;

    LOCAL PROCEDURE ShowFinishStep@35();
    BEGIN
      FinalStepVisible := TRUE;
      NextActionEnabled := FALSE;
      FinishActionEnabled := TRUE;
    END;

    LOCAL PROCEDURE ResetControls@1();
    BEGIN
      FinishActionEnabled := FALSE;
      BackActionEnabled := TRUE;
      NextActionEnabled := TRUE;

      FirstStepVisible := FALSE;
      VATProdPostGrpPartStepVisible := FALSE;
      VATBusPostGrpPartStepVisible := FALSE;
      VATProdClausesStepVisible := FALSE;
      VATProdRatesStepVisible := FALSE;
      VATProdAccountStepVisible := FALSE;
      CustomerTemplateStepVisible := FALSE;
      VendorTemplateStepVisible := FALSE;
      ItemTemplateStepVisible := FALSE;
      TemplateStepVisible := FALSE;
      FinalStepVisible := FALSE;
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType))
      THEN
        TopBannerVisible := MediaRepositoryDone.Image.HASVALUE;
    END;

    LOCAL PROCEDURE ClearVATSetup@3();
    VAR
      VATClause@1002 : Record 560;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      VATClause.DELETEALL;
      VATPostingSetup.DELETEALL;
    END;

    LOCAL PROCEDURE AddVATProdPostingGroups@5(GroupCode@1001 : Code[20];GroupDesc@1000 : Text[50]);
    VAR
      VATProductPostingGroup@1002 : Record 324;
    BEGIN
      IF VATProductPostingGroup.GET(GroupCode) THEN
        EXIT;
      VATProductPostingGroup.INIT;
      VATProductPostingGroup.VALIDATE(Code,GroupCode);
      VATProductPostingGroup.VALIDATE(Description,GroupDesc);
      VATProductPostingGroup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AddVATBusPostingGrp@16(VATBusPostingCode@1000 : Code[20];VATBusPostingDesc@1001 : Text[50]);
    VAR
      VATBusinessPostingGroup@1002 : Record 323;
    BEGIN
      IF VATBusinessPostingGroup.GET(VATBusPostingCode) THEN
        EXIT;

      VATBusinessPostingGroup.VALIDATE(Code,VATBusPostingCode);
      VATBusinessPostingGroup.VALIDATE(Description,VATBusPostingDesc);
      VATBusinessPostingGroup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AddVATClause@6(ClauseCode@1002 : Code[20];ClauseDescription@1003 : Text[250]);
    VAR
      VATClause@1001 : Record 560;
    BEGIN
      IF VATClause.GET(ClauseCode) THEN
        EXIT;

      VATClause.INIT;
      VATClause.VALIDATE(Code,ClauseCode);
      VATClause.VALIDATE(Description,ClauseDescription);
      VATClause.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AddVATPostingGroup@7(VATSetupPostingGroups@1000 : Record 1877;IsService@1003 : Boolean;VATBusPostingGrpCode@1004 : Code[20]);
    VAR
      VATPostingSetup@1002 : Record 325;
    BEGIN
      AddVATProdPostingGroups(VATSetupPostingGroups."VAT Prod. Posting Group",
        VATSetupPostingGroups."VAT Prod. Posting Grp Desc.");
      InitVATPostingSetup(VATPostingSetup,VATSetupPostingGroups,VATBusPostingGrpCode);
      VATPostingSetup.VALIDATE("EU Service",IsService);
      VATPostingSetup.VALIDATE("VAT Prod. Posting Group",VATSetupPostingGroups."VAT Prod. Posting Group");
      IF VATSetupPostingGroups."VAT %" = 100 THEN
        VATPostingSetup.VALIDATE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Full VAT");
      VATPostingSetup.INSERT;
    END;

    LOCAL PROCEDURE InitVATPostingSetup@42(VAR VATPostingSetup@1000 : Record 325;VATSetupPostingGroups@1001 : Record 1877;VATBusPostingGrpCode@1002 : Code[20]);
    BEGIN
      VATPostingSetup.INIT;
      VATPostingSetup.TRANSFERFIELDS(VATSetupPostingGroups);
      VATPostingSetup.VALIDATE("VAT Bus. Posting Group",VATBusPostingGrpCode);
      IF VATSetupPostingGroups."VAT Clause Desc" <> '' THEN
        VATPostingSetup."VAT Clause Code" := VATSetupPostingGroups."VAT Prod. Posting Group";
    END;

    LOCAL PROCEDURE CreateVATPostingSetupLines@9(VATSetupPostingGroups@1000 : Record 1877;VATBusPostingGrpCode@1001 : Code[20]);
    VAR
      IsService@1003 : Boolean;
    BEGIN
      IF VATSetupPostingGroups."VAT Clause Desc" <> '' THEN
        AddVATClause(VATSetupPostingGroups."VAT Prod. Posting Group",VATSetupPostingGroups."VAT Clause Desc");

      IsService := VATSetupPostingGroups."Application Type" = VATSetupPostingGroups."Application Type"::Services;
      AddVATPostingGroup(VATSetupPostingGroups,IsService,VATBusPostingGrpCode);
    END;

    LOCAL PROCEDURE WizardIsAllowed@45() : Boolean;
    VAR
      VATEntry@1000 : Record 254;
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      Item@1003 : Record 27;
    BEGIN
      Customer.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      Vendor.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      Item.SETFILTER("VAT Prod. Posting Group",'<>%1','');
      EXIT(VATEntry.ISEMPTY AND Customer.ISEMPTY AND Vendor.ISEMPTY AND Item.ISEMPTY);
    END;

    LOCAL PROCEDURE StepValidation@13() : Boolean;
    VAR
      VATAssistedSetupBusGrp@1000 : Record 1879;
      VATSetupPostingGroups@1001 : Record 1877;
      VATAssistedSetupTemplates@1002 : Record 1878;
      ErrorMessage@1005 : Text;
      ValidationErrorMsg@1003 : Text;
    BEGIN
      CASE Step OF
        Step::VATBusPostingGroup:
          IF NOT VATAssistedSetupBusGrp.ValidateVATBusGrp THEN
            ErrorMessage := VATAssistedBusPostingGrpMsg;
        Step::VATProdPostingRates:
          IF NOT VATSetupPostingGroups.ValidateVATRates THEN
            ErrorMessage := VATAssistedRatesMsg;
        Step::VATProdPostingAccounts:
          IF NOT EmptyGLAccountsWarning THEN BEGIN
            VATSetupPostingGroups.ValidateGLAccountsExist(ErrorMessage);
            EmptyGLAccountsWarning := TRUE;
          END;
        Step::CustomerTemplates:
          IF NOT VATAssistedSetupTemplates.ValidateCustomerTemplate(ValidationErrorMsg) THEN
            ErrorMessage := STRSUBSTNO(InvalidVATBusGrpMsg,ValidationErrorMsg);
        Step::VendorTemplates:
          IF NOT VATAssistedSetupTemplates.ValidateVendorTemplate(ValidationErrorMsg) THEN
            ErrorMessage := STRSUBSTNO(InvalidVATBusGrpMsg,ValidationErrorMsg);
        Step::ItemTemplates:
          IF NOT VATAssistedSetupTemplates.ValidateItemTemplate(ValidationErrorMsg) THEN
            ErrorMessage := STRSUBSTNO(InvaledVATProductMsg,ValidationErrorMsg);
      END;

      IF ErrorMessage = '' THEN
        EXIT(TRUE);

      TrigerNotification(ErrorMessage);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateTemplates@4();
    VAR
      VATAssistedSetupTemplates@1000 : Record 1878;
      Customer@1001 : Record 18;
      Item@1002 : Record 27;
    BEGIN
      VATAssistedSetupTemplates.RESET;
      IF NOT VATAssistedSetupTemplates.FINDSET THEN
        EXIT;

      REPEAT
        IF
           (VATAssistedSetupTemplates."Table ID" = DATABASE::Customer) OR
           (VATAssistedSetupTemplates."Table ID" = DATABASE::Vendor)
        THEN
          AddOrUpdateConfigTemplateLine(VATAssistedSetupTemplates.Code,Customer.FIELDNO("VAT Bus. Posting Group"),
            VATAssistedSetupTemplates."Default VAT Bus. Posting Grp",
            VATAssistedSetupTemplates."Table ID")
        ELSE
          IF VATAssistedSetupTemplates."Table ID" = DATABASE::Item THEN
            AddOrUpdateConfigTemplateLine(VATAssistedSetupTemplates.Code,Item.FIELDNO("VAT Prod. Posting Group"),
              VATAssistedSetupTemplates."Default VAT Prod. Posting Grp",
              VATAssistedSetupTemplates."Table ID");
      UNTIL VATAssistedSetupTemplates.NEXT = 0;
    END;

    LOCAL PROCEDURE AddOrUpdateConfigTemplateLine@14(TemplateCode@1001 : Code[10];FieldID@1004 : Integer;DefaultValue@1005 : Text[250];TableId@1006 : Integer);
    VAR
      ConfigTemplateLine@1000 : Record 8619;
      ConfigTemplateManagement@1002 : Codeunit 8612;
    BEGIN
      IF ConfigTemplateLine.GetLine(ConfigTemplateLine,TemplateCode,FieldID) THEN BEGIN
        IF DefaultValue = '' THEN BEGIN
          ConfigTemplateLine.DELETE;
          EXIT;
        END;
        ConfigTemplateLine."Default Value" := DefaultValue;
        ConfigTemplateLine.MODIFY;
      END ELSE
        IF DefaultValue <> '' THEN
          ConfigTemplateManagement.InsertConfigTemplateLine(TemplateCode,FieldID,DefaultValue,TableId);
    END;

    LOCAL PROCEDURE TrigerNotification@15(NotificationMsg@1000 : Text);
    BEGIN
      WizardNotification.RECALL;
      WizardNotification.MESSAGE(NotificationMsg);
      WizardNotification.SEND;
    END;

    LOCAL PROCEDURE CreatVATSetupWithoutBusPostingGrp@20();
    VAR
      VATAssistedSetupBusGrp@1000 : Record 1879;
      VATSetupPostingGroups@1001 : Record 1877;
    BEGIN
      IF VATAssistedSetupBusGrp.GET('',FALSE) THEN
        EXIT;

      VATSetupPostingGroups.SETRANGE(Selected,TRUE);
      VATSetupPostingGroups.SETRANGE(Default,FALSE);

      IF VATSetupPostingGroups.FINDSET THEN
        REPEAT
          CreateVATPostingSetupLines(VATSetupPostingGroups,'');
        UNTIL VATSetupPostingGroups.NEXT = 0;
    END;

    LOCAL PROCEDURE HideNotification@21();
    BEGIN
      CurrPage.VATProdPostGrpPart.PAGE.HideNotification;
      CurrPage."VAT Bus. Post. Grp Part".PAGE.HideNotification;
      WizardNotification.MESSAGE := '';
      WizardNotification.RECALL;

      IF Step::VATProdPostingAccounts <> Step THEN
        EmptyGLAccountsWarning := FALSE;
    END;

    LOCAL PROCEDURE ClearVATProdPostingGrp@22();
    VAR
      Item@1000 : Record 27;
      ServiceLine@1001 : Record 5902;
      VATProductPostingGroup@1002 : Record 324;
    BEGIN
      IF NOT VATProductPostingGroup.FINDSET THEN
        EXIT;

      REPEAT
        Item.SETRANGE("VAT Prod. Posting Group",VATProductPostingGroup.Code);
        ServiceLine.SETRANGE("VAT Prod. Posting Group",VATProductPostingGroup.Code);
        IF (NOT Item.FINDFIRST) AND (NOT ServiceLine.FINDFIRST) THEN
          VATProductPostingGroup.DELETE;
      UNTIL VATProductPostingGroup.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearVATBusPostingGrp@23();
    VAR
      Customer@1000 : Record 18;
      Vendor@1001 : Record 23;
      VATBusinessPostingGroup@1002 : Record 323;
    BEGIN
      IF NOT VATBusinessPostingGroup.FINDSET THEN
        EXIT;

      REPEAT
        Customer.SETRANGE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
        Vendor.SETRANGE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
        IF (NOT Vendor.FINDFIRST) AND (NOT Customer.FINDFIRST) THEN
          VATBusinessPostingGroup.DELETE;
      UNTIL VATBusinessPostingGroup.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearGenBusPostingGrpInvalidDefaults@28();
    VAR
      GenBusinessPostingGroup@1001 : Record 250;
      VATBusinessPostingGroup@1000 : Record 323;
    BEGIN
      IF GenBusinessPostingGroup.ISEMPTY THEN
        EXIT;

      GenBusinessPostingGroup.FINDSET(TRUE);
      REPEAT
        IF NOT VATBusinessPostingGroup.GET(GenBusinessPostingGroup."Def. VAT Bus. Posting Group") THEN BEGIN
          GenBusinessPostingGroup.VALIDATE("Def. VAT Bus. Posting Group",'');
          GenBusinessPostingGroup.MODIFY;
        END;
      UNTIL GenBusinessPostingGroup.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearGenProdPostingGrpInvalidDefaults@29();
    VAR
      GenProductPostingGroup@1000 : Record 251;
      VATProductPostingGroup@1001 : Record 324;
    BEGIN
      IF GenProductPostingGroup.ISEMPTY THEN
        EXIT;

      GenProductPostingGroup.FINDSET(TRUE);
      REPEAT
        IF NOT VATProductPostingGroup.GET(GenProductPostingGroup."Def. VAT Prod. Posting Group") THEN BEGIN
          GenProductPostingGroup.VALIDATE("Def. VAT Prod. Posting Group",'');
          GenProductPostingGroup.MODIFY;
        END;
      UNTIL GenProductPostingGroup.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

