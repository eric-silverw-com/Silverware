OBJECT Report 7051 Suggest Item Price on Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:13:21 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Item Price on Wksh.;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  RoundingMethod.SETRANGE(Code,RoundingMethod.Code);
                  IF ToCurrency.Code = '' THEN BEGIN
                    ToCurrency.InitRoundingPrecision;
                  END ELSE BEGIN
                    ToCurrency.FIND;
                    ToCurrency.TESTFIELD("Unit-Amount Rounding Precision");
                  END;

                  IF (ToSalesCode = '') AND (ToSalesType <> ToSalesType::"All Customers") THEN
                    ERROR(Text002,SalesPrice.FIELDCAPTION("Sales Code"));

                  IF ToUnitofMeasure.Code <> '' THEN
                    ToUnitofMeasure.FIND;
                  WITH SalesPriceWksh DO BEGIN
                    VALIDATE("Sales Type",ToSalesType);
                    VALIDATE("Sales Code",ToSalesCode);
                    VALIDATE("Currency Code",ToCurrency.Code);
                    VALIDATE("Starting Date",ToStartDate);
                    VALIDATE("Ending Date",ToEndDate);
                    "Unit of Measure Code" := ToUnitofMeasure.Code;

                    CASE ToSalesType OF
                      ToSalesType::Customer:
                        BEGIN
                          ToCust."No." := ToSalesCode;
                          ToCust.FIND;
                          "Price Includes VAT" := ToCust."Prices Including VAT";
                          "Allow Line Disc." := ToCust."Allow Line Disc.";
                        END;
                      ToSalesType::"Customer Price Group":
                        BEGIN
                          ToCustPriceGr.Code := ToSalesCode;
                          ToCustPriceGr.FIND;
                          "Price Includes VAT" := ToCustPriceGr."Price Includes VAT";
                          "Allow Line Disc." := ToCustPriceGr."Allow Line Disc.";
                          "Allow Invoice Disc." := ToCustPriceGr."Allow Invoice Disc.";
                        END;
                    END;
                  END;
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=VAR
                                  CurrentUnitPrice@1000 : Decimal;
                                BEGIN
                                  Window.UPDATE(1,"No.");
                                  WITH SalesPriceWksh DO BEGIN
                                    INIT;
                                    VALIDATE("Item No.",Item."No.");

                                    IF NOT ("Unit of Measure Code" IN [Item."Base Unit of Measure",'']) THEN
                                      IF NOT ItemUnitOfMeasure.GET("Item No.","Unit of Measure Code") THEN
                                        CurrReport.SKIP;

                                    VALIDATE("Unit of Measure Code",ToUnitofMeasure.Code);
                                    CurrentUnitPrice :=
                                      ROUND(
                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                          WORKDATE,ToCurrency.Code,
                                          Item."Unit Price",
                                          CurrExchRate.ExchangeRate(
                                            WORKDATE,ToCurrency.Code)) *
                                        UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"),
                                        ToCurrency."Unit-Amount Rounding Precision");

                                    IF CurrentUnitPrice > PriceLowerLimit THEN
                                      "New Unit Price" := CurrentUnitPrice * UnitPriceFactor;

                                    OnBeforeRoundMethod(SalesPriceWksh,Item,ToCurrency,UnitPriceFactor,PriceLowerLimit,CurrentUnitPrice);

                                    IF RoundingMethod.Code <> '' THEN BEGIN
                                      RoundingMethod."Minimum Amount" := "New Unit Price";
                                      IF RoundingMethod.FIND('=<') THEN BEGIN
                                        "New Unit Price" := "New Unit Price" + RoundingMethod."Amount Added Before";
                                        IF RoundingMethod.Precision > 0 THEN
                                          "New Unit Price" :=
                                            ROUND(
                                              "New Unit Price",
                                              RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                        "New Unit Price" := "New Unit Price" + RoundingMethod."Amount Added After";
                                      END;
                                    END;

                                    CalcCurrentPrice(PriceAlreadyExists);

                                    IF NOT PriceAlreadyExists THEN BEGIN
                                      "Current Unit Price" := CurrentUnitPrice;
                                      "VAT Bus. Posting Gr. (Price)" := Item."VAT Bus. Posting Gr. (Price)";
                                    END;

                                    OnBeforeModifyOrInsertSalesPriceWksh(SalesPriceWksh);

                                    IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
                                      SalesPriceWksh2 := SalesPriceWksh;
                                      IF SalesPriceWksh2.FIND('=') THEN
                                        MODIFY
                                      ELSE
                                        INSERT;
                                    END;
                                  END;
                                END;

               ReqFilterFields=No.,Vendor No.,Inventory Posting Group }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               ToEndDateCtrlEnable := TRUE;
               ToStartDateCtrlEnable := TRUE;
               SalesCodeCtrlEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF UnitPriceFactor = 0 THEN
                     UnitPriceFactor := 1;

                   SalesCodeCtrlEnable := TRUE;
                   IF ToSalesType = ToSalesType::"All Customers" THEN
                     SalesCodeCtrlEnable := FALSE;

                   SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                   ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                   ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 21  ;2   ;Group     ;
                  CaptionML=ENU=Copy to Sales Price Worksheet... }

      { 8   ;3   ;Field     ;
                  CaptionML=ENU=Sales Type;
                  ToolTipML=ENU=Specifies the sales type for the sales price agreement. To see the existing sales types, click the field.;
                  OptionCaptionML=ENU=Customer,Customer Price Group,All Customers,Campaign;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToSalesType;
                  OnValidate=BEGIN
                               SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                               ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                               ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;

                               ToSalesCode := '';
                               ToStartDate := 0D;
                               ToEndDate := 0D;
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=SalesCodeCtrl;
                  CaptionML=ENU=Sales Code;
                  ToolTipML=ENU=Specifies the code for the sales type that the sales price agreement will update. To see the existing sales codes, click the field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToSalesCode;
                  Enabled=SalesCodeCtrlEnable;
                  OnValidate=BEGIN
                               ToSalesCodeOnAfterValidate;
                             END;

                  OnLookup=VAR
                             CustList@1004 : Page 22;
                             CustPriceGrList@1003 : Page 7;
                             CampaignList@1002 : Page 5087;
                           BEGIN
                             CASE ToSalesType OF
                               ToSalesType::Customer:
                                 BEGIN
                                   CustList.LOOKUPMODE := TRUE;
                                   CustList.SETRECORD(ToCust);
                                   IF CustList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CustList.GETRECORD(ToCust);
                                     ToSalesCode := ToCust."No.";
                                   END;
                                 END;
                               ToSalesType::"Customer Price Group":
                                 BEGIN
                                   CustPriceGrList.LOOKUPMODE := TRUE;
                                   CustPriceGrList.SETRECORD(ToCustPriceGr);
                                   IF CustPriceGrList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CustPriceGrList.GETRECORD(ToCustPriceGr);
                                     ToSalesCode := ToCustPriceGr.Code;
                                   END;
                                 END;
                               ToSalesType::Campaign:
                                 BEGIN
                                   CampaignList.LOOKUPMODE := TRUE;
                                   CampaignList.SETRECORD(ToCampaign);
                                   IF CampaignList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CampaignList.GETRECORD(ToCampaign);
                                     ToSalesCode := ToCampaign."No.";
                                     ToStartDate := ToCampaign."Starting Date";
                                     ToEndDate := ToCampaign."Ending Date";
                                   END;
                                 END;
                             END;
                           END;
                            }

      { 9   ;3   ;Field     ;
                  CaptionML=ENU=Unit of Measure Code;
                  ToolTipML=ENU=Specifies the unit of measure that the item is shown in.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToUnitofMeasure.Code;
                  TableRelation="Unit of Measure" }

      { 2   ;3   ;Field     ;
                  CaptionML=ENU=Currency Code;
                  ToolTipML=ENU=Specifies the code for the currency that amounts are shown in.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToCurrency.Code;
                  TableRelation=Currency }

      { 3   ;3   ;Field     ;
                  Name=ToStartDateCtrl;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date when the price changes will take effect.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToStartDate;
                  Enabled=ToStartDateCtrlEnable }

      { 12  ;3   ;Field     ;
                  Name=ToEndDateCtrl;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the price changes are valid.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToEndDate;
                  Enabled=ToEndDateCtrlEnable }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Only Amounts Above;
                  ToolTipML=ENU=Specifies the lowest unit price that will be changed. Only prices that are higher than this price will be changed.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=2:5;
                  SourceExpr=PriceLowerLimit }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the item price that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=UnitPriceFactor;
                  MinValue=0 }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want applied to prices.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 7   ;2   ;Field     ;
                  CaptionML=ENU=Create New Prices;
                  ToolTipML=ENU=Specifies if you want the batch job to create new price suggestions (for example, a new combination of currency, sales code and time). Don't insert a check mark if you only want to adjust existing sales prices.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreateNewPrices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing items  #1##########';
      RoundingMethod@1002 : Record 42;
      SalesPrice@1003 : Record 7002;
      SalesPriceWksh2@1004 : Record 7023;
      SalesPriceWksh@1005 : Record 7023;
      ToCust@1024 : Record 18;
      ToCustPriceGr@1006 : Record 6;
      ToCampaign@1022 : Record 5071;
      ToCurrency@1007 : Record 4;
      CurrExchRate@1008 : Record 330;
      ToUnitofMeasure@1009 : Record 204;
      ItemUnitOfMeasure@1010 : Record 5404;
      UOMMgt@1012 : Codeunit 5402;
      Window@1013 : Dialog;
      PriceAlreadyExists@1014 : Boolean;
      CreateNewPrices@1015 : Boolean;
      UnitPriceFactor@1016 : Decimal;
      PriceLowerLimit@1017 : Decimal;
      ToSalesType@1019 : 'Customer,Customer Price Group,All Customers,Campaign';
      ToSalesCode@1020 : Code[20];
      ToStartDate@1018 : Date;
      ToEndDate@1011 : Date;
      Text002@1021 : TextConst 'ENU=%1 must be specified.';
      SalesCodeCtrlEnable@19004995 : Boolean INDATASET;
      ToStartDateCtrlEnable@19060085 : Boolean INDATASET;
      ToEndDateCtrlEnable@19023823 : Boolean INDATASET;

    PROCEDURE InitializeRequest@3(NewToSalesType@1005 : Option;NewToSalesCode@1004 : Code[20];NewToStartDateText@1002 : Date;NewToEndDateText@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10]);
    BEGIN
      ToSalesType := NewToSalesType;
      ToSalesCode := NewToSalesCode;
      ToStartDate := NewToStartDateText;
      ToEndDate := NewToEndDateText;
      ToCurrency.Code := NewToCurrCode;
      ToUnitofMeasure.Code := NewToUOMCode;
    END;

    LOCAL PROCEDURE ToSalesCodeOnAfterValidate@19025830();
    BEGIN
      IF ToSalesType = ToSalesType::Campaign THEN
        IF ToCampaign.GET(ToSalesCode) THEN BEGIN
          ToStartDate := ToCampaign."Starting Date";
          ToEndDate := ToCampaign."Ending Date";
        END ELSE BEGIN
          ToStartDate := 0D;
          ToEndDate := 0D;
        END;
    END;

    PROCEDURE InitializeRequest2@1(NewToSalesType@1005 : Option;NewToSalesCode@1004 : Code[20];NewToStartDateText@1002 : Date;NewToEndDateText@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewPriceLowerLimit@1006 : Decimal;NewUnitPriceFactor@1007 : Decimal;NewRoundingMethodCode@1008 : Code[10];NewCreateNewPrices@1009 : Boolean);
    BEGIN
      InitializeRequest(NewToSalesType,NewToSalesCode,NewToStartDateText,NewToEndDateText,NewToCurrCode,NewToUOMCode);
      PriceLowerLimit := NewPriceLowerLimit;
      UnitPriceFactor := NewUnitPriceFactor;
      RoundingMethod.Code := NewRoundingMethodCode;
      CreateNewPrices := NewCreateNewPrices;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRoundMethod@2(VAR SalesPriceWorksheet@1000 : Record 7023;Item@1001 : Record 27;ToCurrency@1002 : Record 4;UnitPriceFactor@1003 : Decimal;PriceLowerLimit@1004 : Decimal;VAR CurrentUnitPrice@1005 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifyOrInsertSalesPriceWksh@4(VAR SalesPriceWorksheet@1000 : Record 7023);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

