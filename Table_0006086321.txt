OBJECT Table 6086321 Expense Allocation
{
  OBJECT-PROPERTIES
  {
    Date=05/30/18;
    Time=[ 1:00:00 AM];
    Version List=EMW16.00.10.2.60.06;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Expense@1160040001 : Record 6086320;
               SplitAndAllocationMgt@1160040000 : Codeunit 6086301;
             BEGIN
               "Entry No." := GetLastEntryNo + 1;

               TestNotPosted;

               Expense.GET("Expense Entry No.");
               SplitAndAllocationMgt.CopyExpDimToAllocationDim(Expense,Rec);
               AddDefaultDim(0);

               IF NOT ("Amount %" IN [0,100]) THEN
                 Modified := TRUE;

               SplitAndAllocationMgt.InsertAllocationComment("Expense Entry No.");
             END;

    OnModify=BEGIN
               TestNotPosted;
               Modified := TRUE;
             END;

    OnDelete=VAR
               ExpenseAllocation@1160040001 : Record 6086321;
               ExpAllocationDim@1160040000 : Record 6086357;
               SplitAndAllocationMgt@1160040002 : Codeunit 6086301;
             BEGIN
               TestNotPosted;

               ExpAllocationDim.SETRANGE("Expense Allocation Entry No.","Entry No.");
               ExpAllocationDim.DELETEALL;

               ExpenseAllocation.SETCURRENTKEY("Expense Entry No.");
               ExpenseAllocation.SETRANGE("Expense Entry No.","Expense Entry No.");
               ExpenseAllocation.SETFILTER("Entry No.",'<>%1',"Entry No.");
               IF ExpenseAllocation.ISEMPTY THEN
                 SplitAndAllocationMgt.RemoveAllocationComment("Expense Entry No.");
             END;

    CaptionML=ENU=Expense Allocation;
    LookupPageID=Page6086320;
    DrillDownPageID=Page6086320;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Continia User ID    ;Code50        ;TableRelation="Continia User Setup";
                                                   OnValidate=VAR
                                                                Expense@1160040000 : Record 6086320;
                                                              BEGIN
                                                                Expense.GET("Expense Entry No.");
                                                                Expense.TESTFIELD(Posted,FALSE);
                                                                IF "Continia User ID" <> xRec."Continia User ID" THEN
                                                                  IF "Continia User ID" <> Expense."Continia User ID" THEN
                                                                    Expense.TESTFIELD("Matched to Bank Transaction",FALSE);
                                                                Expense.TESTFIELD(Status,Expense.Status::Open);

                                                                VALIDATE("Expense Type");
                                                                AddDefaultDim(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Continia User ID }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 6   ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 7   ;   ;Date Created        ;Date          ;CaptionML=ENU=Date Created }
    { 8   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Expense Type");
                                                              END;

                                                   CaptionML=ENU=Country/Region Code;
                                                   NotBlank=Yes }
    { 9   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 10  ;   ;No Refund           ;Boolean       ;CaptionML=ENU=No Refund }
    { 11  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmount(FIELDNO(Amount));
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 12  ;   ;Amount (LCY)        ;Decimal       ;CaptionML=ENU=Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Bank-Currency Amount;Decimal       ;CaptionML=ENU=Bank-Currency Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Bank Currency Code" }
    { 19  ;   ;Bank Currency Code  ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Bank Currency Code;
                                                   Editable=No }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=VAR
                                                                GLSetup@1160040001 : Record 98;
                                                                SplitAndAllocationMgt@1160040002 : Codeunit 6086301;
                                                              BEGIN
                                                                GLSetup.GET;
                                                                IF GLSetup."Global Dimension 1 Code" <> '' THEN
                                                                  SplitAndAllocationMgt.UpdateExpAllocDim("Entry No.",GLSetup."Global Dimension 1 Code","Global Dimension 1 Code",FALSE);
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                GLSetup@1160040001 : Record 98;
                                                                SplitAndAllocationMgt@1160040002 : Codeunit 6086301;
                                                              BEGIN
                                                                GLSetup.GET;
                                                                IF GLSetup."Global Dimension 2 Code" <> '' THEN
                                                                  SplitAndAllocationMgt.UpdateExpAllocDim("Entry No.",GLSetup."Global Dimension 2 Code","Global Dimension 2 Code",FALSE);
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 27  ;   ;Business Description;Text250       ;CaptionML=ENU=Business Description;
                                                   Editable=No }
    { 50  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Job No. }
    { 51  ;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=ENU=Job Task No. }
    { 52  ;   ;Billable            ;Boolean       ;OnValidate=BEGIN
                                                                IF Billable THEN
                                                                  "Job Line Type" := "Job Line Type"::Contract
                                                                ELSE
                                                                  "Job Line Type" := "Job Line Type"::" ";
                                                              END;

                                                   CaptionML=ENU=Billable }
    { 53  ;   ;Job Line Type       ;Option        ;CaptionML=ENU=Job Line Type;
                                                   OptionCaptionML=ENU=" ,Budget,Billable,Both Budget and Billable";
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 60  ;   ;Cash/Private Card   ;Boolean       ;CaptionML=ENU=Cash/Private Card;
                                                   Editable=No }
    { 73  ;   ;Original Expense Entry No.;Integer ;TableRelation=Expense;
                                                   CaptionML=ENU=Original Expense Entry No. }
    { 109 ;   ;Expense Account Type;Option        ;OnValidate=BEGIN
                                                                IF xRec."Expense Account Type" <> "Expense Account Type" THEN
                                                                  CLEAR("Expense Account");
                                                              END;

                                                   CaptionML=ENU=Expense Account Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Lessor Pay Type,Bluegarden Pay Type";
                                                   OptionString=[ ,G/L Account,Lessor Pay Type,Bluegarden Pay Type] }
    { 110 ;   ;Expense Account     ;Code20        ;OnValidate=VAR
                                                                GLAcc@1160040000 : Record 15;
                                                                LessorIntegration@1160040001 : Codeunit 6086327;
                                                                BluegardenIntegration@1160040002 : Codeunit 6086328;
                                                              BEGIN
                                                                CASE "Expense Account Type" OF
                                                                  "Expense Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Expense Account");
                                                                      GLAcc.CheckGLAcc;
                                                                    END;

                                                                  "Expense Account Type"::"Lessor Pay Type":
                                                                    LessorIntegration.ValidatePayType("Expense Account");

                                                                  "Expense Account Type"::"Bluegarden Pay Type":
                                                                    BluegardenIntegration.ValidatePayType("Expense Account");
                                                                END;

                                                                "Exp. Account Manually Changed" := CurrFieldNo = FIELDNO("Expense Account");
                                                                AddDefaultDim(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Expense Account }
    { 111 ;   ;Exp. Account Manually Changed;Boolean;
                                                   CaptionML=ENU=Expense Account Manually Changed }
    { 112 ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 113 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 114 ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 115 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 180 ;   ;Expense Type        ;Code20        ;TableRelation="Expense Type";
                                                   OnValidate=VAR
                                                                ContiniaUserSetup@1160040001 : Record 6086002;
                                                                ExpenseType@1160040000 : Record 6086307;
                                                                ExpPostingSetup@1160040002 : Record 6086309;
                                                              BEGIN
                                                                IF NOT ExpenseType.GET("Expense Type") THEN
                                                                  CLEAR(ExpenseType);

                                                                VALIDATE("No Refund",ExpenseType."No Refund");

                                                                IF (ExpenseType.Code <> '') AND ExpPostingSetup.FindPostingSetup(
                                                                   "Expense Type","Country/Region Code","Continia User ID", ContiniaUserSetup."Expense User Group")
                                                                THEN BEGIN
                                                                  VALIDATE("Expense Account Type",ExpPostingSetup."Posting Account Type");
                                                                  "Expense Account" := ExpPostingSetup."Posting Account No.";
                                                                  "Gen. Prod. Posting Group" := ExpPostingSetup."Gen. Prod. Posting Group";
                                                                  "Gen. Bus. Posting Group" := ExpPostingSetup."Gen. Bus. Posting Group";
                                                                  "VAT Prod. Posting Group" := ExpPostingSetup."VAT Prod. Posting Group";
                                                                  "VAT Bus. Posting Group" := ExpPostingSetup."VAT Bus. Posting Group";
                                                                END ELSE BEGIN
                                                                  CLEAR("Expense Account Type");
                                                                  CLEAR("Expense Account");
                                                                  "Gen. Prod. Posting Group" := '';
                                                                  "Gen. Bus. Posting Group" := '';
                                                                  "VAT Prod. Posting Group" := '';
                                                                  "VAT Bus. Posting Group" := '';
                                                                END;

                                                                "Exp. Account Manually Changed" := FALSE;
                                                                AddDefaultDim(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Expense Type }
    { 270 ;   ;No. of Attendees    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Expense Attendee" WHERE (Expense Entry No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=No. of Attendees;
                                                   Editable=No }
    { 300 ;   ;Expense Entry No.   ;Integer       ;TableRelation=Expense;
                                                   CaptionML=ENU=Expense Entry No.;
                                                   NotBlank=Yes }
    { 301 ;   ;Modified            ;Boolean       ;CaptionML=ENU=Modified }
    { 304 ;   ;Amount %            ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmount(FIELDNO("Amount %"));
                                                              END;

                                                   CaptionML=ENU=Amount %;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Expense Entry No.                       ;SumIndexFields=Amount,Amount (LCY) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1160040001 : TextConst 'ENU=The %1 must be inserted before you can show dimensions.';

    PROCEDURE UpdateAmount@1160040003(CalledByFieldNo@1160040002 : Integer);
    VAR
      Currency@1160040008 : Record 4;
      BankAccCurrency@1160040003 : Record 4;
      GLSetup@1160040005 : Record 98;
      Expense@1160040000 : Record 6086320;
      CurrencyDate@1160040001 : Date;
      CurrencyFactor@1160040009 : Decimal;
    BEGIN
      GLSetup.GET;
      Expense.GET("Expense Entry No.");
      IF Expense."Currency Code" <> '' THEN BEGIN
        IF "Document Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Document Date";

        IF Expense.Amount <> 0 THEN
          CurrencyFactor := Expense."Amount (LCY)" / Expense.Amount
        ELSE
          CurrencyFactor := 1;

        Currency.GET(Expense."Currency Code");
        Currency.CheckAmountRoundingPrecision;
      END ELSE BEGIN
        Currency.InitRoundingPrecision;
        CurrencyFactor := 1;
      END;

      IF "Bank Currency Code" <> '' THEN BEGIN
        BankAccCurrency.GET("Bank Currency Code");
        BankAccCurrency.CheckAmountRoundingPrecision;
      END ELSE
        BankAccCurrency.InitRoundingPrecision;

      CASE CalledByFieldNo OF

        FIELDNO(Amount):
          IF Expense.Amount = 0 THEN BEGIN
            "Amount (LCY)" := 0;
            "Amount %" := 100;
            "Bank-Currency Amount" := 0;
          END ELSE BEGIN
            "Amount (LCY)" := ROUND(Amount * CurrencyFactor);
            "Amount %" := Amount / Expense.Amount * 100;
            "Bank-Currency Amount" :=
              ROUND("Amount %" / 100 *
               Expense."Bank-Currency Amount",BankAccCurrency."Amount Rounding Precision");;
          END;

        FIELDNO("Amount %"):
          BEGIN
            Amount := ROUND("Amount %" / 100 * Expense.Amount,Currency."Amount Rounding Precision");
            "Amount (LCY)" := ROUND("Amount %" / 100 * Expense."Amount (LCY)");
            "Bank-Currency Amount" :=
              ROUND("Amount %" / 100 *
                Expense."Bank-Currency Amount",BankAccCurrency."Amount Rounding Precision");
          END;

      END;
    END;

    PROCEDURE ShowDimensions@1160040000(ReadOnly@1160040001 : Boolean);
    VAR
      ExpenseDimMgt@1160040000 : Codeunit 6086318;
    BEGIN
      IF "Entry No." = 0 THEN
        ERROR(Text002,TABLECAPTION);
      ExpenseDimMgt.ShowExpAllocDim(Rec,ReadOnly);
    END;

    PROCEDURE GetLastEntryNo@1160040004() : Integer;
    VAR
      ExpenseAllocation@1160040000 : Record 6086321;
    BEGIN
      IF ExpenseAllocation.FINDLAST THEN
        EXIT(ExpenseAllocation."Entry No.")
      ELSE
        EXIT(1);
    END;

    PROCEDURE TestNotPosted@1160040006();
    VAR
      Expense@1160040000 : Record 6086320;
    BEGIN
      Expense.GET("Expense Entry No.");
      Expense.TESTFIELD(Posted,FALSE);
    END;

    PROCEDURE LookupDimensions@1160040025(Editable@1160040000 : Boolean);
    BEGIN
      DrillDownDimensions(PAGE::"Expense Dimensions",Editable);
    END;

    PROCEDURE LookupExtraFields@1160040028(Editable@1160040000 : Boolean);
    BEGIN
      DrillDownDimensions(PAGE::"Expense Extra Fields",Editable);
    END;

    LOCAL PROCEDURE DrillDownDimensions@1160040014(FormID@1160040004 : Integer;Editable@1160040006 : Boolean);
    VAR
      EMDim@1160040000 : Record 6086360;
      TempEMDim@1160040002 : TEMPORARY Record 6086360;
      ExpDim@1160040001 : Page 6086356;
      ExpExtraFields@1160040005 : Page 6086358;
      SendToExpUser@1160040003 : Codeunit 6086324;
      Expense@1160040007 : Record 6086320;
    BEGIN
      EMDim.SETRANGE("Table ID",DATABASE::Expense);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.","Entry No.");

      Expense.GET("Expense Entry No.");

      IF (NOT Expense.Posted) AND Editable THEN BEGIN
        IF EMDim.FINDSET THEN
          REPEAT
            TempEMDim := EMDim;
            TempEMDim.INSERT;
          UNTIL EMDim.NEXT = 0;

        TempEMDim.SETRANGE("Table ID",DATABASE::Expense);
        TempEMDim.SETRANGE("Document Type",0);
        TempEMDim.SETRANGE("Document No.",'');
        TempEMDim.SETRANGE("Doc. Ref. No.","Entry No.");
        PAGE.RUNMODAL(FormID,TempEMDim);

        IF EMDim.EMDimUpdated(TempEMDim,DATABASE::Expense,0,'',"Entry No.") THEN BEGIN
          EMDim.DELETEALL(TRUE);

          IF TempEMDim.FINDSET THEN
            REPEAT
              EMDim := TempEMDim;
              EMDim.INSERT(TRUE);
            UNTIL TempEMDim.NEXT = 0;

          Expense.GET("Expense Entry No.");
          IF Expense.Status = Expense.Status::"Pending Expense User" THEN
            SendToExpUser.UpdateWithoutFiles(Expense);

          CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
        END;
      END ELSE
        CASE FormID OF
          PAGE::"Expense Dimensions":
            BEGIN
              ExpDim.SETTABLEVIEW(EMDim);
              ExpDim.SetReadOnly;
              ExpDim.RUNMODAL;
            END;

          PAGE::"Expense Extra Fields":
            BEGIN
              ExpExtraFields.SETTABLEVIEW(EMDim);
              ExpExtraFields.SetReadOnly;
              ExpExtraFields.RUNMODAL;
            END;
        END;
    END;

    PROCEDURE LookupPostingAccount@1000000000(VAR Text@1000000000 : Text[1024]) : Boolean;
    VAR
      GLAcc@1000000003 : Record 15;
      LessorIntegration@1000000002 : Codeunit 6086327;
      BluegardenIntegration@1000000001 : Codeunit 6086328;
    BEGIN
      CASE "Expense Account Type" OF
        "Expense Account Type"::"G/L Account":
          BEGIN
            IF GLAcc.GET(Text) THEN;
            IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN BEGIN
              Text := GLAcc."No.";
              EXIT(TRUE);
            END;
          END;

        "Expense Account Type"::"Lessor Pay Type":
          EXIT(LessorIntegration.LookupPayType(Text));

        "Expense Account Type"::"Bluegarden Pay Type":
          EXIT(BluegardenIntegration.LookupPayType(Text));
      END;
    END;

    PROCEDURE AddDefaultDim@1160040024(ValidatedFieldNo@1160040002 : Integer);
    VAR
      ContiniaUser@1160040001 : Record 6086002;
      EMDimMgt@1160040000 : Codeunit 6086318;
    BEGIN
      IF "Entry No." = 0 THEN
        EXIT;

      DeleteOldDefaultDim;

      IF ContiniaUser.GET("Continia User ID") THEN BEGIN
        IF ContiniaUser.GetSalesPurchCode <> '' THEN
          EMDimMgt.InsertDefaultDimAllocation(DATABASE::"Salesperson/Purchaser",ContiniaUser.GetSalesPurchCode,Rec);

        IF ContiniaUser."Vendor No." <> '' THEN
          EMDimMgt.InsertDefaultDimAllocation(DATABASE::Vendor,ContiniaUser."Vendor No.",Rec);
      END;

      IF "Expense Account" <> '' THEN
        EMDimMgt.InsertDefaultDimAllocation(DATABASE::"G/L Account","Expense Account",Rec);

      IF "Expense Type" <> '' THEN
        EMDimMgt.InsertDefaultDimAllocation(DATABASE::"Expense Type","Expense Type",Rec);

      IF "Job No." <> '' THEN
        EMDimMgt.InsertDefaultDimAllocation(DATABASE::Job,"Job No.",Rec);

      CASE ValidatedFieldNo OF
        FIELDNO("Continia User ID"):
          IF ContiniaUser.GET("Continia User ID") THEN BEGIN
            IF ContiniaUser.GetSalesPurchCode <> '' THEN
              EMDimMgt.InsertDefaultDimAllocation(DATABASE::"Salesperson/Purchaser",ContiniaUser.GetSalesPurchCode,Rec);

            IF ContiniaUser."Vendor No." <> '' THEN
              EMDimMgt.InsertDefaultDimAllocation(DATABASE::Vendor,ContiniaUser."Vendor No.",Rec);
          END;

        FIELDNO("Expense Account"):
          IF "Expense Account" <> '' THEN
            EMDimMgt.InsertDefaultDimAllocation(DATABASE::"G/L Account","Expense Account",Rec);

        FIELDNO("Expense Type"):
          IF "Expense Type" <> '' THEN
            EMDimMgt.InsertDefaultDimAllocation(DATABASE::"Expense Type","Expense Type",Rec);

        FIELDNO("Job No."):
          IF "Job No." <> '' THEN
            EMDimMgt.InsertDefaultDimAllocation(DATABASE::Job,"Job No.",Rec);
      END;
    END;

    LOCAL PROCEDURE DeleteOldDefaultDim@1160040026();
    VAR
      ContiniaUser@1160040001 : Record 6086002;
      EMDimMgt@1160040000 : Codeunit 6086318;
    BEGIN
      IF ContiniaUser.GET(xRec."Continia User ID") THEN BEGIN
        IF ContiniaUser.GetSalesPurchCode <> '' THEN
          EMDimMgt.DeleteDefaultDimAllocation(DATABASE::"Salesperson/Purchaser",ContiniaUser.GetSalesPurchCode,Rec);

        IF ContiniaUser."Vendor No." <> '' THEN
          EMDimMgt.DeleteDefaultDimAllocation(DATABASE::Vendor,ContiniaUser."Vendor No.",Rec);
      END;

      IF xRec."Expense Type" <> '' THEN
        EMDimMgt.DeleteDefaultDimAllocation(DATABASE::"Expense Type",xRec."Expense Type",Rec);

      IF xRec."Expense Account" <> '' THEN
        EMDimMgt.DeleteDefaultDimAllocation(DATABASE::"G/L Account",xRec."Expense Account",Rec);

      IF xRec."Job No." <> '' THEN
        EMDimMgt.DeleteDefaultDimAllocation(DATABASE::Job,xRec."Job No.",Rec);
    END;

    BEGIN
    END.
  }
}

