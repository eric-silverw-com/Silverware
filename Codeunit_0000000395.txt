OBJECT Codeunit 395 FinChrgMemo-Issue
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rm,
                TableData 300=rimd,
                TableData 304=rimd,
                TableData 305=rimd;
    OnRun=VAR
            CustPostingGr@1002 : Record 92;
            CustLedgEntry@1004 : Record 21;
            FinChrgMemoLine@1001 : Record 303;
            ReminderFinChargeEntry@1000 : Record 300;
            FinChrgCommentLine@1006 : Record 306;
          BEGIN
            OnBeforeIssueFinChargeMemo(FinChrgMemoHeader);

            WITH FinChrgMemoHeader DO BEGIN
              UpdateFinanceChargeRounding(FinChrgMemoHeader);
              IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
                VALIDATE("Posting Date",PostingDate);
              TESTFIELD("Customer No.");
              TESTFIELD("Posting Date");
              TESTFIELD("Document Date");
              TESTFIELD("Due Date");
              TESTFIELD("Customer Posting Group");
              IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
                ERROR(
                  Text002,
                  TABLECAPTION,"No.",DimMgt.GetDimCombErr);

              TableID[1] := DATABASE::Customer;
              No[1] := "Customer No.";
              IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
                ERROR(
                  Text003,
                  TABLECAPTION,"No.",DimMgt.GetDimValuePostingErr);

              CustPostingGr.GET("Customer Posting Group");
              CALCFIELDS("Interest Amount","Additional Fee","Remaining Amount");
              IF ("Interest Amount" = 0) AND ("Additional Fee" = 0) AND ("Remaining Amount" = 0) THEN
                ERROR(Text000);
              SourceCodeSetup.GET;
              SourceCodeSetup.TESTFIELD("Finance Charge Memo");
              SrcCode := SourceCodeSetup."Finance Charge Memo";

              IF ("Issuing No." = '') AND ("No. Series" <> "Issuing No. Series") THEN BEGIN
                TESTFIELD("Issuing No. Series");
                "Issuing No." := NoSeriesMgt.GetNextNo("Issuing No. Series","Posting Date",TRUE);
                MODIFY;
                COMMIT;
              END;
              IF "Issuing No." = '' THEN
                DocNo := "No."
              ELSE
                DocNo := "Issuing No.";

              FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","No.");
              FinChrgMemoLine.SETRANGE("Detailed Interest Rates Entry",FALSE);
              IF FinChrgMemoLine.FIND('-') THEN
                REPEAT
                  CASE FinChrgMemoLine.Type OF
                    FinChrgMemoLine.Type::" ":
                      FinChrgMemoLine.TESTFIELD(Amount,0);
                    FinChrgMemoLine.Type::"G/L Account":
                      IF (FinChrgMemoLine.Amount <> 0) AND "Post Additional Fee" THEN BEGIN
                        FinChrgMemoLine.TESTFIELD("No.");
                        InitGenJnlLine(GenJnlLine."Account Type"::"G/L Account",
                          FinChrgMemoLine."No.",
                          FinChrgMemoLine."Line Type" = FinChrgMemoLine."Line Type"::Rounding);
                        GenJnlLine."Gen. Prod. Posting Group" := FinChrgMemoLine."Gen. Prod. Posting Group";
                        GenJnlLine."VAT Prod. Posting Group" := FinChrgMemoLine."VAT Prod. Posting Group";
                        GenJnlLine."VAT Calculation Type" := FinChrgMemoLine."VAT Calculation Type";
                        IF FinChrgMemoLine."VAT Calculation Type" =
                           FinChrgMemoLine."VAT Calculation Type"::"Sales Tax"
                        THEN BEGIN
                          GenJnlLine."Tax Area Code" := "Tax Area Code";
                          GenJnlLine."Tax Liable" := "Tax Liable";
                          GenJnlLine."Tax Group Code" := FinChrgMemoLine."Tax Group Code";
                        END;
                        GenJnlLine."VAT %" := FinChrgMemoLine."VAT %";
                        GenJnlLine.VALIDATE(Amount,-FinChrgMemoLine.Amount - FinChrgMemoLine."VAT Amount");
                        GenJnlLine."VAT Amount" := -FinChrgMemoLine."VAT Amount";
                        GenJnlLine.UpdateLineBalance;
                        TotalAmount := TotalAmount - GenJnlLine.Amount;
                        TotalAmountLCY := TotalAmountLCY - GenJnlLine."Balance (LCY)";
                        GenJnlLine."Bill-to/Pay-to No." := "Customer No.";
                        GenJnlLine.INSERT;
                      END;
                    FinChrgMemoLine.Type::"Customer Ledger Entry":
                      BEGIN
                        FinChrgMemoLine.TESTFIELD("Entry No.");
                        CustLedgEntry.GET(FinChrgMemoLine."Entry No.");
                        CustLedgEntry.TESTFIELD("Currency Code","Currency Code");
                        IF FinChrgMemoLine.Amount < 0 THEN
                          FinChrgMemoLine.FIELDERROR(Amount,Text001);
                        FinChrgMemoInterestAmount := FinChrgMemoInterestAmount + FinChrgMemoLine.Amount;
                        FinChrgMemoInterestVATAmount := FinChrgMemoInterestVATAmount + FinChrgMemoLine."VAT Amount";
                      END;
                  END;
                UNTIL FinChrgMemoLine.NEXT = 0;

              IF (FinChrgMemoInterestAmount <> 0) AND "Post Interest" THEN BEGIN
                InitGenJnlLine(GenJnlLine."Account Type"::"G/L Account",CustPostingGr.GetInterestAccount,TRUE);
                GenJnlLine.VALIDATE("VAT Bus. Posting Group","VAT Bus. Posting Group");
                GenJnlLine.VALIDATE(Amount,-FinChrgMemoInterestAmount - FinChrgMemoInterestVATAmount);
                GenJnlLine.UpdateLineBalance;
                TotalAmount := TotalAmount - GenJnlLine.Amount;
                TotalAmountLCY := TotalAmountLCY - GenJnlLine."Balance (LCY)";
                GenJnlLine."Bill-to/Pay-to No." := "Customer No.";
                GenJnlLine.INSERT;
              END;

              IF (TotalAmount <> 0) OR (TotalAmountLCY <> 0) THEN BEGIN
                InitGenJnlLine(GenJnlLine."Account Type"::Customer,"Customer No.",TRUE);
                GenJnlLine.VALIDATE(Amount,TotalAmount);
                GenJnlLine.VALIDATE("Amount (LCY)",TotalAmountLCY);
                GenJnlLine.INSERT;
              END;
              IF GenJnlLine.FIND('-') THEN
                REPEAT
                  GenJnlLine2 := GenJnlLine;
                  GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
                  GenJnlPostLine.RunWithCheck(GenJnlLine2);
                UNTIL GenJnlLine.NEXT = 0;

              GenJnlLine.DELETEALL;

              IF FinChrgMemoInterestAmount <> 0 THEN BEGIN
                TESTFIELD("Fin. Charge Terms Code");
                FinChrgTerms.GET("Fin. Charge Terms Code");
                IF FinChrgTerms."Interest Calculation" IN
                   [FinChrgTerms."Interest Calculation"::"Closed Entries",
                    FinChrgTerms."Interest Calculation"::"All Entries"]
                THEN BEGIN
                  FinChrgMemoLine.SETRANGE(Type,FinChrgMemoLine.Type::"Customer Ledger Entry");
                  IF FinChrgMemoLine.FIND('-') THEN
                    REPEAT
                      UpdateCustLedgEntriesCalculateInterest(FinChrgMemoLine."Entry No.","Document Date");
                    UNTIL FinChrgMemoLine.NEXT = 0;
                  FinChrgMemoLine.SETRANGE(Type);
                END;
              END;

              InsertIssuedFinChrgMemoHeader(FinChrgMemoHeader,IssuedFinChrgMemoHeader);

              IF NextEntryNo = 0 THEN BEGIN
                ReminderFinChargeEntry.LOCKTABLE;
                IF ReminderFinChargeEntry.FINDLAST THEN
                  NextEntryNo := ReminderFinChargeEntry."Entry No." + 1
                ELSE
                  NextEntryNo := 1;
              END;

              FinChrgCommentLine.CopyComments(
                FinChrgCommentLine.Type::"Finance Charge Memo",FinChrgCommentLine.Type::"Issued Finance Charge Memo","No.",
                IssuedFinChrgMemoHeader."No.");

              FinChrgMemoLine.SETRANGE("Detailed Interest Rates Entry");
              IF FinChrgMemoLine.FINDSET THEN
                REPEAT
                  IF (FinChrgMemoLine.Type = FinChrgMemoLine.Type::"Customer Ledger Entry") AND
                     NOT FinChrgMemoLine."Detailed Interest Rates Entry"
                  THEN BEGIN
                    InsertFinChargeEntry(IssuedFinChrgMemoHeader,FinChrgMemoLine);
                    NextEntryNo := NextEntryNo + 1;
                  END;
                  InsertIssuedFinChrgMemoLine(FinChrgMemoLine,IssuedFinChrgMemoHeader."No.");
                UNTIL FinChrgMemoLine.NEXT = 0;

              FinChrgMemoLine.DELETEALL;
              DELETE;
            END;

            OnAfterIssueFinChargeMemo(FinChrgMemoHeader,IssuedFinChrgMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There is nothing to issue.;ESM=No hay nada para emitir.;FRC=Il n''y a rien … ‚mettre.;ENC=There is nothing to issue.';
      Text001@1001 : TextConst 'ENU=must be positive or 0;ESM=debe ser mayor o igual que cero.;FRC=doit ˆtre positif ou 0;ENC=must be positive or 0';
      Text002@1002 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ESM=La combinaci¢n de dimensiones utilizada en %1 %2 est  bloqueada. %3;FRC=La combinaison de dimensions utilis‚e dans %1 %2 est bloqu‚e. %3;ENC=The combination of dimensions used in %1 %2 is blocked. %3';
      Text003@1003 : TextConst 'ENU=A dimension in %1 %2 has caused an error. %3;ESM=Una dim. en %1 %2 ha producido un error. %3;FRC=Une dimension dans %1 %2 a provoqu‚ une erreur. %3;ENC=A dimension in %1 %2 has caused an error. %3';
      SourceCodeSetup@1004 : Record 242;
      FinChrgTerms@1008 : Record 5;
      FinChrgMemoHeader@1009 : Record 302;
      IssuedFinChrgMemoHeader@1011 : Record 304;
      GenJnlLine@1016 : TEMPORARY Record 81;
      GenJnlLine2@1017 : Record 81;
      SourceCode@1018 : Record 230;
      DimMgt@1022 : Codeunit 408;
      NoSeriesMgt@1023 : Codeunit 396;
      GenJnlPostLine@1024 : Codeunit 12;
      DocNo@1025 : Code[20];
      NextEntryNo@1026 : Integer;
      ReplacePostingDate@1027 : Boolean;
      PostingDate@1028 : Date;
      SrcCode@1029 : Code[10];
      FinChrgMemoInterestAmount@1030 : Decimal;
      FinChrgMemoInterestVATAmount@1031 : Decimal;
      TotalAmount@1032 : Decimal;
      TotalAmountLCY@1033 : Decimal;
      TableID@1034 : ARRAY [10] OF Integer;
      No@1035 : ARRAY [10] OF Code[20];

    [External]
    PROCEDURE Set@6(VAR NewFinChrgMemoHeader@1000 : Record 302;NewReplacePostingDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      FinChrgMemoHeader := NewFinChrgMemoHeader;
      ReplacePostingDate := NewReplacePostingDate;
      PostingDate := NewPostingDate;
    END;

    [External]
    PROCEDURE GetIssuedFinChrgMemo@10(VAR NewIssuedFinChrgMemoHeader@1000 : Record 304);
    BEGIN
      NewIssuedFinChrgMemoHeader := IssuedFinChrgMemoHeader;
    END;

    LOCAL PROCEDURE InitGenJnlLine@7(AccType@1000 : Integer;AccNo@1001 : Code[20];SystemCreatedEntry@1002 : Boolean);
    BEGIN
      WITH FinChrgMemoHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Line No." := GenJnlLine."Line No." + 1;
        GenJnlLine."Document Type" := GenJnlLine."Document Type"::"Finance Charge Memo";
        GenJnlLine."Document No." := DocNo;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine."Account Type" := AccType;
        GenJnlLine."Account No." := AccNo;
        GenJnlLine.VALIDATE("Account No.");
        IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" THEN BEGIN
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
          GenJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
          GenJnlLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
        END;
        GenJnlLine.VALIDATE("Currency Code","Currency Code");
        IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN BEGIN
          GenJnlLine.VALIDATE(Amount,TotalAmount);
          GenJnlLine.VALIDATE("Amount (LCY)",TotalAmountLCY);
          GenJnlLine."Due Date" := "Due Date";
        END;
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."System-Created Entry" := SystemCreatedEntry;
        GenJnlLine."Posting No. Series" := "Issuing No. Series";
        GenJnlLine."Salespers./Purch. Code" := '';
        OnAfterInitGenJnlLine(GenJnlLine,FinChrgMemoHeader);
      END;
    END;

    [External]
    PROCEDURE DeleteIssuedFinChrgLines@1(IssuedFinChrgMemoHeader@1000 : Record 304);
    VAR
      IssuedFinChrgMemoLine@1001 : Record 305;
    BEGIN
      IssuedFinChrgMemoLine.SETRANGE("Finance Charge Memo No.",IssuedFinChrgMemoHeader."No.");
      IssuedFinChrgMemoLine.DELETEALL;
    END;

    [External]
    PROCEDURE IncrNoPrinted@3(VAR IssuedFinChrgMemoHeader@1000 : Record 304);
    BEGIN
      WITH IssuedFinChrgMemoHeader DO BEGIN
        FIND;
        "No. Printed" := "No. Printed" + 1;
        MODIFY;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE TestDeleteHeader@19(FinChrgMemoHeader@1000 : Record 302;VAR IssuedFinChrgMemoHeader@1001 : Record 304);
    BEGIN
      WITH FinChrgMemoHeader DO BEGIN
        CLEAR(IssuedFinChrgMemoHeader);
        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Issuing No. Series" <> '') AND
           (("Issuing No." <> '') OR ("No. Series" = "Issuing No. Series"))
        THEN BEGIN
          IssuedFinChrgMemoHeader.TRANSFERFIELDS(FinChrgMemoHeader);
          IF "Issuing No." <> '' THEN
            IssuedFinChrgMemoHeader."No." := "Issuing No.";
          IssuedFinChrgMemoHeader."Pre-Assigned No. Series" := "No. Series";
          IssuedFinChrgMemoHeader."Pre-Assigned No." := "No.";
          IssuedFinChrgMemoHeader."Posting Date" := TODAY;
          IssuedFinChrgMemoHeader."User ID" := USERID;
          IssuedFinChrgMemoHeader."Source Code" := SourceCode.Code;
        END;
      END;
    END;

    [External]
    PROCEDURE DeleteHeader@18(FinChrgMemoHeader@1000 : Record 302;VAR IssuedFinChrgMemoHeader@1001 : Record 304);
    VAR
      IssuedFinChrgMemoLine@1002 : Record 305;
    BEGIN
      WITH FinChrgMemoHeader DO BEGIN
        TestDeleteHeader(FinChrgMemoHeader,IssuedFinChrgMemoHeader);
        IF IssuedFinChrgMemoHeader."No." <> '' THEN BEGIN
          IssuedFinChrgMemoHeader."Shortcut Dimension 1 Code" := '';
          IssuedFinChrgMemoHeader."Shortcut Dimension 2 Code" := '';
          IssuedFinChrgMemoHeader.INSERT;
          IssuedFinChrgMemoLine.INIT;
          IssuedFinChrgMemoLine."Finance Charge Memo No." := "No.";
          IssuedFinChrgMemoLine."Line No." := 10000;
          IssuedFinChrgMemoLine.Description := SourceCode.Description;
          IssuedFinChrgMemoLine.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertIssuedFinChrgMemoHeader@5(FinChrgMemoHeader@1000 : Record 302;VAR IssuedFinChrgMemoHeader@1001 : Record 304);
    BEGIN
      IssuedFinChrgMemoHeader.INIT;
      IssuedFinChrgMemoHeader.TRANSFERFIELDS(FinChrgMemoHeader);
      IssuedFinChrgMemoHeader."No." := DocNo;
      IssuedFinChrgMemoHeader."Pre-Assigned No." := FinChrgMemoHeader."No.";
      IssuedFinChrgMemoHeader."Source Code" := SrcCode;
      IssuedFinChrgMemoHeader."User ID" := USERID;
      IssuedFinChrgMemoHeader.INSERT;
    END;

    LOCAL PROCEDURE InsertIssuedFinChrgMemoLine@8(FinChrgMemoLine@1000 : Record 303;IssuedDocNo@1001 : Code[20]);
    VAR
      IssuedFinChrgMemoLine@1002 : Record 305;
    BEGIN
      IssuedFinChrgMemoLine.INIT;
      IssuedFinChrgMemoLine.TRANSFERFIELDS(FinChrgMemoLine);
      IssuedFinChrgMemoLine."Finance Charge Memo No." := IssuedDocNo;
      IssuedFinChrgMemoLine.INSERT;
    END;

    LOCAL PROCEDURE InsertFinChargeEntry@11(IssuedFinChrgMemoHeader@1000 : Record 304;FinChrgMemoLine@1001 : Record 303);
    VAR
      ReminderFinChargeEntry@1002 : Record 300;
    BEGIN
      WITH ReminderFinChargeEntry DO BEGIN
        INIT;
        "Entry No." := NextEntryNo;
        Type := Type::"Finance Charge Memo";
        "No." := IssuedFinChrgMemoHeader."No.";
        "Posting Date" := IssuedFinChrgMemoHeader."Posting Date";
        "Due Date" := IssuedFinChrgMemoHeader."Due Date";
        "Document Date" := IssuedFinChrgMemoHeader."Document Date";
        "Customer No." := IssuedFinChrgMemoHeader."Customer No.";
        "Customer Entry No." := FinChrgMemoLine."Entry No.";
        "Document Type" := FinChrgMemoLine."Document Type";
        "Document No." := FinChrgMemoLine."Document No.";
        "Remaining Amount" := FinChrgMemoLine."Remaining Amount";
        "Interest Amount" := FinChrgMemoLine.Amount;
        "Interest Posted" := (FinChrgMemoInterestAmount <> 0) AND FinChrgMemoHeader."Post Interest";
        "User ID" := USERID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateCustLedgEntriesCalculateInterest@9(EntryNo@1000 : Integer;DocumentDate@1003 : Date);
    VAR
      CustLedgerEntry@1001 : Record 21;
      CustLedgerEntry2@1002 : Record 21;
    BEGIN
      CustLedgerEntry.GET(EntryNo);
      CustLedgerEntry.SETFILTER("Date Filter",'..%1',DocumentDate);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      IF CustLedgerEntry."Remaining Amount" = 0 THEN BEGIN
        CustLedgerEntry."Calculate Interest" := FALSE;
        CustLedgerEntry.MODIFY;
      END;
      CustLedgerEntry2.SETCURRENTKEY("Closed by Entry No.");
      CustLedgerEntry2.SETRANGE("Closed by Entry No.",EntryNo);
      CustLedgerEntry2.SETRANGE("Closing Interest Calculated",FALSE);
      CustLedgerEntry2.MODIFYALL("Closing Interest Calculated",TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitGenJnlLine@13(VAR GenJnlLine@1000 : Record 81;FinChargeMemoHeader@1001 : Record 302);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIssueFinChargeMemo@2(VAR FinChargeMemoHeader@1000 : Record 302;IssuedFinChargeMemoNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIssueFinChargeMemo@4(VAR FinChargeMemoHeader@1000 : Record 302);
    BEGIN
    END;

    BEGIN
    END.
  }
}

