OBJECT Page 781 Sales Pipeline Chart
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Pipeline;
               ESM=Potencial de ventas;
               FRC=Pr‚visionnel ventes;
               ENC=Sales Pipeline];
    PageType=CardPart;
    OnOpenPage=BEGIN
                 IsChartDataReady :=
                   SalesPipelineChartMgt.SetDefaultSalesCycle(SalesCycle,NextSalesCycleAvailable,PrevSalesCycleAvailable);
               END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 5       ;1   ;Action    ;
                      Name=PrevSalesCycle;
                      CaptionML=[ENU=Previous Sales Cycle;
                                 ESM=Ciclo de ventas anterior;
                                 FRC=Cycle de vente pr‚c‚dent;
                                 ENC=Previous Sales Cycle];
                      ToolTipML=[ENU=View the previous chart.;
                                 ESM=Permite ver el gr fico anterior.;
                                 FRC=Affichez le graphique pr‚c‚dent.;
                                 ENC=View the previous chart.];
                      ApplicationArea=#RelationshipMgmt;
                      Enabled=PrevSalesCycleAvailable;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 SalesPipelineChartMgt.SetPrevNextSalesCycle(SalesCycle,NextSalesCycleAvailable,PrevSalesCycleAvailable,-1);
                                 UpdateChart(SalesCycle);
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=NextSalesCycle;
                      CaptionML=[ENU=Next Sales Cycle;
                                 ESM=Ciclo de ventas siguiente;
                                 FRC=Cycle de vente suivant;
                                 ENC=Next Sales Cycle];
                      ToolTipML=[ENU=View the next chart.;
                                 ESM=Permite ver el gr fico siguiente.;
                                 FRC=Affichez le graphique suivant.;
                                 ENC=View the next chart.];
                      ApplicationArea=#RelationshipMgmt;
                      Enabled=NextSalesCycleAvailable;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 SalesPipelineChartMgt.SetPrevNextSalesCycle(SalesCycle,NextSalesCycleAvailable,PrevSalesCycleAvailable,1);
                                 UpdateChart(SalesCycle);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=StatusText;
                CaptionML=[ENU=Status Text;
                           ESM=Texto de estado;
                           FRC=Texte d'‚tat;
                           ENC=Status Text];
                ToolTipML=[ENU=Specifies the status of the chart.;
                           ESM=Especifica el estado del gr fico.;
                           FRC=Indique l'‚tat du graphique.;
                           ENC=Specifies the status of the chart.];
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=StatusText;
                Enabled=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                ShowCaption=No }

    { 3   ;1   ;Field     ;
                Name=BusinessChart;
                CaptionML=[ENU=Business Chart;
                           ESM=Gr fico empresarial;
                           FRC=Graphique entreprise;
                           ENC=Business Chart];
                ToolTipML=[ENU=Specifies if the chart is of type Business Chart.;
                           ESM=Especifica si el gr fico es de tipo Gr fico empresarial.;
                           FRC=Indique si le graphique est de type Graphique entreprise.;
                           ENC=Specifies if the chart is of type Business Chart.];
                ApplicationArea=#RelationshipMgmt;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35];
                ShowCaption=No }

  }
  CODE
  {
    VAR
      BusinessChartBuffer@1002 : Record 485;
      SalesCycle@1003 : Record 5090;
      TempSalesCycleStage@1004 : TEMPORARY Record 5091;
      SalesPipelineChartMgt@1007 : Codeunit 781;
      StatusText@1000 : Text;
      IsChartAddInReady@1001 : Boolean;
      IsChartDataReady@1008 : Boolean;
      NextSalesCycleAvailable@1005 : Boolean;
      PrevSalesCycleAvailable@1006 : Boolean;

    LOCAL PROCEDURE UpdateChart@11(SalesCycle@1001 : Record 5090);
    BEGIN
      IF NOT IsChartAddInReady THEN
        EXIT;

      SalesPipelineChartMgt.UpdateData(BusinessChartBuffer,TempSalesCycleStage,SalesCycle);
      BusinessChartBuffer.Update(CurrPage.BusinessChart);
      UpdateStatusText(SalesCycle);
    END;

    LOCAL PROCEDURE UpdateStatusText@3(SalesCycle@1000 : Record 5090);
    BEGIN
      StatusText := SalesCycle.TABLECAPTION + ': ' + SalesCycle.Code;
    END;

    EVENT BusinessChart@-3::DataPointClicked@1(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      BusinessChartBuffer.SetDrillDownIndexes(point);
      SalesPipelineChartMgt.DrillDown(BusinessChartBuffer,TempSalesCycleStage);
    END;

    EVENT BusinessChart@-3::DataPointDoubleClicked@2(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT BusinessChart@-3::AddInReady@3();
    BEGIN
      IF NOT IsChartDataReady THEN
        EXIT;

      IsChartAddInReady := TRUE;
      UpdateChart(SalesCycle);
    END;

    EVENT BusinessChart@-3::Refresh@4();
    BEGIN
      IF IsChartAddInReady AND IsChartDataReady THEN
        UpdateChart(SalesCycle);
    END;

    BEGIN
    END.
  }
}

