OBJECT Table 1800 Data Migrator Registration
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:14:34 PM;
    Version List=;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=ENU=Data Migrator Registration;
    LookupPageID=Page1809;
    DrillDownPageID=Page1809;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=ENU=No. }
    { 2   ;   ;Description         ;Text250       ;CaptionML=ENU=Description;
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE RegisterDataMigrator@2(DataMigratorNo@1000 : Integer;DataMigratorDescription@1001 : Text[250]) : Boolean;
    BEGIN
      INIT;
      "No." := DataMigratorNo;
      Description := DataMigratorDescription;
      EXIT(INSERT);
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnRegisterDataMigrator@1();
    BEGIN
      // Event which makes all data migrators register themselves in this table.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnHasSettings@6(VAR HasSettings@1000 : Boolean);
    BEGIN
      // Event which tells whether the data migrator has a settings page.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnOpenSettings@7(VAR Handled@1000 : Boolean);
    BEGIN
      // Event which opens the settings page for the data migrator.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnValidateSettings@15();
    BEGIN
      // Event which validates the settings.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnGetInstructions@3(VAR Instructions@1002 : Text;VAR Handled@1000 : Boolean);
    BEGIN
      // Event which makes all registered data migrators publish their instructions.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnHasTemplate@8(VAR HasTemplate@1000 : Boolean);
    BEGIN
      // Event which tells whether the data migrator has a template available for download.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnDownloadTemplate@5(VAR Handled@1000 : Boolean);
    BEGIN
      // Event which invokes the download of the template.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnDataImport@12(VAR Handled@1001 : Boolean);
    BEGIN
      // Event which makes all registered data migrators import data.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnSelectDataToApply@4(VAR DataMigrationEntity@1002 : Record 1801;VAR Handled@1000 : Boolean);
    BEGIN
      // Event which makes all registered data migrators populate the Data Migration Entities table, which allows the user to choose which imported data should be applied.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnHasAdvancedApply@10(VAR HasAdvancedApply@1000 : Boolean);
    BEGIN
      // Event which tells whether the data migrator has an advanced apply page.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnOpenAdvancedApply@9(VAR DataMigrationEntity@1001 : Record 1801;VAR Handled@1000 : Boolean);
    BEGIN
      // Event which opens the advanced apply page for the data migrator.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnApplySelectedData@11(VAR DataMigrationEntity@1002 : Record 1801;VAR Handled@1001 : Boolean);
    BEGIN
      // Event which makes all registered data migrators apply the data, which is selected in the Data Migration Entities table.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnPostingGroupSetup@16(VAR PostingSetup@1000 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnGLPostingSetup@17(ListOfAccounts@1000 : ARRAY [11] OF Code[20]);
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCustomerVendorPostingSetup@18(ListOfAccounts@1000 : ARRAY [4] OF Code[20]);
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnHasErrors@14(VAR HasErrors@1000 : Boolean);
    BEGIN
      // Event which tells whether the data migrator had import errors
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnShowErrors@13(VAR Handled@1000 : Boolean);
    BEGIN
      // Event which opens the error handling page for the data migrator.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnShowDuplicateContactsText@19(VAR ShowDuplicateContactText@1000 : Boolean);
    BEGIN
      // Event which shows or hides message on the last page of the wizard to run Duplicate Contact Tool or not.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnShowPostingOptions@20(VAR ShowPostingOptions@1000 : Boolean);
    BEGIN
      // Event which shows or hides posting options (post yes/no and date) on the entity seleciton page-
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnShowBalance@21(VAR ShowBalance@1000 : Boolean);
    BEGIN
      // Event which shows or hides balance columns in the entity selection page.
    END;

    [Integration(TRUE)]
    PROCEDURE OnShowThatsItMessage@22(VAR Message@1000 : Text);
    BEGIN
      // Event which shows specific data migrator text at the last page
    END;

    [Integration(TRUE)]
    PROCEDURE OnEnableTogglingDataMigrationOverviewPage@24(VAR EnableTogglingOverviewPage@1000 : Boolean);
    BEGIN
      // Event which determines if the option to launch the overview page will be shown to the user at the end.
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnHideSelected@23(VAR HideSelectedCheckBoxes@1000 : Boolean);
    BEGIN
      // Event which shows or hides selected checkboxes in the entity selection page.
    END;

    BEGIN
    END.
  }
}

