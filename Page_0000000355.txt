OBJECT Page 355 Receivables-Payables Lines
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:14 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    LinksAllowed=No;
    SourceTable=Table2000000007;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 RESET;
               END;

    OnFindRecord=BEGIN
                   EXIT(PeriodFormMgt.FindDate(Which,Rec,PeriodType));
                 END;

    OnNextRecord=BEGIN
                   EXIT(PeriodFormMgt.NextDate(Steps,Rec,PeriodType));
                 END;

    OnAfterGetRecord=BEGIN
                       SetDateFilter;
                       GLSetup.CALCFIELDS("Cust. Balances Due","Vendor Balances Due");
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Period Start;
                ToolTipML=ENU=Specifies the beginning of the period covered by the summary report of receivables for customers and payables for vendors.;
                ApplicationArea=#Suite;
                SourceExpr="Period Start" }

    { 20  ;2   ;Field     ;
                CaptionML=ENU=Period Name;
                ToolTipML=ENU=Specifies the name of the period covered by the summary report of receivables for customers and payables for vendors.;
                ApplicationArea=#Suite;
                SourceExpr="Period Name" }

    { 22  ;2   ;Field     ;
                Name=CustBalancesDue;
                DrillDown=Yes;
                CaptionML=ENU=Cust. Balances Due;
                ToolTipML=ENU=Specifies the total amount your company is owed by customers. The program automatically calculates and updates the contents of the field, using entries in the Remaining Amt. ($) field in the Cust. Ledger Entry table.;
                ApplicationArea=#Suite;
                SourceExpr=GLSetup."Cust. Balances Due";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              ShowCustEntriesDue;
                            END;
                             }

    { 24  ;2   ;Field     ;
                Name=VendorBalancesDue;
                DrillDown=Yes;
                CaptionML=ENU=Vendor Balances Due;
                ToolTipML=ENU=Specifies the total amount your company owes its vendors. The program automatically calculates and updates the contents of the field, using entries in the Remaining Amt. ($) field in the Vendor Ledger Entry table.;
                ApplicationArea=#Suite;
                SourceExpr=GLSetup."Vendor Balances Due";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              ShowVendEntriesDue;
                            END;
                             }

    { 12  ;2   ;Field     ;
                Name=ReceivablesPayables;
                CaptionML=ENU=Receivables-Payables;
                ToolTipML=ENU=Specifies expected payments from customers and to vendors. It does not include other transactions that affect liquidity or the liquid balance at the beginning of the period. Therefore, the amounts in the column do not represent the liquid balance at the close of the period.;
                ApplicationArea=#Suite;
                SourceExpr=GLSetup."Cust. Balances Due" - GLSetup."Vendor Balances Due";
                AutoFormatType=1 }

  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      CustLedgEntry@1001 : Record 21;
      VendLedgEntry@1002 : Record 25;
      PeriodFormMgt@1003 : Codeunit 359;
      PeriodType@1004 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1005 : 'Net Change,Balance at Date';

    [External]
    PROCEDURE Set@1(VAR NewGLSetup@1000 : Record 98;NewPeriodType@1001 : Integer;NewAmountType@1002 : 'Net Change,Balance at Date');
    BEGIN
      GLSetup.COPY(NewGLSetup);
      PeriodType := NewPeriodType;
      AmountType := NewAmountType;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ShowCustEntriesDue@2();
    BEGIN
      SetDateFilter;
      CustLedgEntry.RESET;
      CustLedgEntry.SETRANGE(Open,TRUE);
      CustLedgEntry.SETFILTER("Due Date",GLSetup.GETFILTER("Date Filter"));
      CustLedgEntry.SETFILTER("Global Dimension 1 Code",GLSetup.GETFILTER("Global Dimension 1 Filter"));
      CustLedgEntry.SETFILTER("Global Dimension 2 Code",GLSetup.GETFILTER("Global Dimension 2 Filter"));
      PAGE.RUN(0,CustLedgEntry)
    END;

    LOCAL PROCEDURE ShowVendEntriesDue@3();
    BEGIN
      SetDateFilter;
      VendLedgEntry.RESET;
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETFILTER("Due Date",GLSetup.GETFILTER("Date Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 1 Code",GLSetup.GETFILTER("Global Dimension 1 Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 2 Code",GLSetup.GETFILTER("Global Dimension 2 Filter"));
      PAGE.RUN(0,VendLedgEntry);
    END;

    LOCAL PROCEDURE SetDateFilter@4();
    BEGIN
      IF AmountType = AmountType::"Net Change" THEN
        GLSetup.SETRANGE("Date Filter","Period Start","Period End")
      ELSE
        GLSetup.SETRANGE("Date Filter",0D,"Period End");
    END;

    BEGIN
    END.
  }
}

