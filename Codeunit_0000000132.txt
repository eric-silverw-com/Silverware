OBJECT Codeunit 132 Release Incoming Document
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:07:51 PM;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=130;
    OnRun=BEGIN
            IF Status = Status::Released THEN
              EXIT;
            IF Status IN [Status::Created,Status::Posted] THEN
              ERROR(CanReleasedIfStatusErr,Status::"Pending Approval",Status::New,Status::Failed);

            OnCheckIncomingDocReleaseRestrictions;

            TESTFIELD(Posted,FALSE);

            IF NOT IsADocumentAttached THEN
              ERROR(NothingToReleaseErr,"Entry No.");

            Status := Status::Released;
            Released := TRUE;
            "Released Date-Time" := CURRENTDATETIME;
            "Released By User ID" := USERSECURITYID;

            MODIFY(TRUE);

            OnAfterReleaseIncomingDoc(Rec);
          END;

  }
  CODE
  {
    VAR
      NothingToReleaseErr@1001 : TextConst '@@@="%1 = Incoming Document Entry No";ENU=There is nothing to release for the incoming document number %1.';
      DocReleasedWhenApprovedErr@1005 : TextConst 'ENU=This document can only be released when the approval process is complete.';
      CancelOrCompleteToReopenDocErr@1003 : TextConst 'ENU=The approval process must be canceled or completed to reopen this document.';
      CanReleasedIfStatusErr@1000 : TextConst '@@@="%1 = status released, %2 = status pending approval";ENU=It is only possible to release the document when the status is %1, %2 or %3.';

    [External]
    PROCEDURE Reopen@1(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF Status = Status::New THEN
          EXIT;
        ClearReleaseFields(IncomingDocument);
        Status := Status::New;

        MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE Reject@8(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        TESTFIELD(Posted,FALSE);

        ClearReleaseFields(IncomingDocument);
        Status := Status::Rejected;

        MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE Fail@6(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF Status = Status::Failed THEN
          EXIT;

        Status := Status::Failed;

        MODIFY(TRUE);
        COMMIT;

        OnAfterCreateDocFromIncomingDocFail(IncomingDocument);
      END;
    END;

    [External]
    PROCEDURE Create@7(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WITH IncomingDocument DO BEGIN
        IF Status = Status::Created THEN
          EXIT;

        Status := Status::Created;

        MODIFY(TRUE);
        COMMIT;
        OnAfterCreateDocFromIncomingDocSuccess(IncomingDocument);
      END;
    END;

    PROCEDURE PerformManualRelease@2(VAR IncomingDocument@1002 : Record 130);
    VAR
      ApprovalsMgmt@1000 : Codeunit 1535;
    BEGIN
      IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) AND
         (IncomingDocument.Status = IncomingDocument.Status::New)
      THEN
        ERROR(DocReleasedWhenApprovedErr);

      CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);
    END;

    [External]
    PROCEDURE PerformManualReopen@3(VAR IncomingDocument@1002 : Record 130);
    BEGIN
      IF IncomingDocument.Status = IncomingDocument.Status::"Pending Approval" THEN
        ERROR(CancelOrCompleteToReopenDocErr);

      Reopen(IncomingDocument);
    END;

    [External]
    PROCEDURE PerformManualReject@5(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      IF IncomingDocument.Status = IncomingDocument.Status::"Pending Approval" THEN
        ERROR(CancelOrCompleteToReopenDocErr);

      Reject(IncomingDocument);
    END;

    LOCAL PROCEDURE ClearReleaseFields@22(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      IncomingDocument.Released := FALSE;
      IncomingDocument."Released Date-Time" := 0DT;
      CLEAR(IncomingDocument."Released By User ID");
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterReleaseIncomingDoc@4(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCreateDocFromIncomingDocSuccess@9(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCreateDocFromIncomingDocFail@10(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    BEGIN
    END.
  }
}

