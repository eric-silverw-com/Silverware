OBJECT Table 9500 Email Item
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:15:49 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Email Item;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=ENU=ID }
    { 2   ;   ;From Name           ;Text100       ;CaptionML=ENU=From Name }
    { 3   ;   ;From Address        ;Text250       ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                IF "From Address" <> '' THEN
                                                                  MailManagement.CheckValidEmailAddresses("From Address");
                                                              END;

                                                   CaptionML=ENU=From Address }
    { 4   ;   ;Send to             ;Text250       ;OnValidate=BEGIN
                                                                IF "Send to" <> '' THEN
                                                                  CorrectAndValidateEmailList("Send to");
                                                              END;

                                                   CaptionML=ENU=Send to }
    { 5   ;   ;Send CC             ;Text250       ;OnValidate=BEGIN
                                                                IF "Send CC" <> '' THEN
                                                                  CorrectAndValidateEmailList("Send CC");
                                                              END;

                                                   CaptionML=ENU=Send CC }
    { 6   ;   ;Send BCC            ;Text250       ;OnValidate=BEGIN
                                                                IF "Send BCC" <> '' THEN
                                                                  CorrectAndValidateEmailList("Send BCC");
                                                              END;

                                                   CaptionML=ENU=Send BCC }
    { 7   ;   ;Subject             ;Text250       ;CaptionML=ENU=Subject }
    { 8   ;   ;Body                ;BLOB          ;CaptionML=ENU=Body }
    { 9   ;   ;Attachment File Path;Text250       ;CaptionML=ENU=Attachment File Path }
    { 10  ;   ;Attachment Name     ;Text250       ;CaptionML=ENU=Attachment Name }
    { 11  ;   ;Plaintext Formatted ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF "Plaintext Formatted" THEN
                                                                  VALIDATE("Body File Path",'')
                                                                ELSE
                                                                  SetBodyText('');
                                                              END;

                                                   CaptionML=ENU=Plaintext Formatted }
    { 12  ;   ;Body File Path      ;Text250       ;OnValidate=BEGIN
                                                                IF "Body File Path" <> '' THEN
                                                                  TESTFIELD("Plaintext Formatted",FALSE);
                                                              END;

                                                   CaptionML=ENU=Body File Path }
    { 13  ;   ;Message Type        ;Option        ;CaptionML=ENU=Message Type;
                                                   OptionCaptionML=ENU=Custom Message,From Email Body Template;
                                                   OptionString=Custom Message,From Email Body Template }
    { 21  ;   ;Attachment File Path 2;Text250     ;CaptionML=ENU=Attachment File Path 2 }
    { 22  ;   ;Attachment Name 2   ;Text50        ;CaptionML=ENU=Attachment Name 2 }
    { 23  ;   ;Attachment File Path 3;Text250     ;CaptionML=ENU=Attachment File Path 3 }
    { 24  ;   ;Attachment Name 3   ;Text50        ;CaptionML=ENU=Attachment Name 3 }
    { 25  ;   ;Attachment File Path 4;Text250     ;CaptionML=ENU=Attachment File Path 4 }
    { 26  ;   ;Attachment Name 4   ;Text50        ;CaptionML=ENU=Attachment Name 4 }
    { 27  ;   ;Attachment File Path 5;Text250     ;CaptionML=ENU=Attachment File Path 5 }
    { 28  ;   ;Attachment Name 5   ;Text50        ;CaptionML=ENU=Attachment Name 5 }
    { 29  ;   ;Attachment File Path 6;Text250     ;CaptionML=ENU=Attachment File Path 6 }
    { 30  ;   ;Attachment Name 6   ;Text50        ;CaptionML=ENU=Attachment Name 6 }
    { 31  ;   ;Attachment File Path 7;Text250     ;CaptionML=ENU=Attachment File Path 7 }
    { 32  ;   ;Attachment Name 7   ;Text50        ;CaptionML=ENU=Attachment Name 7 }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      O365EmailSetup@1000 : Record 2118;

    [External]
    PROCEDURE Init@1();
    BEGIN
      ID := CREATEGUID;
    END;

    [External]
    PROCEDURE Send@2(HideMailDialog@1000 : Boolean) : Boolean;
    VAR
      MailManagement@1001 : Codeunit 9520;
    BEGIN
      MailManagement.SendMailOrDownload(Rec,HideMailDialog);
      EXIT(MailManagement.IsSent);
    END;

    [External]
    PROCEDURE SetBodyText@5(Value@1000 : Text);
    VAR
      DataStream@1001 : OutStream;
      BodyText@1002 : BigText;
    BEGIN
      CLEAR(Body);
      BodyText.ADDTEXT(Value);
      Body.CREATEOUTSTREAM(DataStream,TEXTENCODING::UTF8);
      BodyText.WRITE(DataStream);
    END;

    PROCEDURE GetBodyText@3() Value : Text;
    VAR
      TempBlob@1005 : Record 99008535;
      FileManagement@1001 : Codeunit 419;
      DataStream@1004 : InStream;
      BlobInStream@1003 : InStream;
      BodyOutStream@1002 : OutStream;
      BodyText@1000 : BigText;
    BEGIN
      // Note this is intended only to get the body in memory - not from the database.
      Value := '';

      // If the body doesn't have a value, attempt to import the value from the file path, otherwise exit.
      IF NOT Body.HASVALUE THEN BEGIN
        IF ("Body File Path" <> '') AND FileManagement.ServerFileExists("Body File Path") THEN BEGIN
          TempBlob.INIT;
          FileManagement.BLOBImportFromServerFile(TempBlob,"Body File Path");
          TempBlob.Blob.CREATEINSTREAM(BlobInStream,TEXTENCODING::UTF8);
          Body.CREATEOUTSTREAM(BodyOutStream);
          COPYSTREAM(BodyOutStream,BlobInStream);
        END ELSE
          EXIT;
      END;

      IF "Plaintext Formatted" THEN BEGIN
        Body.CREATEINSTREAM(DataStream,TEXTENCODING::UTF8);
        BodyText.READ(DataStream);
        BodyText.GETSUBTEXT(Value,1);
      END ELSE BEGIN
        Body.CREATEINSTREAM(DataStream,TEXTENCODING::UTF8);
        DataStream.READ(Value);
      END;

      EXIT(Value);
    END;

    LOCAL PROCEDURE CorrectAndValidateEmailList@6(VAR EmailAddresses@1000 : Text[250]);
    VAR
      MailManagement@1001 : Codeunit 9520;
    BEGIN
      EmailAddresses := CONVERTSTR(EmailAddresses,',',';');
      EmailAddresses := DELCHR(EmailAddresses,'<>');
      MailManagement.CheckValidEmailAddresses(EmailAddresses);
    END;

    [External]
    PROCEDURE AddCcBcc@4();
    BEGIN
      "Send CC" := O365EmailSetup.GetCCAddressesFromO365EmailSetup;
      "Send BCC" := O365EmailSetup.GetBCCAddressesFromO365EmailSetup;
    END;

    PROCEDURE AttachIncomingDocuments@7(SalesInvoiceNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1002 : Record 112;
      IncomingDocumentAttachment@1003 : Record 133;
      FileManagement@1006 : Codeunit 419;
      InStr@1007 : InStream;
      OutStr@1008 : OutStream;
      File@1009 : File;
      AttachmentCounter@1004 : Integer;
      FilePath@1005 : Text[250];
      AttachmentName@1010 : Text[50];
      IsPostedDocument@1011 : Boolean;
    BEGIN
      IF SalesInvoiceNo = '' THEN
        EXIT;
      IsPostedDocument := TRUE;
      IF NOT SalesInvoiceHeader.GET(SalesInvoiceNo) THEN BEGIN
        SalesHeader.SETFILTER("Document Type",'%1|%2',SalesHeader."Document Type"::Quote,SalesHeader."Document Type"::Invoice);
        SalesHeader.SETRANGE("No.",SalesInvoiceNo);
        IF NOT SalesHeader.FINDFIRST THEN
          EXIT;
        IF SalesHeader."Incoming Document Entry No." = 0 THEN
          EXIT;
        IsPostedDocument := FALSE;
      END;

      IF IsPostedDocument THEN BEGIN
        IncomingDocumentAttachment.SETRANGE("Document No.",SalesInvoiceNo);
        IncomingDocumentAttachment.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
      END ELSE
        IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",SalesHeader."Incoming Document Entry No.");

      IncomingDocumentAttachment.SETAUTOCALCFIELDS(Content);
      IF IncomingDocumentAttachment.FINDSET THEN
        REPEAT
          IF IncomingDocumentAttachment.Content.HASVALUE THEN BEGIN
            AttachmentCounter += 1;
            FilePath := COPYSTR(FileManagement.ServerTempFileName(IncomingDocumentAttachment."File Extension"),1,MAXSTRLEN(FilePath));
            File.CREATE(FilePath);
            File.CREATEOUTSTREAM(OutStr);
            IncomingDocumentAttachment.Content.CREATEINSTREAM(InStr);
            COPYSTREAM(OutStr,InStr);
            File.CLOSE;
            AttachmentName :=
              COPYSTR(
                STRSUBSTNO(
                  '%1.%2',IncomingDocumentAttachment.Name,IncomingDocumentAttachment."File Extension"),1,MAXSTRLEN(AttachmentName));

            CASE AttachmentCounter OF
              1:
                BEGIN
                  "Attachment File Path 2" := FilePath;
                  "Attachment Name 2" := AttachmentName;
                END;
              2:
                BEGIN
                  "Attachment File Path 3" := FilePath;
                  "Attachment Name 3" := AttachmentName;
                END;
              3:
                BEGIN
                  "Attachment File Path 4" := FilePath;
                  "Attachment Name 4" := AttachmentName;
                END;
              4:
                BEGIN
                  "Attachment File Path 5" := FilePath;
                  "Attachment Name 5" := AttachmentName;
                END;
              5:
                BEGIN
                  "Attachment File Path 6" := FilePath;
                  "Attachment Name 6" := AttachmentName;
                END;
              6:
                BEGIN
                  "Attachment File Path 7" := FilePath;
                  "Attachment Name 7" := AttachmentName;
                END;
            END;
          END;
        UNTIL (AttachmentCounter = 6) OR (IncomingDocumentAttachment.NEXT = 0);
    END;

    BEGIN
    END.
  }
}

