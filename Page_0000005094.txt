OBJECT Page 5094 Marketing Setup
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:53 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Marketing Setup;
    ApplicationArea=#Basic,#Suite,#RelationshipMgmt;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table5079;
    PageType=Card;
    UsageCategory=Administration;
    OnInit=VAR
             PermissionManager@1000 : Codeunit 9002;
           BEGIN
             SoftwareAsAService := PermissionManager.SoftwareAsAService;
           END;

    OnOpenPage=BEGIN
                 RESET;
                 IF NOT GET THEN BEGIN
                   INIT;
                   INSERT;
                 END;

                 AttachmentStorageLocationEnabl := "Attachment Storage Type" = "Attachment Storage Type"::"Disk File";
                 ExchangeAccountPasswordTemp := '';
                 IF ("Exchange Account User Name" <> '') AND (NOT ISNULLGUID("Exchange Account Password Key")) THEN
                   ExchangeAccountPasswordTemp := '**********';
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 100     ;1   ;ActionGroup;
                      CaptionML=ENU=&Setup;
                      Image=Setup }
      { 10      ;2   ;Action    ;
                      CaptionML=ENU=Social Engagement Setup;
                      ToolTipML=ENU=Set up the Microsoft Social Engagement server URL, agree to the license terms, and enable the Social Listening for Customers, Vendors, and/or Items.;
                      ApplicationArea=#RelationshipMgmt;
                      RunObject=Page 870;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SocialListening;
                      PromotedCategory=Process }
      { 101     ;2   ;Action    ;
                      CaptionML=ENU=Duplicate Search String Setup;
                      ToolTipML=ENU=View or edit the list of search strings to use when searching for duplicates.;
                      ApplicationArea=#RelationshipMgmt;
                      RunObject=Page 5138;
                      Image=CompareContacts }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 50      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 7       ;2   ;Action    ;
                      Name=Validate EmailLogging Setup;
                      CaptionML=ENU=Validate Email Logging Setup;
                      ToolTipML=ENU=Test that email logging is set up correctly.;
                      ApplicationArea=#RelationshipMgmt;
                      Image=ValidateEmailLoggingSetup;
                      OnAction=VAR
                                 ErrorMessage@1001 : Text;
                               BEGIN
                                 IF ValidateEmailLoggingSetup(Rec,ErrorMessage) THEN
                                   MESSAGE(Text012)
                                 ELSE
                                   ERROR(ErrorMessage);
                               END;
                                }
      { 51      ;2   ;Action    ;
                      Name=Clear EmailLogging Setup;
                      CaptionML=ENU=Clear Email Logging Setup;
                      ToolTipML=ENU=Clear what is currently set up for email logging.;
                      ApplicationArea=#RelationshipMgmt;
                      Image=ClearLog;
                      OnAction=BEGIN
                                 IF CONFIRM(Text009,TRUE) THEN
                                   ClearEmailLoggingSetup(Rec);
                               END;
                                }
      { 52      ;2   ;Action    ;
                      CaptionML=ENU=Generate Integration IDs for Connector for Microsoft Dynamics;
                      ToolTipML=ENU=Generate identifiers (GUID) for records that can be used by Dynamics 365 for Sales and in Dynamics 365.;
                      ApplicationArea=#RelationshipMgmt;
                      Image=CreateSerialNo;
                      OnAction=VAR
                                 IntegrationManagement@1000 : Codeunit 5150;
                               BEGIN
                                 IF CONFIRM(Text004,TRUE) THEN BEGIN
                                   IntegrationManagement.SetupIntegrationTables;
                                   MESSAGE(Text005);
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General;
                Visible=NOT SoftwareAsAService;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=Specifies how you want to store attachments. The following options exist:;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attachment Storage Type";
                OnValidate=BEGIN
                             AttachmentStorageTypeOnAfterVa;
                           END;
                            }

    { 4   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the drive and path to the location where you want attachments stored if you selected Disk File in the Attachment Storage Type field.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attachment Storage Location";
                Enabled=AttachmentStorageLocationEnabl;
                OnValidate=BEGIN
                             AttachmentStorageLocationOnAft;
                           END;
                            }

    { 1904626001;1;Group  ;
                CaptionML=ENU=Inheritance }

    { 6   ;2   ;Group     ;
                CaptionML=ENU=Inherit }

    { 13  ;3   ;Field     ;
                CaptionML=ENU=Salesperson Code;
                ToolTipML=ENU=Specifies that you want to copy the salesperson code from the contact card of a company to the contact card for the individual contact person or people working for that company.;
                ApplicationArea=#Suite,#RelationshipMgmt;
                SourceExpr="Inherit Salesperson Code" }

    { 14  ;3   ;Field     ;
                CaptionML=ENU=Territory Code;
                ToolTipML=ENU=Specifies that you want to copy the territory code from the contact card of a company to the contact card for the individual contact person or people working for that company.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Inherit Territory Code" }

    { 15  ;3   ;Field     ;
                CaptionML=ENU=Country/Region Code;
                ToolTipML=ENU=Specifies that you want to copy the country/region code from the contact card of a company to the contact card for the individual contact person or people working for that company.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Inherit Country/Region Code" }

    { 16  ;3   ;Field     ;
                CaptionML=ENU=Language Code;
                ToolTipML=ENU=Specifies that you want to copy the language code from the contact card of a company to the contact card for the individual contact person or people working for that company.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Inherit Language Code" }

    { 17  ;3   ;Field     ;
                CaptionML=ENU=Address Details;
                ToolTipML=ENU=Specifies that you want to copy the address details from the contact card of a company to the contact card for the individual contact person or people working for that company.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Inherit Address Details" }

    { 79  ;3   ;Field     ;
                CaptionML=ENU=Communication Details;
                ToolTipML=ENU=Specifies that you want to copy the communication details, such as telex and fax numbers, from the contact card of a company to the contact card for the individual contact person or people working for that company.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Inherit Communication Details" }

    { 1902985101;1;Group  ;
                CaptionML=ENU=Defaults }

    { 80  ;2   ;Group     ;
                CaptionML=ENU=Default }

    { 30  ;3   ;Field     ;
                CaptionML=ENU=Salesperson Code;
                ToolTipML=ENU=Specifies the salesperson code to assign automatically to contacts when they are created.;
                ApplicationArea=#Suite,#RelationshipMgmt;
                SourceExpr="Default Salesperson Code" }

    { 28  ;3   ;Field     ;
                CaptionML=ENU=Territory Code;
                ToolTipML=ENU=Specifies the territory code to automatically assign to contacts when they are created.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default Territory Code" }

    { 26  ;3   ;Field     ;
                CaptionML=ENU=Country/Region Code;
                ToolTipML=ENU=Specifies the country/region code to assign automatically to contacts when they are created.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default Country/Region Code" }

    { 24  ;3   ;Field     ;
                CaptionML=ENU=Language Code;
                ToolTipML=ENU=Specifies the language code to assign automatically to contacts when they are created.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default Language Code" }

    { 102 ;3   ;Field     ;
                CaptionML=ENU=Correspondence Type;
                ToolTipML=ENU=Specifies the preferred type of correspondence for the interaction. NOTE: If you use the Web client, you must not select the Hard Copy option because printing is not possible from the web client.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default Correspondence Type" }

    { 22  ;3   ;Field     ;
                CaptionML=ENU=Company Salutation Code;
                ToolTipML=ENU=Specifies the salutation code to assign automatically to contact companies when they are created.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Def. Company Salutation Code" }

    { 86  ;3   ;Field     ;
                CaptionML=ENU=Person Salutation Code;
                ToolTipML=ENU=Specifies the salutation code to assign automatically to contact persons when they are created.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default Person Salutation Code" }

    { 20  ;3   ;Field     ;
                CaptionML=ENU=Sales Cycle Code;
                ToolTipML=ENU=Specifies the sales cycle code to automatically assign to opportunities when they are created.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default Sales Cycle Code" }

    { 124 ;3   ;Field     ;
                CaptionML=ENU=Task Date Calculation;
                ToolTipML=ENU=Specifies the task date calculation formula to use to calculate the ending date for tasks in Business Central if you haven't entered any due date in the Outlook task. If you leave the field blank, today's date is applied.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Default To-do Date Calculation" }

    { 1906323901;1;Group  ;
                CaptionML=ENU=Interactions }

    { 55  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the language ID of the Windows language to use for naming the merge fields shown when editing an attachment in Microsoft Word.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Mergefield Language ID";
                OnLookup=VAR
                           LanguageManagement@1000 : Codeunit 43;
                         BEGIN
                           LanguageManagement.LookupApplicationLanguage("Mergefield Language ID");
                         END;
                          }

    { 83  ;2   ;Group     ;
                CaptionML=ENU=Bus. Relation Code for;
                GroupType=Group }

    { 56  ;3   ;Field     ;
                CaptionML=ENU=Customers;
                ToolTipML=ENU=Specifies the business relation code that identifies that a contact is also a customer.;
                ApplicationArea=#Basic,#Suite,#RelationshipMgmt;
                SourceExpr="Bus. Rel. Code for Customers" }

    { 58  ;3   ;Field     ;
                CaptionML=ENU=Vendors;
                ToolTipML=ENU=Specifies the business relation code that identifies that a contact is also a vendor.;
                ApplicationArea=#Basic,#Suite,#RelationshipMgmt;
                SourceExpr="Bus. Rel. Code for Vendors" }

    { 60  ;3   ;Field     ;
                CaptionML=ENU=Bank Accounts;
                ToolTipML=ENU=Specifies the business relation code that identifies that a contact is also a bank account.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Bus. Rel. Code for Bank Accs." }

    { 1904569201;1;Group  ;
                CaptionML=ENU=Numbering }

    { 62  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for the number series to use when assigning numbers to contacts.;
                ApplicationArea=#Basic,#Suite,#RelationshipMgmt;
                SourceExpr="Contact Nos." }

    { 64  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for the number series to use when assigning numbers to campaigns.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Campaign Nos." }

    { 66  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for the number series to use when assigning numbers to segments.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Segment Nos." }

    { 68  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for the number series to use when assigning numbers to tasks.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="To-do Nos." }

    { 70  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for the number series to use when assigning numbers to opportunities.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Opportunity Nos." }

    { 1903832701;1;Group  ;
                CaptionML=ENU=Duplicates }

    { 75  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the automatic update of search strings used to search for duplicates. You can set up search strings in the Duplicate Search String Setup table.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Maintain Dupl. Search Strings" }

    { 77  ;2   ;Field     ;
                ToolTipML=ENU=Specifies that you want to search automatically for duplicates each time a contact is created or modified.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Autosearch for Duplicates" }

    { 73  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the level of precision to apply when searching for duplicates.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Search Hit %" }

    { 1900887301;1;Group  ;
                CaptionML=ENU=Email Logging;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the email address that you want to use in discovery of an Exchange Server. You specify a valid email address, which enables the discovery of the associated Exchange Server. You can validate the email address after you enter an address.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Autodiscovery E-Mail Address";
                OnValidate=BEGIN
                             IF "Autodiscovery E-Mail Address" <> xRec."Autodiscovery E-Mail Address" THEN
                               ExchangeWebServicesClient.InvalidateService;
                           END;
                            }

    { 12  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the address of your Exchange service. Setting this URL makes the email validation done by Validate Email Logging Setup faster.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Exchange Service URL";
                OnValidate=BEGIN
                             IF "Exchange Service URL" <> xRec."Exchange Service URL" THEN
                               ExchangeWebServicesClient.InvalidateService;
                           END;
                            }

    { 11  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the name of the user account that has access to Exchange.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Exchange Account User Name";
                OnValidate=BEGIN
                             IF "Exchange Account User Name" <> xRec."Exchange Account User Name" THEN
                               ExchangeWebServicesClient.InvalidateService;
                           END;
                            }

    { 18  ;2   ;Field     ;
                ExtendedDatatype=Masked;
                CaptionML=ENU=Exchange Account Password;
                ToolTipML=ENU=Specifies the password of the user account that has access to Exchange.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=ExchangeAccountPasswordTemp;
                OnValidate=BEGIN
                             SetExchangeAccountPassword(ExchangeAccountPasswordTemp);
                             COMMIT;
                             ExchangeWebServicesClient.InvalidateService;
                           END;
                            }

    { 8   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of email messages that you want to process in one run of a job queue that has been set up to handle email logging. By default, the number of messages to process is 0, which means that email messages are not batched together. You can modify this value when you are fine tuning your process so that the execution of a job queue does not take too long. Any email message that is not logged in any particular run will be handled in a subsequent run that has been scheduled.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Email Batch Size" }

    { 5   ;2   ;Group     ;
                GroupType=Group }

    { 104 ;3   ;Field     ;
                ToolTipML=ENU=Specifies the name of the queue folder in Microsoft Outlook.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Queue Folder Path";
                OnAssistEdit=VAR
                               ExchangeFolder@1002 : Record 5320;
                             BEGIN
                               IF GetExchangeFolder(ExchangeFolder,Text014) THEN
                                 SetQueueFolder(ExchangeFolder);
                             END;
                              }

    { 19  ;3   ;Field     ;
                ToolTipML=ENU=Specifies the name of the storage folder in Microsoft Outlook.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Storage Folder Path";
                OnAssistEdit=VAR
                               ExchangeFolder@1002 : Record 5320;
                             BEGIN
                               IF GetExchangeFolder(ExchangeFolder,Text015) THEN
                                 SetStorageFolder(ExchangeFolder);
                             END;
                              }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ExchangeWebServicesClient@1000 : Codeunit 5320;
      ExchangeAccountPasswordTemp@1018 : Text;
      AttachmentStorageLocationEnabl@19012985 : Boolean INDATASET;
      Text004@1003 : TextConst 'ENU=You are about to add integration data to tables. This process may take several minutes. Do you want to continue?';
      Text005@1004 : TextConst 'ENU=The integration data has been added to the tables.';
      Text006@1005 : TextConst 'ENU=A valid email address is needed to find an instance of Exchange Server.';
      Text007@1006 : TextConst 'ENU=Exchange Server cannot be found.';
      Text008@1002 : TextConst 'ENU=The specified Exchange folder does not exist.';
      Text009@1001 : TextConst 'ENU=This clears the fields in your email logging setup. Do you want to continue?';
      Text010@1007 : TextConst 'ENU=The specified Queue folder does not exist or cannot be accessed.';
      Text011@1008 : TextConst 'ENU=The specified Storage folder does not exist or cannot be accessed.';
      Text012@1009 : TextConst 'ENU=Email logging setup was successfully validated and completed.';
      Text013@1010 : TextConst 'ENU=Validating #1#';
      Text014@1011 : TextConst 'ENU=Select Queue folder';
      Text015@1012 : TextConst 'ENU=Select Storage folder';
      Text016@1015 : TextConst 'ENU=Interaction Template Setup';
      SoftwareAsAService@1013 : Boolean;

    [External]
    PROCEDURE SetAttachmentStorageType@1();
    BEGIN
      IF ("Attachment Storage Type" = "Attachment Storage Type"::Embedded) OR
         ("Attachment Storage Location" <> '')
      THEN BEGIN
        MODIFY;
        COMMIT;
        REPORT.RUN(REPORT::"Relocate Attachments");
      END;
    END;

    [External]
    PROCEDURE SetAttachmentStorageLocation@3();
    BEGIN
      IF "Attachment Storage Location" <> '' THEN BEGIN
        MODIFY;
        COMMIT;
        REPORT.RUN(REPORT::"Relocate Attachments");
      END;
    END;

    LOCAL PROCEDURE AttachmentStorageTypeOnAfterVa@19041025();
    BEGIN
      AttachmentStorageLocationEnabl := "Attachment Storage Type" = "Attachment Storage Type"::"Disk File";
      SetAttachmentStorageType;
    END;

    LOCAL PROCEDURE AttachmentStorageLocationOnAft@19001696();
    BEGIN
      SetAttachmentStorageLocation;
    END;

    PROCEDURE InitExchangeService@2();
    VAR
      Credentials@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      Result@1000 : Boolean;
    BEGIN
      IF "Autodiscovery E-Mail Address" = '' THEN
        ERROR(Text006);

      IF "Exchange Account User Name" <> '' THEN BEGIN
        CreateExchangeAccountCredentials(Credentials);
        Result :=
          ExchangeWebServicesClient.InitializeOnServer("Autodiscovery E-Mail Address","Exchange Service URL",Credentials);
      END ELSE
        Result := ExchangeWebServicesClient.InitializeOnClient("Autodiscovery E-Mail Address","Exchange Service URL");

      IF NOT Result THEN
        ERROR(Text007);
    END;

    LOCAL PROCEDURE GetExchangeFolder@4(VAR ExchangeFolder@1000 : Record 5320;FoldersCaption@1002 : Text) : Boolean;
    VAR
      ExchangeFoldersPage@1001 : Page 5320;
    BEGIN
      InitExchangeService;
      ExchangeFoldersPage.Initialize(ExchangeWebServicesClient,FoldersCaption);
      ExchangeFoldersPage.LOOKUPMODE(TRUE);
      IF ACTION::LookupOK = ExchangeFoldersPage.RUNMODAL THEN BEGIN
        ExchangeFoldersPage.GETRECORD(ExchangeFolder);
        IF NOT ExchangeWebServicesClient.FolderExists(ExchangeFolder.ReadUniqueID) THEN
          ERROR(Text008);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ClearEmailLoggingSetup@5(VAR MarketingSetup@1000 : Record 5079);
    VAR
      ServicePassword@1001 : Record 1261;
    BEGIN
      ExchangeWebServicesClient.InvalidateService;

      CLEAR(MarketingSetup."Autodiscovery E-Mail Address");
      CLEAR(MarketingSetup."Email Batch Size");

      CLEAR(MarketingSetup."Queue Folder Path");
      IF MarketingSetup."Queue Folder UID".HASVALUE THEN
        CLEAR(MarketingSetup."Queue Folder UID");

      CLEAR(MarketingSetup."Storage Folder Path");
      IF MarketingSetup."Storage Folder UID".HASVALUE THEN
        CLEAR(MarketingSetup."Storage Folder UID");

      CLEAR(MarketingSetup."Exchange Account User Name");
      CLEAR(MarketingSetup."Exchange Service URL");
      IF NOT ISNULLGUID(MarketingSetup."Exchange Account Password Key") THEN
        IF ServicePassword.GET(MarketingSetup."Exchange Account Password Key") THEN
          ServicePassword.DELETE(TRUE);
      CLEAR(MarketingSetup."Exchange Account Password Key");

      MarketingSetup.MODIFY;
    END;

    LOCAL PROCEDURE ValidateEmailLoggingSetup@6(VAR MarketingSetup@1004 : Record 5079;VAR ErrorMsg@1001 : Text) : Boolean;
    VAR
      EmailLoggingDispatcher@1005 : Codeunit 5064;
      ProgressWindow@1000 : Dialog;
      Credentials@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      ValidationCaption@1002 : Text;
      CanInitialize@1003 : Boolean;
    BEGIN
      ExchangeWebServicesClient.InvalidateService;

      ValidationCaption := FIELDCAPTION("Autodiscovery E-Mail Address");
      ProgressWindow.OPEN(Text013,ValidationCaption);

      IF "Exchange Account User Name" <> '' THEN BEGIN
        CreateExchangeAccountCredentials(Credentials);
        CanInitialize := ExchangeWebServicesClient.InitializeOnServer("Autodiscovery E-Mail Address",
            "Exchange Service URL",Credentials);
      END ELSE
        CanInitialize := ExchangeWebServicesClient.InitializeOnClient("Autodiscovery E-Mail Address","Exchange Service URL");

      IF NOT CanInitialize THEN BEGIN
        ErrorMsg := Text006;
        EXIT(FALSE);
      END;

      ValidationCaption := FIELDCAPTION("Queue Folder Path");
      ProgressWindow.UPDATE;
      IF NOT ExchangeWebServicesClient.FolderExists(MarketingSetup.GetQueueFolderUID) THEN BEGIN
        ErrorMsg := Text010;
        EXIT(FALSE);
      END;

      ValidationCaption := FIELDCAPTION("Storage Folder Path");
      ProgressWindow.UPDATE;
      IF NOT ExchangeWebServicesClient.FolderExists(MarketingSetup.GetStorageFolderUID) THEN BEGIN
        ErrorMsg := Text011;
        EXIT(FALSE);
      END;

      // Emails cannot be automatically logged unless Interaction Template Setup configured correctly.
      ValidationCaption := Text016;
      ProgressWindow.UPDATE;
      IF NOT EmailLoggingDispatcher.CheckInteractionTemplateSetup(ErrorMsg) THEN
        EXIT(FALSE);

      ProgressWindow.CLOSE;
      CLEAR(ErrorMsg);
      MarketingSetup.MODIFY;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

