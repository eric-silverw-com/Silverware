OBJECT Table 8627 Config. Setup
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:15:43 PM;
    Version List=;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=ENU=Config. Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 4   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 6   ;   ;City                ;Text30        ;CaptionML=ENU=City }
    { 7   ;   ;Phone No.           ;Text30        ;CaptionML=ENU=Phone No. }
    { 8   ;   ;Phone No. 2         ;Text30        ;CaptionML=ENU=Phone No. 2 }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=ENU=Giro No. }
    { 12  ;   ;Bank Name           ;Text50        ;AccessByPermission=TableData 270=R;
                                                   CaptionML=ENU=Bank Name }
    { 13  ;   ;Bank Branch No.     ;Text20        ;AccessByPermission=TableData 270=R;
                                                   CaptionML=ENU=Bank Branch No. }
    { 14  ;   ;Bank Account No.    ;Text30        ;AccessByPermission=TableData 270=R;
                                                   CaptionML=ENU=Bank Account No. }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=ENU=Payment Routing No. }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=ENU=Customs Permit No. }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=ENU=Customs Permit Date }
    { 19  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=Tax Registration No. }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=ENU=Registration No. }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 22  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 24  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 26  ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 27  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 28  ;   ;Location Code       ;Code10        ;CaptionML=ENU=Location Code }
    { 29  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;CaptionML=ENU=ZIP Code }
    { 31  ;   ;County              ;Text30        ;CaptionML=ENU=State;
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;CaptionML=ENU=Ship-to ZIP Code }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to State;
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 34  ;   ;E-Mail              ;Text80        ;CaptionML=ENU=Email }
    { 35  ;   ;Home Page           ;Text80        ;CaptionML=ENU=Home Page }
    { 36  ;   ;Country/Region Code ;Code10        ;CaptionML=ENU=Country/Region Code }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;CaptionML=ENU=Ship-to Country/Region Code }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=ENU=IBAN }
    { 39  ;   ;SWIFT Code          ;Code20        ;CaptionML=ENU=SWIFT Code }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=ENU=Industrial Classification }
    { 500 ;   ;Logo Position on Documents;Option  ;CaptionML=ENU=Logo Position on Documents;
                                                   OptionCaptionML=ENU=No Logo,Left,Center,Right;
                                                   OptionString=No Logo,Left,Center,Right }
    { 5700;   ;Responsibility Center;Code10       ;CaptionML=ENU=Responsibility Center }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   CaptionML=ENU=Check-Avail. Period Calc. }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;CaptionML=ENU=Check-Avail. Time Bucket;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;CaptionML=ENU=Base Calendar Code }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   CaptionML=ENU=Cal. Convergence Time Frame }
    { 8600;   ;Package File Name   ;Text250       ;OnValidate=VAR
                                                                FileManagement@1000 : Codeunit 419;
                                                              BEGIN
                                                                ReadPackageHeader(DecompressPackage(FileManagement.CanRunDotNetOnClient));
                                                              END;

                                                   CaptionML=ENU=Package File Name }
    { 8601;   ;Package Code        ;Code20        ;CaptionML=ENU=Package Code;
                                                   Editable=No }
    { 8602;   ;Language ID         ;Integer       ;TableRelation="Windows Language";
                                                   CaptionML=ENU=Language ID;
                                                   Editable=No }
    { 8603;   ;Product Version     ;Text80        ;CaptionML=ENU=Product Version;
                                                   Editable=No }
    { 8604;   ;Package Name        ;Text50        ;CaptionML=ENU=Package Name }
    { 8605;   ;Your Profile Code   ;Code30        ;TableRelation="All Profile"."Profile ID";
                                                   CaptionML=ENU=Your Profile Code }
    { 8606;   ;Your Profile App ID ;GUID          ;CaptionML=ENU=Your Profile App ID }
    { 8607;   ;Your Profile Scope  ;Option        ;CaptionML=ENU=Your Profile Scope;
                                                   OptionCaptionML=ENU=System,Tenant;
                                                   OptionString=System,Tenant }
    { 8608;   ;Package File        ;BLOB          ;CaptionML=ENU=Package File }
    { 10010;  ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PackageAlreadyExistsQst@1003 : TextConst 'ENU=The imported package already exists. Do you want to import another package?';
      HideDialog@1000 : Boolean;
      PackageDataNotDefinedErr@1001 : TextConst '@@@="%1 = ""Package Code""";ENU=%1 should be defined in the imported package.';

    PROCEDURE CompleteWizard@1() : Boolean;
    VAR
      FileMgt@1003 : Codeunit 419;
      Scope@1000 : 'System,Tenant';
      AppID@1001 : GUID;
    BEGIN
      TESTFIELD("Package File Name");
      TESTFIELD("Package Code");
      TESTFIELD("Package Name");

      ImportPackage(DecompressPackage(NOT FileMgt.IsWebClient));
      ApplyPackages;
      ApplyAnswers;
      CopyCompInfo;
      SelectDefaultRoleCenter("Your Profile Code",AppID,Scope::System);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE SelectDefaultRoleCenter@8(ProfileID@1000 : Code[30];AppID@1003 : GUID;Scope@1004 : 'System,Tenant');
    VAR
      Profile@1001 : Record 2000000178;
      ConfPersonalizationMgt@1002 : Codeunit 9170;
    BEGIN
      IF Profile.GET(Scope,AppID,ProfileID) THEN BEGIN
        Profile.VALIDATE("Default Role Center",TRUE);
        Profile.MODIFY;
        ConfPersonalizationMgt.ChangeDefaultRoleCenter(Profile);
      END;
    END;

    PROCEDURE ReadPackageHeader@7(DecompressedFileName@1005 : Text);
    VAR
      XMLDOMManagement@1002 : Codeunit 6224;
      PackageXML@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF "Package File Name" <> '' THEN BEGIN
        XMLDOMManagement.LoadXMLDocumentFromFile(DecompressedFileName,PackageXML);
        ReadPackageHeaderCommon(PackageXML);
      END ELSE BEGIN
        "Package Code" := '';
        "Package Name" := '';
        "Product Version" := '';
        "Language ID" := 0;
      END;
    END;

    [External]
    PROCEDURE ReadPackageHeaderFromStream@11(InStream@1005 : InStream);
    VAR
      XMLDOMManagement@1004 : Codeunit 6224;
      PackageXML@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF "Package File Name" <> '' THEN BEGIN
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStream,PackageXML);
        ReadPackageHeaderCommon(PackageXML);
      END ELSE BEGIN
        "Package Code" := '';
        "Package Name" := '';
        "Product Version" := '';
        "Language ID" := 0;
      END;
    END;

    LOCAL PROCEDURE ReadPackageHeaderCommon@10(PackageXML@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ConfigPackage@1006 : Record 8623;
      ConfigXMLExchange@1005 : Codeunit 8614;
      DocumentElement@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      LanguageID@1001 : Text;
    BEGIN
      DocumentElement := PackageXML.DocumentElement;
      "Package Code" :=
        COPYSTR(
          ConfigXMLExchange.GetAttribute(
            ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME(Code)),DocumentElement),
          1,MAXSTRLEN("Package Code"));
      IF "Package Code" = '' THEN
        ERROR(PackageDataNotDefinedErr,FIELDCAPTION("Package Code"));
      "Package Name" :=
        COPYSTR(
          ConfigXMLExchange.GetAttribute(
            ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME("Package Name")),DocumentElement),
          1,MAXSTRLEN("Package Name"));
      IF "Package Name" = '' THEN
        ERROR(PackageDataNotDefinedErr,FIELDCAPTION("Package Name"));
      "Product Version" :=
        COPYSTR(
          ConfigXMLExchange.GetAttribute(
            ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME("Product Version")),DocumentElement),
          1,MAXSTRLEN("Product Version"));
      LanguageID := ConfigXMLExchange.GetAttribute(
          ConfigXMLExchange.GetElementName(ConfigPackage.FIELDNAME("Language ID")),DocumentElement);
      IF LanguageID <> '' THEN
        EVALUATE("Language ID",LanguageID);
      MODIFY;
    END;

    PROCEDURE ImportPackage@4(DecompressedFileName@1005 : Text);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigXMLExchange@1001 : Codeunit 8614;
    BEGIN
      IF ConfigPackage.GET("Package Code") THEN
        IF NOT HideDialog THEN
          IF CONFIRM(PackageAlreadyExistsQst,TRUE) THEN BEGIN
            ConfigPackage.DELETE(TRUE);
            COMMIT;
          END ELSE
            ERROR('');

      ConfigXMLExchange.SetHideDialog(HideDialog);
      ConfigXMLExchange.ImportPackageXML(DecompressedFileName);
      COMMIT;
    END;

    [External]
    PROCEDURE ImportPackageFromStream@12(InStream@1005 : InStream);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigXMLExchange@1001 : Codeunit 8614;
    BEGIN
      IF ConfigPackage.GET("Package Code") THEN
        IF NOT HideDialog THEN
          IF CONFIRM(PackageAlreadyExistsQst,TRUE) THEN BEGIN
            ConfigPackage.DELETE(TRUE);
            COMMIT;
          END ELSE
            ERROR('');

      ConfigXMLExchange.SetHideDialog(HideDialog);
      ConfigXMLExchange.ImportPackageXMLFromStream(InStream);
      COMMIT;
    END;

    [External]
    PROCEDURE ApplyPackages@6() ErrorCount : Integer;
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1002 : Record 8613;
      ConfigPackageMgt@1001 : Codeunit 8611;
    BEGIN
      ConfigPackage.GET("Package Code");
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageMgt.SetHideDialog(HideDialog);
      ErrorCount := ConfigPackageMgt.ApplyPackage(ConfigPackage,ConfigPackageTable,TRUE);
    END;

    PROCEDURE ApplyAnswers@9();
    VAR
      ConfigQuestionnaire@1000 : Record 8610;
      ConfigQuestionnaireMgt@1001 : Codeunit 8610;
    BEGIN
      IF ConfigQuestionnaire.FINDSET THEN
        REPEAT
          ConfigQuestionnaireMgt.ApplyAnswers(ConfigQuestionnaire);
        UNTIL ConfigQuestionnaire.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyCompInfo@5();
    VAR
      CompanyInfo@1000 : Record 79;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      IF NOT CompanyInfo.GET THEN BEGIN
        CompanyInfo.INIT;
        CompanyInfo.INSERT;
      END;
      CompanyInfo.TRANSFERFIELDS(Rec);
      CompanyInfo.MODIFY;

      IF NOT SalesReceivablesSetup.GET THEN BEGIN
        SalesReceivablesSetup.INIT;
        SalesReceivablesSetup.INSERT;
      END;
      SalesReceivablesSetup."Logo Position on Documents" := "Logo Position on Documents";
      SalesReceivablesSetup.MODIFY;

      COMMIT;
    END;

    [External]
    PROCEDURE SetHideDialog@48(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE DecompressPackage@2(UploadToServer@1003 : Boolean) DecompressedFileName : Text;
    VAR
      ConfigXMLExchange@1002 : Codeunit 8614;
      FileMgt@1001 : Codeunit 419;
    BEGIN
      IF UploadToServer THEN
        DecompressedFileName := ConfigXMLExchange.DecompressPackage(FileMgt.UploadFileToServer("Package File Name"))
      ELSE
        DecompressedFileName := ConfigXMLExchange.DecompressPackage("Package File Name");
    END;

    [External]
    PROCEDURE DecompressPackageToBlob@13(VAR TempBlob@1000 : Record 99008535;VAR TempBlobUncompressed@1001 : Record 99008535);
    VAR
      ConfigXMLExchange@1002 : Codeunit 8614;
    BEGIN
      ConfigXMLExchange.DecompressPackageToBlob(TempBlob,TempBlobUncompressed);
    END;

    BEGIN
    END.
  }
}

