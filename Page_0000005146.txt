OBJECT Page 5146 Assign Activity
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:55 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Assign Activity;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5080;
    DataCaptionExpr=Caption;
    PageType=Card;
    OnInit=BEGIN
             TeamCodeEditable := TRUE;
             SalespersonCodeEditable := TRUE;
             WizardContactNameEditable := TRUE;
             TeamMeetingOrganizerEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 WizardContactNameEditable := FALSE;
                 IsOnMobile := ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Phone;

                 IF SalesPurchPerson.GET(GETFILTER("Salesperson Code")) OR
                    Team.GET(GETFILTER("Team Code"))
                 THEN BEGIN
                   SalespersonCodeEditable := FALSE;
                   TeamCodeEditable := FALSE;
                 END;

                 IF SalesPurchPerson.GET(GETFILTER("Salesperson Code")) OR
                    ("Salesperson Code" <> '') OR
                    ("Activity Code" = '')
                 THEN
                   TeamMeetingOrganizerEditable := FALSE;

                 IF Campaign.GET(GETFILTER("Campaign No.")) THEN
                   "Campaign Description" := Campaign.Description;

                 IF SegHeader.GET(GETFILTER("Segment No.")) THEN
                   "Segment Description" := SegHeader.Description;
               END;

    OnAfterGetRecord=BEGIN
                       WizardContactNameOnFormat(FORMAT("Wizard Contact Name"));
                     END;

    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
                         CheckAssignActivityStatus;
                         FinishAssignActivity;
                       END;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 10      ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      ToolTipML=ENU=Finish assigning the activity.;
                      ApplicationArea=#RelationshipMgmt;
                      Promoted=Yes;
                      Visible=IsOnMobile;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 CheckAssignActivityStatus;
                                 FinishAssignActivity;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Activity Setup;
                CaptionML=ENU=Activity Setup;
                GroupType=Group }

    { 23  ;2   ;Field     ;
                CaptionML=ENU=Activity Code;
                ToolTipML=ENU=Specifies a code for the task activity.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Activity Code";
                TableRelation=Activity.Code;
                OnValidate=BEGIN
                             IF NOT Activity.IncludesMeeting("Activity Code") THEN BEGIN
                               TeamMeetingOrganizerEditable := FALSE;
                               "Team Meeting Organizer" := ''
                             END ELSE
                               IF "Team Code" <> '' THEN BEGIN
                                 TeamMeetingOrganizerEditable := TRUE;
                                 "Team Meeting Organizer" := ''
                               END;
                           END;
                            }

    { 9   ;2   ;Field     ;
                CaptionML=ENU=Activity Start Date;
                ToolTipML=ENU=Specifies the date when the task should be started. There are certain rules for how dates should be entered found in How to: Enter Dates and Times.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Date }

    { 15  ;2   ;Field     ;
                Lookup=No;
                CaptionML=ENU=Contact No.;
                ToolTipML=ENU=Specifies a contact name from the wizard.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Contact Name";
                TableRelation=Contact;
                Editable=WizardContactNameEditable;
                OnAssistEdit=VAR
                               Cont@1102601001 : Record 5050;
                             BEGIN
                               IF ("Wizard Contact Name" = '') AND NOT SegHeader.GET(GETFILTER("Segment No.")) THEN BEGIN
                                 IF Cont.GET("Contact No.") THEN ;
                                 IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                   VALIDATE("Contact No.",Cont."No.");
                                   CurrPage.SETSELECTIONFILTER(Rec);
                                   "Wizard Contact Name" := Cont.Name;
                                 END;
                               END;
                             END;
                              }

    { 16  ;2   ;Field     ;
                CaptionML=ENU=Salesperson Code;
                ToolTipML=ENU=Specifies the code of the salesperson assigned to the task.;
                ApplicationArea=#Suite,#RelationshipMgmt;
                SourceExpr="Salesperson Code";
                Editable=SalespersonCodeEditable;
                OnValidate=BEGIN
                             IF SalesPurchPerson.GET("Salesperson Code") THEN BEGIN
                               TeamMeetingOrganizerEditable := FALSE;
                               "Team Meeting Organizer" := '';
                               "Team Code" := ''
                             END ELSE
                               IF Activity.IncludesMeeting("Activity Code") OR
                                  ("Activity Code" = '') AND
                                  ("Team Code" <> '')
                               THEN
                                 TeamMeetingOrganizerEditable := TRUE
                           END;
                            }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Team Code;
                ToolTipML=ENU=Specifies the code of the team to which the task is assigned.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Team Code";
                Editable=TeamCodeEditable;
                OnValidate=BEGIN
                             IF Team.GET("Team Code") THEN BEGIN
                               IF Activity.IncludesMeeting("Activity Code") THEN
                                 TeamMeetingOrganizerEditable := TRUE;
                               "Salesperson Code" := '';
                             END;
                             IF "Team Code" = '' THEN BEGIN
                               TeamMeetingOrganizerEditable := FALSE;
                               "Team Meeting Organizer" := ''
                             END;
                           END;
                            }

    { 26  ;2   ;Field     ;
                CaptionML=ENU=Meeting Organizer;
                ToolTipML=ENU=Specifies who on the team is the organizer of the task. You can modify the value in this field with the appropriate name when the to-do is for a team.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Team Meeting Organizer";
                Editable=TeamMeetingOrganizerEditable;
                OnValidate=VAR
                             SalesPurchPerson@1000 : Record 13;
                           BEGIN
                             SalesPurchPerson.GET("Team Meeting Organizer");
                           END;

                OnLookup=VAR
                           Salesperson@1000 : Record 13;
                           SalesPurchPerson@1001 : Page 14;
                         BEGIN
                           SalesPurchPerson.LOOKUPMODE := TRUE;
                           IF SalesPurchPerson.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             SalesPurchPerson.GETRECORD(Salesperson);
                             IF TeamMeetingOrganizerEditable THEN
                               "Team Meeting Organizer" := Salesperson.Code
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                Lookup=No;
                CaptionML=ENU=Campaign;
                ToolTipML=ENU=Specifies a description of the campaign that is related to the task. The description is copied from the campaign card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Campaign Description";
                TableRelation=Campaign;
                Importance=Additional;
                OnAssistEdit=VAR
                               Campaign@1102601001 : Record 5071;
                             BEGIN
                               IF NOT Campaign.GET(GETFILTER("Campaign No.")) THEN BEGIN
                                 IF Campaign.GET("Campaign No.") THEN ;
                                 IF PAGE.RUNMODAL(0,Campaign) = ACTION::LookupOK THEN BEGIN
                                   VALIDATE("Campaign No.",Campaign."No.");
                                   "Wizard Campaign Description" := Campaign.Description;
                                 END;
                               END;
                             END;
                              }

    { 21  ;2   ;Field     ;
                Lookup=No;
                CaptionML=ENU=Create Tasks for Segment;
                ToolTipML=ENU=Specifies a description of the segment related to the task. The description is copied from the segment card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Segment Description";
                TableRelation="Segment Header";
                Importance=Additional;
                Editable=FALSE;
                OnAssistEdit=VAR
                               Segment@1102601000 : Record 5076;
                             BEGIN
                               IF Segment.GET("Segment No.") THEN ;
                               IF PAGE.RUNMODAL(0,Segment) = ACTION::LookupOK THEN BEGIN
                                 VALIDATE("Segment No.",Segment."No.");
                                 "Segment Description" := Segment.Description;
                               END;
                             END;
                              }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=untitled';
      Cont@1005 : Record 5050;
      SalesPurchPerson@1006 : Record 13;
      Team@1007 : Record 5083;
      Campaign@1008 : Record 5071;
      SegHeader@1009 : Record 5076;
      Activity@1001 : Record 5081;
      Text005@1013 : TextConst 'ENU=(Multiple)';
      ClientTypeManagement@1003 : Codeunit 4;
      TeamMeetingOrganizerEditable@19012630 : Boolean INDATASET;
      WizardContactNameEditable@19024232 : Boolean INDATASET;
      SalespersonCodeEditable@19071610 : Boolean INDATASET;
      TeamCodeEditable@19004084 : Boolean INDATASET;
      IsOnMobile@1002 : Boolean;

    LOCAL PROCEDURE Caption@1() : Text[260];
    VAR
      CaptionStr@1000 : Text[260];
    BEGIN
      IF Cont.GET(GETFILTER("Contact Company No.")) THEN
        CaptionStr := COPYSTR(Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      IF Cont.GET(GETFILTER("Contact No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      IF SalesPurchPerson.GET(GETFILTER("Salesperson Code")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + SalesPurchPerson.Code + ' ' + SalesPurchPerson.Name,1,MAXSTRLEN(CaptionStr));
      IF Team.GET(GETFILTER("Team Code")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Team.Code + ' ' + Team.Name,1,MAXSTRLEN(CaptionStr));
      IF Campaign.GET(GETFILTER("Campaign No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Campaign."No." + ' ' + Campaign.Description,1,MAXSTRLEN(CaptionStr));
      IF SegHeader.GET(GETFILTER("Segment No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + SegHeader."No." + ' ' + SegHeader.Description,1,MAXSTRLEN(CaptionStr));
      IF CaptionStr = '' THEN
        CaptionStr := Text000;

      EXIT(CaptionStr);
    END;

    LOCAL PROCEDURE WizardContactNameOnFormat@19031225(Text@19070643 : Text[1024]);
    BEGIN
      IF SegHeader.GET(GETFILTER("Segment No.")) THEN
        Text := Text005;
    END;

    BEGIN
    END.
  }
}

