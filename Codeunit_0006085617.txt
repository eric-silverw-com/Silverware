OBJECT Codeunit 6085617 Continia Online - DC
{
  OBJECT-PROPERTIES
  {
    Date=08/13/18;
    Time=[ 1:00:00 AM];
    Version List=DCW13.70.00.4.50.07;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      COMgt@1160040005 : Codeunit 6192772;
      LicenseMgt@6085573 : Codeunit 6192773;
      AboutDCMgt@6085574 : Codeunit 6085589;
      XmlLib@1160040011 : Codeunit 6085573;
      Window@1001 : Dialog;
      HttpActions@1160040001 : 'PUT,DELETE,GET';
      Protocol@1160040004 : 'IMAP,ContiniaMail';
      Text003@1160040000 : TextConst 'ENU=Cloud OCR is not active.';
      Text005@1160040002 : TextConst 'ENU=The company information has been updated.';
      DocumentCountMsg@1160040003 : TextConst 'ENU=No. of Documents: %1';
      ProductActivateExportConfigMsg@1160040010 : TextConst 'ENU=%1 has been activated for %2.\\Remember to update configurations, such as Connection Endpoints for Document Categories, and export configuration files.';
      ProductActivateFilePathMsg@6085575 : TextConst 'ENU=%1 has been activated for %2.\\Remember to update configurations, such as Connection Endpoints for Document Categories, and export configuration files.\\Please verify that the file paths for %2 are unique.';
      Text009@1160040006 : TextConst 'ENU=Uploading OCR Files\%1 #1###################\@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text010@1160040007 : TextConst 'ENU=There are local documents which have not been sent to Cloud OCR. Would you like to send them for processing now?';
      Text011@1160040008 : TextConst 'ENU=Downloading files from Continia Online\Document Category #1######################\Status            @2@@@@@@@@@@@@@@@@@@@@@@';

    PROCEDURE IsCompanyActive@1160040035(ShowError@1160040001 : Boolean) : Boolean;
    VAR
      UpdateDCDocCounters@6085573 : Codeunit 6085618;
    BEGIN
      IF LicenseMgt.IsActive('CDC','Document Capture',ShowError) THEN
        EXIT(TRUE)
      ELSE BEGIN
        UpdateDCDocCounters.ClearCODC;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE IsCloudActive@1160040032(ShowError@1160040001 : Boolean) : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      DCSetup.GET;

      IF ShowError THEN
        DCSetup.TESTFIELD("Use Cloud OCR");

      EXIT(DCSetup."Use Cloud OCR");
    END;

    PROCEDURE CheckCategoryValid@1160040026(VAR DocCat@1160040000 : Record 6085575);
    VAR
      ConnEndpoint@1160040002 : Record 6085620;
      EmptyGUID@1160040001 : GUID;
    BEGIN
      IF DocCat."Document Category GUID" = EmptyGUID THEN BEGIN
        DocCat."Document Category GUID" := CREATEGUID;
        DocCat.MODIFY;
      END;

      DocCat.TESTFIELD("Scanning Allowed");
      DocCat.TESTFIELD("E-Mail Connection Endpoint");
      ConnEndpoint.GET(DocCat."E-Mail Connection Endpoint");
    END;

    PROCEDURE UpdateCompanyCount@1160040004();
    VAR
      DCSetup@1160040001 : Record 6085573;
      XmlDoc@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IsCloudActive(TRUE);

      GetClient(XmlDoc);

      CLEAR(XmlDoc);

      MESSAGE(Text005);
    END;

    PROCEDURE GetClient@1160040028(VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetClientUrl,HttpActions::GET,TRUE,XmlDoc);
    END;

    PROCEDURE GetCompany@1160040015(VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetCompanyUrl,HttpActions::GET,TRUE,XmlDoc);
    END;

    PROCEDURE GetCompanyCode@1160040003(ShowError@1160040001 : Boolean) : Code[10];
    VAR
      ContiniaCompanySetup@6085573 : Record 6192773;
    BEGIN
      ContiniaCompanySetup.GET;

      IF ShowError THEN
        ContiniaCompanySetup.TESTFIELD("Company Code");

      EXIT(ContiniaCompanySetup."Company Code");
    END;

    PROCEDURE ActivateCompany@1160040023();
    VAR
      Document@1160040001 : Record 6085590;
      DCSetup@6085574 : Record 6085573;
      IsAccept@1160040003 : Boolean;
      LicenseInfo@1160040004 : ARRAY [100] OF Text[250];
      i@1160040005 : Integer;
      UserSelection@6085573 : 'New Company,New Test Company,Reactivate';
    BEGIN
      i := LicenseMgt.GetStandardLicenseInfo(LicenseInfo);
      LicenseInfo[i+1] := STRSUBSTNO(DocumentCountMsg,Document.COUNT);

      DCSetup.GET;
      DCSetup.VerifyFilePathsCrossComp;
      UserSelection := LicenseMgt.ActivateProduct('CDC',AboutDCMgt.BuildVersion,AboutDCMgt.VersionDetails,LicenseInfo);

      CASE UserSelection OF
        UserSelection::"New Company",UserSelection::"New Test Company":
          MESSAGE(ProductActivateExportConfigMsg,AboutDCMgt.VersionDetails,COMPANYNAME);
        UserSelection::Reactivate:
          MESSAGE(ProductActivateFilePathMsg,AboutDCMgt.VersionDetails,COMPANYNAME);
      END;
    END;

    PROCEDURE ActivateCompanyOffline@6085577();
    VAR
      Document@1160040001 : Record 6085590;
      DCSetup@6085574 : Record 6085573;
      IsAccept@1160040003 : Boolean;
      LicenseInfo@1160040004 : ARRAY [100] OF Text[250];
      i@1160040005 : Integer;
      UserSelection@6085573 : 'New Company,New Test Company,Reactivate';
    BEGIN
      i := LicenseMgt.GetStandardLicenseInfo(LicenseInfo);
      LicenseInfo[i+1] := STRSUBSTNO(DocumentCountMsg,Document.COUNT);

      DCSetup.GET;
      DCSetup.VerifyFilePathsCrossComp;
      LicenseMgt.OfflineActivateProduct('CDC',AboutDCMgt.BuildVersion,AboutDCMgt.VersionDetails,LicenseInfo);
    END;

    PROCEDURE DeactivateCompany@6085573();
    VAR
      AboutDCMgt@6085573 : Codeunit 6085589;
    BEGIN
      LicenseMgt.DeactivateCompany('CDC',AboutDCMgt.VersionDetails);
    END;

    PROCEDURE ExportConfiguration@1160040016(DocCat@1160040000 : Record 6085575) : Boolean;
    VAR
      DCSetup@1160040008 : Record 6085573;
      ConnEndpoint@1160040007 : Record 6085620;
      XmlDoc@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CategoryNode@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EmailNode@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IsCompanyActive(TRUE);

      IF DocCat."E-Mail Connection Endpoint" = '' THEN
        EXIT;

      CheckCategoryValid(DocCat);

      DCSetup.GET;
      ConnEndpoint.GET(DocCat."E-Mail Connection Endpoint");

      XmlDoc := XmlDoc.XmlDocument;
      CategoryNode := XmlDoc.CreateNode('element','Category','');
      XmlLib.SetXmlNodeAttr(CategoryNode,'CategoryCode',DocCat.Code);
      XmlLib.SetXmlNodeAttr(CategoryNode,'CategoryGUID',COMgt.GetGUIDAsText(DocCat."Document Category GUID"));
      XmlLib.SetXmlNodeAttr(CategoryNode,'CompanyGUID',COMgt.GetCompanyGUID);
      XmlLib.SetXmlNodeAttr(CategoryNode,'CompanyCode',GetCompanyCode(TRUE));
      XmlLib.SetXmlNodeAttr(CategoryNode,'ArchiveDocuments',COMgt.GetIntAsText(DocCat."Archive Documents in Cloud OCR"));

      XmlLib.SetXmlNodeAttr(CategoryNode,'MaxNoOfPagesToOCR',COMgt.GetIntAsText(DocCat."Max no. of Pages to Process"));

      CASE DocCat."TIFF Image Colour Mode" OF
        DocCat."TIFF Image Colour Mode"::"Black & White":
          XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageColorMode','BlackWhite');
        DocCat."TIFF Image Colour Mode"::Gray:
          XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageColorMode','Gray');
        DocCat."TIFF Image Colour Mode"::Colour:
          XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageColorMode','Color');
      END;
      XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageResolution',COMgt.GetIntAsText(DocCat."TIFF Image Resolution"));

      XmlLib.SetXmlNodeAttr(CategoryNode,'ExportNewPDF',COMgt.GetBoolAsText(FALSE));

      XmlLib.SetXmlNodeAttr(CategoryNode,'WordExportCodepage',COMgt.GetIntAsText(DocCat."OCR Export Codepage"));

      XmlLib.CreateXmlNode(CategoryNode,'Email','',EmailNode);
      XmlLib.SetXmlNodeAttr(EmailNode,'Type',GetProtocolAsText(ConnEndpoint.Protocol));
      IF ConnEndpoint.Protocol = ConnEndpoint.Protocol::"Continia Email" THEN
        XmlLib.SetXmlNodeAttr(EmailNode,'EmailAddress',GetOneCategoryEmail(ConnEndpoint))
      ELSE BEGIN
        ConnEndpoint.TESTFIELD("Server Address");
        ConnEndpoint.TESTFIELD("Protocol Port");
        ConnEndpoint.TESTFIELD(Username);
        ConnEndpoint.TESTFIELD(Password);

        XmlLib.SetXmlNodeAttr(EmailNode,'ServerAddress',ConnEndpoint."Server Address");
        XmlLib.SetXmlNodeAttr(EmailNode,'ServerPort',COMgt.GetIntAsText(ConnEndpoint."Protocol Port"));
        XmlLib.SetXmlNodeAttr(EmailNode,'UseSSL',COMgt.GetBoolAsText(DCSetup."SMTP Require SSL/TLS"));
        XmlLib.SetXmlNodeAttr(EmailNode,'Username',ConnEndpoint.Username);
        XmlLib.SetXmlNodeAttr(EmailNode,'Password',ConnEndpoint.Password);
        XmlLib.SetXmlNodeAttr(EmailNode,'SubFolder',ConnEndpoint.Subfolder);
      END;

      XmlDoc.AppendChild(CategoryNode);

      COMgt.ExecuteRequest(GetOneCategoryUrl(DocCat."Document Category GUID"),HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);

      EXIT(TRUE);
    END;

    PROCEDURE GetOneCategory@1160040013(DocCat@1160040000 : Record 6085575;ShowError@1160040002 : Boolean;VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetOneCategoryUrl(DocCat."Document Category GUID"),HttpActions::GET,ShowError,XmlDoc);

      EXIT(TRUE);
    END;

    PROCEDURE GetAllCategory@1160040039(ShowError@1160040002 : Boolean;VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetAllCategoryUrl,HttpActions::GET,ShowError,XmlDoc);

      EXIT(TRUE);
    END;

    PROCEDURE GetOneCategoryEmail@1160040001(ConnEndpoint@1160040004 : Record 6085620) : Text[100];
    VAR
      DCSetup@1160040007 : Record 6085573;
    BEGIN
      DCSetup.GET;

      IF NOT IsCloudActive(FALSE) THEN
        EXIT(Text003);

      EXIT(LOWERCASE(STRSUBSTNO('%1.%2.%3@%4',ConnEndpoint.Code,GetCompanyCode(TRUE),COMgt.GetClientID(TRUE),GetEmailDomain)));
    END;

    PROCEDURE GetOneCategoryCount@1160040020(VAR DocCat@1160040004 : Record 6085575);
    VAR
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT GetOneCategory(DocCat,FALSE,XmlDoc) THEN
        EXIT;

      DocCat."Documents for OCR" := COMgt.GetAttribAsInt(XmlDoc.SelectNodes('Category'),'OCRFiles',0);
      DocCat."Documents for Import" := COMgt.GetAttribAsInt(XmlDoc.SelectNodes('Category'),'ImportFiles',0);
      DocCat."Documents with Error" := COMgt.GetAttribAsInt(XmlDoc.SelectNodes('Category'),'ErrorFiles',0);
      CLEAR(XmlDoc);
    END;

    PROCEDURE GetAllCategoryCount@1160040027(VAR TempDocCat@1160040005 : TEMPORARY Record 6085575);
    VAR
      XMLNodeList@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      i@1160040004 : Integer;
      DocCatCode@1160040002 : Text[10];
    BEGIN
      IF NOT GetAllCategory(FALSE,XmlDoc) THEN
        EXIT;

      XMLNodeList := XmlDoc.DocumentElement.SelectNodes('Category');
      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        COMgt.GetAttribAsText(XMLNodeList,'CategoryCode',i,DocCatCode);

        IF NOT TempDocCat.GET(DocCatCode) THEN BEGIN
          TempDocCat.Code := DocCatCode;
          TempDocCat.INSERT;
        END;

        TempDocCat."Documents for OCR" := COMgt.GetAttribAsInt(XMLNodeList,'OCRFiles',i);
        TempDocCat."Documents for Import" := COMgt.GetAttribAsInt(XMLNodeList,'ImportFiles',i);
        TempDocCat."Documents with Error" := COMgt.GetAttribAsInt(XMLNodeList,'ErrorFiles',i);
        TempDocCat.MODIFY;
      END;

      CLEAR(XmlDoc);
    END;

    PROCEDURE DeleteDocument@1160040033(DocCatCode@1160040002 : Code[20];DocumentID@1160040000 : Text[1024];Status@1160040005 : 'OCR,Import,Error');
    VAR
      DocCat@1160040003 : Record 6085575;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocumentNode@1160040004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IsCloudActive(TRUE);

      DocCat.GET(DocCatCode);

      XmlDoc := XmlDoc.XmlDocument;
      DocumentNode := XmlDoc.CreateNode('element','Document','');
      XmlLib.SetXmlNodeAttr(DocumentNode,'RequiredStatus',GetStatusAsText(Status));
      XmlDoc.AppendChild(DocumentNode);

      COMgt.ExecuteRequest(GetDocumentDeleteUrl(DocCat."Document Category GUID",DocumentID),HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    PROCEDURE DeleteCategory@1160040014(DocCat@1160040000 : Record 6085575);
    VAR
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT IsCloudActive(FALSE) THEN
        EXIT;

      COMgt.ExecuteRequest(GetOneCategoryUrl(DocCat."Document Category GUID"),HttpActions::DELETE,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    PROCEDURE UpdateDocument@1160040008(DocCat@1160040000 : Record 6085575;DocID@1160040003 : Code[100]);
    VAR
      XmlDoc@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocumentNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      DocumentNode := XmlDoc.CreateNode('element','Document','');
      XmlLib.SetXmlNodeAttr(DocumentNode,'Downloaded',COMgt.GetBoolAsText(TRUE));
      XmlDoc.AppendChild(DocumentNode);

      COMgt.ExecuteRequest(GetOneDocumentUrl(DocCat."Document Category GUID",DocID),HttpActions::PUT,TRUE,XmlDoc);

      CLEAR(XmlDoc);
    END;

    PROCEDURE CheckForUnsentDocsInCats@6085582();
    VAR
      DocCat@6085573 : Record 6085575;
      FileSysMgt@6085574 : Codeunit 6085584;
      LocalFileCount@6085575 : Integer;
    BEGIN
      IF NOT IsCloudActive(FALSE) THEN
        EXIT;

      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN REPEAT
        LocalFileCount += FileSysMgt.GetFilesInDir(DocCat.GetCategoryPath(1),'*.pdf');
      UNTIL DocCat.NEXT = 0;

      IF LocalFileCount > 0 THEN
        IF CONFIRM(Text010,TRUE) THEN
          DocCat.UploadFilesForOCR;
    END;

    PROCEDURE UploadPdfDocsInCategory@1160040017(DocCat@6085573 : Record 6085575);
    VAR
      FileSysMgt@1160040000 : Codeunit 6085584;
      CaptureMgt@1160040006 : Codeunit 6085576;
      Files@1160040001 : ARRAY [1000] OF Text[250];
      FileCount@1160040002 : Integer;
      i@1160040003 : Integer;
    BEGIN
      UploadPdfDocsInFolder(DocCat,DocCat.GetCategoryPath(1));
    END;

    PROCEDURE UploadPdfDocsInFolder@6085574(DocCat@1160040004 : Record 6085575;FolderPath@6085573 : Text[1024]);
    VAR
      FileSysMgt@1160040000 : Codeunit 6085584;
      CaptureMgt@1160040006 : Codeunit 6085576;
      Files@1160040001 : ARRAY [10000] OF Text[250];
      FileCount@1160040002 : Integer;
      i@1160040003 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(CaptureMgt.Replace(Text009,'%1',DocCat.TABLECAPTION,FALSE));

      FileCount := FileSysMgt.GetFilesInDir2(FolderPath,'*.pdf',Files);

      IF GUIALLOWED THEN
        Window.UPDATE(1,DocCat.Code);

      FOR i := 1 TO FileCount DO BEGIN
        IF GUIALLOWED THEN
          Window.UPDATE(2,(i / FileCount * 10000) DIV 1);

        COMgt.UploadFile(Files[i],GetOCRUploadCategoryUrl(DocCat."Document Category GUID"),TRUE,TRUE);
        FileSysMgt.DeleteFile(Files[i],FALSE);
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE HasPdfFilesToUpload@1160040036(VAR DocCat@1160040004 : Record 6085575) : Boolean;
    VAR
      FileSysMgt@1160040000 : Codeunit 6085584;
    BEGIN
      IF DocCat.FINDSET THEN REPEAT
        IF FileSysMgt.GetFilesInDir(DocCat.GetCategoryPath(1),'*.pdf') > 0 THEN
          EXIT(TRUE);
        UNTIL DocCat.NEXT = 0;
    END;

    PROCEDURE IsOnlineDocument@1160040002(Document@1160040000 : Record 6085590) : Boolean;
    BEGIN
      EXIT(STRPOS(Document.Filename,'CO-') = 1);
    END;

    PROCEDURE GetNewDocuments@1160040018();
    VAR
      DocCat@1160040002 : Record 6085575;
      UpdateDCDocCounters@1160040000 : Codeunit 6085618;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT IsCloudActive(FALSE) THEN
        EXIT;

      IF GUIALLOWED THEN
        Window.OPEN(Text011);

      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN
        REPEAT
          IF GUIALLOWED THEN
            IF DocCat.Description <> '' THEN
              Window.UPDATE(1,DocCat.Description)
            ELSE
              Window.UPDATE(1,DocCat.Code);

          IF COMgt.ExecuteRequest(GetNewDocumentUrl(DocCat."Document Category GUID"),HttpActions::GET,FALSE,XmlDoc) THEN
            GetDocumentFiles(DocCat,XmlDoc,TRUE);
        UNTIL DocCat.NEXT = 0;

      UpdateDCDocCounters.SetForceUpdate(TRUE);

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE GetNewDocument@1160040037(VAR TempDoc@1160040003 : TEMPORARY Record 6085772) DocName : Text[30];
    VAR
      DocCat@1160040002 : Record 6085575;
      UpdateDCDocCounters@1160040000 : Codeunit 6085618;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT IsCloudActive(FALSE) THEN
        EXIT;

      IF GUIALLOWED THEN
        Window.OPEN(Text011);

      DocCat.GET(TempDoc."Document Category Code");

      IF COMgt.ExecuteRequest(GetOneDocumentUrl(DocCat."Document Category GUID",TempDoc."Document ID"),HttpActions::GET,TRUE,XmlDoc)
      THEN
        DocName := GetDocumentFiles(DocCat,XmlDoc,TRUE);

      UpdateDCDocCounters.SetForceUpdate(TRUE);

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE GetStatusDocuments@1160040031(DocCat@1160040000 : Record 6085575;Status@1160040007 : 'OCR,Import,Error';VAR TempDoc@1160040004 : TEMPORARY Record 6085772);
    VAR
      FileSysMgt@1160040006 : Codeunit 6085584;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeList@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      EntryNo@1160040005 : Integer;
      i@1160040003 : Integer;
      StatusText@1160040008 : Text[30];
    BEGIN
      COMgt.ExecuteRequest(
        GetStatusDocumentUrl(DocCat."Document Category GUID",GetStatusAsText(Status)),
        HttpActions::GET,TRUE,XmlDoc);

      XMLNodeList := XmlDoc.DocumentElement.SelectNodes('Document');
      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        EntryNo += 1;
        TempDoc.INIT;
        TempDoc."Entry No." := EntryNo;
        TempDoc."Scanned File" := TRUE;
        TempDoc."Document ID" := COMgt.GetAttribAsCode(XMLNodeList,'Id',i);
        COMgt.GetAttribAsText(XMLNodeList,'Name',i,TempDoc."File Name");
        TempDoc."File Name with Extension" := FileSysMgt.GetFilename(TempDoc."File Name");
        TempDoc."File Name" := FileSysMgt.GetFilenameWithoutExt(TempDoc."File Name");
        COMgt.GetAttribAsText(XMLNodeList,'PDFDownloadLink',i,TempDoc."File Path");
        TempDoc."Date/Time" := COMgt.GetAttribAsDateTime(XMLNodeList,'DocumentDate',i);
        COMgt.GetAttribAsText(XMLNodeList,'Text',i,TempDoc.Description);
        COMgt.GetAttribAsText(XMLNodeList,'EMailFromAddress',i,TempDoc."From E-Mail Address");
        COMgt.GetAttribAsText(XMLNodeList,'EMailSubject',i,TempDoc."E-Mail Subject");
        TempDoc."E-Mail Received" := COMgt.GetAttribAsDateTime(XMLNodeList,'EMailDateTime',i);
        IF NOT (Status = Status::Error) THEN
          TempDoc."OCR Processed" := COMgt.GetAttribAsDateTime(XMLNodeList,'OCRProcessedDateTimeUTC',i);
        TempDoc."Is Cloud OCR" := TRUE;
        TempDoc."Document Category Code" := DocCat.Code;
        TempDoc.Status := Status;
        TempDoc.INSERT;
      END;
    END;

    PROCEDURE GetAllDocuments@1160040019();
    VAR
      DocCat@1160040000 : Record 6085575;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT IsCloudActive(FALSE) THEN
        EXIT;

      IF GUIALLOWED THEN
        Window.OPEN(Text011);

      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN
        REPEAT
          IF GUIALLOWED THEN
            IF DocCat.Description <> '' THEN
              Window.UPDATE(1,DocCat.Description)
            ELSE
              Window.UPDATE(1,DocCat.Code);

          IF COMgt.ExecuteRequest(GetAllDocumentUrl(DocCat."Document Category GUID"),HttpActions::GET,TRUE,XmlDoc) THEN
            GetDocumentFiles(DocCat,XmlDoc,TRUE);
        UNTIL DocCat.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE GetOneDocument@1160040021(Document@1160040000 : Record 6085590;VAR XmlDoc@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      DocCat@1160040001 : Record 6085575;
    BEGIN
      DocCat.GET(Document."Document Category Code");

      COMgt.ExecuteRequest(GetOneDocumentUrl(DocCat."Document Category GUID",GetDocumentID(Document)),
        HttpActions::GET,TRUE,XmlDoc);
    END;

    PROCEDURE GetDocumentID@1160040011(Document@1160040000 : Record 6085590) DocumentID : Code[100];
    BEGIN
      IF IsOnlineDocument(Document) THEN
        EXIT(DELCHR(Document.Filename,'<','CO-'))
      ELSE
        EXIT(Document.Filename);
    END;

    PROCEDURE GetDocumentFiles@1160040010(DocCat@1160040001 : Record 6085575;XmlDoc@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ShowWindow@1001 : Boolean) LastDocName : Text[30];
    VAR
      XMLNodeList@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DCSetup@1160040007 : Record 6085573;
      FileSystem@1160040006 : Codeunit 6085584;
      DocID@1160040000 : Text[30];
      DocPath@1160040003 : Text[1024];
      Path@1160040008 : Text[1024];
      FileLink@1160040004 : Text[1024];
      EmailGuid@1160040009 : Text[50];
      Total@1000 : Integer;
      i@1160040010 : Integer;
    BEGIN
      XMLNodeList := XmlDoc.DocumentElement.SelectNodes('Document');

      DCSetup.GET;

      Path := DocCat.GetCategoryPath(2);

      IF NOT FileSystem.DirectoryExists(Path) THEN
        FileSystem.CreateDirectory(Path);

      Total := XMLNodeList.Count;

      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        IF ShowWindow AND GUIALLOWED THEN
          Window.UPDATE(2,(i / Total * 10000) DIV 1);

        COMgt.GetAttribAsText(XMLNodeList,'Id',i,DocID);
        LastDocName := 'CO-' + DocID;
        DocPath := Path  + '\' + 'CO-' + DocID;

        COMgt.GetAttribAsText(XMLNodeList,'TIFFDownloadLink',i,FileLink);
        IF FileLink <> '' THEN
          COMgt.DownloadFile(FileLink,DocPath + '.tiff',FALSE);

        COMgt.GetAttribAsText(XMLNodeList,'PDFDownloadLink',i,FileLink);
        IF FileLink <> '' THEN
          COMgt.DownloadFile(FileLink,DocPath + '.pdf',FALSE);

        COMgt.GetAttribAsText(XMLNodeList,'XMLDownloadLink',i,FileLink);
        IF FileLink <> '' THEN
          COMgt.DownloadFile(FileLink,DocPath + '.xml',FALSE);

        IF DocCat."Archive E-mails on Document" THEN BEGIN
          COMgt.GetAttribAsText(XMLNodeList,'EMLDownloadLink',i,FileLink);
          IF FileLink <> '' THEN
            COMgt.DownloadFile(FileLink,DocPath + '.eml',FALSE);
        END;
      END;
    END;

    PROCEDURE GetProtocolAsText@1160040025(Value@1160040000 : Integer) : Text[30];
    BEGIN
      CASE Value OF
        Protocol::IMAP:
          EXIT('IMAP');
        Protocol::ContiniaMail:
          EXIT('ContiniaMail');
      END;
    END;

    PROCEDURE GetEmailDomain@1160040000() : Text[30];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('devcdc.continiaonline.com');
        COMgt.IsDemo:
          EXIT('democdc.continiaonline.com')
        ELSE
          EXIT('cdc.continiaonline.com');
      END;
    END;

    PROCEDURE GetStatusAsText@1160040040(Status@1160040000 : 'OCR,Import,Error') : Text[30];
    BEGIN
      CASE Status OF
        Status::OCR:
          EXIT('OCRFiles');
        Status::Import:
          EXIT('ImportFiles');
        Status::Error:
          EXIT('ErrorFiles');
      END;
    END;

    PROCEDURE GetBaseUrl@1160040024() : Text[1024];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('https://devcdc.continiaonline.com/api/v1/');
        COMgt.IsDemo:
          EXIT('https://democdc.continiaonline.com/api/v1/');
        ELSE
          EXIT('https://cdc.continiaonline.com/api/v1/');
      END;
    END;

    PROCEDURE GetClientUrl@1160040005() : Text[1024];
    BEGIN
      EXIT(GetBaseUrl + 'client');
    END;

    PROCEDURE GetUserUrl@1160040043() : Text[1024];
    VAR
      ContiniaCompanySetup@1160040001 : Record 6192773;
      ContiniaWebPortal@1160040000 : Record 6192774;
    BEGIN
      ContiniaCompanySetup.GET;
      ContiniaCompanySetup.TESTFIELD("Web Portal Code");
      ContiniaWebPortal.GET(ContiniaCompanySetup."Web Portal Code");

      IF NOT ContiniaWebPortal."Use Continia Online Web Portal" THEN
        EXIT(ContiniaWebPortal."Web Site Url" + '/Users/Import');

      EXIT(GetCOUserUrl);
    END;

    PROCEDURE GetResourceUrl@1() : Text[1024];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('http://download.continiaonline.com/dev/dc');
        COMgt.IsDemo:
          EXIT('http://download.continiaonline.com/demo/dc');
        ELSE
          EXIT('http://download.continiaonline.com/prod/dc');
      END;
    END;

    PROCEDURE GetCOUserUrl@1160040041() : Text[1024];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('https://devauth.continiaonline.com/api/v1/users');
        COMgt.IsDemo:
          EXIT('https://demoauth.continiaonline.com/api/v1/users');
        ELSE
          EXIT('https://auth.continiaonline.com/api/v1/users');
      END;
    END;

    PROCEDURE GetCompanyUrl@1160040029() : Text[1024];
    BEGIN
      EXIT(GetBaseUrl + 'company/' + COMgt.GetCompanyGUID);
    END;

    PROCEDURE GetAllCategoryUrl@1160040030() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/category/all');
    END;

    PROCEDURE GetOneCategoryUrl@1160040131(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/category/' + COMgt.GetGUIDAsText(GUID));
    END;

    PROCEDURE GetDocumentBaseUrl@1160040022(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetOneCategoryUrl(GUID) + '/document/');
    END;

    PROCEDURE GetAllDocumentUrl@1160040006(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentBaseUrl(GUID) + 'all');
    END;

    PROCEDURE GetNewDocumentUrl@1160040007(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentBaseUrl(GUID) + 'new');
    END;

    PROCEDURE GetStatusDocumentUrl@1160040127(GUID@1160040000 : GUID;StatusText@1160040001 : Text[30]) : Text[1024];
    BEGIN
      EXIT(GetOneCategoryUrl(GUID) + '/' + StatusText);
    END;

    PROCEDURE GetOneDocumentUrl@1160040009(GUID@1160040000 : GUID;DocumentID@1160040001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(GetDocumentBaseUrl(GUID) + DocumentID);
    END;

    PROCEDURE GetDocumentEmailUrl@1160040034(GUID@1160040000 : GUID;DocumentID@1160040001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(GetOneDocumentUrl(GUID,DocumentID) + '/email/' + FORMAT(GLOBALLANGUAGE));
    END;

    PROCEDURE GetDocumentDeleteUrl@1160040130(GUID@1160040000 : GUID;DocumentID@1160040001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(GetOneDocumentUrl(GUID,DocumentID) + '/delete');
    END;

    PROCEDURE GetOCRUploadCategoryUrl@1160040012(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentBaseUrl(GUID) + 'upload');
    END;

    PROCEDURE GetFileProcessingUrl@6085575(FileFormat@6085573 : Text[10];FileFunction@6085574 : Text[30]) : Text[1024];
    BEGIN
      EXIT(GetBaseUrl + STRSUBSTNO('document/%1/%2',FileFormat,FileFunction));
    END;

    BEGIN
    END.
  }
}

