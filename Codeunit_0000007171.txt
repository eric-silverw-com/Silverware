OBJECT Codeunit 7171 Sales Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesPriceCalcMgt@1002 : Codeunit 7000;
      AvailableToPromise@1005 : Codeunit 5790;

    [External]
    PROCEDURE CalcAvailability@18(VAR SalesLine@1000 : Record 37) : Decimal;
    VAR
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateformula@1005 : DateFormula;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EVALUATE(LookaheadDateformula,'<0D>');
        EXIT(
          ConvertQty(
            AvailableToPromise.QtyAvailabletoPromise(
              Item,
              GrossRequirement,
              ScheduledReceipt,
              CalcAvailabilityDate(SalesLine),
              PeriodType,
              LookaheadDateformula),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcAvailabilityDate@27(SalesLine@1000 : Record 37) : Date;
    BEGIN
      IF SalesLine."Shipment Date" <> 0D THEN
        EXIT(SalesLine."Shipment Date");

      EXIT(WORKDATE);
    END;

    [External]
    PROCEDURE CalcAvailableInventory@9(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcAvailableInventory(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcScheduledReceipt@21(SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcScheduledReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcGrossRequirements@23(SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcGrossRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcReservedRequirements@25(SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcReservedReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcReservedDemand@26(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcReservedRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcNoOfSubstitutions@20(SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        Item.CALCFIELDS("No. of Substitutes");
        EXIT(Item."No. of Substitutes");
      END;
    END;

    [External]
    PROCEDURE CalcNoOfSalesPrices@19(SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        GetSalesHeader(SalesLine);
        EXIT(SalesPriceCalcMgt.NoOfSalesLinePrice(SalesHeader,SalesLine,TRUE));
      END;
    END;

    [External]
    PROCEDURE CalcNoOfSalesLineDisc@22(SalesLine@1001 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        GetSalesHeader(SalesLine);
        EXIT(SalesPriceCalcMgt.NoOfSalesLineLineDisc(SalesHeader,SalesLine,TRUE));
      END;
    END;

    LOCAL PROCEDURE ConvertQty@28(Qty@1000 : Decimal;PerUoMQty@1001 : Decimal) : Decimal;
    BEGIN
      IF PerUoMQty = 0 THEN
        PerUoMQty := 1;
      EXIT(ROUND(Qty / PerUoMQty,0.00001));
    END;

    [External]
    PROCEDURE LookupItem@7(SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      SalesLine.TESTFIELD("No.");
      GetItem(SalesLine);
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    LOCAL PROCEDURE GetItem@24(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      WITH Item DO BEGIN
        IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
          EXIT(FALSE);

        IF SalesLine."No." <> "No." THEN
          GET(SalesLine."No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@13(SalesLine@1000 : Record 37);
    BEGIN
      IF (SalesLine."Document Type" <> SalesHeader."Document Type") OR
         (SalesLine."Document No." <> SalesHeader."No.")
      THEN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE SetItemFilter@4(VAR Item@1000 : Record 27;SalesLine@1001 : Record 37);
    BEGIN
      Item.RESET;
      Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(SalesLine));
      Item.SETRANGE("Variant Filter",SalesLine."Variant Code");
      Item.SETRANGE("Location Filter",SalesLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",FALSE);
      OnAfterSetItemFilter(Item,SalesLine);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetItemFilter@1(VAR Item@1000 : Record 27;SalesLine@1001 : Record 37);
    BEGIN
    END;

    BEGIN
    END.
  }
}

