OBJECT Page 5496 Sales Order Line Entity
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Order Line Entity;
               ESM=Entidad de l¡nea de pedido de ventas;
               FRC=Entit‚ Ligne document de vente;
               ENC=Sales Order Line Entity];
    SourceTable=Table5476;
    DelayedInsert=Yes;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnFindRecord=VAR
                   GraphMgtSalesOrderBuffer@1001 : Codeunit 5496;
                   DocumentIdFilter@1002 : Text;
                   FilterView@1003 : Text;
                 BEGIN
                   IF NOT LinesLoaded THEN BEGIN
                     FilterView := GETVIEW;
                     DocumentIdFilter := GETFILTER("Document Id");
                     GraphMgtSalesOrderBuffer.LoadLines(Rec,DocumentIdFilter);
                     SETVIEW(FilterView);
                     IF NOT FINDFIRST THEN
                       EXIT(FALSE);
                     LinesLoaded := TRUE;
                   END;

                   EXIT(TRUE);
                 END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                  VALIDATE(Type,Type::Item);
                  RegisterFieldSet(FIELDNO(Type));
                END;

    OnInsertRecord=VAR
                     GraphMgtSalesOrderBuffer@1000 : Codeunit 5496;
                   BEGIN
                     IF InsertItem THEN
                       InsertItemOnTheFly;

                     GraphMgtSalesOrderBuffer.PropagateInsertLine(Rec,TempFieldBuffer);

                     SetCalculatedFields;
                   END;

    OnModifyRecord=VAR
                     GraphMgtSalesOrderBuffer@1000 : Codeunit 5496;
                   BEGIN
                     IF InsertItem THEN
                       InsertItemOnTheFly;

                     GraphMgtSalesOrderBuffer.PropagateModifyLine(Rec,TempFieldBuffer);

                     SetCalculatedFields;
                   END;

    OnDeleteRecord=VAR
                     GraphMgtSalesOrderBuffer@1000 : Codeunit 5496;
                   BEGIN
                     GraphMgtSalesOrderBuffer.PropagateDeleteLine(Rec);
                   END;

  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                Name=sequence;
                CaptionML=[@@@={Locked};
                           ENU=sequence;
                           ESM=sequence;
                           FRC=sequence;
                           ENC=sequence];
                ApplicationArea=#All;
                SourceExpr="Line No.";
                OnValidate=BEGIN
                             IF xRec."Line No." <> "Line No." THEN
                               ERROR(CannotChangeLineNoErr);

                             RegisterFieldSet(FIELDNO("Line No."));
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=itemId;
                CaptionML=[@@@={Locked};
                           ENU=itemId;
                           ESM=itemId;
                           FRC=itemId;
                           ENC=itemId];
                ApplicationArea=#All;
                SourceExpr="Item Id";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                             RegisterFieldSet(FIELDNO("No."));
                             RegisterFieldSet(FIELDNO("Item Id"));

                             Item.SETRANGE(Id,"Item Id");

                             IF NOT Item.FINDFIRST THEN BEGIN
                               InsertItem := TRUE;
                               CheckIntegrationIdInUse;

                               Item.Id := "Item Id";
                               RegisterItemFieldSet(Item.FIELDNO(Id));
                               EXIT;
                             END;

                             "No." := Item."No.";
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=accountId;
                CaptionML=[@@@={Locked};
                           ENU=accountId;
                           ESM=accountId;
                           FRC=accountId;
                           ENC=accountId];
                ApplicationArea=#All;
                SourceExpr="Account Id";
                OnValidate=VAR
                             EmptyGuid@1000 : GUID;
                           BEGIN
                             IF "Account Id" <> EmptyGuid THEN
                               IF Item."No." <> '' THEN
                                 ERROR(BothItemIdAndAccountIdAreSpecifiedErr);
                             RegisterFieldSet(FIELDNO(Type));
                             RegisterFieldSet(FIELDNO("Account Id"));
                             RegisterFieldSet(FIELDNO("No."));
                           END;
                            }

    { 24  ;2   ;Field     ;
                Name=lineType;
                CaptionML=[@@@={Locked};
                           ENU=lineType;
                           ESM=lineType;
                           FRC=lineType;
                           ENC=lineType];
                ApplicationArea=#All;
                SourceExpr="API Type";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=lineDetails;
                CaptionML=[@@@={Locked};
                           ENU=lineDetails;
                           ESM=lineDetails;
                           FRC=lineDetails;
                           ENC=lineDetails];
                ToolTipML=[ENU=Specifies details about the line.;
                           ESM=Especifica detalles sobre la l¡nea.;
                           FRC=Sp‚cifie des informations sur la ligne.;
                           ENC=Specifies details about the line.];
                ApplicationArea=#All;
                SourceExpr=LineObjectDetailsJSON;
                OnValidate=VAR
                             GraphMgtComplexTypes@1000 : Codeunit 5468;
                           BEGIN
                             IF NOT InsertItem THEN
                               EXIT;

                             GraphMgtComplexTypes.ParseDocumentLineObjectDetailsFromJSON(
                               LineObjectDetailsJSON,Item."No.",Item.Description,Item."Description 2");

                             IF Item."No." <> '' THEN
                               RegisterItemFieldSet(Item.FIELDNO("No."));

                             RegisterFieldSet(FIELDNO("No."));

                             IF Item.Description <> '' THEN
                               RegisterItemFieldSet(Item.FIELDNO(Description));

                             IF Description = '' THEN BEGIN
                               Description := Item.Description;
                               RegisterFieldSet(FIELDNO(Description));
                             END;

                             IF Item."Description 2" <> '' THEN BEGIN
                               "Description 2" := Item."Description 2";
                               RegisterItemFieldSet(Item.FIELDNO("Description 2"));
                               RegisterFieldSet(FIELDNO("Description 2"));
                             END;
                           END;

                ODataEDMType=DOCUMENTLINEOBJECTDETAILS }

    { 7   ;2   ;Field     ;
                Name=description;
                CaptionML=[ENU=description;
                           ESM=descripci¢n;
                           FRC=description;
                           ENC=description];
                ToolTipML=[ENU=Specifies the description of the sales order line.;
                           ESM=Especifica la descripci¢n de la l¡nea de pedido de venta.;
                           FRC=Sp‚cifie la description de la ligne document de vente.;
                           ENC=Specifies the description of the sales order line.];
                ApplicationArea=#All;
                SourceExpr=Description;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Description));
                           END;
                            }

    { 28  ;2   ;Field     ;
                Name=unitOfMeasureId;
                CaptionML=[@@@={Locked};
                           ENU=UnitOfMeasureId;
                           ESM=UnitOfMeasureId;
                           FRC=UnitOfMeasureId;
                           ENC=UnitOfMeasureId];
                ToolTipML=[ENU=Specifies Unit of Measure.;
                           ESM=Especifica la unidad de medida.;
                           FRC=Sp‚cifie l'unit‚ de mesure.;
                           ENC=Specifies Unit of Measure.];
                ApplicationArea=#All;
                SourceExpr=UnitOfMeasureId;
                OnValidate=VAR
                             SalesInvoiceAggregator@1001 : Codeunit 5477;
                             GraphMgtSalesInvLines@1004 : Codeunit 5476;
                             BlankGUID@1003 : GUID;
                           BEGIN
                             VALIDATE("Unit of Measure Id",UnitOfMeasureId);
                             SalesInvoiceAggregator.VerifyCanUpdateUOM(Rec);

                             IF (UnitOfMeasureJSON = 'null') AND ("Unit of Measure Id" <> BlankGUID) THEN
                               EXIT;

                             IF "Unit of Measure Id" = BlankGUID THEN
                               "Unit of Measure Code" := ''
                             ELSE BEGIN
                               UnitOfMeasure.SETRANGE(Id,"Unit of Measure Id");
                               IF NOT UnitOfMeasure.FINDFIRST THEN
                                 ERROR(UnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr);

                               "Unit of Measure Code" := UnitOfMeasure.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Unit of Measure Code"));

                             IF InsertItem THEN
                               EXIT;

                             Item.SETRANGE(Id,"Item Id");
                             IF Item.FINDFIRST THEN
                               SalesInvoiceAggregator.UpdateUnitOfMeasure(Item,GraphMgtSalesInvLines.GetUnitOfMeasureJSON(Rec));
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=unitOfMeasure;
                CaptionML=[@@@={Locked};
                           ENU=unitOfMeasure;
                           ESM=unitOfMeasure;
                           FRC=unitOfMeasure;
                           ENC=unitOfMeasure];
                ToolTipML=[ENU=Specifies Unit of Measure.;
                           ESM=Especifica la unidad de medida.;
                           FRC=Sp‚cifie l'unit‚ de mesure.;
                           ENC=Specifies Unit of Measure.];
                ApplicationArea=#All;
                SourceExpr=UnitOfMeasureJSON;
                OnValidate=VAR
                             TempUnitOfMeasure@1002 : TEMPORARY Record 204;
                             SalesInvoiceAggregator@1000 : Codeunit 5477;
                             GraphCollectionMgtItem@1001 : Codeunit 5470;
                             GraphMgtSalesInvLines@1003 : Codeunit 5476;
                           BEGIN
                             SalesInvoiceAggregator.VerifyCanUpdateUOM(Rec);

                             IF UnitOfMeasureJSON = 'null' THEN
                               TempUnitOfMeasure.Code := ''
                             ELSE
                               GraphCollectionMgtItem.ParseJSONToUnitOfMeasure(UnitOfMeasureJSON,TempUnitOfMeasure);

                             IF (UnitOfMeasureJSON = 'null') AND (UnitOfMeasure.Code <> '') THEN
                               EXIT;
                             IF (UnitOfMeasure.Code <> '') AND (UnitOfMeasure.Code <> TempUnitOfMeasure.Code) THEN
                               ERROR(UnitOfMeasureValuesDontMatchErr);

                             "Unit of Measure Code" := TempUnitOfMeasure.Code;
                             RegisterFieldSet(FIELDNO("Unit of Measure Code"));

                             IF InsertItem THEN
                               EXIT;

                             Item.SETRANGE(Id,"Item Id");
                             IF Item.FINDFIRST THEN BEGIN
                               IF UnitOfMeasureJSON = 'null' THEN
                                 SalesInvoiceAggregator.UpdateUnitOfMeasure(Item,GraphMgtSalesInvLines.GetUnitOfMeasureJSON(Rec))
                               ELSE
                                 SalesInvoiceAggregator.UpdateUnitOfMeasure(Item,UnitOfMeasureJSON);
                             END;
                           END;

                ODataEDMType=ITEM-UOM }

    { 8   ;2   ;Field     ;
                Name=quantity;
                CaptionML=[@@@={Locked};
                           ENU=quantity;
                           ESM=quantity;
                           FRC=quantity;
                           ENC=quantity];
                ApplicationArea=#All;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Quantity));
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=unitPrice;
                CaptionML=[@@@={Locked};
                           ENU=unitPrice;
                           ESM=unitPrice;
                           FRC=unitPrice;
                           ENC=unitPrice];
                ApplicationArea=#All;
                SourceExpr="Unit Price";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Price"));
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount;
                           ESM=discountAmount;
                           FRC=discountAmount;
                           ENC=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Line Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Line Discount Amount"));
                           END;
                            }

    { 11  ;2   ;Field     ;
                Name=discountPercent;
                CaptionML=[@@@={Locked};
                           ENU=discountPercent;
                           ESM=discountPercent;
                           FRC=discountPercent;
                           ENC=discountPercent];
                ApplicationArea=#All;
                SourceExpr="Line Discount %";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Line Discount %"));
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax;
                           ESM=discountAppliedBeforeTax;
                           FRC=discountAppliedBeforeTax;
                           ENC=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax";
                Editable=FALSE }

    { 15  ;2   ;Field     ;
                Name=amountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=amountExcludingTax;
                           ESM=amountExcludingTax;
                           FRC=amountExcludingTax;
                           ENC=amountExcludingTax];
                ApplicationArea=#All;
                SourceExpr="Line Amount Excluding Tax";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Amount));
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=taxCode;
                CaptionML=[@@@={Locked};
                           ENU=taxCode;
                           ESM=taxCode;
                           FRC=taxCode;
                           ENC=taxCode];
                ApplicationArea=#All;
                SourceExpr="Tax Code";
                OnValidate=VAR
                             GeneralLedgerSetup@1000 : Record 98;
                           BEGIN
                             IF InsertItem THEN BEGIN
                               IF GeneralLedgerSetup.UseVat THEN
                                 EXIT;

                               Item."Tax Group Code" := COPYSTR("Tax Code",1,MAXSTRLEN(Item."Tax Group Code"));
                               RegisterItemFieldSet(Item.FIELDNO("Tax Group Code"));
                             END;

                             RegisterFieldSet(FIELDNO("Tax Group Code"));
                           END;
                            }

    { 3   ;2   ;Field     ;
                Name=taxPercent;
                CaptionML=[@@@={Locked};
                           ENU=taxPercent;
                           ESM=taxPercent;
                           FRC=taxPercent;
                           ENC=taxPercent];
                ApplicationArea=#All;
                SourceExpr="VAT %";
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount;
                           ESM=totalTaxAmount;
                           FRC=totalTaxAmount;
                           ENC=totalTaxAmount];
                ApplicationArea=#All;
                SourceExpr="Line Tax Amount";
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                Name=amountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=amountIncludingTax;
                           ESM=amountIncludingTax;
                           FRC=amountIncludingTax;
                           ENC=amountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Line Amount Including Tax";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;
                            }

    { 29  ;2   ;Field     ;
                Name=invoiceDiscountAllocation;
                CaptionML=[@@@={Locked};
                           ENU=invoiceDiscountAllocation;
                           ESM=invoiceDiscountAllocation;
                           FRC=invoiceDiscountAllocation;
                           ENC=invoiceDiscountAllocation];
                ApplicationArea=#All;
                SourceExpr="Inv. Discount Amount Excl. VAT";
                Editable=FALSE }

    { 27  ;2   ;Field     ;
                Name=netAmount;
                CaptionML=[@@@={Locked};
                           ENU=netAmount;
                           ESM=netAmount;
                           FRC=netAmount;
                           ENC=netAmount];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                Name=netTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=netTaxAmount;
                           ESM=netTaxAmount;
                           FRC=netTaxAmount;
                           ENC=netTaxAmount];
                ApplicationArea=#All;
                SourceExpr="Tax Amount";
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                Name=netAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=netAmountIncludingTax;
                           ESM=netAmountIncludingTax;
                           FRC=netAmountIncludingTax;
                           ENC=netAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                Name=shipmentDate;
                CaptionML=[@@@={Locked};
                           ENU=shipmentDate;
                           ESM=shipmentDate;
                           FRC=shipmentDate;
                           ENC=shipmentDate];
                ApplicationArea=#All;
                SourceExpr="Shipment Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Shipment Date"));
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=shippedQuantity;
                CaptionML=[@@@={Locked};
                           ENU=shippedQuantity;
                           ESM=shippedQuantity;
                           FRC=shippedQuantity;
                           ENC=shippedQuantity];
                ApplicationArea=#All;
                SourceExpr="Quantity Shipped";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Quantity Shipped"));
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=invoicedQuantity;
                CaptionML=[@@@={Locked};
                           ENU=invoicedQuantity;
                           ESM=invoicedQuantity;
                           FRC=invoicedQuantity;
                           ENC=invoicedQuantity];
                ApplicationArea=#All;
                SourceExpr="Quantity Invoiced";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Quantity Invoiced"));
                           END;
                            }

    { 21  ;2   ;Field     ;
                Name=invoiceQuantity;
                CaptionML=[@@@={Locked};
                           ENU=invoiceQuantity;
                           ESM=invoiceQuantity;
                           FRC=invoiceQuantity;
                           ENC=invoiceQuantity];
                ApplicationArea=#All;
                SourceExpr="Qty. to Invoice";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Qty. to Invoice"));
                           END;
                            }

    { 22  ;2   ;Field     ;
                Name=shipQuantity;
                CaptionML=[@@@={Locked};
                           ENU=shipQuantity;
                           ESM=shipQuantity;
                           FRC=shipQuantity;
                           ENC=shipQuantity];
                ApplicationArea=#All;
                SourceExpr="Qty. to Ship";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Qty. to Ship"));
                           END;
                            }

  }
  CODE
  {
    VAR
      TempFieldBuffer@1009 : TEMPORARY Record 8450;
      TempItemFieldSet@1008 : TEMPORARY Record 2000000041;
      Item@1007 : Record 27;
      UnitOfMeasure@1012 : Record 204;
      UnitOfMeasureJSON@1006 : Text;
      LineObjectDetailsJSON@1003 : Text;
      LinesLoaded@1002 : Boolean;
      InsertItem@1000 : Boolean;
      CannotChangeLineNoErr@1001 : TextConst '@@@={Locked};ENU=The value for sequence cannot be modified. Delete and insert the line again.;ESM=The value for sequence cannot be modified. Delete and insert the line again.;FRC=The value for sequence cannot be modified. Delete and insert the line again.;ENC=The value for sequence cannot be modified. Delete and insert the line again.';
      ItemWasDeletedErr@1005 : TextConst '@@@={Locked};ENU=The item was deleted.;ESM=The item was deleted.;FRC=The item was deleted.;ENC=The item was deleted.';
      IdIsAlreadyUsedErr@1004 : TextConst '@@@={Locked};ENU=The id is already in use used.;ESM=The id is already in use used.;FRC=The id is already in use used.;ENC=The id is already in use used.';
      BothItemIdAndAccountIdAreSpecifiedErr@1014 : TextConst 'ENU=Both itemId and accountId are specified. Specify only one of them.;ESM=Se han especificado itemId y accountId. Especifique solo uno de ellos.;FRC=Un itemId et accountId sont sp‚cifi‚s. Sp‚cifiez uniquement l''un d''entre eux.;ENC=Both itemId and accountId are specified. Specify only one of them.';
      UnitOfMeasureValuesDontMatchErr@1011 : TextConst '@@@={Locked};ENU=The unit of measure values do not match to a specific Unit of Measure.;ESM=The unit of measure values do not match to a specific Unit of Measure.;FRC=The unit of measure values do not match to a specific Unit of Measure.;ENC=The unit of measure values do not match to a specific Unit of Measure.';
      UnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr@1010 : TextConst '@@@={Locked};ENU=The "unitOfMeasureId" does not match to a Unit of Measure.;ESM=The "unitOfMeasureId" does not match to a Unit of Measure.;FRC=The "unitOfMeasureId" does not match to a Unit of Measure.;ENC=The "unitOfMeasureId" does not match to a Unit of Measure.';
      UnitOfMeasureId@1013 : GUID;

    LOCAL PROCEDURE RegisterFieldSet@1(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      IF TempFieldBuffer.FINDLAST THEN
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Invoice Line Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE ClearCalculatedFields@2();
    BEGIN
      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;
      TempItemFieldSet.RESET;
      TempItemFieldSet.DELETEALL;

      CLEAR(Item);
      CLEAR(UnitOfMeasureJSON);
      CLEAR(InsertItem);
      CLEAR(LineObjectDetailsJSON);
      CLEAR(UnitOfMeasureId);
    END;

    LOCAL PROCEDURE SetCalculatedFields@3();
    VAR
      GraphMgtSalesInvLines@1001 : Codeunit 5476;
      GraphMgtComplexTypes@1002 : Codeunit 5468;
    BEGIN
      LineObjectDetailsJSON := GraphMgtComplexTypes.GetSalesLineDescriptionComplexType(Rec);
      UnitOfMeasureJSON := GraphMgtSalesInvLines.GetUnitOfMeasureJSON(Rec);
      UnitOfMeasureId := "Unit of Measure Id";
    END;

    LOCAL PROCEDURE RegisterItemFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      IF TempItemFieldSet.GET(DATABASE::Item,FieldNo) THEN
        EXIT;

      TempItemFieldSet.INIT;
      TempItemFieldSet.TableNo := DATABASE::Item;
      TempItemFieldSet.VALIDATE("No.",FieldNo);
      TempItemFieldSet.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckIntegrationIdInUse@8();
    VAR
      IntegrationRecord@1000 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.GET("Item Id") THEN
        EXIT;

      IF IntegrationRecord."Table ID" = DATABASE::Item THEN
        ERROR(ItemWasDeletedErr);

      ERROR(IdIsAlreadyUsedErr);
    END;

    LOCAL PROCEDURE InsertItemOnTheFly@16();
    VAR
      GraphCollectionMgtItem@1001 : Codeunit 5470;
    BEGIN
      GraphCollectionMgtItem.InsertItemFromSalesDocument(Item,TempItemFieldSet,UnitOfMeasureJSON);
      VALIDATE("No.",Item."No.");

      IF Description = '' THEN
        Description := Item.Description;
    END;

    BEGIN
    END.
  }
}

