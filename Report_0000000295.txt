OBJECT Report 295 Combine Shipments
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:53 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Combine Shipments;
    ApplicationArea=#Basic,#Suite;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  OnBeforePreReport;
                END;

    OnPostReport=BEGIN
                   OnBeforePostReport;
                 END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 2495;    ;DataItem;SalesOrderHeader    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade,Dimension Set ID)
                                 WHERE(Document Type=CONST(Order),
                                       Combine Shipments=CONST(Yes));
               ReqFilterHeadingML=ENU=Sales Order;
               OnPreDataItem=BEGIN
                               IF PostingDateReq = 0D THEN
                                 ERROR(Text000);
                               IF DocDateReq = 0D THEN
                                 ERROR(Text001);

                               Window.OPEN(
                                 Text002 +
                                 Text003 +
                                 Text004 +
                                 Text005);

                               OnSalesOrderHeaderOnPreDataItem(SalesOrderHeader);
                             END;

               OnAfterGetRecord=VAR
                                  IsHandled@1000 : Boolean;
                                BEGIN
                                  IsHandled := FALSE;
                                  OnAfterGetRecordSalesOrderHeader(SalesOrderHeader,IsHandled);
                                  IF IsHandled THEN
                                    CurrReport.SKIP;

                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");

                                  Window.UPDATE(1,"Bill-to Customer No.");
                                  Window.UPDATE(2,"No.");
                                END;

               OnPostDataItem=BEGIN
                                CurrReport.LANGUAGE := GLOBALLANGUAGE;
                                Window.CLOSE;
                                IF SalesHeader."No." <> '' THEN BEGIN // Not the first time
                                  FinalizeSalesInvHeader;
                                  IF (NoOfSalesInvErrors = 0) AND NOT HideDialog THEN BEGIN
                                    IF NoOfskippedShiment > 0 THEN BEGIN
                                      MESSAGE(
                                        Text011,
                                        NoOfSalesInv,NoOfskippedShiment)
                                    END ELSE
                                      MESSAGE(
                                        Text010,
                                        NoOfSalesInv);
                                  END ELSE
                                    IF NOT HideDialog THEN
                                      IF PostInv THEN
                                        MESSAGE(
                                          Text007,
                                          NoOfSalesInvErrors)
                                      ELSE
                                        MESSAGE(
                                          NotAllInvoicesCreatedMsg,
                                          NoOfSalesInvErrors)
                                END ELSE
                                  IF NOT HideDialog THEN
                                    MESSAGE(Text008);
                              END;

               ReqFilterFields=Sell-to Customer No.,Bill-to Customer No. }

    { 3595;1   ;DataItem;                    ;
               DataItemTable=Table110;
               DataItemTableView=SORTING(Order No.);
               ReqFilterHeadingML=ENU=Posted Sales Shipment;
               OnAfterGetRecord=VAR
                                  DueDate@1000 : Date;
                                  PmtDiscDate@1001 : Date;
                                  PmtDiscPct@1002 : Decimal;
                                BEGIN
                                  Window.UPDATE(3,"No.");

                                  IF IsCompletlyInvoiced THEN
                                    CurrReport.SKIP;

                                  IF OnlyStdPmtTerms THEN BEGIN
                                    Cust.GET("Bill-to Customer No.");
                                    PmtTerms.GET(Cust."Payment Terms Code");
                                    IF PmtTerms.Code = "Payment Terms Code" THEN BEGIN
                                      DueDate := CALCDATE(PmtTerms."Due Date Calculation","Document Date");
                                      PmtDiscDate := CALCDATE(PmtTerms."Discount Date Calculation","Document Date");
                                      PmtDiscPct := PmtTerms."Discount %";
                                      IF (DueDate <> "Due Date") OR
                                         (PmtDiscDate <> "Pmt. Discount Date") OR
                                         (PmtDiscPct <> "Payment Discount %")
                                      THEN BEGIN
                                        NoOfskippedShiment := NoOfskippedShiment + 1;
                                        CurrReport.SKIP;
                                      END;
                                    END ELSE BEGIN
                                      NoOfskippedShiment := NoOfskippedShiment + 1;
                                      CurrReport.SKIP;
                                    END;
                                  END;
                                END;

               ReqFilterFields=Posting Date;
               DataItemLink=Order No.=FIELD(No.) }

    { 2502;2   ;DataItem;                    ;
               DataItemTable=Table111;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnAfterGetRecord=BEGIN
                                  IF Type = 0 THEN BEGIN
                                    IF (NOT CopyTextLines) OR ("Attached to Line No." <> 0) THEN
                                      CurrReport.SKIP;
                                  END;

                                  IF "Authorized for Credit Card" THEN
                                    CurrReport.SKIP;

                                  IF ("Qty. Shipped Not Invoiced" <> 0) OR (Type = 0) THEN BEGIN
                                    IF ("Bill-to Customer No." <> Cust."No.") AND
                                       ("Sell-to Customer No." <> '')
                                    THEN
                                      Cust.GET("Bill-to Customer No.");
                                    IF NOT (Cust.Blocked IN [Cust.Blocked::All,Cust.Blocked::Invoice]) THEN BEGIN
                                      IF ShouldFinalizeSalesInvHeader(SalesOrderHeader,SalesHeader) THEN BEGIN
                                        IF SalesHeader."No." <> '' THEN
                                          FinalizeSalesInvHeader;
                                        InsertSalesInvHeader;
                                        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
                                        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                                        SalesLine."Document Type" := SalesHeader."Document Type";
                                        SalesLine."Document No." := SalesHeader."No.";
                                      END;
                                      SalesShptLine := "Sales Shipment Line";
                                      HasAmount := HasAmount OR ("Qty. Shipped Not Invoiced" <> 0);
                                      SalesShptLine.InsertInvLineFromShptLine(SalesLine);
                                    END ELSE
                                      NoOfSalesInvErrors := NoOfSalesInvErrors + 1;
                                  END;
                                END;

               OnPostDataItem=VAR
                                SalesShipmentLine@1000 : Record 111;
                                SalesLineInvoice@1002 : Record 37;
                                SalesGetShpt@1001 : Codeunit 64;
                              BEGIN
                                SalesShipmentLine.SETRANGE("Document No.","Document No.");
                                SalesShipmentLine.SETRANGE(Type,Type::"Charge (Item)");
                                IF SalesShipmentLine.FINDSET THEN
                                  REPEAT
                                    SalesLineInvoice.SETRANGE("Document Type",SalesLineInvoice."Document Type"::Invoice);
                                    SalesLineInvoice.SETRANGE("Document No.",SalesHeader."No.");
                                    SalesLineInvoice.SETRANGE("Shipment Line No.",SalesShipmentLine."Line No.");
                                    IF SalesLineInvoice.FINDFIRST THEN
                                      SalesGetShpt.GetItemChargeAssgnt(SalesShipmentLine,SalesLineInvoice."Qty. to Invoice");
                                  UNTIL SalesShipmentLine.NEXT = 0;
                              END;

               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF PostingDateReq = 0D THEN
                     PostingDateReq := WORKDATE;
                   IF DocDateReq = 0D THEN
                     DocDateReq := WORKDATE;
                   SalesSetup.GET;
                   CalcInvDisc := SalesSetup."Calc. Inv. Discount";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the posting date for the invoice(s) that the batch job creates. This field must be filled in.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDateReq }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Document Date;
                  ToolTipML=ENU=Specifies the document date for the invoice(s) that the batch job creates. This field must be filled in.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocDateReq }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Calc. Inv. Discount;
                  ToolTipML=ENU=Specifies if you want the invoice discount amount to be automatically calculated on the shipment.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalcInvDisc;
                  OnValidate=BEGIN
                               SalesSetup.GET;
                               SalesSetup.TESTFIELD("Calc. Inv. Discount",FALSE);
                             END;
                              }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Post Invoices;
                  ToolTipML=ENU=Specifies if you want to have the invoices posted immediately.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostInv }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Only Std. Payment Terms;
                  ToolTipML=ENU=Specifies if you want to include shipments with standard payments terms. If you select this option, you must manually invoice all other shipments.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=OnlyStdPmtTerms }

      { 8   ;2   ;Field     ;
                  CaptionML=ENU=Copy Text Lines;
                  ToolTipML=ENU=Specifies if you want manually written text on the shipment lines to be copied to the invoice.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyTextLines }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter the posting date.';
      Text001@1001 : TextConst 'ENU=Enter the document date.';
      Text002@1002 : TextConst 'ENU=Combining shipments...\\';
      Text003@1003 : TextConst 'ENU=Customer No.    #1##########\';
      Text004@1004 : TextConst 'ENU=Order No.       #2##########\';
      Text005@1005 : TextConst 'ENU=Shipment No.    #3##########';
      Text007@1006 : TextConst 'ENU=Not all the invoices were posted. A total of %1 invoices were not posted.';
      Text008@1007 : TextConst 'ENU=There is nothing to combine.';
      Text010@1008 : TextConst 'ENU=The shipments are now combined and the number of invoices created is %1.';
      SalesHeader@1010 : Record 36;
      SalesLine@1011 : Record 37;
      SalesShptLine@1012 : Record 111;
      SalesSetup@1013 : Record 311;
      Cust@1018 : Record 18;
      Language@1009 : Record 8;
      PmtTerms@1017 : Record 3;
      SalesCalcDisc@1019 : Codeunit 60;
      SalesPost@1020 : Codeunit 80;
      Window@1021 : Dialog;
      PostingDateReq@1022 : Date;
      DocDateReq@1023 : Date;
      CalcInvDisc@1024 : Boolean;
      PostInv@1025 : Boolean;
      OnlyStdPmtTerms@1015 : Boolean;
      HasAmount@1102601000 : Boolean;
      HideDialog@1034 : Boolean;
      NoOfSalesInvErrors@1027 : Integer;
      NoOfSalesInv@1028 : Integer;
      Text011@1029 : TextConst '@@@=%1-Number of invoices,%2-Number Of shipments;ENU=The shipments are now combined, and the number of invoices created is %1.\%2 Shipments with nonstandard payment terms have not been combined.';
      NoOfskippedShiment@1030 : Integer;
      CopyTextLines@1035 : Boolean;
      NotAllInvoicesCreatedMsg@1014 : TextConst 'ENU=Not all the invoices were created. A total of %1 invoices were not created.';

    LOCAL PROCEDURE FinalizeSalesInvHeader@2();
    BEGIN
      WITH SalesHeader DO BEGIN
        IF NOT HasAmount THEN BEGIN
          DELETE(TRUE);
          EXIT;
        END;
        OnFinalizeSalesInvHeader(SalesHeader);
        IF CalcInvDisc THEN
          SalesCalcDisc.RUN(SalesLine);
        FIND;
        COMMIT;
        CLEAR(SalesCalcDisc);
        CLEAR(SalesPost);
        NoOfSalesInv := NoOfSalesInv + 1;
        IF PostInv THEN BEGIN
          CLEAR(SalesPost);
          IF NOT SalesPost.RUN(SalesHeader) THEN
            NoOfSalesInvErrors := NoOfSalesInvErrors + 1;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertSalesInvHeader@1();
    BEGIN
      CLEAR(SalesHeader);
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Invoice;
        "No." := '';
        INSERT(TRUE);
        VALIDATE("Sell-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
        IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
          VALIDATE("Bill-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
        VALIDATE("Posting Date",PostingDateReq);
        VALIDATE("Document Date",DocDateReq);
        VALIDATE("Currency Code",SalesOrderHeader."Currency Code");
        VALIDATE("EU 3-Party Trade",SalesOrderHeader."EU 3-Party Trade");
        "Salesperson Code" := SalesOrderHeader."Salesperson Code";
        "Shortcut Dimension 1 Code" := SalesOrderHeader."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := SalesOrderHeader."Shortcut Dimension 2 Code";
        "Dimension Set ID" := SalesOrderHeader."Dimension Set ID";
        OnBeforeSalesInvHeaderModify(SalesHeader,SalesOrderHeader);
        MODIFY;
        COMMIT;
        HasAmount := FALSE;
      END;

      OnAfterInsertSalesInvHeader(SalesHeader,"Sales Shipment Header");
    END;

    PROCEDURE InitializeRequest@5(NewPostingDate@1002 : Date;NewDocDate@1003 : Date;NewCalcInvDisc@1000 : Boolean;NewPostInv@1001 : Boolean;NewOnlyStdPmtTerms@1004 : Boolean;NewCopyTextLines@1005 : Boolean);
    BEGIN
      PostingDateReq := NewPostingDate;
      DocDateReq := NewDocDate;
      CalcInvDisc := NewCalcInvDisc;
      PostInv := NewPostInv;
      OnlyStdPmtTerms := NewOnlyStdPmtTerms;
      CopyTextLines := NewCopyTextLines;
    END;

    PROCEDURE SetHideDialog@7(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE ShouldFinalizeSalesInvHeader@12(SalesOrderHeader@1000 : Record 36;SalesHeader@1001 : Record 36) Finalize : Boolean;
    BEGIN
      Finalize :=
        (SalesOrderHeader."Bill-to Customer No." <> SalesHeader."Bill-to Customer No.") OR
        (SalesOrderHeader."Currency Code" <> SalesHeader."Currency Code") OR
        (SalesOrderHeader."EU 3-Party Trade" <> SalesHeader."EU 3-Party Trade") OR
        (SalesOrderHeader."Dimension Set ID" <> SalesHeader."Dimension Set ID");

      OnAfterShouldFinalizeSalesInvHeader(SalesOrderHeader,SalesHeader,Finalize);
      EXIT(Finalize);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetRecordSalesOrderHeader@9(VAR SalesOrderHeader@1000 : Record 36;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertSalesInvHeader@3(VAR SalesHeader@1000 : Record 36;VAR SalesShipmentHeader@1001 : Record 110);
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnBeforePreReport@4();
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnBeforePostReport@8();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesInvHeaderModify@13(VAR SalesHeader@1000 : Record 36;SalesOrderHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFinalizeSalesInvHeader@6(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSalesOrderHeaderOnPreDataItem@10(VAR SalesOrderHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShouldFinalizeSalesInvHeader@11(VAR SalesOrderHeader@1000 : Record 36;SalesHeader@1001 : Record 36;Finalize@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

