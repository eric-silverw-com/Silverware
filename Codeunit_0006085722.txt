OBJECT Codeunit 6085722 DC Approval Management
{
  OBJECT-PROPERTIES
  {
    Date=09/28/18;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.4.50.08;
  }
  PROPERTIES
  {
    Permissions=TableData 454=rimd,
                TableData 455=rimd,
                TableData 6085702=rimd,
                TableData 6085744=rimd,
                TableData 6085749=rimd,
                TableData 6085750=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ForceApprovalWorkflowDisabled@1006 : TextConst 'ENU=There is no supported workflow for force approval.';
      NoReqToDelegateErr@1010 : TextConst 'ENU=There is no approval request to delegate.';
      NoWorkflowEnabledErr@1011 : TextConst 'ENU=This record is not supported by related approval delegation workflow.';
      NoPrecedingApprovalEntry@1035 : TextConst 'ENU=No preceeding approval entry was found.';
      DelegateToSameUserErr@1160040000 : TextConst 'ENU=You cannot forward to the same user.';
      RemoveInvOnHoldQuestion@1160040002 : TextConst 'ENU=This invoice is currently on hold. If you approve this invoice but keep it on hold, then it will not be paid before on hold is removed by another person.\\Do you want to remove this invoice from being on hold?';
      RemoveCrMemoOnHoldQuestion@1160040003 : TextConst 'ENU=This credit memo is currently on hold. If you approve this credit memo but keep it on hold, then it will not be paid before on hold is removed by another person.\\Do you want to remove this credit memo from being on hold?';
      OnHoldRemovedWhenApprovingTxt@1160040004 : TextConst 'ENU=On Hold was removed when approving.';
      OnHoldKeptWhenApprovingTxt@1160040005 : TextConst 'ENU=On Hold was kept intentionally when approving.';
      InvoicePutOnHoldReasonTxt@1160040006 : TextConst 'ENU="Invoice was put on hold with %1 = %2 (%3)."';
      CrMemoPutOnHoldReasonTxt@1160040007 : TextConst 'ENU="Credit Memo was put on hold with %1 = %2 (%3)."';
      FourEyesApprovalReqErr@1160040008 : TextConst 'ENU=This %1 requires 4-eyes approval. You must approve and forward it to a second approver.';
      FourEyesApprovalReqFullErr@1160040009 : TextConst 'ENU=This %1 requires 4-eyes approval of the full amount. You must approve and forward it to a second approver who can approve the full amount.';
      AutoApproveOnOpenOrderQuestion@1160040013 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more orders which have not been fully approved.\\Do you want to continue auto approving this invoice?';
      AutoApproveOnOpenRetOrQuestion@1160040014 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more return orders which have not been fully approved.\\Do you want to continue auto approving this credit memo?';
      AutoApproveOnOpenOrderErr@1160040016 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more orders which have not been fully approved and automatic approval will not be performed.';
      AutoApproveOnOpenRetOrErr@1160040015 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more return orders which have not been fully approved and automatic approval will not be performed.';
      AutoAppChangedDimsOnPOMsg@6085583 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more orders. Automatic approval will not be performed as dimensions differ between the invoice and at least one of the orders.';
      AutoAppChangedDimsOnReturnMsg@6085584 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more return orders. Automatic approval will not be performed as dimensions differ between the credit memo and at least one of the return orders.';
      AutoAppChangedDimsOnReceiptMsg@6085585 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more receipts. Automatic approval will not be performed as dimensions differ between the invoice and at least one of the receipts.';
      AutoAppChangedDimsOnRetShptMsg@6085586 : TextConst 'ENU=%1 %2, created by document %3, is matched to one or more return shipments. Automatic approval will not be performed as dimensions differ between the credit memo and at least one of the return shipments.';
      Text001@161024041 : TextConst 'ENU=No open approval entries was found.';
      Text003@1160040001 : TextConst 'ENU=Shared by %1';
      Text004@1160040020 : TextConst 'ENU=Shared by %1 (Out of Office)';
      Text005@161024037 : TextConst 'ENU=Forwarded from %1 to %2';
      Text007@161024035 : TextConst 'ENU=%1 %2 was rejected';
      Text008@161024016 : TextConst 'ENU=%1 %2 was sent back';
      Text009@161024033 : TextConst 'ENU=Send back to %1,Reject';
      Text011@161024027 : TextConst 'ENU=Approval forced by %1';
      Text012@161024026 : TextConst 'ENU=Do you wish to force the approval of %1 %2?';
      Text013@161024025 : TextConst 'ENU=You are not allowed to perform this action.\\In order to perform this action you must be member of the role ''%1''.';
      Text014@161024024 : TextConst 'ENU=Amount Excl. VAT does not match\';
      Text015@161024023 : TextConst 'ENU=Amount Incl. VAT does not match\';
      Text016@161024022 : TextConst 'ENU=" - Imported: %1\"';
      Text017@161024021 : TextConst 'ENU=" - Assigned: %1\"';
      Text018@161024020 : TextConst 'ENU=\Do you want to approve the document anyway?';
      Text019@161024019 : TextConst 'ENU=Approve && Forward,Forward without approval,Forward and send the document back to me after approval';
      Text020@161024018 : TextConst 'ENU=Approved and forwarded from %1 to %2';
      Text022@161024015 : TextConst 'ENU=The invoice was automatically approved.';
      Text023@161024014 : TextConst 'ENU=The credit memo was automatically approved.';
      Text024@161024013 : TextConst 'ENU=%1 %2 was put on hold.';
      Text025@161024012 : TextConst 'ENU=%1 %2 is no longer on hold.';
      CannotApproveAppEntryErr@161024028 : TextConst 'ENU=Your approval settings does not allow you to approve this %1.';
      Text027@161024029 : TextConst 'ENU=%1 approved by %2 on behalf of %3.';
      Text030@6085573 : TextConst 'ENU=Updating ...\\@1@@@@@@@@@@@@@@@@@@@@';
      Text031@6085579 : TextConst 'ENU=must be Open or Created.';
      Text032@6085578 : TextConst 'ENU=Do you want to change %1 to %2?';
      Text033@6085577 : TextConst 'ENU=You can only add a new %1 after the open %1.';
      Text034@6085576 : TextConst 'ENU=Approver %1 was added';
      Text035@6085575 : TextConst 'ENU=Approver %1 changed to %2';
      Text036@6085574 : TextConst 'ENU=Approver %1 was deleted';
      Text038@6085581 : TextConst 'ENU=You must specify %1 or %2.';
      AdvAppvlMgt@1002 : Codeunit 6085746;
      PurchDocMgt@1000 : Codeunit 6085709;
      WebSearchMgt@1001 : Codeunit 6085748;
      ApprovalCmtMgt@1003 : Codeunit 6085600;
      DCApprovalsBridge@1160040010 : Codeunit 6085790;
      DiffBtwAsgnAndImpAmtMsg1@1160040011 : TextConst 'ENU=There is a difference between the imported amounts and the assigned amounts as shown below.\\ - Amount Excl. VAT (Imported): %5\ - Amount Excl. VAT (Assigned): %6\\';
      DiffBtwAsgnAndImpAmtMsg2@6085582 : TextConst 'ENU=" - VAT Amount (Imported): %3\ - VAT Amount (Assigned): %4\\ - Amount Incl. VAT (Imported): %1\ - Amount Incl. VAT (Assigned): %2"';
      SubmitForApprovalQst@1160040021 : TextConst 'ENU=\\Do you want to submit the document for approval anyway?';
      PurchLineNotApprovedErr@1160040018 : TextConst 'ENU="%1 %2 = %3, %4 = %5, %6 = %7 has not been approved by an approver with the required account or dimension permissions."';
      MissingAmountApprovelErr@1160040019 : TextConst 'ENU=This %1 has not been approved by an approver that can approve the full amount (%2). You must approve and forward it to a second approver who can approve the full amount.';
      Missing2ndApprover@1004 : TextConst 'ENU="You must specify %1 or %2 in %3: User ID=%4"';
      ForceApprovalErr@6085580 : TextConst 'ENU=Force Approval is not possible.\\To be able to use the function it must be activated in %1.';

    PROCEDURE CreatePurchApprovalRequest@7(PurchHeader@1000 : Record 38;WorkflowStepInstanceID@1160040007 : GUID) Handled : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
      PurchHeaderDCInfo@1160040006 : Record 6085767;
      ApprovalEntryArgument@1160040005 : Record 454;
      RecRef@1160040004 : RecordRef;
      IsAdvance@1160040003 : Boolean;
      IsFlow@1160040002 : Boolean;
      IsStandard@1160040001 : Boolean;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT(FALSE);

      IF NOT DCSetup.GET THEN
        EXIT(FALSE);

      IF ISNULLGUID(WorkflowStepInstanceID) THEN
        WorkflowStepInstanceID := CREATEGUID;

      IF DCApprovalsBridge.IsWorkflowSupported THEN
        Handled := PurchDocSubmittingForApproval(PurchHeader);

      IF NOT Handled THEN BEGIN
        RecRef.GETTABLE(PurchHeader);
        DCApprovalsBridge.InitializeApprovalEntry(RecRef,ApprovalEntryArgument,WorkflowStepInstanceID);

        IsAdvance := DCApprovalsBridge.GetIsAdvancedApproval;
        IsFlow := PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) <> '';
        IsStandard := PurchHeader."Purchaser Code" <> '';

        IF NOT (IsAdvance OR IsFlow OR IsStandard) THEN
          ERROR(Text038,PurchHeader.FIELDCAPTION("Purchaser Code"),PurchHeaderDCInfo.FIELDCAPTION("Approval Flow Code"));

        CASE TRUE OF
          IsFlow:
            Handled := CreateFlowApprovalEntries(PurchHeader,ApprovalEntryArgument);

          IsAdvance:
            Handled := AdvAppvlMgt.SubmitForApproval(PurchHeader,WorkflowStepInstanceID);

          IsStandard:
            Handled := DCApprovalsBridge.CreateApprovalRequestsStandard(RecRef);
        END;
      END;

      IF Handled THEN BEGIN
        IF IsStandard AND DCApprovalsBridge.IsWorkflowSupported THEN
          CreateFourEyesApprover(PurchHeader);

        IF IsAdvance OR IsFlow THEN
          DCApprovalsBridge.InformUserOnStatusChange(RecRef);

        IF DCApprovalsBridge.IsWorkflowSupported THEN
          PurchDocSubmittedForApproval(PurchHeader);
      END;
    END;

    PROCEDURE OnAfterApproveApprovalRequest@161024018(VAR ApprovalEntry@1002 : Record 454);
    VAR
      PurchHeader@161024017 : Record 38;
      DCSetup@1160040001 : Record 6085573;
    BEGIN
      IF NOT DCSetup.GET THEN
        EXIT;

      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      IF NOT PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
        EXIT;

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      IF NOT ApprovalEntry."Forced Approval" THEN
        IF UpdAppEntryIfCanAppEntry(ApprovalEntry) THEN
          UpdateApproverID(ApprovalEntry);

      IF (ApprovalEntry."Table ID" = DATABASE::"Purchase Header") AND
        (ApprovalEntry."Advanced Approval")
      THEN
        AdvAppvlMgt.ApproveApprovalRequest(ApprovalEntry,GetCurrUserID);

      CheckPurchaseApprovalRequest(ApprovalEntry,PurchHeader,TRUE);

      IF DCSetup."Arch. Doc. on Approv. and Reg." OR DCSetup."Use Acc. and Dim. App. Pms." THEN
        ArchivePurchHeader(PurchHeader,ApprovalEntry);

      IF NOT ApprovalEntry."Forced Approval" THEN
        IF NOT GetHasMoreApprovers(ApprovalEntry) THEN
          CheckAccAndDimAppPms(ApprovalEntry);

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);
    END;

    PROCEDURE UpdateApproverID@21(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry."Approver ID" <> GetCurrUserID THEN BEGIN
        ApprovalCmtMgt.AddCommentForAppvlEntry(ApprovalEntry,GetCurrUserID,
          STRSUBSTNO(Text027,ApprovalEntry."Document Type",RemoveDomainName(GetCurrUserID),
          RemoveDomainName(ApprovalEntry."Approver ID")));

        IF ApprovalEntry."Original Approver ID" = '' THEN
          ApprovalEntry."Original Approver ID" := ApprovalEntry."Approver ID";

        ApprovalEntry."Approver ID" := GetCurrUserID;
        ApprovalEntry.MODIFY;
      END;
    END;

    PROCEDURE DelegateApprovalRequest@161024013(VAR ApprovalEntry@1001 : Record 454);
    VAR
      UserSetup@161024014 : Record 91;
      ApprovalSharing@161024012 : Record 6085749;
      DCApprovalsBridge@1002 : Codeunit 6085790;
      Selection@161024021 : 'Cancel,ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
    BEGIN
      IF NOT (UPPERCASE(GetCurrUserID) IN [ApprovalEntry."Sender ID",ApprovalEntry."Approver ID"]) THEN BEGIN
        IF NOT IsApprovalAdminUser(FALSE) THEN BEGIN
          FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
          ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
          IF ApprovalSharing.ISEMPTY THEN
            IsApprovalAdminUser(TRUE);
        END;
      END;

      UserSetup.GET(GetCurrUserID);

      IF ApprovalEntry."Approver ID" <> UPPERCASE(GetCurrUserID) THEN
        Selection := Selection::DelegateWithoutApproval
      ELSE
        Selection := STRMENU(Text019);

      IF Selection = Selection::Cancel THEN
        ERROR('');

      IF UserSetup.GET(UserSetup.Substitute) THEN;

      IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
        ERROR('');

      DelegateApprovalRequest2(ApprovalEntry,Selection-1,UserSetup."User ID");
    END;

    PROCEDURE DelegateApprovalRequest2@5(VAR ApprovalEntry@1002 : Record 454;Selection@1000 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';NewUserID@1003 : Code[50]);
    BEGIN
      CASE Selection OF
        Selection::ApproveAndDelegate:
          DCApprovalsBridge.ApproveAndDelegate(ApprovalEntry,NewUserID);
        Selection::DelegateAndSendBack:
          DCApprovalsBridge.DelegateAndSendBack(ApprovalEntry,NewUserID);
        Selection::DelegateWithoutApproval:
          DCApprovalsBridge.DelegateWithoutApproval(ApprovalEntry,NewUserID);
      END;
    END;

    PROCEDURE ApproveAndDelegate@12(VAR ApprovalEntry@1001 : Record 454;NewUserID@1004 : Code[50]);
    VAR
      ApprovalEntry2@1003 : Record 454;
      ApprovalEntry3@1002 : Record 454;
      PurchHeader@1005 : Record 38;
      DCApprovalMgmt@1000 : Codeunit 6085722;
      ApprovalAction@1010 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      FieldRef@1006 : FieldRef;
      Comment@1007 : Text[250];
      PrevUserID@1009 : Code[50];
      RecreateHierarchy@1008 : Boolean;
    BEGIN
      InitializeDelegationVariables(ApprovalEntry,NewUserID,PrevUserID,RecreateHierarchy);

      WITH ApprovalEntry DO
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

      IF RecreateHierarchy OR IsExpenseApproval(ApprovalEntry) THEN BEGIN
        ApprovalEntry2.SETRANGE("Sequence No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        ApprovalEntry2.DELETEALL(TRUE);
      END ELSE
        MoveApprovalEntriesForward(ApprovalEntry);

      IF (NOT ApprovalEntry."Advanced Approval") AND (RecreateHierarchy) THEN
        RecreateApprovalHierachy(ApprovalEntry,NewUserID)
      ELSE BEGIN
        // Insert the new entry
        ApprovalEntry2 := ApprovalEntry;
        DCApprovalsBridge.InitApprovalEntry(ApprovalEntry2);

        IF DCApprovalsBridge.IsWorkflowSupported THEN
          ApprovalEntry2.Status := ApprovalEntry2.Status::Created
        ELSE
          ApprovalEntry2.Status := ApprovalEntry2.Status::Open;

        ApprovalEntry2."Sender ID" := GetCurrUserID;
        ApprovalEntry2."Sequence No." := ApprovalEntry2."Sequence No." + 1;
        ApprovalEntry2."Last Modified By User ID" := GetCurrUserID;
        ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
        ApprovalEntry2."Approver ID" := NewUserID;
        ApprovalEntry2."Original Approver ID" := NewUserID;
        DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);
      END;

      // Approve entry in version 80 and below
      IF NOT DCApprovalsBridge.IsWorkflowSupported THEN
        DCApprovalsBridge.ApproveApprovalRequest(ApprovalEntry)
      ELSE BEGIN
        // We cannot approve the request using the workflow engine (Approval) as there will be no valid responses
        // to the event which is the approval of the entry. Therefore we do it here including the approval check.
        IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN BEGIN
          PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
          CheckPurchaseApprovalRequest(ApprovalEntry,PurchHeader,TRUE);
        END;
        ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
        ApprovalEntry.MODIFY(TRUE);
      END;

      IF ApprovalEntry."Advanced Approval" THEN
        AdvAppvlMgt.DelegateApprovalRequest(ApprovalEntry,NewUserID,ApprovalAction = ApprovalAction::ApproveAndDelegate);

      Comment := COPYSTR(STRSUBSTNO(Text020,RemoveDomainName(PrevUserID),RemoveDomainName(NewUserID)),1,MAXSTRLEN(Comment));
      OnAfterDelegate(ApprovalEntry,NewUserID,Comment);
    END;

    PROCEDURE DelegateWithoutApproval@13(VAR ApprovalEntry@1011 : Record 454;NewUserID@1010 : Code[50]);
    VAR
      ApprovalEntry2@1007 : Record 454;
      ApprovalEntry3@1006 : Record 454;
      UserSetup@6085574 : Record 91;
      PurchHeader@6085573 : Record 38;
      ApprovalAction@1009 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      Comment@1004 : Text[250];
      PrevUserID@1003 : Code[50];
      RecreateHierarchy@1002 : Boolean;
    BEGIN
      InitializeDelegationVariables(ApprovalEntry,NewUserID,PrevUserID,RecreateHierarchy);

      WITH ApprovalEntry DO
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

      IF RecreateHierarchy OR IsExpenseApproval(ApprovalEntry) THEN BEGIN
        ApprovalEntry2.SETRANGE("Sequence No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        ApprovalEntry2.DELETEALL(TRUE);
      END;

      ApprovalEntry3 := ApprovalEntry;
      ApprovalEntry3."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry3."Date-Time Sent for Approval" := CURRENTDATETIME;
      ApprovalEntry3."Approver ID" := NewUserID;
      ApprovalEntry3.MODIFY;

      Comment := COPYSTR(STRSUBSTNO(Text005,RemoveDomainName(PrevUserID),RemoveDomainName(NewUserID)),1,MAXSTRLEN(Comment));

      IF (NOT ApprovalEntry."Advanced Approval" ) AND (RecreateHierarchy) THEN
        RecreateApprovalHierachy(ApprovalEntry,NewUserID);

      OnAfterDelegate(ApprovalEntry,NewUserID,Comment);

      IF ApprovalEntry."Advanced Approval" THEN
        AdvAppvlMgt.DelegateApprovalRequest(ApprovalEntry,NewUserID,FALSE);

      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN BEGIN
        PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
        UserSetup.GET(NewUserID);
        PurchHeader."Purchaser Code" := UserSetup."Salespers./Purch. Code";
        CreateFourEyesApprover(PurchHeader);
      END;
    END;

    PROCEDURE DelegateAndSendBack@14(VAR ApprovalEntry@1011 : Record 454;NewUserID@1010 : Code[50]);
    VAR
      ApprovalEntry2@1007 : Record 454;
      ApprovalEntry3@1006 : Record 454;
      ApprovalAction@1009 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      Comment@1004 : Text[250];
      PrevUserID@1003 : Code[50];
      RecreateHierarchy@1002 : Boolean;
    BEGIN
      InitializeDelegationVariables(ApprovalEntry,NewUserID,PrevUserID,RecreateHierarchy);

      WITH ApprovalEntry DO
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

      ApprovalEntry2.ASCENDING(FALSE);
      IF ApprovalEntry2.FINDFIRST THEN
        REPEAT
          ApprovalEntry3 := ApprovalEntry2;
          IF ApprovalEntry2."Sequence No." = ApprovalEntry."Sequence No." THEN
            ApprovalEntry3.Status := ApprovalEntry3.Status::Created;
          ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 1;
          ApprovalEntry3."Last Modified By User ID" := GetCurrUserID;
          ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
          DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry3);
          ApprovalEntry2.DELETE;

          IF ApprovalEntry2.NEXT = 0 THEN
            ApprovalEntry2."Sequence No." := -1;
        UNTIL ApprovalEntry2."Sequence No." < ApprovalEntry."Sequence No.";

      ApprovalEntry2 := ApprovalEntry;
      DCApprovalsBridge.InitApprovalEntry(ApprovalEntry2);

      ApprovalEntry2."Sender ID" := GetCurrUserID;
      ApprovalEntry2."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2."Date-Time Sent for Approval" := CURRENTDATETIME;
      ApprovalEntry2."Approver ID" := NewUserID;
      ApprovalEntry2."Original Approver ID" := NewUserID;
      DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);

      Comment := COPYSTR(STRSUBSTNO(Text005,RemoveDomainName(PrevUserID),RemoveDomainName(NewUserID)),1,MAXSTRLEN(Comment));

      OnAfterDelegate(ApprovalEntry,NewUserID,Comment);
    END;

    PROCEDURE InitializeDelegationVariables@25(VAR ApprovalEntry@1001 : Record 454;VAR NewUserID@1009 : Code[50];VAR PrevUserID@1004 : Code[50];VAR RecreateHierarchy@1007 : Boolean);
    VAR
      DCSetup@1000 : Record 6085573;
      PurchHeaderDCInfo@1008 : Record 6085767;
      PurchHeader@1003 : Record 38;
      UserSetup@1005 : Record 91;
    BEGIN
      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN
        PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");

      PrevUserID := ApprovalEntry."Approver ID";

      IF NewUserID = PrevUserID THEN
        ERROR(DelegateToSameUserErr);

      UserSetup.GET(NewUserID);

      IF DCSetup.GET THEN BEGIN
        IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN
          RecreateHierarchy :=
            DCSetup."Purch.: Recreate Appvl. Hiera." AND
            (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) = '');
      END ELSE
        RecreateHierarchy := FALSE;
    END;

    PROCEDURE AddApproverAfter@29(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1003 : Record 454;
      UserSetup@1001 : Record 91;
    BEGIN
      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Created,ApprovalEntry.Status::Open]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);
      IsApprovalAdminUser(TRUE);

      IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
        ERROR('');

      MoveApprovalEntriesForward(ApprovalEntry);

      ApprovalEntry2 := ApprovalEntry;
      DCApprovalsBridge.InitApprovalEntry(ApprovalEntry);

      ApprovalEntry2."Sender ID" := GetCurrUserID;
      ApprovalEntry2."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2.Status := ApprovalEntry2.Status::Created;
      ApprovalEntry2."Sequence No." += 1;
      ApprovalEntry2."Approver ID" := UserSetup."User ID";
      ApprovalEntry2."Original Approver ID" := UserSetup."User ID";

      DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);
    END;

    PROCEDURE MoveApprovalEntriesForward@9(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1002 : Record 454;
    BEGIN
      // Move pending approval entries forward
      ApprovalEntry2 := ApprovalEntry;

      WITH ApprovalEntry DO
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry2."Sequence No.");
      ApprovalEntry2.SETFILTER(Status,'<>%1',ApprovalEntry2.Status::Canceled); // Needed in 90
      ApprovalEntry2.ASCENDING(FALSE);
      IF ApprovalEntry2.FINDFIRST THEN
        REPEAT
          ApprovalEntry3 := ApprovalEntry2;
          ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 1;
          ApprovalEntry3.Status := ApprovalEntry3.Status::Created;
          ApprovalEntry3."Last Modified By User ID" := GetCurrUserID;
          ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
          DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry3);
          ApprovalEntry2.DELETE;
        UNTIL ApprovalEntry2.NEXT = 0;
    END;

    PROCEDURE OnAfterDelegate@26(VAR ApprovalEntry@1002 : Record 454;NewUserID@1009 : Code[50];Comment@1004 : Text[250]);
    VAR
      ApprovalEntry2@1000 : Record 454;
      ApprovalEntry3@1001 : Record 454;
      NextSeqNo@1005 : Integer;
    BEGIN
      // This will remove duplicated approvers and make sure that approval entries have the correct sequence
      WITH ApprovalEntry DO BEGIN
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry3);
      END;

      ApprovalEntry2.SETFILTER(Status,'%1|%2',ApprovalEntry2.Status::Created,ApprovalEntry2.Status::Open);

      IF ApprovalEntry2.FINDSET(TRUE,FALSE) THEN
        REPEAT
          ApprovalEntry3 := ApprovalEntry2;
          IF (ApprovalEntry3.NEXT <> 0) AND (ApprovalEntry2."Approver ID" = ApprovalEntry3."Approver ID") THEN BEGIN
            IF ApprovalEntry2.Status = ApprovalEntry2.Status::Open THEN BEGIN
              ApprovalEntry3.Status := ApprovalEntry3.Status::Open;
              ApprovalEntry3.MODIFY;
            END;
            ApprovalEntry2.DELETE(TRUE);
          END;
        UNTIL ApprovalEntry2.NEXT = 0;

      // The following will make sure that all Sequence No. in the Approval Entries is sequential without gaps. In NAV 2016 Sequence No.
      // is not part of the primary key,
      // and therefore we simply update the field.  In previous version it is part of the primary key, and we have to reinsert it.
      NextSeqNo := 1;

      ApprovalEntry2.SETRANGE(Status);
      IF ApprovalEntry2.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF ApprovalEntry2."Sequence No." <> NextSeqNo THEN BEGIN
            IF DCApprovalsBridge.IsWorkflowSupported THEN BEGIN
              ApprovalEntry2."Sequence No." := NextSeqNo;
              ApprovalEntry2.MODIFY;
            END ELSE BEGIN
              ApprovalEntry3 := ApprovalEntry2;
              ApprovalEntry3."Sequence No." := NextSeqNo;
              DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry3);
              ApprovalEntry2.DELETE(TRUE);
            END;
          END;
          NextSeqNo := NextSeqNo + 1;
        UNTIL ApprovalEntry2.NEXT = 0;

      ApprovalCmtMgt.AddCommentForAppvlEntry(ApprovalEntry,GetCurrUserID,Comment);

      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN BEGIN
        WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
        WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);
      END;

      // When workflow is supported approval mail should be set up as a separate workflow response, supported by notifications in the std.
      IF NOT DCApprovalsBridge.IsWorkflowSupported THEN BEGIN
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
        ApprovalEntry2.FINDFIRST;

        DCApprovalsBridge.SendApprovalMail(ApprovalEntry,ApprovalEntry2);
      END;
    END;

    LOCAL PROCEDURE RecreateApprovalHierachy@2(ApprovalEntry@1000 : Record 454;NewUserID@1001 : Code[50]);
    VAR
      PurchHeader@1003 : Record 38;
      PurchDocMgt@1002 : Codeunit 6085709;
      DCApprovalsBridge@1008 : Codeunit 6085790;
      ImportedAmountExclVAT@1004 : Decimal;
      ImportedAmountInclVAT@1005 : Decimal;
      AssignedAmountExclVAT@1006 : Decimal;
      AssignedAmountInclVAT@1007 : Decimal;
    BEGIN
      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");

      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,
        AssignedAmountInclVAT);

      IF (ImportedAmountExclVAT <> 0) AND (ImportedAmountExclVAT > AssignedAmountExclVAT) THEN
        CreateTempPurchLineForApproval(PurchHeader,ImportedAmountExclVAT-AssignedAmountExclVAT);

      DCApprovalsBridge.RecreateApprovalHierachy(ApprovalEntry,NewUserID);

      DeleteTempPurchLineForApproval(PurchHeader);
    END;

    PROCEDURE FilterApprovalSharingToUser@161024012(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[50]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Shared to User ID");
      ApprovalSharing.SETRANGE("Shared to User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE FilterApprovalSharingFromUser@161024020(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[50]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Owner User ID");
      ApprovalSharing.SETRANGE("Owner User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE FilterAppvlSharingToUserComp@1160040012(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[50];CompName@1160040000 : Text[50]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.CHANGECOMPANY(CompName);
      ApprovalSharing.SETCURRENTKEY("Shared to User ID");
      ApprovalSharing.SETRANGE("Shared to User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE Reject@1000000041(VAR PurchHeader@1004 : Record 38);
    VAR
      ApprovalEntry@1005 : Record 454;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      DCApprovalsBridge.FindApprovalRequestForCurrUser(ApprovalEntry,PurchHeader);

      Answer := SendBackOrRejectApprovalReq(ApprovalEntry);

      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      IF Answer = Answer::"Send Back" THEN
        DCApprovalsBridge.SendBackApprovalRequest(ApprovalEntry)
      ELSE
        DCApprovalsBridge.RejectApprovalRequest(ApprovalEntry);

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);

      IF ApprovalEntry.ISEMPTY THEN
        IF GUIALLOWED THEN
          IF Answer = Answer::"Send Back" THEN
            MESSAGE(Text008,ApprovalEntry."Document Type",ApprovalEntry."Document No.")
          ELSE
            MESSAGE(Text007,ApprovalEntry."Document Type",ApprovalEntry."Document No.");
    END;

    PROCEDURE SendBackApprovalRequest@8(ApprovalEntry@1000 : Record 454);
    VAR
      PreceedingApprovalEntry@1003 : Record 454;
      PurchHeader@1005 : Record 38;
      SendMail@1002 : Boolean;
    BEGIN
      ApprovalEntry.Status := ApprovalEntry.Status::Created;
      ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      ApprovalEntry."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry.MODIFY;

      IF NOT DCApprovalsBridge.FindPreceedingApprovedApproval(ApprovalEntry,PreceedingApprovalEntry) THEN
        ERROR(NoPrecedingApprovalEntry);

      PreceedingApprovalEntry.Status := ApprovalEntry.Status::Open;
      PreceedingApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      PreceedingApprovalEntry."Last Modified By User ID" := GetCurrUserID;
      PreceedingApprovalEntry.MODIFY;
    END;

    PROCEDURE SendBackOrRejectApprovalReq@161024025(ApprovalEntry@161024012 : Record 454) : Integer;
    VAR
      ApprovalEntry2@161024013 : Record 454;
      ContiniaUser@1001 : Record 6086001;
      Answer@161024015 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      IF DCApprovalsBridge.FindPreceedingApprovedApproval(ApprovalEntry,ApprovalEntry2) THEN BEGIN
        ContiniaUser.GET(ApprovalEntry2."Approver ID");
        Answer := STRMENU(STRSUBSTNO(Text009,GetApproverDisplayName(ContiniaUser."User ID")));
      END ELSE
        Answer := Answer::Reject;

      EXIT(Answer);
    END;

    PROCEDURE CreateFlowApprovalEntries@161024032(PurchHeader@161024012 : Record 38;ApprovalEntryArgument@1000 : Record 454) : Boolean;
    VAR
      ApprovalFlow@1160040001 : Record 6085725;
      AppvlFlowLine@161024014 : Record 6085726;
      PurchHeaderDCInfo@1160040000 : Record 6085767;
      UserSetup@1004 : Record 91;
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument);
      PurchHeaderDCInfo.GET(PurchHeader."Document Type",PurchHeader."No.");
      PurchHeaderDCInfo.TESTFIELD("Approval Flow Code");
      ApprovalFlow.GET(PurchHeaderDCInfo."Approval Flow Code");
      AppvlFlowLine.SETRANGE("Approval Flow Code",PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader));
      AppvlFlowLine.FINDSET;
      REPEAT
        SequenceNo += 1;
        UserSetup.GET(AppvlFlowLine."Approver ID");
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID");
      UNTIL AppvlFlowLine.NEXT = 0;

      DCApprovalsBridge.OpenApprovalFlow(PurchHeader);

      EXIT(TRUE);
    END;

    PROCEDURE ForceApproval@161024026(VAR PurchHeader@1000 : Record 38;IsManual@1004 : Boolean) : Boolean;
    VAR
      DCSetup@1001 : Record 6085573;
      ApprovalCmtLine@6085578 : Record 455;
      ApprovalEntry@1003 : Record 454;
      PurchRecRef@1002 : RecordRef;
      DCApprovalsBridge@6085573 : Codeunit 6085790;
      DCDimensionHandling@6085574 : Codeunit 6085793;
    BEGIN
      // Manual set to TRUE when user runs Force Approval from user interface. Manual is set to FALSE when ForceApproval is
      // run from AutoApprove

      IF IsManual THEN
        IF NOT IsApprovalAdminUser(IsManual) THEN
          EXIT;

      IF NOT DCSetup.GET THEN
        EXIT;

      IF IsManual THEN BEGIN
        IF NOT DCSetup."Purch: Allow Force Approval" THEN
          ERROR(ForceApprovalErr,DCSetup.TABLECAPTION);

        PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text012,TRUE,PurchHeader."Document Type",PurchHeader."No.") THEN
            ERROR('');
      END;

      IF DCSetup."Check Dimensions on Approval" <> DCSetup."Check Dimensions on Approval"::No THEN
        DCDimensionHandling.CheckDimensions(PurchHeader);

      PurchRecRef.GETTABLE(PurchHeader);
      DCApprovalsBridge.InitializeApprovalEntry(PurchRecRef,ApprovalEntry,CREATEGUID);
      MakeApprovalEntry(ApprovalEntry,0,GetCurrUserID);
      PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");

      IF DCSetup."Arch. Doc. on Approv. and Reg." OR DCSetup."Use Acc. and Dim. App. Pms." THEN
        ArchivePurchHeader(PurchHeader,ApprovalEntry);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
      ApprovalEntry.MODIFYALL(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFYALL("Forced Approval",TRUE);

      DCApprovalsBridge.RemPurchHeaderRestriction(PurchHeader);

      // Newer CU's require Status to Differ from open when releasing. Therefore change to pending.
      PurchHeader.Status := PurchHeader.Status::"Pending Approval";
      CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

      IF NOT IsManual THEN BEGIN
        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
          ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,Text022)
        ELSE
          ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,Text023);
      END ELSE
        ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,STRSUBSTNO(Text011,RemoveDomainName(GetCurrUserID)));

      EXIT(TRUE);
    END;

    PROCEDURE BuildApprovalEntriesForUser@161024016(VAR TempApprovalEntry@161024014 : TEMPORARY Record 454;TableIDFilter@1000 : Text[250];IncludeNormalSharing@161024012 : Boolean;IncludeOutOfOfficeSharing@161024016 : Boolean);
    VAR
      ApprovalEntry@161024013 : Record 454;
      ApprovalSharing@161024015 : Record 6085749;
      PurchHeader@1160040001 : Record 38;
      ContiniaUser@1160040002 : Record 6086001;
      ApprovalsBridge@6085573 : Codeunit 6085790;
      NextSeqNo@161024017 : Integer;
      i@161024018 : Integer;
      OwnerUsersProcessedTmp@1160040000 : TEMPORARY Record 6086002;
    BEGIN
      TempApprovalEntry.RESET;
      TempApprovalEntry.SETFILTER("Table ID",TableIDFilter);
      TempApprovalEntry.DELETEALL;

      ApprovalEntry.SETCURRENTKEY("Approver ID");
      ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID);
      ApprovalEntry.SETFILTER("Table ID",TableIDFilter);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);

      IF ApprovalEntry.FINDSET THEN
        REPEAT
          TempApprovalEntry := ApprovalEntry;
          TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::Normal;

          IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN
            IF PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN BEGIN
              TempApprovalEntry."Source No." := PurchHeader."Buy-from Vendor No.";
              TempApprovalEntry."Source Name" := PurchHeader."Buy-from Vendor Name";
            END;

          TempApprovalEntry.INSERT;
        UNTIL ApprovalEntry.NEXT = 0;

      IF (NOT IncludeNormalSharing) AND (NOT IncludeOutOfOfficeSharing) THEN
        EXIT;

      IF NOT FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID) THEN
        EXIT;

      IF ApprovalSharing.FINDSET THEN
        REPEAT
          IF NOT OwnerUsersProcessedTmp.GET(ApprovalSharing."Owner User ID") THEN BEGIN
            OwnerUsersProcessedTmp."Continia User ID" := ApprovalSharing."Owner User ID";
            OwnerUsersProcessedTmp.INSERT;

            ApprovalEntry.SETRANGE("Approver ID",ApprovalSharing."Owner User ID");
            IF ApprovalEntry.FINDSET THEN BEGIN
              ContiniaUser.GET(ApprovalSharing."Owner User ID");
              IF ContiniaUser.Name = '' THEN
                ContiniaUser.Name := ContiniaUser."User ID";

              NextSeqNo := NextSeqNo + 1;
              i := 0;
              CLEAR(TempApprovalEntry);
              TempApprovalEntry."Table ID" := ApprovalEntry."Table ID";
              TempApprovalEntry."Document Type" := 6;
              TempApprovalEntry."Sequence No." := NextSeqNo;
              TempApprovalEntry."Approver ID" := ApprovalSharing."Owner User ID";
              IF ApprovalSharing."Sharing Type" = ApprovalSharing."Sharing Type"::Normal THEN BEGIN
                TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Normal Sharing";
                TempApprovalEntry."Source Name" := STRSUBSTNO(Text003,ContiniaUser.Name);
              END ELSE BEGIN
                TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Out of Office Sharing";
                TempApprovalEntry."Source Name" := STRSUBSTNO(Text004,ContiniaUser.Name);
              END;
              TempApprovalEntry."Temp. Display Sorting" := i;
              TempApprovalEntry.Status := TempApprovalEntry.Status::Open;
              ApprovalsBridge.InsertApprovalEntry(TempApprovalEntry);
              REPEAT
                i := i + 1;
                TempApprovalEntry := ApprovalEntry;
                IF ApprovalSharing."Sharing Type" = ApprovalSharing."Sharing Type"::Normal THEN
                  TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Normal Sharing"
                ELSE
                  TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Out of Office Sharing";
                TempApprovalEntry."Temp. Display Sorting" := i;

                IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN
                  IF PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN BEGIN
                    TempApprovalEntry."Source No." := PurchHeader."Buy-from Vendor No.";
                    TempApprovalEntry."Source Name" := '  ' + PurchHeader."Buy-from Vendor Name";
                  END;

                TempApprovalEntry.INSERT;
              UNTIL ApprovalEntry.NEXT = 0;
            END;
          END;
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE DrillDownApprovalEntries@1000000033(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.FILTERGROUP(4);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Purch. Approval Req. Entries",ApprovalEntry);
    END;

    PROCEDURE DrillDownApprovalComments@161024017(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(PurchHeader);
      ApprovalCmtMgt.ShowComments(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",RecRef.RECORDID);
    END;

    LOCAL PROCEDURE FilterDocumentTypeAndNumber@6(TableID@1000 : Integer;DocumentType@1002 : Integer;DocumentNo@1003 : Code[20];VAR ApprovalEntry@1001 : Record 454);
    BEGIN
      DCApprovalsBridge.OrderByTableIDDocTypeAndSeq(ApprovalEntry,TRUE);
      ApprovalEntry.SETRANGE("Table ID",TableID);
      ApprovalEntry.SETRANGE("Document Type",DocumentType);
      ApprovalEntry.SETRANGE("Document No.",DocumentNo);
    END;

    PROCEDURE FilterApprovalEntry@1000000042(VAR PurchHeader@1000000000 : Record 38;VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      UserFilter@161024013 : Text;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      IF OnlyCurrUser THEN BEGIN
        UserFilter := GetApprovalSharingToUserFilter(GetCurrUserID);
        IF UserFilter = '' THEN
          ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID)
        ELSE
          ApprovalEntry.SETFILTER("Approver ID",GetCurrUserID + '|' + UserFilter);
      END;
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE FilterPurchHeaderForApprover@161024030(DocType@6085573 : Integer;ApproverID@161024012 : Code[50];VAR PurchHeader@161024013 : Record 38);
    VAR
      ApprovalSharing@161024014 : Record 6085749;
      NextApproverId@161024015 : Code[50];
    BEGIN
      FilterApprovalSharingToUser(ApprovalSharing,ApproverID);
      IF DocType = -1 THEN
        PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo")
      ELSE
        PurchHeader.SETRANGE("Document Type",DocType);
      IF PurchHeader.FINDSET THEN
        REPEAT
          NextApproverId := GetNextApprover(PurchHeader);
          IF NextApproverId = ApproverID THEN
            PurchHeader.MARK(TRUE)
          ELSE BEGIN
            ApprovalSharing.SETRANGE("Owner User ID",NextApproverId);
            IF NOT ApprovalSharing.ISEMPTY THEN
              PurchHeader.MARK(TRUE);
          END;
        UNTIL PurchHeader.NEXT = 0;
      PurchHeader.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNextApprover@161024027(PurchHeader@161024012 : Record 38) : Code[50];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE GetApproverDisplayName@1160040000(ApproverID@1160040000 : Code[50]) : Text[250];
    VAR
      ContiniaUser@1160040005 : Record 6086001;
      UserSetup@1160040004 : Record 91;
      SalesPurch@1160040003 : Record 13;
    BEGIN
      IF ContiniaUser.GET(ApproverID) AND (ContiniaUser.Name <> '') THEN
        EXIT(ContiniaUser.Name)
      ELSE
        IF UserSetup.GET(ApproverID) THEN
          IF SalesPurch.GET(UserSetup."Salespers./Purch. Code") AND (SalesPurch.Name <> '') THEN
            EXIT(SalesPurch.Name);

      EXIT(ApproverID);
    END;

    PROCEDURE GetNextApproverName@6085574(PurchHeader@161024012 : Record 38) : Text[250];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(GetApproverDisplayName(ApprovalEntry."Approver ID"));
    END;

    PROCEDURE GetNextApproverSales@1160040001(SalesHeader@161024012 : Record 36) : Code[50];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
      ApprovalEntry.SETRANGE("Document Type",SalesHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",SalesHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE GetApprovalSharingToUserFilter@161024014(_UserId@161024013 : Code[50]) FilterString : Text;
    VAR
      ApprovalSharing@161024012 : Record 6085749;
    BEGIN
      IF NOT FilterApprovalSharingToUser(ApprovalSharing,_UserId) THEN
        EXIT('XXXXXXXXX');

      IF ApprovalSharing.FINDSET THEN
        REPEAT
          IF FilterString = '' THEN
            FilterString := ApprovalSharing."Owner User ID"
          ELSE
            FilterString := FilterString + '|' + ApprovalSharing."Owner User ID"
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE GetAppSharingToUserCompFilter@1160040011(_UserId@161024013 : Code[50];CompName@1160040000 : Text[50]) FilterString : Text[1024];
    VAR
      ApprovalSharing@161024012 : Record 6085749;
    BEGIN
      IF NOT FilterAppvlSharingToUserComp(ApprovalSharing,_UserId,CompName) THEN
        EXIT('XXXXXXXXX');

      IF ApprovalSharing.FINDSET THEN
        REPEAT
          IF FilterString = '' THEN
            FilterString := ApprovalSharing."Owner User ID"
          ELSE
            FilterString := FilterString + '|' + ApprovalSharing."Owner User ID"
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE GetNoOfApprovalComments@161024019(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalCmt@1000000001 : Record 455;
    BEGIN
      ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalCmt.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalCmt.SETRANGE("Document No.",PurchHeader."No.");
      EXIT(ApprovalCmt.COUNT);
    END;

    PROCEDURE GetNoOfApprovalEntries@1000000035(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      EXIT(ApprovalEntry.COUNT);
    END;

    PROCEDURE GetOutOfOffice@161024021(ApproverId@161024014 : Code[50];VAR ForwardToApproverId@161024015 : Code[50];VAR FromDate@161024013 : Date;VAR ToDate@161024012 : Date) : Boolean;
    VAR
      ApprovalSharing@161024016 : Record 6085749;
    BEGIN
      ApprovalSharing.SETRANGE("Owner User ID",ApproverId);
      ApprovalSharing.SETRANGE("Sharing Type",ApprovalSharing."Sharing Type"::"Out of Office");

      IF NOT ApprovalSharing.FINDFIRST THEN
        EXIT(FALSE);

      ForwardToApproverId := ApprovalSharing."Shared to User ID";
      FromDate := ApprovalSharing."Valid From";
      ToDate := ApprovalSharing."Valid To";
      EXIT(TRUE);
    END;

    PROCEDURE CreateAndInsertApprovalEntry@4(TableID@1003 : Integer;DocType@1000 : Integer;DocNo@1001 : Code[20];ApproverID@1007 : Code[50];WorkflowStepInstanceID@6085573 : GUID) : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
      ApprovalEntry@1006 : Record 454;
      PurchHeader@1002 : Record 38;
      RecRef@1004 : RecordRef;
    BEGIN
      IF NOT DCSetup.GET THEN
        EXIT;

      IF TableID = DATABASE::"Purchase Header" THEN BEGIN
        PurchHeader.GET(DocType,DocNo);
        RecRef.GETTABLE(PurchHeader);
        DCApprovalsBridge.InitializeApprovalEntry(RecRef,ApprovalEntry,WorkflowStepInstanceID);
        MakeApprovalEntry(ApprovalEntry,0,ApproverID);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE MakeApprovalEntry@23(VAR ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50]);
    VAR
      ApprovalEntry@1002 : Record 454;
      ContiniaVersionMgt@6085573 : Codeunit 6192775;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        IF SequenceNo = 0 THEN
          SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument) + 1;

        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := GetCurrUserID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Original Approver ID" := "Approver ID";
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := GetCurrUserID;
        "Due Date" := DCApprovalsBridge.GetApprovalDueDate;

        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";

        ApprovalEntry."Advanced Approval" := ApprovalEntryArgument."Advanced Approval";
        ApprovalEntry."Approval Type" := DCApprovalsBridge.GetApprovalType();
        ApprovalEntry."Limit Type" := DCApprovalsBridge.GetLimitType();
        "Approval Code" := ApprovalEntryArgument."Approval Code";

        IF ContiniaVersionMgt.NAVVersion < 90000 THEN
          "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";

        IF "Table ID" <> DATABASE::"Purchase Header" THEN
          EXIT;

        DCApprovalsBridge.FinishApprovalEntry(ApprovalEntry,ApprovalEntryArgument);
        UpdateApprovalEntry(ApprovalEntry);
        DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry);
        ApprovalEntryArgument := ApprovalEntry;
      END;
    END;

    PROCEDURE UpdateApprovalEntry@3(VAR ApprovalEntry@1000 : Record 454);
    VAR
      PurchHeader@1010 : Record 38;
      ImportedAmountExclVAT@1006 : Decimal;
      ImportedAmountInclVAT@1005 : Decimal;
      AssignedAmountExclVAT@1004 : Decimal;
      AssignedAmountInclVAT@1003 : Decimal;
      ImportedAmountExclVATLCY@1002 : Decimal;
      ImportedAmountInclVATLCY@1001 : Decimal;
      TempAmount1@6085574 : Decimal;
      TempAmount2@6085573 : Decimal;
    BEGIN
      ApprovalEntry."Original Approver ID" := ApprovalEntry."Approver ID";

      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      WITH ApprovalEntry DO BEGIN
        PurchHeader.GET("Document Type","Document No.");

        IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
          PurchDocMgt.GetPurchStatusAmounts3(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,
            AssignedAmountInclVAT,TempAmount1,TempAmount2,TRUE);
          IF ImportedAmountExclVAT < AssignedAmountExclVAT THEN BEGIN
            // ALWAYS USE THE HIGHEST AMOUNT
            ImportedAmountExclVAT := AssignedAmountExclVAT;
            ImportedAmountInclVAT := AssignedAmountInclVAT;
          END;
        END ELSE BEGIN
          AssignedAmountExclVAT := Amount;
          AssignedAmountInclVAT := "Amount (LCY)";
        END;

        IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN // Needed in 9.0.
          IF (("Approver ID" = GetCurrUserID) OR ("Sender ID" = "Approver ID")) AND (NOT (("Table ID" = DATABASE::"Purchase Header") AND
              ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])))
          THEN
            Status := Status::Approved
          ELSE
            Status := Status::Created;

        IF ImportedAmountExclVAT = 0 THEN BEGIN
          ImportedAmountExclVAT := AssignedAmountExclVAT;
          ImportedAmountInclVAT := AssignedAmountInclVAT;
        END;

        IF PurchHeader."Currency Factor" = 0 THEN
          PurchHeader."Currency Factor" := 1;

        ImportedAmountExclVATLCY := ROUND(ImportedAmountExclVAT / PurchHeader."Currency Factor");
        ImportedAmountInclVATLCY := ROUND(ImportedAmountInclVAT / PurchHeader."Currency Factor");

        Amount := ImportedAmountExclVAT;
        "Amount Incl. VAT" := ImportedAmountInclVAT;
        "Amount (LCY)" := ImportedAmountExclVATLCY;
        "Amount Incl. VAT (LCY)" := ImportedAmountInclVATLCY;
      END;
    END;

    PROCEDURE ManuallyEditAppvlEntry@161024034(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalEntry2@161024013 : Record 454;
      ContiniaUserSetup@1160040000 : Record 6086002;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD("Approver ID");

      ApprovalEntry2 := ApprovalEntry;
      IF NOT ApprovalEntry2.FIND THEN
        EXIT;

      IF ApprovalEntry2."Approver ID" = ApprovalEntry."Approver ID" THEN
        EXIT;

      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Created]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);

      ContiniaUserSetup.GET(ApprovalEntry."Approver ID");

      IF ApprovalEntry2."Approver ID" <> '' THEN
        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text032,TRUE,ApprovalEntry.FIELDCAPTION("Approver ID"),ApprovalEntry."Approver ID") THEN
            ERROR('');

      ApprovalEntry2.LOCKTABLE;
      ApprovalEntry2.FIND;
      IF ApprovalEntry2."Approver ID" <> ApprovalEntry."Approver ID" THEN BEGIN
        ApprovalCmtMgt.AddCommentForAppvlEntry(ApprovalEntry,GetCurrUserID,
          STRSUBSTNO(Text035,RemoveDomainName(ApprovalEntry2."Approver ID"),RemoveDomainName(ApprovalEntry."Approver ID")));
        ApprovalEntry2."Approver ID" := ApprovalEntry."Approver ID";
        ApprovalEntry2.MODIFY;
      END;
    END;

    PROCEDURE ManuallyDeleleteAppvlEntry@161024035(ApprovalEntry@161024012 : Record 454);
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD(Status,ApprovalEntry.Status::Created);

      ApprovalEntry.DELETE(TRUE);

      ApprovalCmtMgt.AddCommentForAppvlEntry(ApprovalEntry,GetCurrUserID,
        STRSUBSTNO(Text036,RemoveDomainName(ApprovalEntry."Approver ID")));
    END;

    PROCEDURE PutOnHold@161024049(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalEntry@161024017 : Record 454;
      AppvlReasonCode@1160040000 : Record 6085773;
      RecRef@1160040002 : RecordRef;
      ReasonCode@1160040001 : Code[10];
    BEGIN
      RecRef.GETTABLE(PurchHeader);
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);
      ApprovalCmtMgt.RequestCommentForPurchHeader(PurchHeader,STRSUBSTNO('%1 %2',PurchHeader."Document Type",PurchHeader."No."),
        AppvlReasonCode.Type::"Put on Hold",ReasonCode);

      IF ReasonCode <> '' THEN BEGIN
        PurchHeader.VALIDATE("Reason Code",ReasonCode);
        CASE PurchHeader."Document Type" OF
          PurchHeader."Document Type"::Invoice:
            ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,
              STRSUBSTNO(InvoicePutOnHoldReasonTxt,PurchHeader.FIELDCAPTION("Reason Code"),ReasonCode,GetReasonCodeDesc(ReasonCode)));
          PurchHeader."Document Type"::"Credit Memo":
            ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,
              STRSUBSTNO(CrMemoPutOnHoldReasonTxt,PurchHeader.FIELDCAPTION("Reason Code"),ReasonCode,GetReasonCodeDesc(ReasonCode)));
        END;
      END;
      PurchHeader."On Hold" := COPYSTR(RemoveDomainName(GetCurrUserID),1,MAXSTRLEN(PurchHeader."On Hold"));
      PurchHeader.MODIFY(TRUE);

      IF GUIALLOWED THEN
        MESSAGE(Text024,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE RemoveOnHold@161024051(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalEntry@161024013 : Record 454;
      ModifyHeader@1160040000 : Boolean;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);

      IF IsDCReasonCode(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."Reason Code") THEN BEGIN
        PurchHeader.VALIDATE("Reason Code",'');
        ModifyHeader := TRUE;
      END;

      IF PurchHeader."On Hold" <> '' THEN BEGIN
        PurchHeader."On Hold" := '';
        ModifyHeader := TRUE;
      END;

      IF ModifyHeader THEN
        PurchHeader.MODIFY(TRUE);

      IF GUIALLOWED THEN
        MESSAGE(Text025,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE SendApprovalEmails@161024015();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch. Approval E-Mail");
    END;

    PROCEDURE SetOutOfOffice@161024023(ApproverId@161024012 : Code[50];ForwardToApproverId@161024015 : Code[50];FromDate@161024013 : Date;ToDate@161024014 : Date);
    VAR
      ApprovalSharing@161024016 : Record 6085749;
    BEGIN
      ApprovalSharing.SETRANGE("Owner User ID",ApproverId);
      ApprovalSharing.SETRANGE("Sharing Type",ApprovalSharing."Sharing Type"::"Out of Office");
      ApprovalSharing.DELETEALL(TRUE);

      IF ForwardToApproverId = '' THEN
        EXIT;

      ApprovalSharing."Owner User ID" := ApproverId;
      ApprovalSharing."Sharing Type" := ApprovalSharing."Sharing Type"::"Out of Office";
      ApprovalSharing."Valid From" := FromDate;
      ApprovalSharing."Valid To" := ToDate;
      ApprovalSharing."Shared to User ID" := ForwardToApproverId;
      ApprovalSharing."Forward E-mails" := TRUE;
      ApprovalSharing."Use Owners Limts & Permissions" := TRUE;
      ApprovalSharing."Copy to All Companies" := TRUE;
      ApprovalSharing.INSERT(TRUE);
    END;

    PROCEDURE ShowPurchDocFromApprEntry@161024024(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        FilterPurchHeaderForApprover(ApprovalEntry."Document Type",ApprovalEntry."Approver ID",PurchHeader);
        IF NOT PurchHeader.GET("Document Type","Document No.") THEN
          EXIT;
        CASE "Document Type" OF
          "Document Type"::Quote:
            PAGE.RUN(PAGE::"Purchase Quote",PurchHeader);
          "Document Type"::Order:
            PAGE.RUN(PAGE::"Purchase Order",PurchHeader);
          "Document Type"::Invoice:
            PAGE.RUNMODAL(PAGE::"Purch. Invoice With Image",PurchHeader);
          "Document Type"::"Credit Memo":
            PAGE.RUNMODAL(PAGE::"Purch. Credit Memo With Image",PurchHeader);
          "Document Type"::"Blanket Order":
            PAGE.RUN(PAGE::"Blanket Purchase Order",PurchHeader);
          "Document Type"::"Return Order":
            PAGE.RUN(PAGE::"Purchase Return Order",PurchHeader);
        END;
      END;
    END;

    PROCEDURE UpdateApprvlEntriesByApprover@161024031(VAR Entries@161024013 : TEMPORARY Record 6085738);
    VAR
      ApprovalEntry@161024012 : Record 454;
      PurchHeader@1160040000 : Record 38;
      Window@161024017 : Dialog;
      RecCount@161024018 : Integer;
      i@161024019 : Integer;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Approver ID",Status);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDSET THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          RecCount := ApprovalEntry.COUNT;
          Window.OPEN(Text030);
        END;

        REPEAT
          ApprovalEntry.SETRANGE("Approver ID",ApprovalEntry."Approver ID");

          Entries.INIT;
          Entries."Approver ID" := ApprovalEntry."Approver ID";
          Entries.Name := GetApproverDisplayName(ApprovalEntry."Approver ID");
          Entries.INSERT;

          IF GUIALLOWED THEN BEGIN
            i := i + ApprovalEntry.COUNT;
            Window.UPDATE(1,ROUND(i / RecCount * 10000,1,'>'));
          END;

          ApprovalEntry.FINDLAST;
          ApprovalEntry.SETRANGE("Approver ID");
        UNTIL ApprovalEntry.NEXT = 0;

        Entries.SETFILTER("Due Date Filter",'<%1',TODAY);
        IF Entries.FINDFIRST THEN;

        IF GUIALLOWED THEN
          Window.CLOSE;
      END;
    END;

    PROCEDURE UpdAppEntryIfCanAppEntry@161024022(VAR ApprovalEntry@161024012 : Record 454) : Boolean;
    VAR
      ApprovalEntry2@161024014 : Record 454;
      ApprovalSharing@161024016 : Record 6085749;
      UserSetup@161024017 : Record 91;
      ApprovalWithOwnerLimits@1160040002 : Boolean;
      ApprovalWithApproverLimits@1160040003 : Boolean;
    BEGIN
      IF ApprovalEntry."Approver ID" = GetCurrUserID THEN
        EXIT(TRUE);

      FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
      ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
      ApprovalSharing.SETRANGE("Use Owners Limts & Permissions",TRUE);
      ApprovalWithOwnerLimits := NOT ApprovalSharing.ISEMPTY;

      ApprovalSharing.SETRANGE("Use Owners Limts & Permissions",FALSE);
      ApprovalWithApproverLimits := NOT ApprovalSharing.ISEMPTY;

      IF ApprovalWithOwnerLimits OR ApprovalWithApproverLimits THEN BEGIN
        CASE TRUE OF
          ApprovalWithOwnerLimits AND ApprovalWithApproverLimits:
            ApprovalEntry."Approved using Pms. of" := ApprovalEntry."Approved using Pms. of"::"Both Approver and Owner";
          ApprovalWithOwnerLimits:
            ApprovalEntry."Approved using Pms. of" := ApprovalEntry."Approved using Pms. of"::Owner;
          ApprovalWithApproverLimits:
            ApprovalEntry."Approved using Pms. of" := ApprovalEntry."Approved using Pms. of"::Approver;
        END;

        ApprovalEntry."Owner Approver ID" := ApprovalEntry."Approver ID";
        ApprovalEntry.MODIFY;

        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LastIndexOf@1160040005(Text@161024012 : Text[1024];CharToFind@161024013 : Text[1];IgnoreCase@161024014 : Boolean) : Integer;
    VAR
      StartIndex@161024015 : Integer;
    BEGIN
      IF IgnoreCase THEN BEGIN
        Text := UPPERCASE(Text);
        CharToFind := UPPERCASE(CharToFind);
      END;

      StartIndex := STRLEN(Text);
      WHILE StartIndex > 0 DO BEGIN
        IF COPYSTR(Text,StartIndex,1) = CharToFind THEN
          EXIT(StartIndex)
        ELSE
          StartIndex -= 1;
      END;
    END;

    PROCEDURE PurchDocSubmittingForApproval@161024029(VAR PurchHeader@1000 : Record 38) : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
      PurchSetup@1160040006 : Record 312;
      Document@161024017 : Record 6085590;
      Template@1160040001 : Record 6085579;
      CEDO@1160040003 : Codeunit 6085800;
      DCDimensionHandling@6085578 : Codeunit 6085793;
      ImportedAmountExclVAT@161024012 : Decimal;
      ImportedAmountInclVAT@161024014 : Decimal;
      AssignedAmountExclVAT@161024015 : Decimal;
      AssignedAmountInclVAT@161024016 : Decimal;
      AmountValidatation@1160040002 : Integer;
      AmtExclVATTest@1160040004 : Boolean;
      AmtInclVATTest@1160040005 : Boolean;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when a purchase document is being submitted and BEFORE approval entries are created
      // *********************************************************************************************************************************
      DCSetup.GET;
      IF DCSetup."Check Dim. Submit for Approval" THEN
        DCDimensionHandling.CheckDimensions(PurchHeader);

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      // Get the Approval Amount Validatation from either the DC Template, or from the eDocuments Vendor Setup Card
      IF PurchDocMgt.GetPurchaseDocument(PurchHeader,Document) THEN BEGIN
        Template.GET(Document."Template No.");
        AmountValidatation := Template."Amount Validation";
      END ELSE
        IF NOT CEDO.GetApprovalAmtVal(PurchHeader,AmountValidatation) THEN
          EXIT;

      // Get the imported amounts from either the DC Document, or from the imported eDocument
      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,
        AssignedAmountExclVAT,AssignedAmountInclVAT);

      PurchSetup.GET;
      AmtExclVATTest := TestAmtExclVAT(AmountValidatation,ImportedAmountExclVAT,AssignedAmountExclVAT,PurchHeader."Currency Code",
        PurchSetup."Invoice Rounding");
      AmtInclVATTest := TestAmtInclVAT(AmountValidatation,ImportedAmountInclVAT,AssignedAmountInclVAT,PurchHeader."Currency Code");

      IF GUIALLOWED THEN
        IF AmtExclVATTest OR AmtInclVATTest THEN
          IF NOT (CONFIRM(DiffBtwAsgnAndImpAmtMsg1 + DiffBtwAsgnAndImpAmtMsg2 + SubmitForApprovalQst,TRUE,
            FormatAmount(ImportedAmountInclVAT,PurchHeader."Currency Code"),
            FormatAmount(AssignedAmountInclVAT,PurchHeader."Currency Code"),
            FormatAmount(ImportedAmountInclVAT - ImportedAmountExclVAT,PurchHeader."Currency Code"),
            FormatAmount(AssignedAmountInclVAT - AssignedAmountExclVAT,PurchHeader."Currency Code"),
            FormatAmount(ImportedAmountExclVAT,PurchHeader."Currency Code"),
            FormatAmount(AssignedAmountExclVAT,PurchHeader."Currency Code")))
          THEN
            ERROR('');

      IF (ImportedAmountExclVAT <> 0) AND (ImportedAmountExclVAT > AssignedAmountExclVAT) THEN
        CreateTempPurchLineForApproval(PurchHeader,ImportedAmountExclVAT - AssignedAmountExclVAT)
      ELSE
        EXIT(AutoApprove(PurchHeader));
    END;

    PROCEDURE PurchDocSubmittedForApproval@161024038(VAR PurchHeader@1000 : Record 38) : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
      ArchiveMgt@1160040001 : Codeunit 5063;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when a purchase document is being submitted and AFTER approval entries are created
      // *********************************************************************************************************************************
      PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      DeleteTempPurchLineForApproval(PurchHeader);

      PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");
      IF IsDCReasonCode(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."Reason Code") THEN BEGIN
        PurchHeader.VALIDATE("Reason Code",'');
        PurchHeader.MODIFY(TRUE);
      END;

      DCSetup.GET;
      IF DCSetup."Arch. Doc. on Approv. and Reg." THEN
        ArchiveMgt.StorePurchDocument(PurchHeader,FALSE);

      IF NOT DCApprovalsBridge.IsPurchDocApproved(PurchHeader) THEN
        PostAllocations(PurchHeader);

      EXIT(DCApprovalsBridge.IsPurchDocApproved(PurchHeader));
    END;

    LOCAL PROCEDURE CreateTempPurchLineForApproval@17(PurchHeader@1001 : Record 38;Amount@1002 : Decimal);
    VAR
      PurchLine@1000 : Record 39;
      NextLineNo@1003 : Integer;
    BEGIN
      // there is a difference between the imported amount and the amount on the lines. When identifying the approvers we need to make
      // sure that approvers with with a correct approval limit is found based on the imported amount. Therefore, a temp. purchase
      // line is created to make sure that the total of the lines correspond to the imported amount. This line will be deleted afterwards
      // in the PurchDocSubmittedForApproval - that is after the standard has found the approvers based on the line totals
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FINDLAST THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      PurchLine.SuspendStatusCheck(TRUE);
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine."Document No." := PurchHeader."No.";
      PurchLine."Line No." := NextLineNo;
      PurchLine.Type := PurchLine.Type::"G/L Account";
      PurchLine."No." := 'CDC';
      PurchLine.Quantity := 1;
      PurchLine."Direct Unit Cost" := Amount;
      PurchLine."System-Created Entry" := TRUE;
      PurchLine.INSERT;
    END;

    LOCAL PROCEDURE DeleteTempPurchLineForApproval@28(PurchHeader@1000 : Record 38);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE(Type,PurchLine.Type::"G/L Account");
      PurchLine.SETRANGE("No.",'CDC');
      PurchLine.SETRANGE("System-Created Entry",TRUE);
      IF PurchLine.FINDFIRST THEN
        PurchLine.DELETE;
    END;

    PROCEDURE RemoveDomainName@1160040003(UserName@1160040000 : Code[250]) : Text[250];
    BEGIN
      IF STRPOS(UserName,'\') = 0 THEN
        EXIT(UserName);

      EXIT(COPYSTR(UserName,LastIndexOf(UserName,'\',TRUE)+1));
    END;

    PROCEDURE GetCurrUserID@11() : Code[50];
    BEGIN
      EXIT(DCApprovalsBridge.GetCurrentUser);
    END;

    PROCEDURE SetCurrUserID@10(NewCurrentUserID@1000 : Code[50]);
    BEGIN
      DCApprovalsBridge.SetCurrentUser(NewCurrentUserID);
    END;

    PROCEDURE IsExpenseApproval@15(ApprovalEntry@1000 : Record 454) : Boolean;
    BEGIN
      EXIT(ApprovalEntry."Table ID" IN [6086320,   // Expense
                                        6086338,   // Mileage
                                        6086339]); // Settlement
    END;

    PROCEDURE CheckPurchaseApprovalRequest@161024036(VAR ApprovalEntry@161024012 : Record 454;VAR PurchHeader@1160040006 : Record 38;ShowConfirmation@1000 : Boolean);
    VAR
      PurchLine@1160040000 : Record 39;
      ApprovalEntry2@161024020 : Record 454;
      PurchHeaderDCInfo@1160040008 : Record 6085767;
      DCSetup@161024018 : Record 6085573;
      GLSetup@6085577 : Record 98;
      Document@161024021 : Record 6085590;
      UserSetup@1160040005 : Record 91;
      UserSetup2@1160040004 : Record 91;
      CEDO@1160040011 : Codeunit 6085800;
      DCDimensionHandling@6085587 : Codeunit 6085793;
      HasMoreApprovers@1002 : Boolean;
      ModifyHeader@1160040001 : Boolean;
      AmountApprovelOK@1160040010 : Boolean;
      CheckAmounts@1160040002 : Boolean;
      FourEyesApprover1@1160040009 : Code[50];
      FourEyesApprover2@1160040007 : Code[50];
      ImportedAmountExclVAT@161024016 : Decimal;
      ImportedAmountInclVAT@161024015 : Decimal;
      AssignedAmountExclVAT@161024014 : Decimal;
      AssignedAmountInclVAT@161024013 : Decimal;
      AssignedAmountExclVATLCY@6085576 : Decimal;
      AssignedAmountInclVATLCY@6085573 : Decimal;
      MessageText@1004 : Text[1024];
      Question@1160040003 : Text[1024];
      AmtApprovalValidatation@1160040012 : Integer;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      DCSetup.GET;

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("No.",'');
      PurchLine.SETFILTER(Quantity,'<>%1',0);
      IF PurchLine.FINDFIRST THEN
        PurchLine.TESTFIELD("No.");

      HasMoreApprovers := GetHasMoreApprovers(ApprovalEntry);

      IF (DCSetup."Check Dimensions on Approval" = DCSetup."Check Dimensions on Approval"::"Every Approval") OR
        ((DCSetup."Check Dimensions on Approval" = DCSetup."Check Dimensions on Approval"::"Last Approval") AND (NOT HasMoreApprovers))
      THEN
        DCDimensionHandling.CheckDimensions(PurchHeader);

      PurchDocMgt.GetPurchStatusAmounts2(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,
        AssignedAmountExclVAT,AssignedAmountInclVAT,AssignedAmountExclVATLCY,AssignedAmountInclVATLCY);

      WITH ApprovalEntry DO
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      HasMoreApprovers := ApprovalEntry2.FINDFIRST;

      IF NOT ApprovalEntry."Forced Approval" THEN
        IF NOT UpdAppEntryIfCanAppEntry(ApprovalEntry) THEN
          ERROR(STRSUBSTNO(CannotApproveAppEntryErr,LOWERCASE(FORMAT(PurchHeader."Document Type"))));

      IF NOT ApprovalEntry."Forced Approval" THEN
        IF (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) = '') AND NOT ApprovalEntry."Advanced Approval" THEN BEGIN
          IF (NOT HasMoreApprovers) AND (DCSetup."Purch: 4-eyes Approval" <> DCSetup."Purch: 4-eyes Approval"::"Not Required")
          THEN BEGIN
            ApprovalEntry2.RESET;

            WITH ApprovalEntry DO
              FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

            ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Approved);
            ApprovalEntry2.SETFILTER("Approver ID",'<>%1',GetCurrUserID);

            IF DCSetup."Purch: 4-eyes Approval" = DCSetup."Purch: 4-eyes Approval"::Required THEN BEGIN
              IF ApprovalEntry2.ISEMPTY THEN
                ERROR(FourEyesApprovalReqErr,LOWERCASE(FORMAT(ApprovalEntry."Document Type")));
            END ELSE BEGIN
              UserSetup.GET(GetCurrUserID);
              IF (UserSetup."Purchase Amount Approval Limit" >= AssignedAmountExclVATLCY) OR UserSetup."Unlimited Purchase Approval"
              THEN
                FourEyesApprover1 := UserSetup."User ID";

              IF ApprovalEntry2.FINDFIRST THEN
                REPEAT
                  IF UserSetup.GET(ApprovalEntry2."Approver ID") THEN BEGIN
                    IF (UserSetup."Purchase Amount Approval Limit" >= AssignedAmountExclVATLCY) OR
                      UserSetup."Unlimited Purchase Approval"
                    THEN BEGIN
                      IF FourEyesApprover1 = '' THEN
                        FourEyesApprover1 := UserSetup."User ID"
                      ELSE
                        FourEyesApprover2 := UserSetup."User ID";
                    END;
                  END;
                UNTIL (ApprovalEntry2.NEXT = 0) OR ((FourEyesApprover1 <> '') AND (FourEyesApprover2 <> ''));

                IF (FourEyesApprover1 = '') OR (FourEyesApprover2 = '') THEN
                  ERROR(FourEyesApprovalReqFullErr,LOWERCASE(FORMAT(ApprovalEntry."Document Type")));
            END;
          END;

          IF NOT HasMoreApprovers THEN BEGIN
            ApprovalEntry2.RESET;

            WITH ApprovalEntry DO
              FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);

            ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Approved);
            ApprovalEntry2.FINDFIRST;
            REPEAT
              CASE ApprovalEntry2."Approved using Pms. of" OF
                ApprovalEntry2."Approved using Pms. of"::Approver:
                  BEGIN
                    UserSetup.GET(ApprovalEntry2."Approver ID");
                    CLEAR(UserSetup2);
                  END;
                ApprovalEntry2."Approved using Pms. of"::Owner:
                  BEGIN
                    UserSetup.GET(ApprovalEntry2."Owner Approver ID");
                    CLEAR(UserSetup2);
                  END;
                ApprovalEntry2."Approved using Pms. of"::"Both Approver and Owner":
                  BEGIN
                    UserSetup.GET(ApprovalEntry2."Approver ID");
                    UserSetup2.GET(ApprovalEntry2."Owner Approver ID");
                  END;
              END;

              IF UserSetup."Unlimited Purchase Approval" OR (UserSetup."Purchase Amount Approval Limit" >= AssignedAmountExclVATLCY) OR
                UserSetup2."Unlimited Purchase Approval" OR (UserSetup2."Purchase Amount Approval Limit" >= AssignedAmountExclVATLCY)
              THEN
                AmountApprovelOK := TRUE;
            UNTIL (ApprovalEntry2.NEXT = 0) OR AmountApprovelOK;

            IF NOT AmountApprovelOK THEN
              ERROR(MissingAmountApprovelErr,LOWERCASE(FORMAT(ApprovalEntry."Document Type")),AssignedAmountExclVAT);
          END;
        END;

      IF (DCSetup."Check Amounts on Approval" = DCSetup."Check Amounts on Approval"::"Every Approval") OR
        ((DCSetup."Check Amounts on Approval" = DCSetup."Check Amounts on Approval"::"Last Approval") AND (NOT HasMoreApprovers))
      THEN BEGIN
        IF PurchDocMgt.GetPurchaseDocument(PurchHeader,Document) THEN BEGIN
          IF Document."Template No." <> '' THEN
            CheckAmounts := TRUE
        END ELSE
          IF CEDO.GetApprovalAmtVal(PurchHeader,AmtApprovalValidatation) THEN
            CheckAmounts := TRUE;

        IF CheckAmounts THEN BEGIN
          MessageText := CheckPurchDocAmtAgainstImpAmt(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,
            AssignedAmountInclVAT);

          IF MessageText <> '' THEN BEGIN
            IF ShowConfirmation AND GUIALLOWED AND IsApprovalAdminUser(FALSE) THEN BEGIN
              MessageText := MessageText + Text018;
              IF NOT CONFIRM(MessageText,FALSE) THEN
                ERROR('');
            END ELSE
              ERROR(MessageText);
          END;
        END;
      END;

      IF IsDCReasonCode(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."Reason Code") THEN BEGIN
        PurchHeader.VALIDATE("Reason Code",'');
        ModifyHeader := TRUE;
      END;

      IF GUIALLOWED AND (PurchHeader."On Hold" <> '') THEN BEGIN
        CASE PurchHeader."Document Type" OF
          PurchHeader."Document Type"::Invoice:
            Question := RemoveInvOnHoldQuestion;
          PurchHeader."Document Type"::"Credit Memo":
            Question := RemoveCrMemoOnHoldQuestion;
        END;

        IF Question <> '' THEN
          IF CONFIRM(Question,TRUE) THEN BEGIN
            PurchHeader."On Hold" := '';
            ModifyHeader := TRUE;
            ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,OnHoldRemovedWhenApprovingTxt);
          END ELSE
            ApprovalCmtMgt.AddCommentForPurchHeader(PurchHeader,GetCurrUserID,OnHoldKeptWhenApprovingTxt);
      END;

      IF ModifyHeader THEN
        PurchHeader.MODIFY;
    END;

    PROCEDURE IsApprovalAdminUser@161024028(ShowError@161024014 : Boolean) : Boolean;
    VAR
      DCSetup@161024019 : Record 6085573;
      AccessControl@161024013 : Record 2000000053;
      AppAdminPermCheck@161024018 : Record 6085734;
      User@6085574 : Record 2000000120;
    BEGIN
      IF AppAdminPermCheck.WRITEPERMISSION THEN
        EXIT(TRUE);

      IF NOT DCSetup.GET THEN
        EXIT(TRUE);

      DCSetup.TESTFIELD("Approval Administrator Role ID");

      User.SETCURRENTKEY("User Name");
      User.SETRANGE("User Name",GetCurrUserID);
      IF ShowError THEN
        User.FINDFIRST
      ELSE
        IF NOT User.FINDFIRST THEN
          EXIT(FALSE);

      IF AccessControl.GET(User."User Security ID",DCSetup."Approval Administrator Role ID") THEN
        EXIT(TRUE);

      IF AccessControl.GET(User."User Security ID",DCSetup."Approval Administrator Role ID",COMPANYNAME) THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text013,DCSetup."Approval Administrator Role ID");
    END;

    PROCEDURE GetApprovalHyperlink@6085576(_UserId@161024017 : Code[50]) Url : Text[1024];
    VAR
      ContiniaCompanySetup@6085576 : Record 6192773;
      ContiniaWebPortal@6085575 : Record 6192774;
      ContiniaUserSetup@161024018 : Record 6086002;
      ActiveSession@6085573 : Record 2000000110;
      ServerInstance@6085574 : Record 2000000112;
    BEGIN
      ContiniaCompanySetup.GET;

      IF ContiniaUserSetup.GET(_UserId) AND ContiniaUserSetup."Web Approval User" THEN BEGIN
        ContiniaCompanySetup.TESTFIELD("Web Portal Code");
        ContiniaWebPortal.GET(ContiniaCompanySetup."Web Portal Code");

        IF ContiniaCompanySetup."Company Code" <> '' THEN
          EXIT(STRSUBSTNO('%1/%2/purchase/approval',ContiniaWebPortal."Web Site Url",LOWERCASE(ContiniaCompanySetup."Company Code")))
        ELSE
          EXIT(STRSUBSTNO('%1/default/purchase/approval',ContiniaWebPortal."Web Site Url"));
      END;

      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      ServerInstance.GET(ActiveSession."Server Instance ID");

      Url := STRSUBSTNO('DynamicsNAV://%1:%2/%3/%4/runpage?page=%5',
        ServerInstance."Server Computer Name",ServerInstance."Server Port",
        ServerInstance."Server Instance Name",COMPANYNAME,6085710);

      IF ContiniaWebPortal.Tenant <> '' THEN
        Url := Url + '&tenant=' + ContiniaWebPortal.Tenant;
    END;

    PROCEDURE AutoApprove@18(VAR PurchHeader@1025 : Record 38) : Boolean;
    VAR
      Document@1014 : Record 6085590;
      Template@1013 : Record 6085579;
      PurchOrderHeader@1160040004 : Record 38;
      PurchLine@1160040005 : Record 39;
      PurchLine2@6085573 : Record 39;
      PurchLineRel@1160040006 : Record 6085702;
      PurchRcptLine@6085574 : Record 121;
      ReturnShptLine@6085575 : Record 6651;
      DocumentAmount@1005 : Decimal;
      MatchAmount@1004 : Decimal;
      ImportedAmountExclVAT@1160040000 : Decimal;
      ImportedAmountInclVAT@1160040001 : Decimal;
      AssignedAmountExclVAT@1160040002 : Decimal;
      AssignedAmountInclVAT@1160040003 : Decimal;
      OrdersFullyApproved@1160040007 : Boolean;
      TempText@1160040008 : Text[1024];
    BEGIN
      IF NOT PurchDocMgt.GetPurchaseDocument(PurchHeader,Document) THEN
        EXIT;

      IF NOT Template.GET(Document."Template No.") THEN
        EXIT;

      IF NOT Template."Purch. Auto App. within Var." THEN
        EXIT;

      IF NOT PurchDocMgt.IsPurchDocMatched(PurchHeader) THEN
        EXIT;

      PurchDocMgt.GetPurchDocMatchedAmount(PurchHeader,DocumentAmount,MatchAmount);
      IF NOT PurchDocMgt.MatchWithinTolerance(Template,PurchHeader."Posting Date",PurchHeader."Currency Code",
        PurchHeader."Currency Factor",DocumentAmount,MatchAmount)
      THEN
        EXIT;

      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,
        AssignedAmountInclVAT);

      IF CheckPurchDocAmtAgainstImpAmt(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,
        AssignedAmountExclVAT,AssignedAmountInclVAT) <> ''
      THEN
        EXIT;

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");

      // Check that dimensions hasn't been changed between invoice and related PO or Receipt / Return Shipment
      IF PurchLine.FIND('-') THEN
        REPEAT
          IF PurchLine."Receipt No." <> '' THEN BEGIN
            PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
            IF NOT IsPurchLineDimEqualPurchRcptLn(PurchLine,PurchRcptLine) THEN BEGIN
              MESSAGE(AutoAppChangedDimsOnReceiptMsg,PurchHeader."Document Type",PurchHeader."No.",Document."No.");
              EXIT(FALSE);
            END;
          END ELSE BEGIN
            IF PurchLine."Return Shipment No." <> '' THEN BEGIN
              ReturnShptLine.GET(PurchLine."Return Shipment No.",PurchLine."Return Shipment Line No.");
              IF NOT IsPurchLineDimEqualRetShptLine(PurchLine,ReturnShptLine) THEN BEGIN
                MESSAGE(AutoAppChangedDimsOnRetShptMsg,PurchHeader."Document Type",PurchHeader."No.",Document."No.");
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF PurchLineRel.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN BEGIN
                PurchLine2.GET(PurchLineRel."Related Document Type",PurchLineRel."Related Document No.",
                  PurchLineRel."Related Line No.");
                IF NOT IsPurchLineDimEqualPurchLine(PurchLine,PurchLine2) THEN BEGIN
                  IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
                    TempText := STRSUBSTNO(AutoAppChangedDimsOnPOMsg,PurchHeader."Document Type",PurchHeader."No.",
                      Document."No.")
                  ELSE
                    TempText := STRSUBSTNO(AutoAppChangedDimsOnReturnMsg,PurchHeader."Document Type",PurchHeader."No.",
                      Document."No.");

                  MESSAGE(TempText);
                  EXIT(FALSE);
                END;
              END;
            END;
          END;
        UNTIL PurchLine.NEXT = 0;

      // Check Receipt
      // If approval has been enabled on purchase orders check that all the orders matched to this invoice has been fully approved.
      OrdersFullyApproved := TRUE;
      PurchLine.SETRANGE("Receipt No.",'');
      PurchLine.SETRANGE("Return Shipment No.",'');
      IF PurchLine.FIND('-') THEN
        REPEAT
          IF PurchLineRel.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN BEGIN
            PurchOrderHeader.GET(PurchLineRel."Related Document Type",PurchLineRel."Related Document No.");
            IF DCApprovalsBridge.IsPurchApprovalEnabled(PurchOrderHeader) THEN
              OrdersFullyApproved := DCApprovalsBridge.IsPurchDocApproved(PurchOrderHeader);
          END;
        UNTIL (PurchLine.NEXT = 0) OR (NOT OrdersFullyApproved);

      IF (NOT OrdersFullyApproved) THEN BEGIN
        IF IsApprovalAdminUser(FALSE) AND GUIALLOWED THEN BEGIN
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
            TempText := STRSUBSTNO(AutoApproveOnOpenOrderQuestion,PurchHeader."Document Type",PurchHeader."No.",Document."No.")
          ELSE
            TempText := STRSUBSTNO(AutoApproveOnOpenRetOrQuestion,PurchHeader."Document Type",PurchHeader."No.",Document."No.");

          IF NOT CONFIRM(TempText,FALSE) THEN
            EXIT(FALSE);
        END ELSE BEGIN
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
            TempText := STRSUBSTNO(AutoApproveOnOpenOrderErr,PurchHeader."Document Type",PurchHeader."No.",Document."No.")
          ELSE
            TempText := STRSUBSTNO(AutoApproveOnOpenRetOrErr,PurchHeader."Document Type",PurchHeader."No.",Document."No.");

          IF GUIALLOWED THEN BEGIN
            MESSAGE(TempText);
            EXIT(FALSE);
          END ELSE
            ERROR(TempText);
        END;
      END;

      ForceApproval(PurchHeader,FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE PostAllocations@19(VAR PurchHeader@1013 : Record 38);
    VAR
      DCSetup@1160040000 : Record 6085573;
      PurchAllocHeader@1012 : Record 6085730;
      PurchAllocHeader2@1011 : Record 6085730;
      PurchAllocLine@1010 : Record 6085731;
      HasAmount@1001 : Boolean;
      PurchAllocPosted@1000 : Boolean;
      ImportedAmountExclVAT@1160040003 : Decimal;
      ImportedAmountInclVAT@1160040002 : Decimal;
      AssignedAmountExclVAT@1160040001 : Decimal;
      AssignedAmountInclVAT@1160040004 : Decimal;
    BEGIN
      DCSetup.GET;
      IF NOT DCSetup."Auto. Post Purch. Allocation" THEN
        EXIT;

      PurchAllocHeader.SETCURRENTKEY("Document Type","Document No.");
      PurchAllocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchAllocHeader.SETRANGE("Document No.",PurchHeader."No.");
      PurchAllocHeader.SETFILTER(Status,'>%1',PurchAllocHeader.Status::Open);
      IF NOT PurchAllocHeader.ISEMPTY THEN
        EXIT;

      PurchAllocHeader.SETRANGE(Status);
      IF PurchAllocHeader.FINDSET(TRUE,FALSE) THEN
        REPEAT
          PurchAllocLine.SETRANGE("Document No.",PurchAllocHeader."No.");
          PurchAllocLine.SETFILTER(Amount,'>%1',0);
          IF NOT PurchAllocLine.ISEMPTY THEN BEGIN
            PurchAllocHeader2 := PurchAllocHeader;
            CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader2);
            PurchAllocPosted := TRUE;
          END;
        UNTIL PurchAllocHeader.NEXT = 0;

      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,
        AssignedAmountInclVAT);

      IF DCSetup."Purch. Alloc. Amounts to Use" = DCSetup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts" THEN
        HasAmount := (ImportedAmountExclVAT <> 0) OR (AssignedAmountExclVAT <> 0)
      ELSE
        HasAmount := ImportedAmountExclVAT <> 0;

      IF (NOT PurchAllocPosted) AND HasAmount THEN BEGIN
        IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice] THEN
          PurchHeader.TESTFIELD("Vendor Invoice No.")
        ELSE
          PurchHeader.TESTFIELD("Vendor Cr. Memo No.");

        PurchAllocHeader.INIT;
        PurchAllocHeader."No." := '';
        PurchAllocHeader.INSERT(TRUE);

        PurchAllocHeader.VALIDATE("Document Type",PurchHeader."Document Type");
        PurchAllocHeader.VALIDATE("Document No.",PurchHeader."No.");
        PurchAllocHeader."Pay-to IC Partner Code" := PurchHeader."Pay-to IC Partner Code";
        PurchAllocHeader.MODIFY(TRUE);

        PurchAllocHeader.AutoCreateLines;

        CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader);
      END;

      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Open);
      PurchAllocHeader.DELETEALL(TRUE);
    END;

    PROCEDURE CheckPurchDocAmtAgainstImpAmt@30(PurchHeader@1160040000 : Record 38;ImportedAmountExclVAT@1006 : Decimal;ImportedAmountInclVAT@1005 : Decimal;AssignedAmountExclVAT@1004 : Decimal;AssignedAmountInclVAT@1001 : Decimal) MessageText : Text[1024];
    VAR
      PurchSetup@1160040004 : Record 312;
      Template@1007 : Record 6085579;
      Document@1160040002 : Record 6085590;
      CEDO@1160040001 : Codeunit 6085800;
      AmtExclVATTest@1003 : Boolean;
      AmtInclVATTest@1002 : Boolean;
      AmountValidatation@1160040003 : Integer;
    BEGIN
      IF PurchDocMgt.GetPurchaseDocument(PurchHeader,Document) THEN BEGIN
        Template.GET(Document."Template No.");
        AmountValidatation := Template."Amount Validation";
      END ELSE
        IF NOT CEDO.GetApprovalAmtVal(PurchHeader,AmountValidatation) THEN
          EXIT;

      PurchSetup.GET;
      AmtExclVATTest := TestAmtExclVAT(AmountValidatation,ImportedAmountExclVAT,AssignedAmountExclVAT,PurchHeader."Currency Code",
        PurchSetup."Invoice Rounding");
      AmtInclVATTest := TestAmtInclVAT(AmountValidatation,ImportedAmountInclVAT,AssignedAmountInclVAT,PurchHeader."Currency Code");

      IF AmtExclVATTest THEN
        MessageText := Text014 + STRSUBSTNO(Text016,FormatAmount(ImportedAmountExclVAT,PurchHeader."Currency Code")) +
          STRSUBSTNO(Text017,FormatAmount(AssignedAmountExclVAT,PurchHeader."Currency Code"));

      IF AmtInclVATTest THEN BEGIN
        IF MessageText <> '' THEN
          MessageText := MessageText + '\';

        MessageText := MessageText + Text015 +
          STRSUBSTNO(Text016,FormatAmount(ImportedAmountInclVAT,PurchHeader."Currency Code")) +
          STRSUBSTNO(Text017,FormatAmount(AssignedAmountInclVAT,PurchHeader."Currency Code"));
      END;
    END;

    PROCEDURE CheckSalesDocAmtAgainstImpAmt@1160040018(SalesHeader@1160040000 : Record 36;ImportedAmountExclVAT@1006 : Decimal;ImportedAmountInclVAT@1005 : Decimal;AssignedAmountExclVAT@1004 : Decimal;AssignedAmountInclVAT@1001 : Decimal) MessageText : Text[1024];
    VAR
      SalesSetup@1160040001 : Record 311;
      Template@1007 : Record 6085579;
      Document@1160040002 : Record 6085590;
      AmtExclVATTest@1003 : Boolean;
      AmtInclVATTest@1002 : Boolean;
      AmountValidatation@1160040003 : Integer;
    BEGIN
      IF NOT PurchDocMgt.GetDocument(Document,DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.") THEN
        EXIT;

      Template.GET(Document."Template No.");
      AmountValidatation := Template."Amount Validation";

      SalesSetup.GET;
      AmtExclVATTest := TestAmtExclVAT(AmountValidatation,ImportedAmountExclVAT,AssignedAmountExclVAT,SalesHeader."Currency Code",
        SalesSetup."Invoice Rounding");
      AmtInclVATTest := TestAmtInclVAT(AmountValidatation,ImportedAmountInclVAT,AssignedAmountInclVAT,SalesHeader."Currency Code");

      IF AmtExclVATTest THEN
        MessageText := Text014 + STRSUBSTNO(Text016,FormatAmount(ImportedAmountExclVAT,SalesHeader."Currency Code")) +
          STRSUBSTNO(Text017,FormatAmount(AssignedAmountExclVAT,SalesHeader."Currency Code"));

      IF AmtInclVATTest THEN BEGIN
        IF MessageText <> '' THEN
          MessageText := MessageText + '\';

        MessageText := MessageText + Text015 +
          STRSUBSTNO(Text016,FormatAmount(ImportedAmountInclVAT,SalesHeader."Currency Code")) +
          STRSUBSTNO(Text017,FormatAmount(AssignedAmountInclVAT,SalesHeader."Currency Code"));
      END;
    END;

    PROCEDURE IsDCReasonCode@1160040007(TableID@1160040000 : Integer;DocType@1160040001 : Integer;ReasonCode@1160040002 : Code[10]) : Boolean;
    VAR
      EnabledReasonCode@1160040003 : Record 6085773;
    BEGIN
      EnabledReasonCode.SETRANGE("Table ID",TableID);
      EnabledReasonCode.SETRANGE("Document Type",DocType);
      EnabledReasonCode.SETRANGE("Reason Code",ReasonCode);
      EXIT(NOT EnabledReasonCode.ISEMPTY);
    END;

    PROCEDURE GetReasonCodeDesc@1160040002(ReasonCode@1160040000 : Code[10]) : Text[50];
    VAR
      Reason@1160040001 : Record 231;
    BEGIN
      IF Reason.GET(ReasonCode) THEN
        EXIT(Reason.Description);
    END;

    PROCEDURE AllowApprovePurchDoc@1(PurchHeader@1000 : Record 38) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
      UserFilter@1002 : Text;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);

      UserFilter := GetApprovalSharingToUserFilter(GetCurrUserID);
      IF UserFilter IN ['','XXXXXXXXX'] THEN
        ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID)
      ELSE
        ApprovalEntry.SETFILTER("Approver ID",GetCurrUserID + '|' + UserFilter);

      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE GetHasMoreApprovers@1160040004(ApprovalEntry@1160040001 : Record 454) : Boolean;
    VAR
      ApprovalEntry2@1160040000 : Record 454;
    BEGIN
      WITH ApprovalEntry DO
        FilterDocumentTypeAndNumber("Table ID","Document Type","Document No.",ApprovalEntry2);
      ApprovalEntry2.SETFILTER("Sequence No.",'<>%1',ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETFILTER(Status,'%1|%2',ApprovalEntry2.Status::Created,ApprovalEntry2.Status::Open);
      EXIT(NOT ApprovalEntry2.ISEMPTY);
    END;

    PROCEDURE CheckAccAndDimAppPms@6085595(VAR ApprovalEntry@6085595 : Record 454);
    VAR
      PurchHeader@1160040003 : Record 38;
      PurchLine@1160040005 : Record 39;
      DCSetup@1160040001 : Record 6085573;
    BEGIN
      IF NOT DCSetup.GET THEN
        EXIT;

      IF NOT DCSetup."Use Acc. and Dim. App. Pms." THEN
        EXIT;

      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      IF NOT PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
        EXIT;

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'>%1',PurchLine.Type::" ");
      PurchLine.SETFILTER("No.",'<>%1','');
      PurchLine.SETFILTER(Quantity,'<>%1',0);
      IF PurchLine.FINDSET THEN
        REPEAT
          IF NOT HasPurchLineBeenAccAndDimApp2(PurchHeader,PurchLine,ApprovalEntry."Workflow Step Instance ID") THEN
            ERROR(PurchLineNotApprovedErr,PurchLine.TABLECAPTION,
              PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
              PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
              PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE HasPurchLineBeenAccAndDimApp@6085585(PurchLine@1160040000 : Record 39;WorkflowStepInstanceID@6085573 : GUID) : Boolean;
    VAR
      PurchHeader@1160040001 : Record 38;
    BEGIN
      IF NOT PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.") THEN
        EXIT(FALSE);

      EXIT(HasPurchLineBeenAccAndDimApp2(PurchHeader,PurchLine,WorkflowStepInstanceID));
    END;

    PROCEDURE HasPurchLineBeenAccAndDimApp2@6085591(PurchHeader@1160040001 : Record 38;PurchLine@1160040000 : Record 39;WorkflowStepInstanceID@6085573 : GUID) : Boolean;
    VAR
      PurchLineArchive@1160040004 : Record 5110;
      DCDimensionHandling@6085578 : Codeunit 6085793;
      PurchLineEqualArchive@1160040003 : Boolean;
      PurchaseLineApproved@1160040002 : Boolean;
    BEGIN
      PurchLineEqualArchive := FALSE;
      PurchaseLineApproved := FALSE;

      PurchLineArchive.ASCENDING(TRUE);
      PurchLineArchive.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLineArchive.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLineArchive.SETRANGE("Line No.",PurchLine."Line No.");
      PurchLineArchive.SETRANGE("Doc. No. Occurrence",PurchHeader."Doc. No. Occurrence");
      PurchLineArchive.FINDSET;
      REPEAT
        IF DCDimensionHandling.IsPurchLineEqualArchive(PurchLine,PurchLineArchive) THEN
          PurchLineEqualArchive := TRUE
        ELSE
          PurchLineEqualArchive := FALSE;

        IF PurchLineEqualArchive THEN
          IF CanPOLineBeApproved(PurchLine,PurchLineArchive,WorkflowStepInstanceID) THEN
            PurchaseLineApproved := TRUE;
      UNTIL (PurchLineArchive.NEXT = 0) OR PurchaseLineApproved;

      IF PurchaseLineApproved THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CanPOLineBeApproved@6085599(PurchLine@1160040001 : Record 39;PurchLineArchive@1160040000 : Record 5110;WorkflowStepInstanceID@6085573 : GUID) : Boolean;
    VAR
      ApprovalEntry@1160040002 : Record 454;
      DCDimensionHandling@6085578 : Codeunit 6085793;
      Type@1160040005 : 'G/L Account,Item,Resource,Fixed Asset,Charge (Item),Dimension,Job';
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchLine."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchLine."Document No.");
      ApprovalEntry.SETRANGE("Version No.",PurchLineArchive."Version No.");
      ApprovalEntry.SETRANGE("Doc. No. Occurrence",PurchLineArchive."Doc. No. Occurrence");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstanceID);
      IF NOT ApprovalEntry.FINDFIRST THEN
        EXIT(FALSE);

      CASE PurchLine.Type OF
        PurchLine.Type::" ":
          EXIT(TRUE);
        PurchLine.Type::"G/L Account":
          Type := Type::"G/L Account";
        PurchLine.Type::Item:
          Type := Type::Item;
        3: // To support AL type check
          Type := Type::Resource;
        PurchLine.Type::"Fixed Asset":
          Type := Type::"Fixed Asset";
        PurchLine.Type::"Charge (Item)":
          Type := Type::"Charge (Item)";
      END;

      CASE ApprovalEntry."Approved using Pms. of" OF
        ApprovalEntry."Approved using Pms. of"::Approver:
          BEGIN
            ApprovalEntry.TESTFIELD("Approver ID");
            IF NOT DCDimensionHandling.CanApproverApprovePOLine(PurchLine,Type,ApprovalEntry."Approver ID") THEN
              EXIT(FALSE);
          END;
        ApprovalEntry."Approved using Pms. of"::Owner:
          BEGIN
            ApprovalEntry.TESTFIELD("Owner Approver ID");
            IF NOT DCDimensionHandling.CanApproverApprovePOLine(PurchLine,Type,ApprovalEntry."Owner Approver ID") THEN
              EXIT(FALSE);
          END;
        ApprovalEntry."Approved using Pms. of"::"Both Approver and Owner":
          BEGIN
            ApprovalEntry.TESTFIELD("Approver ID");
            ApprovalEntry.TESTFIELD("Owner Approver ID");
            IF (NOT DCDimensionHandling.CanApproverApprovePOLine(PurchLine,Type,ApprovalEntry."Approver ID")) AND
              (NOT DCDimensionHandling.CanApproverApprovePOLine(PurchLine,Type,ApprovalEntry."Owner Approver ID"))
            THEN
              EXIT(FALSE);
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TestAmtExclVAT@1160040027(AmountValidatation@1160040000 : 'Not Required,Amount Excl. VAT and Amount Incl. VAT must match imported amounts,Only Amount Incl. VAT must match imported amounts,Only Amount Excl. VAT must match imported amounts';ImportedAmountExclVAT@1160040001 : Decimal;AssignedAmountExclVAT@1160040002 : Decimal;CurrencyCode@1160040004 : Code[10];UseInvoiceRounding@1160040006 : Boolean) : Boolean;
    VAR
      Currency@1160040005 : Record 4;
      MaxVATDiffAllowed@1160040007 : Decimal;
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(CurrencyCode);

      IF UseInvoiceRounding THEN
        MaxVATDiffAllowed := Currency."Invoice Rounding Precision"
      ELSE
        MaxVATDiffAllowed := 0;

      EXIT(
        (AmountValidatation IN [
          AmountValidatation::"Amount Excl. VAT and Amount Incl. VAT must match imported amounts",
          AmountValidatation::"Only Amount Excl. VAT must match imported amounts"]) AND
        (ABS(ImportedAmountExclVAT - AssignedAmountExclVAT) > MaxVATDiffAllowed));
    END;

    PROCEDURE TestAmtInclVAT@1160040025(AmountValidatation@1160040002 : 'Not Required,Amount Excl. VAT and Amount Incl. VAT must match imported amounts,Only Amount Incl. VAT must match imported amounts,Only Amount Excl. VAT must match imported amounts';ImportedAmountInclVAT@1160040003 : Decimal;AssignedAmountInclVAT@1160040001 : Decimal;CurrencyCode@1160040004 : Code[10]) : Boolean;
    VAR
      Currency@1160040005 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(CurrencyCode);

      EXIT(
        (AmountValidatation IN [
          AmountValidatation::"Amount Excl. VAT and Amount Incl. VAT must match imported amounts",
          AmountValidatation::"Only Amount Incl. VAT must match imported amounts"]) AND
        (ABS(ImportedAmountInclVAT - AssignedAmountInclVAT) >
          Max(Currency."Max. VAT Difference Allowed",Currency."Invoice Rounding Precision")));
    END;

    PROCEDURE FormatAmount@1160040030(Amount@1160040000 : Decimal;CurrencyCode@1160040001 : Code[10]) : Text[50];
    VAR
      GLSetup@1160040002 : Record 98;
      Currency@1160040003 : Record 4;
      AmountDecimalPlaces@1160040004 : Text[5];
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        AmountDecimalPlaces := GLSetup."Amount Decimal Places";
      END ELSE BEGIN
        Currency.GET(CurrencyCode);
        AmountDecimalPlaces := Currency."Amount Decimal Places";
      END;

      EXIT(FORMAT(Amount,0,STRSUBSTNO('<Precision,%1><Standard Format,0>',AmountDecimalPlaces)));
    END;

    PROCEDURE FormatUnitAmount@6085573(UnitAmount@1160040000 : Decimal;CurrencyCode@1160040001 : Code[10]) : Text[50];
    VAR
      GLSetup@1160040002 : Record 98;
      Currency@1160040003 : Record 4;
      UnitAmountDecimalPlaces@1160040004 : Text[5];
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        UnitAmountDecimalPlaces := GLSetup."Unit-Amount Decimal Places";
      END ELSE BEGIN
        Currency.GET(CurrencyCode);
        UnitAmountDecimalPlaces := Currency."Unit-Amount Decimal Places";
      END;

      EXIT(FORMAT(UnitAmount,0,STRSUBSTNO('<Precision,%1><Standard Format,0>',UnitAmountDecimalPlaces)));
    END;

    PROCEDURE Max@1160040013(Value1@1160040000 : Decimal;Value2@1160040001 : Decimal) : Decimal;
    BEGIN
      IF Value1 >= Value2 THEN
        EXIT(Value1)
      ELSE
        EXIT(Value2);
    END;

    PROCEDURE CreateFourEyesApprover@1160040014(PurchHeader@1160040003 : Record 38);
    VAR
      DCSetup@1160040002 : Record 6085573;
      UserSetup@1160040004 : Record 91;
      ContiniaUserSetup@1160040001 : Record 6086002;
      ApprovalEntry@1160040000 : Record 454;
      ApprovalEntryArgument@6085573 : Record 454;
      RecRef@1160040006 : RecordRef;
      ApproverId@1160040005 : Code[50];
    BEGIN
      DCSetup.GET;
      IF (DCSetup."Purch: 4-eyes Approval" <> DCSetup."Purch: 4-eyes Approval"::"Not Required") AND
        (DCSetup."Purch: 4-eyes, 2nd Approver" = DCSetup."Purch: 4-eyes, 2nd Approver"::"Automatic selection")
      THEN BEGIN
        WITH ApprovalEntry DO BEGIN
          SETRANGE("Table ID",DATABASE::"Purchase Header");
          SETRANGE("Document Type",PurchHeader."Document Type");
          SETRANGE("Document No.",PurchHeader."No.");
          SETFILTER(Status,'%1|%2',Status::Created,Status::Open);

          IF COUNT = 1 THEN BEGIN
            FINDLAST;
            TESTFIELD("Approver ID");

            ContiniaUserSetup.GET("Approver ID");
            IF ContiniaUserSetup."4-eyes, 2nd Approver ID" <> '' THEN
              ApproverId := ContiniaUserSetup."4-eyes, 2nd Approver ID"
            ELSE BEGIN
              UserSetup.GET("Approver ID");
              IF UserSetup."Approver ID" = '' THEN
                ERROR(Missing2ndApprover,UserSetup.FIELDCAPTION("Approver ID"),
                  ContiniaUserSetup.FIELDCAPTION("4-eyes, 2nd Approver ID"),
                  ContiniaUserSetup.TABLECAPTION,"Approver ID");
              ApproverId := UserSetup."Approver ID";
            END;

            RecRef.GETTABLE(PurchHeader);
            DCApprovalsBridge.InitializeApprovalEntry(RecRef,ApprovalEntryArgument,ApprovalEntry."Workflow Step Instance ID");
            MakeApprovalEntry(ApprovalEntryArgument,0,ApproverId);
          END;
        END;
      END;
    END;

    PROCEDURE ArchivePurchHeader@1160040019(PurchHeader@1160040000 : Record 38;VAR ApprovalEntry@1160040004 : Record 454);
    VAR
      PurchHeaderArchive@1160040003 : Record 5109;
      ArchiveMgt@1160040001 : Codeunit 5063;
    BEGIN
      ArchiveMgt.StorePurchDocument(PurchHeader,FALSE);

      PurchHeaderArchive.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchHeaderArchive.SETRANGE("No.",PurchHeader."No.");
      PurchHeaderArchive.FINDLAST;
      PurchHeaderArchive."Archived By" := GetCurrUserID;
      PurchHeaderArchive.MODIFY;

      ApprovalEntry."Version No." := PurchHeaderArchive."Version No.";
      ApprovalEntry."Doc. No. Occurrence" := PurchHeaderArchive."Doc. No. Occurrence";
      ApprovalEntry.MODIFY;
    END;

    LOCAL PROCEDURE IsPurchLineDimEqualPurchLine@6085578(PurchLine1@6085573 : Record 39;PurchLine2@6085574 : Record 39) : Boolean;
    BEGIN
      EXIT(PurchLine1."Dimension Set ID" = PurchLine2."Dimension Set ID");
    END;

    LOCAL PROCEDURE IsPurchLineDimEqualPurchRcptLn@6085579(PurchLine@6085573 : Record 39;PurchRcptLine@6085574 : Record 121) : Boolean;
    BEGIN
      EXIT(PurchLine."Dimension Set ID" = PurchRcptLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE IsPurchLineDimEqualRetShptLine@6085580(PurchLine@6085574 : Record 39;ReturnShptLine@6085575 : Record 6651) : Boolean;
    BEGIN
      EXIT(PurchLine."Dimension Set ID" = ReturnShptLine."Dimension Set ID");
    END;

    PROCEDURE FilterApprovalEntry2@6085586(VAR ApprovalEntry@161024013 : Record 454;TableID@1160040000 : Integer;DocumentType@161024015 : Integer;DocumentNo@161024014 : Code[20];ApproverFilter@161024012 : Text;StatusFilter@6085573 : Integer) : Boolean;
    BEGIN
      IF ApproverFilter = '' THEN
        EXIT(FALSE);

      ApprovalEntry.RESET;
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",TableID);
      ApprovalEntry.SETRANGE("Document Type",DocumentType);
      ApprovalEntry.SETRANGE("Document No.",DocumentNo);
      ApprovalEntry.SETFILTER("Approver ID",ApproverFilter);
      IF StatusFilter <> -1 THEN
        ApprovalEntry.SETRANGE(Status,StatusFilter);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

