OBJECT Page 5470 Item Entity
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:11:01 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=items];
    SourceTable=Table27;
    DelayedInsert=Yes;
    PageType=API;
    ChangeTrackingAllowed=Yes;
    EntitySetName=items;
    EntityName=item;
    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     GraphCollectionMgtItem@1002 : Codeunit 5470;
                   BEGIN
                     IF TempFieldSet.GET(DATABASE::Item,FIELDNO("Base Unit of Measure")) THEN
                       IF BaseUnitOfMeasureJSONText = '' THEN
                         BaseUnitOfMeasureJSONText := GraphCollectionMgtItem.ItemUnitOfMeasureToJSON(Rec,BaseUnitOfMeasureCode);

                     GraphCollectionMgtItem.InsertItem(Rec,TempFieldSet,BaseUnitOfMeasureJSONText);

                     SetCalculatedFields;
                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     Item@1001 : Record 27;
                     GraphCollectionMgtItem@1000 : Codeunit 5470;
                   BEGIN
                     IF TempFieldSet.GET(DATABASE::Item,FIELDNO("Base Unit of Measure")) THEN
                       VALIDATE("Base Unit of Measure",BaseUnitOfMeasureCode);

                     Item.SETRANGE(Id,Id);
                     Item.FINDFIRST;

                     GraphCollectionMgtItem.ProcessComplexTypes(
                       Rec,
                       BaseUnitOfMeasureJSONText
                       );

                     IF "No." = Item."No." THEN
                       MODIFY(TRUE)
                     ELSE BEGIN
                       Item.TRANSFERFIELDS(Rec,FALSE);
                       Item.RENAME("No.");
                       TRANSFERFIELDS(Item,TRUE);
                     END;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 18  ;0   ;Container ;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 16  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE }

    { 15  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No." }

    { 14  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName];
                ToolTipML=ENU=Specifies the Description for the Item.;
                ApplicationArea=#All;
                SourceExpr=Description;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Description));
                           END;
                            }

    { 11  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=Type];
                ToolTipML=ENU=Specifies the Type for the Item. Possible values are Inventory and Service.;
                ApplicationArea=#All;
                SourceExpr=Type;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                           END;
                            }

    { 8   ;2   ;Field     ;
                Name=itemCategoryId;
                CaptionML=[@@@={Locked};
                           ENU=ItemCategoryId];
                ApplicationArea=#All;
                SourceExpr="Item Category Id";
                OnValidate=BEGIN
                             IF "Item Category Id" = BlankGUID THEN
                               "Item Category Code" := ''
                             ELSE BEGIN
                               ItemCategory.SETRANGE(Id,"Item Category Id");
                               IF NOT ItemCategory.FINDFIRST THEN
                                 ERROR(ItemCategoryIdDoesNotMatchAnItemCategoryGroupErr);

                               "Item Category Code" := ItemCategory.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Item Category Code"));
                             RegisterFieldSet(FIELDNO("Item Category Id"));
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=itemCategoryCode;
                CaptionML=[@@@={Locked};
                           ENU=ItemCategoryCode];
                ApplicationArea=#All;
                SourceExpr="Item Category Code";
                Enabled=true;
                Editable=false;
                OnValidate=BEGIN
                             IF ItemCategory.Code <> '' THEN BEGIN
                               IF ItemCategory.Code <> "Item Category Code" THEN
                                 ERROR(ItemCategoriesValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Item Category Code" = '' THEN
                               "Item Category Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT ItemCategory.GET("Item Category Code") THEN
                                 ERROR(ItemCategoryCodeDoesNotMatchATaxGroupErr);

                               "Item Category Id" := ItemCategory.Id;
                             END;
                           END;
                            }

    { 4   ;2   ;Field     ;
                Name=blocked;
                CaptionML=[@@@={Locked};
                           ENU=Blocked];
                ToolTipML=ENU=Specifies whether the item is blocked.;
                ApplicationArea=#All;
                SourceExpr=Blocked;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Blocked));
                           END;
                            }

    { 1   ;2   ;Field     ;
                Name=baseUnitOfMeasureId;
                CaptionML=[@@@={Locked};
                           ENU=BaseUnitOfMeasureId];
                ApplicationArea=#All;
                SourceExpr=BaseUnitOfMeasureId;
                OnValidate=BEGIN
                             IF BaseUnitOfMeasureId = BlankGUID THEN
                               BaseUnitOfMeasureCode := ''
                             ELSE BEGIN
                               ValidateUnitOfMeasure.SETRANGE(Id,BaseUnitOfMeasureId);
                               IF NOT ValidateUnitOfMeasure.FINDFIRST THEN
                                 ERROR(UnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr);

                               BaseUnitOfMeasureCode := ValidateUnitOfMeasure.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Unit of Measure Id"));
                             RegisterFieldSet(FIELDNO("Base Unit of Measure"));
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=baseUnitOfMeasure;
                CaptionML=[@@@={Locked};
                           ENU=BaseUnitOfMeasure];
                ToolTipML=ENU=Specifies the Base Unit of Measure.;
                ApplicationArea=#All;
                SourceExpr=BaseUnitOfMeasureJSONText;
                OnValidate=VAR
                             UnitOfMeasureFromJSON@1000 : Record 204;
                           BEGIN
                             RegisterFieldSet(FIELDNO("Unit of Measure Id"));
                             RegisterFieldSet(FIELDNO("Base Unit of Measure"));

                             IF BaseUnitOfMeasureJSONText = 'null' THEN
                               EXIT;

                             GraphCollectionMgtItem.ParseJSONToUnitOfMeasure(BaseUnitOfMeasureJSONText,UnitOfMeasureFromJSON);

                             IF (ValidateUnitOfMeasure.Code <> '') AND
                                (ValidateUnitOfMeasure.Code <> UnitOfMeasureFromJSON.Code)
                             THEN
                               ERROR(UnitOfMeasureValuesDontMatchErr);
                           END;

                ODataEDMType=ITEM-UOM }

    { 6   ;2   ;Field     ;
                Name=gtin;
                CaptionML=[@@@={Locked};
                           ENU=GTIN];
                ApplicationArea=#All;
                SourceExpr=GTIN;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(GTIN));
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=inventory;
                CaptionML=[@@@={Locked};
                           ENU=Inventory];
                ToolTipML=ENU=Specifies the inventory for the item.;
                ApplicationArea=#All;
                SourceExpr=InventoryValue;
                OnValidate=BEGIN
                             VALIDATE(Inventory,InventoryValue);
                             RegisterFieldSet(FIELDNO(Inventory));
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=unitPrice;
                CaptionML=[@@@={Locked};
                           ENU=UnitPrice];
                ApplicationArea=#All;
                SourceExpr="Unit Price";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Price"));
                           END;
                            }

    { 24  ;2   ;Field     ;
                Name=priceIncludesTax;
                CaptionML=[@@@={Locked};
                           ENU=PriceIncludesTax];
                ApplicationArea=#All;
                SourceExpr="Price Includes VAT";
                OnValidate=VAR
                             GeneralLedgerSetup@1020000 : Record 98;
                           BEGIN
                             GeneralLedgerSetup.GET;
                             IF NOT GeneralLedgerSetup."VAT in Use" AND "Price Includes VAT" THEN
                               ERROR(CannotSetPriceIncludesTaxErr);

                             RegisterFieldSet(FIELDNO("Price Includes VAT"));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=unitCost;
                CaptionML=[@@@={Locked};
                           ENU=UnitCost];
                ApplicationArea=#All;
                SourceExpr="Unit Cost";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Cost"));
                           END;
                            }

    { 3   ;2   ;Field     ;
                Name=taxGroupId;
                CaptionML=[@@@={Locked};
                           ENU=TaxGroupId];
                ToolTipML=ENU=Specifies the ID of the tax group.;
                ApplicationArea=#All;
                SourceExpr="Tax Group Id";
                OnValidate=BEGIN
                             IF "Tax Group Id" = BlankGUID THEN
                               "Tax Group Code" := ''
                             ELSE BEGIN
                               TaxGroup.SETRANGE(Id,"Tax Group Id");
                               IF NOT TaxGroup.FINDFIRST THEN
                                 ERROR(TaxGroupIdDoesNotMatchATaxGroupErr);

                               "Tax Group Code" := TaxGroup.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Tax Group Code"));
                             RegisterFieldSet(FIELDNO("Tax Group Id"));
                           END;
                            }

    { 2   ;2   ;Field     ;
                Name=taxGroupCode;
                CaptionML=[@@@={Locked};
                           ENU=TaxGroupCode];
                ApplicationArea=#All;
                SourceExpr="Tax Group Code";
                OnValidate=BEGIN
                             IF TaxGroup.Code <> '' THEN BEGIN
                               IF TaxGroup.Code <> "Tax Group Code" THEN
                                 ERROR(TaxGroupValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Tax Group Code" = '' THEN
                               "Tax Group Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT TaxGroup.GET("Tax Group Code") THEN
                                 ERROR(TaxGroupCodeDoesNotMatchATaxGroupErr);

                               "Tax Group Id" := TaxGroup.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Tax Group Code"));
                             RegisterFieldSet(FIELDNO("Tax Group Id"));
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last DateTime Modified";
                Editable=FALSE }

    { 5   ;2   ;Part      ;
                Name=picture;
                CaptionML=ENU=picture;
                SubPageLink=Id=FIELD(Id);
                PagePartID=Page5468;
                EntitySetName=picture;
                EntityName=picture;
                PartType=Page }

    { 7   ;2   ;Part      ;
                Name=defaultDimensions;
                CaptionML=[@@@={Locked};
                           ENU=Default Dimensions];
                SubPageLink=ParentId=FIELD(Id);
                PagePartID=Page5509;
                EntitySetName=defaultDimensions;
                EntityName=defaultDimensions;
                PartType=Page }

  }
  CODE
  {
    VAR
      TempFieldSet@1011 : TEMPORARY Record 2000000041;
      ValidateUnitOfMeasure@1004 : Record 204;
      ItemCategory@1015 : Record 5722;
      TaxGroup@1008 : Record 321;
      GraphCollectionMgtItem@1001 : Codeunit 5470;
      BaseUnitOfMeasureCode@1014 : Code[10];
      BaseUnitOfMeasureJSONText@1002 : Text;
      InventoryValue@1000 : Decimal;
      CannotSetPriceIncludesTaxErr@1020000 : TextConst 'ENU=In order to set the Price Includes Tax field, Tax in Use must be enabled in General Ledger Setup.';
      UnitOfMeasureValuesDontMatchErr@1007 : TextConst '@@@={Locked};ENU=The unit of measure values do not match to a specific Unit of Measure.';
      UnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr@1006 : TextConst '@@@={Locked};ENU=The "unitOfMeasureId" does not match to a Unit of Measure.';
      BaseUnitOfMeasureId@1013 : GUID;
      BlankGUID@1005 : GUID;
      TaxGroupValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The tax group values do not match to a specific Tax Group.';
      TaxGroupIdDoesNotMatchATaxGroupErr@1010 : TextConst '@@@={Locked};ENU=The "taxGroupId" does not match to a Tax Group.';
      TaxGroupCodeDoesNotMatchATaxGroupErr@1009 : TextConst '@@@={Locked};ENU=The "taxGroupCode" does not match to a Tax Group.';
      ItemCategoryIdDoesNotMatchAnItemCategoryGroupErr@1016 : TextConst 'ENU=The "itemCategoryId" does not match to a specific ItemCategory group.';
      ItemCategoriesValuesDontMatchErr@1017 : TextConst 'ENU=The item categories values do not match to a specific Iteam Category.';
      ItemCategoryCodeDoesNotMatchATaxGroupErr@1018 : TextConst 'ENU=The "itemCategoryCode" does not match to a Item Category.';

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      UnitOfMeasure@1001 : Record 204;
      GraphCollectionMgtItem@1000 : Codeunit 5470;
    BEGIN
      // UOM
      BaseUnitOfMeasureJSONText := GraphCollectionMgtItem.ItemUnitOfMeasureToJSON(Rec,"Base Unit of Measure");
      BaseUnitOfMeasureCode := "Base Unit of Measure";
      IF UnitOfMeasure.GET(BaseUnitOfMeasureCode) THEN
        BaseUnitOfMeasureId := UnitOfMeasure.Id
      ELSE
        BaseUnitOfMeasureId := BlankGUID;

      // Inventory
      CALCFIELDS(Inventory);
      InventoryValue := Inventory;
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(BaseUnitOfMeasureId);
      CLEAR(BaseUnitOfMeasureCode);
      CLEAR(BaseUnitOfMeasureJSONText);
      CLEAR(InventoryValue);
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      IF TempFieldSet.GET(DATABASE::Item,FieldNo) THEN
        EXIT;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Item;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

