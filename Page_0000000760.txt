OBJECT Page 760 Trailing Sales Orders Chart
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:28 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Trailing Sales Orders;
    SourceTable=Table485;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 SetActionsEnabled;
               END;

    OnFindRecord=BEGIN
                   UpdateChart;
                   IsChartDataReady := TRUE;

                   IF NOT IsChartAddInReady THEN
                     SetActionsEnabled;
                 END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;ActionGroup;
                      Name=Show;
                      CaptionML=ENU=Show;
                      Image=View }
      { 10      ;2   ;Action    ;
                      Name=AllOrders;
                      CaptionML=ENU=All Orders;
                      ToolTipML=ENU=View all not fully posted sales orders, including sales orders with document dates in the future because of long delivery times, delays, or other reasons.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=AllOrdersEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetShowOrders(TrailingSalesOrdersSetup."Show Orders"::"All Orders");
                                 UpdateStatus;
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=OrdersUntilToday;
                      CaptionML=ENU=Orders Until Today;
                      ToolTipML=ENU=View not fully posted sales orders with document dates up until today's date.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=OrdersUntilTodayEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetShowOrders(TrailingSalesOrdersSetup."Show Orders"::"Orders Until Today");
                                 UpdateStatus;
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=DelayedOrders;
                      CaptionML=ENU=Delayed Orders;
                      ToolTipML=ENU=View not fully posted sales orders with shipment dates that are before today's date.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=DelayedOrdersEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetShowOrders(TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders");
                                 UpdateStatus;
                               END;
                                }
      { 14      ;1   ;ActionGroup;
                      Name=PeriodLength;
                      CaptionML=ENU=Period Length;
                      Image=Period }
      { 7       ;2   ;Action    ;
                      Name=Day;
                      CaptionML=ENU=Day;
                      ToolTipML=ENU=Each stack covers one day.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=DayEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Day);
                                 UpdateStatus;
                               END;
                                }
      { 8       ;2   ;Action    ;
                      Name=Week;
                      CaptionML=ENU=Week;
                      ToolTipML=ENU=Each stack except for the last stack covers one week. The last stack contains data from the start of the week until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=WeekEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Week);
                                 UpdateStatus;
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Name=Month;
                      CaptionML=ENU=Month;
                      ToolTipML=ENU=Each stack except for the last stack covers one month. The last stack contains data from the start of the month until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=MonthEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Month);
                                 UpdateStatus;
                               END;
                                }
      { 6       ;2   ;Action    ;
                      Name=Quarter;
                      CaptionML=ENU=Quarter;
                      ToolTipML=ENU=Each stack except for the last stack covers one quarter. The last stack contains data from the start of the quarter until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=QuarterEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Quarter);
                                 UpdateStatus;
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name=Year;
                      CaptionML=ENU=Year;
                      ToolTipML=ENU=Each stack except for the last stack covers one year. The last stack contains data from the start of the year until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=YearEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Year);
                                 UpdateStatus;
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      Name=Options;
                      CaptionML=ENU=Options;
                      Image=SelectChart }
      { 16      ;2   ;ActionGroup;
                      Name=ValueToCalculate;
                      CaptionML=ENU=Value to Calculate;
                      ActionContainerType=ActionItems;
                      Image=Calculate }
      { 17      ;3   ;Action    ;
                      Name=Amount;
                      CaptionML=ENU=Amount;
                      ToolTipML=ENU=The Y-axis shows the totaled $ amount of the orders.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=AmountEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetValueToCalcuate(TrailingSalesOrdersSetup."Value to Calculate"::"Amount Excl. VAT");
                                 UpdateStatus;
                               END;
                                }
      { 18      ;3   ;Action    ;
                      Name=NoofOrders;
                      CaptionML=ENU=No. of Orders;
                      ToolTipML=ENU=The Y-axis shows the number of orders.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NoOfOrdersEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetValueToCalcuate(TrailingSalesOrdersSetup."Value to Calculate"::"No. of Orders");
                                 UpdateStatus;
                               END;
                                }
      { 19      ;2   ;ActionGroup;
                      CaptionML=ENU=Chart Type;
                      Image=BarChart }
      { 20      ;3   ;Action    ;
                      Name=StackedArea;
                      CaptionML=ENU=Stacked Area;
                      ToolTipML=ENU=View the data in area layout.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=StackedAreaEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Area");
                                 UpdateStatus;
                               END;
                                }
      { 21      ;3   ;Action    ;
                      Name=StackedAreaPct;
                      CaptionML=ENU=Stacked Area (%);
                      ToolTipML=ENU=view the percentage distribution of the four order statuses in area layout.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=StackedAreaPctEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Area (%)");
                                 UpdateStatus;
                               END;
                                }
      { 22      ;3   ;Action    ;
                      Name=StackedColumn;
                      CaptionML=ENU=Stacked Column;
                      ToolTipML=ENU=view the data in column layout.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=StackedColumnEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Column");
                                 UpdateStatus;
                               END;
                                }
      { 23      ;3   ;Action    ;
                      Name=StackedColumnPct;
                      CaptionML=ENU=Stacked Column (%);
                      ToolTipML=ENU=view the percentage distribution of the four order statuses in column layout.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=StackedColumnPctEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Column (%)");
                                 UpdateStatus;
                               END;
                                }
      { 25      ;1   ;Separator  }
      { 13      ;1   ;Action    ;
                      Name=Setup;
                      CaptionML=ENU=Setup;
                      ToolTipML=ENU=Specify if the chart will be based on a work date other than today's date. This is mainly relevant in demonstration databases with fictitious sales orders.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Setup;
                      OnAction=BEGIN
                                 RunSetup;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=container;
                ContainerType=ContentArea }

    { 12  ;1   ;Field     ;
                CaptionML=ENU=Status Text;
                ToolTipML=ENU=Specifies the status of the chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=StatusText;
                Editable=False;
                ShowCaption=No }

    { 5   ;1   ;Field     ;
                Name=BusinessChart;
                CaptionML=ENU=Business Chart;
                ToolTipML=ENU=Specifies if the chart is of type Business Chart.;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      TrailingSalesOrdersSetup@1002 : Record 760;
      OldTrailingSalesOrdersSetup@1005 : Record 760;
      TrailingSalesOrdersMgt@1000 : Codeunit 760;
      StatusText@1003 : Text[250];
      NeedsUpdate@1001 : Boolean;
      AllOrdersEnabled@1004 : Boolean INDATASET;
      OrdersUntilTodayEnabled@1006 : Boolean INDATASET;
      DelayedOrdersEnabled@1007 : Boolean INDATASET;
      DayEnabled@1008 : Boolean INDATASET;
      WeekEnabled@1009 : Boolean INDATASET;
      MonthEnabled@1010 : Boolean INDATASET;
      QuarterEnabled@1011 : Boolean INDATASET;
      YearEnabled@1012 : Boolean INDATASET;
      AmountEnabled@1013 : Boolean INDATASET;
      NoOfOrdersEnabled@1014 : Boolean INDATASET;
      StackedAreaEnabled@1015 : Boolean INDATASET;
      StackedAreaPctEnabled@1016 : Boolean INDATASET;
      StackedColumnEnabled@1017 : Boolean INDATASET;
      StackedColumnPctEnabled@1018 : Boolean INDATASET;
      IsChartAddInReady@1019 : Boolean;
      IsChartDataReady@1020 : Boolean;

    LOCAL PROCEDURE UpdateChart@6();
    BEGIN
      IF NOT NeedsUpdate THEN
        EXIT;
      IF NOT IsChartAddInReady THEN
        EXIT;
      TrailingSalesOrdersMgt.UpdateData(Rec);
      Update(CurrPage.BusinessChart);
      UpdateStatus;
      NeedsUpdate := FALSE;
    END;

    LOCAL PROCEDURE UpdateStatus@8();
    BEGIN
      NeedsUpdate :=
        NeedsUpdate OR
        (OldTrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length") OR
        (OldTrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders") OR
        (OldTrailingSalesOrdersSetup."Use Work Date as Base" <> TrailingSalesOrdersSetup."Use Work Date as Base") OR
        (OldTrailingSalesOrdersSetup."Value to Calculate" <> TrailingSalesOrdersSetup."Value to Calculate") OR
        (OldTrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type");

      OldTrailingSalesOrdersSetup := TrailingSalesOrdersSetup;

      IF NeedsUpdate THEN
        StatusText := TrailingSalesOrdersSetup.GetCurrentSelectionText;

      SetActionsEnabled;
    END;

    LOCAL PROCEDURE RunSetup@3();
    BEGIN
      PAGE.RUNMODAL(PAGE::"Trailing Sales Orders Setup",TrailingSalesOrdersSetup);
      TrailingSalesOrdersSetup.GET(USERID);
      UpdateStatus;
    END;

    [External]
    PROCEDURE SetActionsEnabled@10();
    BEGIN
      AllOrdersEnabled := (TrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders"::"All Orders") AND
        IsChartAddInReady;
      OrdersUntilTodayEnabled :=
        (TrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders"::"Orders Until Today") AND
        IsChartAddInReady;
      DelayedOrdersEnabled := (TrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders") AND
        IsChartAddInReady;
      DayEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Day) AND
        IsChartAddInReady;
      WeekEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Week) AND
        IsChartAddInReady;
      MonthEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Month) AND
        IsChartAddInReady;
      QuarterEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Quarter) AND
        IsChartAddInReady;
      YearEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Year) AND
        IsChartAddInReady;
      AmountEnabled :=
        (TrailingSalesOrdersSetup."Value to Calculate" <> TrailingSalesOrdersSetup."Value to Calculate"::"Amount Excl. VAT") AND
        IsChartAddInReady;
      NoOfOrdersEnabled :=
        (TrailingSalesOrdersSetup."Value to Calculate" <> TrailingSalesOrdersSetup."Value to Calculate"::"No. of Orders") AND
        IsChartAddInReady;
      StackedAreaEnabled := (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Area") AND
        IsChartAddInReady;
      StackedAreaPctEnabled := (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Area (%)") AND
        IsChartAddInReady;
      StackedColumnEnabled := (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Column") AND
        IsChartAddInReady;
      StackedColumnPctEnabled :=
        (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Column (%)") AND
        IsChartAddInReady;
    END;

    EVENT BusinessChart@-5::DataPointClicked@12(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      SetDrillDownIndexes(point);
      TrailingSalesOrdersMgt.DrillDown(Rec);
    END;

    EVENT BusinessChart@-5::DataPointDoubleClicked@13(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT BusinessChart@-5::AddInReady@14();
    BEGIN
      IsChartAddInReady := TRUE;
      TrailingSalesOrdersMgt.OnOpenPage(TrailingSalesOrdersSetup);
      UpdateStatus;
      IF IsChartDataReady THEN
        UpdateChart;
    END;

    EVENT BusinessChart@-5::Refresh@15();
    BEGIN
      IF IsChartAddInReady AND IsChartDataReady THEN BEGIN
        NeedsUpdate := TRUE;
        UpdateChart
      END;
    END;

    BEGIN
    END.
  }
}

