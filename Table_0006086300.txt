OBJECT Table 6086300 Expense Management Setup
{
  OBJECT-PROPERTIES
  {
    Date=10/23/17;
    Time=[ 1:00:00 AM];
    Version List=EMW16.00.10.2.60.02;
  }
  PROPERTIES
  {
    Permissions=TableData 6086002=r,
                TableData 6086302=r,
                TableData 6086352=r;
    CaptionML=ENU=Expense Management Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 20  ;   ;Archive Directory Structure;Option ;OnValidate=BEGIN
                                                                IF "Archive Directory Structure" <> xRec."Archive Directory Structure" THEN
                                                                  IF "Document Storage Type" = "Document Storage Type"::"File System" THEN
                                                                    MoveDocFilesToNewStorageSetup(FIELDCAPTION("Archive Directory Structure"));
                                                              END;

                                                   CaptionML=ENU=Archive Directory Structure;
                                                   OptionCaptionML=ENU=One Directory,Year\Month,Year\Month\Day;
                                                   OptionString=One Directory,Year\Month,Year\Month\Day }
    { 21  ;   ;Archive Path        ;Text250       ;OnValidate=VAR
                                                                FileSysMgt@1160040000 : Codeunit 6085584;
                                                              BEGIN
                                                                IF "Archive Path" <> xRec."Archive Path" THEN
                                                                  IF "Document Storage Type" = "Document Storage Type"::"File System" THEN BEGIN
                                                                    IF NOT FileSysMgt.DirectoryExists("Archive Path") THEN
                                                                      IF NOT FileSysMgt.CreateDirectory("Archive Path") THEN
                                                                        ERROR(LocationNotFound,"Archive Path");

                                                                    MoveDocFilesToNewStorageSetup(FIELDCAPTION("Archive Path"));
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Archive Path }
    { 22  ;   ;Company Code in Archive;Boolean    ;OnValidate=BEGIN
                                                                IF xRec."Company Code in Archive" <> "Company Code in Archive" THEN
                                                                  IF "Document Storage Type" = "Document Storage Type"::"File System" THEN
                                                                    MoveDocFilesToNewStorageSetup(FIELDCAPTION("Company Code in Archive"));
                                                              END;

                                                   CaptionML=ENU=Company Code in Archive }
    { 23  ;   ;Auto Approve Own Documents;Boolean ;CaptionML=ENU=Auto Approve Own Documents }
    { 24  ;   ;Document Storage Type;Option       ;OnValidate=BEGIN
                                                                CASE "Document Storage Type" OF
                                                                  "Document Storage Type"::"File System" :
                                                                    IF xRec."Document Storage Type" = "Document Storage Type"::Database THEN
                                                                      MoveDocFilesToNewStorageSetup(FIELDCAPTION("Document Storage Type"));
                                                                  "Document Storage Type"::Database :
                                                                    IF xRec."Document Storage Type" = "Document Storage Type"::"File System" THEN
                                                                      MoveDocFilesToNewStorageSetup(FIELDCAPTION("Document Storage Type"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Document Storage Type;
                                                   OptionCaptionML=ENU=File System,Database;
                                                   OptionString=File System,Database }
    { 25  ;   ;Welcome E-Mails     ;Option        ;CaptionML=ENU=Welcome E-Mails;
                                                   OptionCaptionML=ENU=Send automatically,Send manually;
                                                   OptionString=Send automatically,Send manually }
    { 60  ;   ;Create Expense w. Transaction;Boolean;
                                                   CaptionML=ENU=Create Expense from Transaction }
    { 61  ;   ;Send Status E-mail at Creation;Boolean;
                                                   CaptionML=ENU=Send Status E-mail when Expense is created }
    { 65  ;   ;Approval Administrator Role ID;Code20;
                                                   TableRelation="Permission Set";
                                                   CaptionML=ENU=Approval Administrator Role ID }
    { 66  ;   ;Limited Role ID     ;Code20        ;TableRelation="Permission Set";
                                                   CaptionML=ENU=Limited Role ID }
    { 71  ;   ;Send Release to App ;Boolean       ;CaptionML=ENU=Send Release to App }
    { 80  ;   ;Posting Description ;Text30        ;CaptionML=ENU=Posting Description }
    { 90  ;   ;Maximum Matching Diff. Pct.;Decimal;CaptionML=ENU=Maximum Matching Difference in %;
                                                   DecimalPlaces=0:2 }
    { 100 ;   ;Default Web/App Language;Code10    ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                IF "Default Web/App Language" <> xRec."Default Web/App Language" THEN
                                                                  "Force Field Update in CO" := TRUE;
                                                              END;

                                                   CaptionML=ENU=Default Web/App Language }
    { 110 ;   ;Card Transaction Bal. Type;Option  ;OnValidate=VAR
                                                                UserCreditCard@1160040000 : Record 6086311;
                                                              BEGIN
                                                                IF "Card Transaction Bal. Type" = "Card Transaction Bal. Type"::Vendor THEN
                                                                  TESTFIELD("Expense Posting","Expense Posting"::"Always Purchase Invoice");

                                                                IF "Card Transaction Bal. Type" <> xRec."Card Transaction Bal. Type" THEN BEGIN
                                                                  UserCreditCard.SETRANGE("Account Type",xRec."Card Transaction Bal. Type");
                                                                  UserCreditCard.SETRANGE("Account No.",xRec."Card Transaction Bal. No.");
                                                                  IF UserCreditCard.FINDFIRST THEN
                                                                    MESSAGE(BeAwareExistingCardsTxt,UserCreditCard.TABLECAPTION,
                                                                      UserCreditCard.FIELDCAPTION("Account Type"),UserCreditCard."Account Type",
                                                                      UserCreditCard.FIELDCAPTION("Account No."),UserCreditCard."Account No.");
                                                                  "Card Transaction Bal. No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Card Transaction Balancing Type;
                                                   OptionCaptionML=ENU=G/L Account,,Vendor,Bank Account;
                                                   OptionString=G/L Account,,Vendor,Bank Account }
    { 115 ;   ;Card Transaction Bal. No.;Code20   ;TableRelation=IF (Card Transaction Bal. Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Card Transaction Bal. Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Card Transaction Bal. Type=CONST(Vendor)) Vendor;
                                                   OnValidate=VAR
                                                                UserCreditCard@1160040000 : Record 6086311;
                                                              BEGIN
                                                                IF ("Card Transaction Bal. No." <> '') AND
                                                                   ("Card Transaction Bal. No." <> xRec."Card Transaction Bal. No.")
                                                                THEN BEGIN
                                                                  UserCreditCard.SETRANGE("Account Type",xRec."Card Transaction Bal. Type");
                                                                  UserCreditCard.SETRANGE("Account No.",xRec."Card Transaction Bal. No.");
                                                                  IF UserCreditCard.FINDFIRST THEN
                                                                    MESSAGE(BeAwareExistingCardsTxt,UserCreditCard.TABLECAPTION,
                                                                      UserCreditCard.FIELDCAPTION("Account Type"),UserCreditCard."Account Type",
                                                                      UserCreditCard.FIELDCAPTION("Account No."),UserCreditCard."Account No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Card Transaction Balancing No. }
    { 116 ;   ;Intermediate Expense Account;Code20;TableRelation="G/L Account";
                                                   CaptionML=ENU=Intermediate Expense Account }
    { 117 ;   ;Expense Posting     ;Option        ;OnValidate=VAR
                                                                EMSetup@1160040001 : Record 6086300;
                                                                UserCreditCard@1160040000 : Record 6086311;
                                                              BEGIN
                                                                IF "Expense Posting" <> "Expense Posting"::"Always Purchase Invoice" THEN BEGIN
                                                                  EMSetup."Expense Posting" := "Expense Posting"::"Always Purchase Invoice";
                                                                  UserCreditCard.SETRANGE("Account Type",UserCreditCard."Account Type"::Vendor);
                                                                  IF UserCreditCard.FINDFIRST THEN
                                                                    ERROR(CreditCardVendorNotallowed,
                                                                      UserCreditCard."Card No.",UserCreditCard."Continia User ID",UserCreditCard."Account Type",
                                                                        FIELDCAPTION("Expense Posting"),EMSetup."Expense Posting");
                                                                END;

                                                                IF "Expense Posting" <> "Expense Posting"::"Use General Journal" THEN BEGIN
                                                                  TESTFIELD("Post Bank Trans. on Import",FALSE);
                                                                  TESTFIELD("Enable Settlement",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Expense Posting;
                                                   OptionCaptionML=ENU=Use General Journal,Always Purchase Invoice;
                                                   OptionString=Use General Journal,Always Purchase Invoice }
    { 120 ;   ;Invoice Nos.        ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Invoice No. Series }
    { 122 ;   ;Approval Template   ;BLOB          ;CaptionML=ENU=Approval Template;
                                                   SubType=User-Defined }
    { 123 ;   ;Approval E-Mail Subject;Text80     ;CaptionML=ENU=Approval E-Mail Subject }
    { 124 ;   ;Last Status E-Mail Sent;Date       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Event Register"."Creation Date" WHERE (Area=CONST(Purch. Approval Status E-mail)));
                                                   CaptionML=ENU=Last Status E-Mail Sent;
                                                   Editable=No }
    { 125 ;   ;Reminder Template   ;BLOB          ;CaptionML=ENU=Reminder Template }
    { 126 ;   ;Reminder E-Mail Subject;Text80     ;CaptionML=ENU=Reminder E-Mail Subject }
    { 140 ;   ;Sender E-mail       ;Text80        ;CaptionML=ENU=Sender E-mail }
    { 141 ;   ;Sender Name         ;Text50        ;CaptionML=ENU=Sender Name }
    { 142 ;   ;SMTP Require SSL/TLS;Boolean       ;OnValidate=VAR
                                                                SmtpMailSetup@1160040000 : Record 409;
                                                              BEGIN
                                                                IF SmtpMailSetup.GET THEN
                                                                  IF ("SMTP Require SSL/TLS" <> SmtpMailSetup."Secure Connection") THEN
                                                                    ERROR(MailSetupTxt,SmtpMailSetup.TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=SMTP Require SSL/TLS }
    { 143 ;   ;Force Field Update in CO;Boolean   ;CaptionML=ENU=Force Field Update in Continia Online;
                                                   Editable=No }
    { 150 ;   ;Error E-Mail        ;Text80        ;CaptionML=ENU=Error E-Mail }
    { 154 ;   ;Dynamics NAV Server Name;Text50    ;OnValidate=VAR
                                                                EMSetup@161024013 : Record 6086300;
                                                                Company@161024012 : Record 2000000006;
                                                              BEGIN
                                                                Company.FINDFIRST;
                                                                REPEAT
                                                                  IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                    EMSetup.CHANGECOMPANY(Company.Name);
                                                                    IF EMSetup.GET THEN BEGIN
                                                                      EMSetup."Dynamics NAV Server Name" := "Dynamics NAV Server Name";
                                                                      EMSetup.MODIFY;
                                                                    END;
                                                                  END;
                                                                UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Name }
    { 155 ;   ;Dynamics NAV Server Instance;Text50;OnValidate=VAR
                                                                EMSetup@161024012 : Record 6086300;
                                                                Company@161024013 : Record 2000000006;
                                                              BEGIN
                                                                Company.FINDFIRST;
                                                                REPEAT
                                                                  IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                    EMSetup.CHANGECOMPANY(Company.Name);
                                                                    IF EMSetup.GET THEN BEGIN
                                                                      EMSetup."Dynamics NAV Server Instance" := "Dynamics NAV Server Instance";
                                                                      EMSetup.MODIFY;
                                                                    END;
                                                                  END;
                                                                UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Instance }
    { 156 ;   ;Dynamics NAV Server Port;Integer   ;OnValidate=VAR
                                                                EMSetup@161024012 : Record 6086300;
                                                                Company@161024013 : Record 2000000006;
                                                              BEGIN
                                                                Company.FINDFIRST;
                                                                REPEAT
                                                                  IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                    EMSetup.CHANGECOMPANY(Company.Name);
                                                                    IF EMSetup.GET THEN BEGIN
                                                                      EMSetup."Dynamics NAV Server Port" := "Dynamics NAV Server Port";
                                                                      EMSetup.MODIFY;
                                                                    END;
                                                                  END;
                                                                UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Port }
    { 201 ;   ;Expense Template Name;Code10       ;TableRelation="Gen. Journal Template" WHERE (Type=CONST(General));
                                                   CaptionML=ENU=Expense Template Name }
    { 251 ;   ;Expense Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Expense Template Name));
                                                   CaptionML=ENU=Expense Batch Name }
    { 254 ;   ;Settlement Nos.     ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Settlement Nos. }
    { 300 ;   ;Shortcut Field 1 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 1 Code (Expense) }
    { 301 ;   ;Shortcut Field 2 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 2 Code (Expense) }
    { 302 ;   ;Shortcut Field 3 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 3 Code (Expense) }
    { 303 ;   ;Shortcut Field 4 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 4 Code (Expense) }
    { 304 ;   ;Shortcut Field 5 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 5 Code (Expense) }
    { 305 ;   ;Shortcut Field 6 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 6 Code (Expense) }
    { 306 ;   ;Shortcut Field 7 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 7 Code (Expense) }
    { 307 ;   ;Shortcut Field 8 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 8 Code (Expense) }
    { 308 ;   ;Shortcut Field 9 Code (Exp.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 9 Code (Expense) }
    { 309 ;   ;Shortcut Field 10 Code (Exp.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 10 Code (Expense) }
    { 310 ;   ;Data Version        ;Integer       ;CaptionML=ENU=Data Version }
    { 320 ;   ;Shortcut Field 1 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 1 Code (Approval) }
    { 321 ;   ;Shortcut Field 2 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 2 Code (Approval) }
    { 322 ;   ;Shortcut Field 3 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 3 Code (Approval) }
    { 323 ;   ;Shortcut Field 4 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 4 Code (Approval) }
    { 324 ;   ;Shortcut Field 5 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 5 Code (Approval) }
    { 325 ;   ;Shortcut Field 6 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 6 Code (Approval) }
    { 326 ;   ;Shortcut Field 7 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 7 Code (Approval) }
    { 327 ;   ;Shortcut Field 8 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 8 Code (Approval) }
    { 328 ;   ;Shortcut Field 9 Code (App.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 9 Code (Approval) }
    { 329 ;   ;Shortcut Field 10 Code (App.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 10 Code (Approval) }
    { 340 ;   ;Distance Unit       ;Option        ;OnValidate=VAR
                                                                Mileage@1160040000 : Record 6086338;
                                                                MileageInbox@1160040003 : Record 6086353;
                                                                MileageDetail@1160040002 : Record 6086365;
                                                                DistanceFactor@1160040001 : Decimal;
                                                              BEGIN
                                                                //1 mile = 1.609344 kilometers
                                                                IF "Distance Unit" = xRec."Distance Unit" THEN
                                                                  EXIT;
                                                                IF Mileage.FINDFIRST THEN BEGIN
                                                                  IF NOT CONFIRM(ConfirmTxtConvert,FALSE) THEN
                                                                    ERROR('');
                                                                  IF "Distance Unit" = "Distance Unit"::Km THEN
                                                                    DistanceFactor := MileageInbox.MilesPrKm
                                                                  ELSE
                                                                    DistanceFactor := 1 / MileageInbox.MilesPrKm;

                                                                  Mileage.SETRANGE(Posted,TRUE);
                                                                  IF Mileage.FINDFIRST THEN
                                                                    ERROR(UnitChangeNotAllowed,FIELDCAPTION("Distance Unit"));

                                                                  Mileage.SETRANGE(Posted);
                                                                  IF Mileage.FINDFIRST THEN
                                                                    REPEAT
                                                                      Mileage."Total Distance" := ROUND(Mileage."Total Distance" * DistanceFactor,0.00001);
                                                                      Mileage."Calculated Distance" := ROUND(Mileage."Calculated Distance" * DistanceFactor,0.00001);
                                                                      Mileage.MODIFY;
                                                                    UNTIL Mileage.NEXT = 0;

                                                                  IF MileageDetail.FINDFIRST THEN
                                                                    REPEAT
                                                                      MileageDetail."From Distance" := ROUND(MileageDetail."From Distance" * DistanceFactor,0.00001);
                                                                      MileageDetail."To Distance" := ROUND(MileageDetail."To Distance" * DistanceFactor,0.00001);
                                                                      MileageDetail.Distance := ROUND(MileageDetail.Distance * DistanceFactor,0.00001);
                                                                      MileageDetail.MODIFY;
                                                                    UNTIL MileageDetail.NEXT = 0;

                                                                  MileageInbox.SETFILTER(Status,'<%1',MileageInbox.Status::Accepted);
                                                                  IF MileageInbox.FINDFIRST THEN
                                                                    REPEAT
                                                                      MileageInbox."Total Distance" := ROUND(MileageInbox."Total Distance" * DistanceFactor,0.00001);
                                                                      MileageInbox."Calculated Distance" := ROUND(MileageInbox."Calculated Distance" * DistanceFactor,0.00001);
                                                                      MileageInbox.MODIFY;
                                                                    UNTIL MileageInbox.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Distance Unit;
                                                   OptionCaptionML=ENU=Km,Miles;
                                                   OptionString=Km,Miles }
    { 350 ;   ;Mileage Posting Description;Text30 ;CaptionML=ENU=Mileage Posting Description }
    { 360 ;   ;Enable 60 day rule  ;Boolean       ;OnValidate=VAR
                                                                ConfigFields@1160040000 : Record 6086346;
                                                              BEGIN
                                                                IF "Enable 60 day rule" THEN BEGIN
                                                                  TESTFIELD("Enable Mileage",TRUE);
                                                                  ConfigFields.SETRANGE(Type,ConfigFields.Type::Mileage);
                                                                  ConfigFields.SETFILTER("Field Code",'%1|%2','FromHome','ToHome');
                                                                  IF ConfigFields.COUNT < 2 THEN
                                                                    ERROR(Err60DayRuleFields);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Enable 60 day rule check }
    { 361 ;   ;Distance Variance % Allowed;Decimal;CaptionML=ENU=Distance Variance Allowed (%);
                                                   DecimalPlaces=0:2 }
    { 363 ;   ;Matching - date var. allowed;Integer;
                                                   CaptionML=ENU=Date variance allowed when matching (Days) }
    { 366 ;   ;Post in Expense Currency;Boolean   ;CaptionML=ENU=Post in Expense Currency }
    { 367 ;   ;Auto Submit Exp. for Approval;Boolean;
                                                   CaptionML=ENU=Auto Submit Expenses for Approval }
    { 368 ;   ;Approval Comment Shortcut Fld.;Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No),
                                                                                     Type=CONST(Text),
                                                                                     Source Table No.=CONST(0));
                                                   CaptionML=ENU=Approval Comment Shortcut Field }
    { 369 ;   ;Auto Submit Mil. for Approval;Boolean;
                                                   CaptionML=ENU=Auto Submit Mileage for Approval }
    { 370 ;   ;Enable Mileage      ;Boolean       ;OnValidate=VAR
                                                                MileageRates@1160040000 : Record 6086370;
                                                              BEGIN
                                                                IF (xRec."Enable Mileage" <> "Enable Mileage") AND "Enable Mileage" THEN
                                                                  IF MileageRates.ISEMPTY THEN
                                                                    MESSAGE(RememberMileageRates);
                                                              END;

                                                   CaptionML=ENU=Enable Mileage }
    { 371 ;   ;Shortcut Field 1 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 1 Code (Mileage) }
    { 372 ;   ;Shortcut Field 2 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 2 Code (Mileage) }
    { 373 ;   ;Shortcut Field 3 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 3 Code (Mileage) }
    { 374 ;   ;Shortcut Field 4 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 4 Code (Mileage) }
    { 375 ;   ;Shortcut Field 5 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 5 Code (Mileage) }
    { 376 ;   ;Shortcut Field 6 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 6 Code (Mileage) }
    { 377 ;   ;Shortcut Field 7 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 7 Code (Mileage) }
    { 378 ;   ;Shortcut Field 8 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 8 Code (Mileage) }
    { 379 ;   ;Shortcut Field 9 Code (Mil.);Code20;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 9 Code (Mileage) }
    { 380 ;   ;Shortcut Field 10 Code (Mil.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 10 Code (Mileage) }
    { 381 ;   ;Auto Submit Sttl. for Approval;Boolean;
                                                   CaptionML=ENU=Auto Submit Settlement for Approval }
    { 390 ;   ;Enable Settlement   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Enable Settlement" THEN
                                                                  TESTFIELD("Post Bank Trans. on Import",TRUE);
                                                              END;

                                                   CaptionML=ENU=Enable Settlement }
    { 395 ;   ;Post Bank Trans. on Import;Boolean ;OnValidate=VAR
                                                                BankTransPost@1160040000 : Codeunit 6086352;
                                                              BEGIN
                                                                IF "Post Bank Trans. on Import" = xRec."Post Bank Trans. on Import" THEN
                                                                  EXIT;

                                                                IF "Post Bank Trans. on Import" THEN BEGIN
                                                                  TESTFIELD("Expense Posting","Expense Posting"::"Use General Journal");
                                                                  TESTFIELD("Intermediate Expense Account");
                                                                  BankTransPost.PostAllBankTransactions;
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Enable Settlement",FALSE);
                                                                  BankTransPost.ReversePostAllBankTransactions;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Post Bank Transactions on Import }
    { 397 ;   ;Calc. mil. across companies;Boolean;CaptionML=ENU=Calculate mileage across companies }
    { 400 ;   ;Re-Get Transactions ;Boolean       ;CaptionML=ENU=Re-Get Transactions }
    { 401 ;   ;Shortcut Field 1 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 1 Code (Settlement) }
    { 402 ;   ;Shortcut Field 2 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 2 Code (Settlement) }
    { 403 ;   ;Shortcut Field 3 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 3 Code (Settlement) }
    { 404 ;   ;Shortcut Field 4 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 4 Code (Settlement) }
    { 405 ;   ;Shortcut Field 5 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 5 Code (Settlement) }
    { 406 ;   ;Shortcut Field 6 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 6 Code (Settlement) }
    { 407 ;   ;Shortcut Field 7 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 7 Code (Settlement) }
    { 408 ;   ;Shortcut Field 8 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 8 Code (Settlement) }
    { 409 ;   ;Shortcut Field 9 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 9 Code (Settlement) }
    { 410 ;   ;Shortcut Field 10 Code (Sttl.);Code20;
                                                   TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 10 Code (Settlement) }
    { 411 ;   ;Include Posted in Report;Boolean   ;CaptionML=ENU=Include Posted in Report }
    { 412 ;   ;Include Not Posted in Report;Boolean;
                                                   CaptionML=ENU=Include Not Posted in Report }
    { 413 ;   ;Report Starting Date Formula;DateFormula;
                                                   CaptionML=ENU=Report Starting Date Formula }
    { 414 ;   ;Report Ending Date Formula;DateFormula;
                                                   CaptionML=ENU=Report Ending Date Formula }
    { 415 ;   ;Last Statement No.  ;Code20        ;CaptionML=ENU=Last Statement No.;
                                                   Editable=No }
    { 500 ;   ;Picture Size        ;Integer       ;InitValue=1000;
                                                   CaptionML=ENU=Picture Size (Pixels);
                                                   MinValue=500 }
    { 501 ;   ;Picture Quality (%) ;Integer       ;InitValue=100;
                                                   CaptionML=ENU=Picture Quality (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 502 ;   ;Picture Quality Web Client (%);Integer;
                                                   CaptionML=ENU=Picture Quality Web Client (%);
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 503 ;   ;Exp. Description From Bank;Boolean ;CaptionML=ENU=Set Expense Description from Bank }
    { 600 ;   ;Bank Transaction Source Code;Code10;TableRelation="Source Code";
                                                   CaptionML=ENU=Bank Transaction Source Code }
    { 601 ;   ;Expense Source Code ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Expense Source Code }
    { 602 ;   ;Mileage Source Code ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Mileage Source Code }
    { 603 ;   ;Settlement Source Code;Code10      ;TableRelation="Source Code";
                                                   CaptionML=ENU=Settlement Source Code }
    { 604 ;   ;Bank Trs. Reverse Source Code;Code10;
                                                   TableRelation="Source Code";
                                                   CaptionML=ENU=Bank Transaction Reverse Source Code }
    { 700 ;   ;Lessor Journal Name ;Code10        ;OnValidate=VAR
                                                                LessorIntegration@1000000000 : Codeunit 6086327;
                                                              BEGIN
                                                                LessorIntegration.ValidateLessorJournalName("Lessor Journal Name");
                                                              END;

                                                   CaptionML=ENU=Lessor Journal Name }
    { 750 ;   ;Bluegarden Token    ;Text80        ;CaptionML=ENU=Bluegarden Token }
    { 752 ;   ;Ignore BT Duplicate Check;Boolean  ;CaptionML=ENU=Ignore Duplicate Bank Transaction Check }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FileSystemMgt@1160040000 : Codeunit 6085584;
      ConfirmTxtConvert@1160040004 : TextConst 'ENU=Convert mileage to new unit?';
      CreditCardVendorNotallowed@1160040008 : TextConst 'ENU=Creditcard %1 for user %2 has type %3 which is not allowed unless %4 is %5';
      Err60DayRuleFields@1160040003 : TextConst 'ENU=The fields FromHome and ToHome must be configured for Mileage before you can enable the 60 day rule check';
      ErrCompanyCodeTooLong@1160040006 : TextConst 'ENU=%1 must only be 10 char long';
      MailSetupTxt@1160040002 : TextConst 'ENU=This setup must be the same as in %1. Please change that one first.';
      RememberMileageRates@1160040007 : TextConst 'ENU=Please remember to add the mileage rates.';
      Text003@1001 : TextConst 'ENU=Documents have already been imported. When you change %1 the system will automatically move files to %2.\\';
      Text004@1160040013 : TextConst 'ENU=Moving files\#1######################\@2@@@@@@@@@@@@@@@@@@@@@@';
      Text005@1066 : TextConst 'ENU=It is important that you take a backup of the existing directory structure and files before the system moves the files.\\Did you do this and do you want to continue changing %1 from ''%3'' to ''%4''?';
      TextNotmoved@1160040001 : TextConst 'ENU=%1 files have not been moved. Please unlock these files and make sure there is permission to move the files and then try again';
      UnitChangeNotAllowed@1160040005 : TextConst 'ENU=Changing %1 is not Allowed when some Mileage have been posted.';
      BeAwareExistingCardsTxt@1160040009 : TextConst 'ENU="Please be aware that there are one or more %1 with %2 = %3 and %4 = %5\\These must be updated manually."';
      LocationNotFound@1160040014 : TextConst 'ENU=File location does not exist.\Please check permissions and invalid characters.\%1';
      TextMoveFromDBToFileSystem@1160040012 : TextConst 'ENU=One or more documents have already been imported. When you change %1 the system will automatically move all files from the database to the file system. This can take a long time depending on the number of documents in the system.\\Do you want to continue?';
      TextMoveFromFileSystemToDB@1160040011 : TextConst 'ENU=One or more documents have already been imported. When you change %1 the system will automatically move all files from the file system to the database. This can take a long time depending on the number of documents in the system.\\Do you want to continue?';
      TextMoveFileSystemSetup@1160040010 : TextConst 'ENU=One or more documents have already been imported. When you change %1 the system will automatically move all files to %2. This can take a long time depending on the number of documents in the system.\\Do you want to continue?';

    PROCEDURE LookupLessorJournalName@1000000000(VAR Text@1000000000 : Text[1024]) : Boolean;
    VAR
      LessorIntegration@1000000002 : Codeunit 6086327;
    BEGIN
      EXIT(LessorIntegration.LookupLessorJournalName(Text));
    END;

    LOCAL PROCEDURE MoveDocFilesToNewStorageSetup@5(CaptionFieldChanged@1160040000 : Text[100]);
    VAR
      EMAttachment@161024012 : Record 6086359;
      EMAttachmentInbox@1160040001 : Record 6086363;
      ContCompSetup@1160040002 : Record 6192773;
      Window@1160040003 : Dialog;
      Counter@1000 : Integer;
      Total@1001 : Integer;
    BEGIN
      IF NOT (EMAttachment.FINDSET OR EMAttachmentInbox.FINDSET) THEN
        EXIT;

      ContCompSetup.GET;

      CASE TRUE OF
        ("Document Storage Type" = "Document Storage Type"::"File System") AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::"File System"):
          IF NOT CONFIRM(TextMoveFileSystemSetup,FALSE,CaptionFieldChanged,GetStorageLocation(Rec,ContCompSetup)) THEN
            ERROR('');

        ("Document Storage Type" = "Document Storage Type"::"File System") AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::Database):
          IF NOT CONFIRM(TextMoveFromDBToFileSystem,FALSE,CaptionFieldChanged) THEN
            ERROR('');

        ("Document Storage Type" = "Document Storage Type"::Database) AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::"File System"):
          IF NOT CONFIRM(TextMoveFromFileSystemToDB,FALSE,CaptionFieldChanged) THEN
            ERROR('');
      END;

      MoveAttachments(Rec,xRec,ContCompSetup,ContCompSetup);
    END;

    PROCEDURE MoveDocFilesToNewCompanyCode@1160040001(CaptionFieldChanged@1160040000 : Text[100];ContCompSetup@1160040004 : Record 6192773;xContCompSetup@1160040005 : Record 6192773);
    VAR
      EMAttachment@161024012 : Record 6086359;
      EMAttachmentInbox@1160040001 : Record 6086363;
    BEGIN
      IF (NOT "Company Code in Archive") OR ("Document Storage Type" <> "Document Storage Type"::"File System") THEN
        EXIT;

      IF NOT (EMAttachment.FINDSET OR EMAttachmentInbox.FINDSET) THEN
        EXIT;

      IF NOT CONFIRM(
         TextMoveFileSystemSetup,FALSE,
         CaptionFieldChanged,
         GetStorageLocation(Rec,xContCompSetup),
         GetStorageLocation(Rec,ContCompSetup))
      THEN
        ERROR('');

      MoveAttachments(Rec,Rec,ContCompSetup,xContCompSetup);
    END;

    LOCAL PROCEDURE MoveAttachments@1160040003(EMSetup@1160040003 : Record 6086300;xEMSetup@1160040002 : Record 6086300;ContCompSetup@1160040001 : Record 6192773;xContCompSetup@1160040000 : Record 6192773);
    VAR
      EMAttachment@1160040008 : Record 6086359;
      EMAttachmentInbox@1160040007 : Record 6086363;
      Window@1160040006 : Dialog;
      Counter@1160040005 : Integer;
      Total@1160040004 : Integer;
    BEGIN
      Window.OPEN(Text004);

      Total := EMAttachment.COUNT + EMAttachmentInbox.COUNT;
      IF EMAttachment.FINDSET THEN
        REPEAT
          Counter += 1;
          Window.UPDATE(1,EMAttachment."Doc. Ref. No.");
          Window.UPDATE(2,Counter / Total * 10000 DIV 1);
          CopyAttachToNewStorageSetup(EMAttachment,EMSetup,xEMSetup,ContCompSetup,xContCompSetup);
        UNTIL EMAttachment.NEXT = 0;

      IF EMAttachmentInbox.FINDSET THEN
        REPEAT
          Counter += 1;
          Window.UPDATE(1,EMAttachment."Doc. Ref. No.");
          Window.UPDATE(2,Counter / Total * 10000 DIV 1);
          CopyAttachInbToNewStorageSetup(EMAttachmentInbox,EMSetup,xEMSetup,ContCompSetup,xContCompSetup);
        UNTIL EMAttachmentInbox.NEXT = 0;

      Counter := 0;
      Window.OPEN(Text004);

      EMAttachment.SetSetup(xEMSetup,xContCompSetup);
      IF EMAttachment.FINDSET THEN
        REPEAT
          Counter += 1;
          Window.UPDATE(1,EMAttachment."Doc. Ref. No.");
          Window.UPDATE(2,Counter / Total * 10000 DIV 1);
          ClearAttachmentFiles(EMAttachment);
        UNTIL EMAttachment.NEXT = 0;

      EMAttachmentInbox.SetSetup(xEMSetup,xContCompSetup);
      IF EMAttachmentInbox.FINDSET THEN
        REPEAT
          Counter += 1;
          Window.UPDATE(1,EMAttachment."Doc. Ref. No.");
          Window.UPDATE(2,Counter / Total * 10000 DIV 1);
          ClearAttachmentInboxFiles(EMAttachmentInbox);
        UNTIL EMAttachmentInbox.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE CopyAttachToNewStorageSetup@2(EMAttachment@1160040012 : Record 6086359;EMSetup@1001 : Record 6086300;xEMSetup@1000 : Record 6086300;ContCompSetup@1160040001 : Record 6192773;xContCompSetup@1160040000 : Record 6192773);
    VAR
      FileSysMgt@1160040015 : Codeunit 6085584;
      NewAttachment@1002 : Record 6086359;
    BEGIN
      EMAttachment.SetSetup(xEMSetup,xContCompSetup);
      NewAttachment := EMAttachment;
      NewAttachment.SetSetup(EMSetup,ContCompSetup);

      IF EMAttachment.HasAttachment THEN
        NewAttachment.SetAttachment(EMAttachment.GetAttachmentServerFileName);
    END;

    PROCEDURE CopyAttachInbToNewStorageSetup@1160040000(EMAttachmentInbox@1160040012 : Record 6086363;EMSetup@1001 : Record 6086300;xEMSetup@1000 : Record 6086300;ContCompSetup@1160040001 : Record 6192773;xContCompSetup@1160040000 : Record 6192773);
    VAR
      FileSysMgt@1160040015 : Codeunit 6085584;
      NewAttachmentInbox@1002 : Record 6086363;
    BEGIN
      EMAttachmentInbox.SetSetup(xEMSetup,xContCompSetup);
      NewAttachmentInbox := EMAttachmentInbox;
      NewAttachmentInbox.SetSetup(EMSetup,ContCompSetup);

      IF EMAttachmentInbox.HasAttachment THEN
        NewAttachmentInbox.SetAttachment(EMAttachmentInbox.GetAttachmentServerFileName);
    END;

    PROCEDURE ClearAttachmentFiles@15(VAR EMAttachment@1160040012 : Record 6086359);
    VAR
      FileSysMgt@1160040015 : Codeunit 6085584;
    BEGIN
      EMAttachment.ClearAttachment;
    END;

    PROCEDURE ClearAttachmentInboxFiles@1160040002(VAR EMAttachmentInbox@1160040012 : Record 6086363);
    VAR
      FileSysMgt@1160040015 : Codeunit 6085584;
    BEGIN
      EMAttachmentInbox.ClearAttachment;
    END;

    PROCEDURE GetStorageLocation@6085581(EMSetup@1160040000 : Record 6086300;ContCompSetup@1160040001 : Record 6192773) Location : Text[1024];
    VAR
      EMDocFileInterface@6085573 : Codeunit 6086396;
    BEGIN
      EMDocFileInterface.SetSetup(EMSetup,ContCompSetup);
      EXIT(EMDocFileInterface.GetStorageLocation);
    END;

    BEGIN
    END.
  }
}

