OBJECT Codeunit 2300 Tenant License State
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TenantLicenseStatePeriodProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.TenantLicenseStatePeriodProvider";

    [External]
    PROCEDURE GetPeriod@3(TenantLicenseState@1000 : Option) : Integer;
    BEGIN
      EXIT(TenantLicenseStatePeriodProvider.ALGetPeriod(TenantLicenseState));
    END;

    [External]
    PROCEDURE GetCurrentState@7(VAR TenantLicenseState@1002 : Option);
    VAR
      PreviousState@1000 : Option;
    BEGIN
      GetLicenseState(TenantLicenseState,PreviousState);
    END;

    [External]
    PROCEDURE GetStartDate@8(VAR StartDate@1001 : DateTime);
    VAR
      TenantLicenseState@1000 : Record 2000000189;
    BEGIN
      IF TenantLicenseState.FINDLAST THEN
        StartDate := TenantLicenseState."Start Date";
    END;

    [External]
    PROCEDURE GetEndDate@9(VAR EndDate@1002 : DateTime);
    VAR
      TenantLicenseState@1000 : Record 2000000189;
    BEGIN
      IF TenantLicenseState.FINDLAST THEN
        EndDate := TenantLicenseState."End Date";
    END;

    [External]
    PROCEDURE IsEvaluationMode@6() : Boolean;
    VAR
      TenantLicenseState@1000 : Record 2000000189;
      CurrentState@1001 : Option;
      PreviousState@1002 : Option;
    BEGIN
      GetLicenseState(CurrentState,PreviousState);
      EXIT(CurrentState = TenantLicenseState.State::Evaluation);
    END;

    [External]
    PROCEDURE IsTrialMode@1() : Boolean;
    VAR
      TenantLicenseState@1000 : Record 2000000189;
      CurrentState@1002 : Option;
      PreviousState@1001 : Option;
    BEGIN
      GetLicenseState(CurrentState,PreviousState);
      EXIT(CurrentState = TenantLicenseState.State::Trial);
    END;

    [External]
    PROCEDURE IsTrialSuspendedMode@60() : Boolean;
    VAR
      TenantLicenseState@1000 : Record 2000000189;
      CurrentState@1002 : Option;
      PreviousState@1001 : Option;
    BEGIN
      GetLicenseState(CurrentState,PreviousState);
      EXIT((CurrentState = TenantLicenseState.State::Suspended) AND (PreviousState = TenantLicenseState.State::Trial));
    END;

    [External]
    PROCEDURE IsPaidMode@2() : Boolean;
    VAR
      TenantLicenseState@1000 : Record 2000000189;
      CurrentState@1002 : Option;
      PreviousState@1001 : Option;
    BEGIN
      GetLicenseState(CurrentState,PreviousState);
      EXIT(CurrentState = TenantLicenseState.State::Paid);
    END;

    [External]
    PROCEDURE IsPaidWarningMode@48() : Boolean;
    VAR
      TenantLicenseState@1000 : Record 2000000189;
      CurrentState@1002 : Option;
      PreviousState@1001 : Option;
    BEGIN
      GetLicenseState(CurrentState,PreviousState);
      EXIT((CurrentState = TenantLicenseState.State::Warning) AND (PreviousState = TenantLicenseState.State::Paid));
    END;

    [External]
    PROCEDURE IsPaidSuspendedMode@47() : Boolean;
    VAR
      TenantLicenseState@1000 : Record 2000000189;
      CurrentState@1002 : Option;
      PreviousState@1001 : Option;
    BEGIN
      GetLicenseState(CurrentState,PreviousState);
      EXIT((CurrentState = TenantLicenseState.State::Suspended) AND (PreviousState = TenantLicenseState.State::Paid));
    END;

    LOCAL PROCEDURE GetLicenseState@5(VAR CurrentState@1001 : Option;VAR PreviousState@1002 : Option);
    VAR
      TenantLicenseState@1000 : Record 2000000189;
    BEGIN
      PreviousState := TenantLicenseState.State::Evaluation;
      IF TenantLicenseState.FIND('+') THEN BEGIN
        CurrentState := TenantLicenseState.State;
        IF (CurrentState = TenantLicenseState.State::Warning) OR (CurrentState = TenantLicenseState.State::Suspended) THEN BEGIN
          WHILE TenantLicenseState.NEXT(-1) <> 0 DO BEGIN
            PreviousState := TenantLicenseState.State;
            IF (PreviousState = TenantLicenseState.State::Trial) OR (PreviousState = TenantLicenseState.State::Paid) THEN
              EXIT;
          END;
          PreviousState := TenantLicenseState.State::Paid;
        END;
      END ELSE
        CurrentState := TenantLicenseState.State::Evaluation;
    END;

    BEGIN
    END.
  }
}

