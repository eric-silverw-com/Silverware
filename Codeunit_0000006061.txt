OBJECT Codeunit 6061 Hybrid Deployment Handler
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DotNet_HybridDeployment@1000 : Codeunit 3030;
      SourceProduct@1001 : Text;

    LOCAL PROCEDURE CanHandle@1() : Boolean;
    VAR
      HybridDeploymentSetup@1000 : Record 6060;
    BEGIN
      IF HybridDeploymentSetup.GET THEN
        EXIT(HybridDeploymentSetup."Handler Codeunit ID" = CODEUNIT::"Hybrid Deployment Handler");

      EXIT(FALSE);
    END;

    [EventSubscriber(Codeunit,6060,OnCreateIntegrationRuntime)]
    LOCAL PROCEDURE HandleCreateIntegrationRuntime@10(VAR InstanceId@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.CreateIntegrationRuntime(SourceProduct);
    END;

    [EventSubscriber(Codeunit,6060,OnDisableReplication)]
    LOCAL PROCEDURE HandleDisableReplication@2(VAR InstanceId@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.DisableReplication(SourceProduct);
    END;

    [EventSubscriber(Codeunit,6060,OnEnableReplication)]
    LOCAL PROCEDURE HandleEnableReplication@11(OnPremiseConnectionString@1000 : Text;DatabaseType@1001 : Text;IntegrationRuntimeName@1002 : Text;NotificationUrl@1003 : Text;ClientState@1004 : Text;SubscriptionId@1005 : Text;VAR InstanceId@1006 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId :=
        DotNet_HybridDeployment.EnableReplication(
          SourceProduct,OnPremiseConnectionString,DatabaseType,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId);
    END;

    [EventSubscriber(Codeunit,6060,OnGetIntegrationRuntimeKeys)]
    LOCAL PROCEDURE HandleGetIntegrationRuntimeKeys@4(VAR InstanceId@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.GetIntegrationRuntimeKey(SourceProduct);
    END;

    [EventSubscriber(Codeunit,6060,OnGetReplicationRunErrors)]
    LOCAL PROCEDURE HandleGetReplicationRunErrors@8(VAR InstanceId@1000 : Text;RunId@1001 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.GetReplicationRunErrors(SourceProduct,RunId);
    END;

    [EventSubscriber(Codeunit,6060,OnGetRequestStatus)]
    LOCAL PROCEDURE HandleGetRequestStatus@6(InstanceId@1000 : Text;VAR JsonOutput@1001 : Text;VAR Status@1002 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      Status := DotNet_HybridDeployment.GetRequestStatus(InstanceId,JsonOutput);
    END;

    [EventSubscriber(Codeunit,6060,OnInitialize)]
    LOCAL PROCEDURE HandleInitialize@7(SourceProductId@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      SourceProduct := SourceProductId;
      DotNet_HybridDeployment.Initialize;
    END;

    [EventSubscriber(Codeunit,6060,OnRegenerateIntegrationRuntimeKeys)]
    LOCAL PROCEDURE HandleRegenerateIntegrationRuntimeKeys@3(VAR InstanceId@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.RegenerateIntegrationRuntimeKey(SourceProduct);
    END;

    [EventSubscriber(Codeunit,6060,OnRunReplication)]
    LOCAL PROCEDURE HandleRunReplication@5(VAR InstanceId@1000 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.RunReplication(SourceProduct)
    END;

    [EventSubscriber(Codeunit,6060,OnSetReplicationSchedule)]
    LOCAL PROCEDURE HandleSetReplicationSchedule@9(ReplicationFrequency@1000 : Text;DaysToRun@1001 : Text;TimeToRun@1002 : Time;Activate@1003 : Boolean;VAR InstanceId@1004 : Text);
    BEGIN
      IF NOT CanHandle THEN
        EXIT;

      InstanceId := DotNet_HybridDeployment.SetReplicationSchedule(SourceProduct,ReplicationFrequency,DaysToRun,TimeToRun,Activate);
    END;

    BEGIN
    END.
  }
}

