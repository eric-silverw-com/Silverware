OBJECT Page 5507 Sales Credit Memo Entity
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=salesCreditMemos;
               ESM=salesCreditMemos;
               FRC=salesCreditMemos;
               ENC=salesCreditMemos];
    SourceTable=Table5507;
    DelayedInsert=Yes;
    PageType=API;
    ChangeTrackingAllowed=Yes;
    EntitySetName=salesCreditMemos;
    EntityName=salesCreditMemo;
    OnOpenPage=BEGIN
                 SetPemissionsFilters;
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                       GraphMgtSalCrMemoBuf.RedistributeCreditMemoDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=BEGIN
                     CheckCustomerSpecified;
                     ProcessBillingPostalAddress;

                     GraphMgtSalCrMemoBuf.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateDiscount;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    OnModifyRecord=BEGIN
                     IF xRec.Id <> Id THEN
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     GraphMgtSalCrMemoBuf.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    OnDeleteRecord=BEGIN
                     GraphMgtSalCrMemoBuf.PropagateOnDelete(Rec);

                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 21  ;0   ;Container ;
                ContainerType=ContentArea }

    { 20  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 19  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id;
                           ESM=id;
                           FRC=id;
                           ENC=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=number;
                           ESM=number;
                           FRC=number;
                           ENC=number];
                ApplicationArea=#All;
                SourceExpr="No.";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=externalDocumentNumber;
                           ESM=externalDocumentNumber;
                           FRC=externalDocumentNumber;
                           ENC=externalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("External Document No."))
                           END;
                            }

    { 24  ;2   ;Field     ;
                Name=creditMemoDate;
                CaptionML=[@@@={Locked};
                           ENU=creditMemoDate;
                           ESM=creditMemoDate;
                           FRC=creditMemoDate;
                           ENC=creditMemoDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             DocumentDateVar := "Document Date";
                             DocumentDateSet := TRUE;

                             RegisterFieldSet(FIELDNO("Document Date"));
                           END;
                            }

    { 4   ;2   ;Field     ;
                Name=dueDate;
                CaptionML=[@@@={Locked};
                           ENU=dueDate;
                           ESM=dueDate;
                           FRC=dueDate;
                           ENC=dueDate];
                ApplicationArea=#All;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             DueDateVar := "Due Date";
                             DueDateSet := TRUE;

                             RegisterFieldSet(FIELDNO("Due Date"));
                           END;
                            }

    { 14  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId;
                           ESM=customerId;
                           FRC=customerId;
                           ENC=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit 2310;
                           BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             IF NOT Customer.FINDFIRST THEN
                               ERROR(CouldNotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId;
                           ESM=contactId;
                           FRC=contactId;
                           ENC=contactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record 5050;
                             Customer@1001 : Record 18;
                             GraphIntContact@1003 : Codeunit 5461;
                           BEGIN
                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             IF "Contact Graph Id" = '' THEN
                               ERROR(ContactIdHasToHaveValueErr);

                             IF NOT GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) THEN
                               EXIT;

                             UpdateCustomerFromGraphContactId(Customer);

                             IF Contact."Company No." = Customer."No." THEN BEGIN
                               VALIDATE("Sell-to Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-to Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             END;
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber;
                           ESM=customerNumber;
                           FRC=customerNumber;
                           ENC=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit 2310;
                           BEGIN
                             IF Customer."No." <> '' THEN BEGIN
                               IF Customer."No." <> "Sell-to Customer No." THEN
                                 ERROR(CustomerValuesDontMatchErr);
                               EXIT;
                             END;

                             IF NOT Customer.GET("Sell-to Customer No.") THEN
                               ERROR(CouldNotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName;
                           ESM=customerName;
                           FRC=customerName;
                           ENC=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress;
                           ESM=billingPostalAddress;
                           FRC=billingPostalAddress;
                           ENC=billingPostalAddress];
                ToolTipML=[ENU=Specifies the billing address of the Sales Credit Memo.;
                           ESM=Especifica la direcci¢n de facturaci¢n de la nota de cr‚dito de venta.;
                           FRC=Sp‚cifie l'adresse de facturation de la note de cr‚dit vente.;
                           ENC=Specifies the billing address of the Sales Credit Memo.];
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := TRUE;
                           END;

                ODataEDMType=POSTALADDRESS }

    { 22  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId;
                           ESM=CurrencyId;
                           FRC=CurrencyId;
                           ENC=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             IF "Currency Id" = BlankGUID THEN
                               "Currency Code" := ''
                             ELSE BEGIN
                               Currency.SETRANGE(Id,"Currency Id");
                               IF NOT Currency.FINDFIRST THEN
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode;
                           ESM=currencyCode;
                           FRC=currencyCode;
                           ENC=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             IF Currency.Code <> '' THEN BEGIN
                               IF Currency.Code <> "Currency Code" THEN
                                 ERROR(CurrencyValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Currency Code" = '' THEN
                               "Currency Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT Currency.GET("Currency Code") THEN
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId;
                           ESM=PaymentTermsId;
                           FRC=PaymentTermsId;
                           ENC=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             IF "Payment Terms Id" = BlankGUID THEN
                               "Payment Terms Code" := ''
                             ELSE BEGIN
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               IF NOT PaymentTerms.FINDFIRST THEN
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;
                            }

    { 3   ;2   ;Field     ;
                Name=salesperson;
                CaptionML=[@@@={Locked};
                           ENU=salesperson;
                           ESM=salesperson;
                           FRC=salesperson;
                           ENC=salesperson];
                ApplicationArea=#All;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Salesperson Code"));
                           END;
                            }

    { 28  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax;
                           ESM=pricesIncludeTax;
                           FRC=pricesIncludeTax;
                           ENC=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Prices Including VAT"));
                           END;
                            }

    { 1   ;2   ;Part      ;
                Name=salesCreditMemoLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines;
                           ESM=Lines;
                           FRC=Lines;
                           ENC=Lines];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5508;
                EntitySetName=salesCreditMemoLines;
                EntityName=salesCreditMemoLine;
                PartType=Page }

    { 5   ;2   ;Part      ;
                Name=pdfDocument;
                CaptionML=[@@@={Locked};
                           ENU=PDF Document;
                           ESM=PDF Document;
                           FRC=PDF Document;
                           ENC=PDF Document];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5529;
                EntitySetName=pdfDocument;
                EntityName=pdfDocument;
                PartType=Page }

    { 11  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount;
                           ESM=discountAmount;
                           FRC=discountAmount;
                           ENC=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             DiscountAmountSet := TRUE;
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax;
                           ESM=discountAppliedBeforeTax;
                           FRC=discountAppliedBeforeTax;
                           ENC=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax";
                Editable=FALSE }

    { 9   ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax;
                           ESM=totalAmountExcludingTax;
                           FRC=totalAmountExcludingTax;
                           ENC=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount;
                           ESM=totalTaxAmount;
                           FRC=totalTaxAmount;
                           ENC=totalTaxAmount];
                ToolTipML=[ENU=Specifies the total tax amount for the sales credit memo.;
                           ESM=Especifica el importe de impuesto total de la nota de cr‚dito de venta.;
                           FRC=Sp‚cifie le montant total de taxe de la note de cr‚dit vente.;
                           ENC=Specifies the total tax amount for the sales credit memo.];
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax;
                           ESM=totalAmountIncludingTax;
                           FRC=totalAmountIncludingTax;
                           ENC=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;
                            }

    { 13  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status;
                           ESM=status;
                           FRC=status;
                           ENC=status];
                ToolTipML=[ENU=Specifies the status of the Sales Credit Memo (canceled, paid, on hold, created).;
                           ESM=Especifica el estado de la nota de cr‚dito de venta (cancelado, pagado, en espera, creado).;
                           FRC=Sp‚cifie l'‚tat de la note de cr‚dit vente (annul‚e, pay‚e, en attente, cr‚‚e).;
                           ENC=Specifies the status of the Sales Credit Memo (cancelled, paid, on hold, created).];
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime;
                           ESM=lastModifiedDateTime;
                           FRC=lastModifiedDateTime;
                           ENC=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE }

    { 29  ;2   ;Field     ;
                Name=invoiceId;
                CaptionML=[@@@={Locked};
                           ENU=invoiceId;
                           ESM=invoiceId;
                           FRC=invoiceId;
                           ENC=invoiceId];
                ApplicationArea=#All;
                SourceExpr=InvoiceId;
                OnValidate=VAR
                             SalesInvoiceHeader@1000 : Record 112;
                             EmptyGuid@1002 : GUID;
                           BEGIN
                             IF InvoiceId = EmptyGuid THEN BEGIN
                               "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
                               CLEAR("Applies-to Doc. No.");
                               CLEAR(InvoiceNo);
                               RegisterFieldSet(FIELDNO("Applies-to Doc. Type"));
                               RegisterFieldSet(FIELDNO("Applies-to Doc. No."));
                               EXIT;
                             END;

                             SalesInvoiceHeader.SETRANGE(Id,InvoiceId);
                             IF NOT SalesInvoiceHeader.FINDFIRST THEN
                               ERROR(InvoiceIdDoesNotMatchAnInvoiceErr);

                             "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                             "Applies-to Doc. No." := SalesInvoiceHeader."No.";
                             InvoiceNo := "Applies-to Doc. No.";
                             RegisterFieldSet(FIELDNO("Applies-to Doc. Type"));
                             RegisterFieldSet(FIELDNO("Applies-to Doc. No."));
                           END;
                            }

    { 30  ;2   ;Field     ;
                Name=invoiceNumber;
                CaptionML=[@@@={Locked};
                           ENU=invoiceNumber;
                           ESM=invoiceNumber;
                           FRC=invoiceNumber;
                           ENC=invoiceNumber];
                ApplicationArea=#All;
                SourceExpr="Applies-to Doc. No.";
                OnValidate=BEGIN
                             IF InvoiceNo <> '' THEN BEGIN
                               IF "Applies-to Doc. No." <> InvoiceNo THEN
                                 ERROR(InvoiceValuesDontMatchErr);
                               EXIT;
                             END;

                             "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;

                             RegisterFieldSet(FIELDNO("Applies-to Doc. Type"));
                             RegisterFieldSet(FIELDNO("Applies-to Doc. No."));
                           END;
                            }

  }
  CODE
  {
    VAR
      CannotChangeIDErr@1004 : TextConst '@@@={Locked};ENU=The id cannot be changed.;ESM=The id cannot be changed.;FRC=The id cannot be changed.;ENC=The id cannot be changed.';
      TempFieldBuffer@1001 : TEMPORARY Record 8450;
      Customer@1003 : Record 18;
      Currency@1019 : Record 4;
      PaymentTerms@1018 : Record 3;
      GraphMgtSalesCreditMemo@1012 : Codeunit 5507;
      GraphMgtSalCrMemoBuf@1007 : Codeunit 5508;
      GraphMgtGeneralTools@1009 : Codeunit 5465;
      LCYCurrencyCode@1008 : Code[10];
      CurrencyCodeTxt@1006 : Text;
      BillingPostalAddressJSONText@1002 : Text;
      BillingPostalAddressSet@1000 : Boolean;
      CouldNotFindCustomerErr@1005 : TextConst '@@@={Locked};ENU=The customer cannot be found.;ESM=The customer cannot be found.;FRC=The customer cannot be found.;ENC=The customer cannot be found.';
      CustomerNotProvidedErr@1022 : TextConst '@@@={Locked};ENU=A customerNumber or a customerId must be provided.;ESM=A customerNumber or a customerId must be provided.;FRC=A customerNumber or a customerId must be provided.;ENC=A customerNumber or a customerId must be provided.';
      CustomerValuesDontMatchErr@1024 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.;ESM=The customer values do not match to a specific Customer.;FRC=The customer values do not match to a specific Customer.;ENC=The customer values do not match to a specific Customer.';
      DiscountAmountSet@1023 : Boolean;
      InvoiceDiscountAmount@1021 : Decimal;
      InvoiceId@1025 : GUID;
      InvoiceNo@1026 : Code[20];
      InvoiceValuesDontMatchErr@1027 : TextConst '@@@={Locked};ENU=The invoiceId and invoiceNumber do not match to a specific Invoice.;ESM=The invoiceId and invoiceNumber do not match to a specific Invoice.;FRC=The invoiceId and invoiceNumber do not match to a specific Invoice.;ENC=The invoiceId and invoiceNumber do not match to a specific Invoice.';
      InvoiceIdDoesNotMatchAnInvoiceErr@1028 : TextConst '@@@={Locked};ENU=The invoiceId does not match to an Invoice.;ESM=The invoiceId does not match to an Invoice.;FRC=The invoiceId does not match to an Invoice.;ENC=The invoiceId does not match to an Invoice.';
      ContactIdHasToHaveValueErr@1011 : TextConst 'ENU=Contact Id must have a value set.;ESM=El id. de contacto debe tener un valor establecido.;FRC=Le code du contact doit avoir une valeur d‚finie.;ENC=Contact Id must have a value set.';
      CurrencyValuesDontMatchErr@1017 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.;ESM=The currency values do not match to a specific Currency.;FRC=The currency values do not match to a specific Currency.;ENC=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1016 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.;ESM=The "currencyId" does not match to a Currency.;FRC=The "currencyId" does not match to a Currency.;ENC=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1015 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.;ESM=The "currencyCode" does not match to a Currency.;FRC=The "currencyCode" does not match to a Currency.;ENC=The "currencyCode" does not match to a Currency.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1013 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.;ESM=The "paymentTermsId" does not match to a Payment Terms.;FRC=The "paymentTermsId" does not match to a Payment Terms.;ENC=The "paymentTermsId" does not match to a Payment Terms.';
      BlankGUID@1020 : GUID;
      DocumentDateSet@1032 : Boolean;
      DocumentDateVar@1031 : Date;
      DueDateSet@1030 : Boolean;
      DueDateVar@1029 : Date;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtSalesCreditMemo@1000 : Codeunit 5507;
    BEGIN
      SetInvoiceId;
      BillingPostalAddressJSONText := GraphMgtSalesCreditMemo.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(InvoiceId);
      CLEAR(InvoiceNo);
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(InvoiceDiscountAmount);
      CLEAR(DiscountAmountSet);
      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      IF TempFieldBuffer.FINDLAST THEN
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Cr. Memo Entity Buffer";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    BEGIN
      IF NOT BillingPostalAddressSet THEN
        EXIT;

      GraphMgtSalesCreditMemo.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      IF xRec."Sell-to Address" <> "Sell-to Address" THEN
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      IF xRec."Sell-to Address 2" <> "Sell-to Address 2" THEN
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      IF xRec."Sell-to City" <> "Sell-to City" THEN
        RegisterFieldSet(FIELDNO("Sell-to City"));

      IF xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" THEN
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      IF xRec."Sell-to Post Code" <> "Sell-to Post Code" THEN
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      IF xRec."Sell-to County" <> "Sell-to County" THEN
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record 18);
    VAR
      O365SalesInvoiceMgmt@1002 : Codeunit 2310;
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      IF NOT UpdateCustomer THEN BEGIN
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := NOT TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      END;

      IF UpdateCustomer THEN BEGIN
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      END;

      O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);
    END;

    LOCAL PROCEDURE CheckCustomerSpecified@1();
    BEGIN
      IF ("Sell-to Customer No." = '') AND
         ("Customer Id" = BlankGUID)
      THEN
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE SetInvoiceId@18();
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      CLEAR(InvoiceId);

      IF "Applies-to Doc. No." = '' THEN
        EXIT;

      IF SalesInvoiceHeader.GET("Applies-to Doc. No.") THEN
        InvoiceId := SalesInvoiceHeader.Id;
    END;

    LOCAL PROCEDURE SetPemissionsFilters@4();
    VAR
      SalesHeader@1001 : Record 36;
      SalesCrMemoHeader@1000 : Record 114;
      FilterText@1002 : Text;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      IF NOT SalesHeader.READPERMISSION THEN
        FilterText := STRSUBSTNO('<>%1&<>%2',Status::Draft,Status::"In Review");

      IF NOT SalesCrMemoHeader.READPERMISSION THEN BEGIN
        IF FilterText <> '' THEN
          FilterText += '&';
        FilterText +=
          STRSUBSTNO(
            '<>%1&<>%2&<>%3&<>%4',Status::Canceled,Status::Corrective,
            Status::Open,Status::Paid);
      END;

      IF FilterText <> '' THEN BEGIN
        FILTERGROUP(2);
        SETFILTER(Status,FilterText);
        FILTERGROUP(0);
      END;
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      SalesHeader@1002 : Record 36;
      SalesCalcDiscountByType@1000 : Codeunit 56;
    BEGIN
      IF NOT DiscountAmountSet THEN BEGIN
        GraphMgtSalCrMemoBuf.RedistributeCreditMemoDiscounts(Rec);
        EXIT;
      END;

      SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo","No.");
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
    END;

    LOCAL PROCEDURE SetDates@8();
    VAR
      GraphMgtSalCrMemoBuf@1000 : Codeunit 5508;
    BEGIN
      IF NOT (DueDateSet OR DocumentDateSet) THEN
        EXIT;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      IF DocumentDateSet THEN BEGIN
        "Document Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
      END;

      IF DueDateSet THEN BEGIN
        "Due Date" := DueDateVar;
        RegisterFieldSet(FIELDNO("Due Date"));
      END;

      GraphMgtSalCrMemoBuf.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    BEGIN
    END.
  }
}

