OBJECT Codeunit 1315 Chart Management
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:08:08 PM;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountSchedulesChartSetup@6002 : Record 762;
      TempEntryNoAmountBuf@1008 : TEMPORARY Record 386;
      SalesByCustGrpChartSetup@1015 : Record 1319;
      AccSchedChartManagement@6001 : Codeunit 762;
      TopTenCustomersChartMgt@6006 : Codeunit 1316;
      TopFiveCustomersChartMgt@1020 : Codeunit 1326;
      AgedInventoryChartMgt@1005 : Codeunit 1317;
      SalesByCustGrpChartMgt@1017 : Codeunit 1319;
      AgedAccReceivable@1006 : Codeunit 763;
      AgedAccPayable@1009 : Codeunit 764;
      Period@1004 : ' ,Next,Previous';
      MediumStatusTxt@1001 : TextConst '@@@=%1 Account Schedule Chart Setup Name, %2 Period Length, %3 Current time;ENU=%1 | View by %2';
      LongStatusTxt@1000 : TextConst '@@@="%1 Account Schedule Chart Setup Name, %2 = Start Date, %3 = End Date, %4 Period Length, %5 Current time";ENU=%1 | %2..%3 | %4';
      TopTenCustomerChartNameTxt@4047 : TextConst 'ENU=Top Ten Customers by Sales Value';
      TopFiveCustomerChartNameTxt@1022 : TextConst 'ENU=Top Five Customers by Sales Value';
      AgedInventoryChartNameTxt@4048 : TextConst 'ENU=Aged Inventory';
      SalesByCustomerGroupNameTxt@1016 : TextConst 'ENU=Sales Trends by Customer Groups';
      SalesByCustomerGroupDescriptionTxt@1018 : TextConst 'ENU=This chart shows sales trends by customer group in the selected period.';
      TopTenCustomersChartDescriptionTxt@1002 : TextConst 'ENU=This chart shows the ten customers with the highest total sales value. The last column shows the sum of sales values of all other customers.';
      TopFiveCustomersChartDescriptionTxt@1021 : TextConst 'ENU=This Pie chart shows the five customers with the highest total sales value.';
      AgedInventoryChartDescriptionTxt@1003 : TextConst 'ENU=This chart shows the total inventory value, grouped by the number of days that the items are on inventory.';
      AgedAccReceivableNameTxt@1007 : TextConst 'ENU=Aged Accounts Receivable';
      AgedAccPayableNameTxt@1010 : TextConst 'ENU=Aged Accounts Payable';
      XCashFlowChartNameTxt@1013 : TextConst 'ENU=Cash Flow';
      XIncomeAndExpenseChartNameTxt@1012 : TextConst 'ENU=Income & Expense';
      XCashCycleChartNameTxt@1011 : TextConst 'ENU=Cash Cycle';
      NoEnabledChartsFoundErr@1014 : TextConst 'ENU=There are no enabled charts. Choose Select Chart to see a list of charts that you can display.';
      ChartDefinitionMissingErr@1019 : TextConst 'ENU=There are no charts defined.';

    [External]
    PROCEDURE AddinReady@6000(VAR ChartDefinition@6000 : Record 1310;VAR BusinessChartBuffer@6001 : Record 485);
    VAR
      LastUsedChart@4047 : Record 1311;
      LastChartRecorded@1000 : Boolean;
      LastChartExists@1001 : Boolean;
      LastChartEnabled@1002 : Boolean;
    BEGIN
      LastChartRecorded := LastUsedChart.GET(USERID);
      LastChartExists :=
        LastChartRecorded AND ChartDefinition.GET(LastUsedChart."Code Unit ID",LastUsedChart."Chart Name");
      LastChartEnabled := LastChartExists AND ChartDefinition.Enabled;
      IF ChartDefinition.ISEMPTY THEN
        EXIT;
      IF NOT LastChartEnabled THEN BEGIN
        ChartDefinition.SETRANGE(Enabled,TRUE);
        IF NOT ChartDefinition.FINDLAST THEN
          DIALOG.ERROR(NoEnabledChartsFoundErr);
      END;
      SetDefaultPeriodLength(ChartDefinition,BusinessChartBuffer);
      UpdateChart(ChartDefinition,BusinessChartBuffer,Period::" ");
    END;

    [External]
    PROCEDURE ChartDescription@1(ChartDefinition@1000 : Record 1310) : Text;
    BEGIN
      CASE ChartDefinition."Code Unit ID" OF
        CODEUNIT::"Acc. Sched. Chart Management":
          EXIT(AccountSchedulesChartSetup.Description);
        CODEUNIT::"Top Ten Customers Chart Mgt.":
          EXIT(TopTenCustomersChartDescriptionTxt);
        CODEUNIT::"Aged Inventory Chart Mgt.":
          EXIT(AgedInventoryChartDescriptionTxt);
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          EXIT(SalesByCustomerGroupDescriptionTxt);
        CODEUNIT::"Aged Acc. Receivable":
          EXIT(AgedAccReceivable.Description(FALSE));
        CODEUNIT::"Aged Acc. Payable":
          EXIT(AgedAccPayable.Description(FALSE));
        CODEUNIT::"Top Five Customers Chart Mgt.":
          EXIT(TopFiveCustomersChartDescriptionTxt);
      END;
    END;

    [External]
    PROCEDURE CashFlowChartName@3() : Text[30];
    BEGIN
      EXIT(XCashFlowChartNameTxt)
    END;

    [External]
    PROCEDURE CashCycleChartName@5() : Text[30];
    BEGIN
      EXIT(XCashCycleChartNameTxt)
    END;

    [External]
    PROCEDURE IncomeAndExpenseChartName@6() : Text[30];
    BEGIN
      EXIT(XIncomeAndExpenseChartNameTxt)
    END;

    [External]
    PROCEDURE DataPointClicked@6001(VAR BusinessChartBuffer@6000 : Record 485;VAR ChartDefinition@6001 : Record 1310);
    BEGIN
      CASE ChartDefinition."Code Unit ID" OF
        CODEUNIT::"Acc. Sched. Chart Management":
          AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);
        CODEUNIT::"Top Ten Customers Chart Mgt.":
          TopTenCustomersChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Top Five Customers Chart Mgt.":
          TopFiveCustomersChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Aged Inventory Chart Mgt.":
          AgedInventoryChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          SalesByCustGrpChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Aged Acc. Receivable":
          AgedAccReceivable.DrillDownByGroup(BusinessChartBuffer,TempEntryNoAmountBuf);
        CODEUNIT::"Aged Acc. Payable":
          AgedAccPayable.DrillDownByGroup(BusinessChartBuffer,TempEntryNoAmountBuf);
      END;
    END;

    [External]
    PROCEDURE PopulateChartDefinitionTable@2();
    BEGIN
      InsertChartDefinition(CODEUNIT::"Top Five Customers Chart Mgt.",TopFiveCustomerChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Top Ten Customers Chart Mgt.",TopTenCustomerChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Aged Inventory Chart Mgt.",AgedInventoryChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Sales by Cust. Grp. Chart Mgt.",SalesByCustomerGroupNameTxt);
      InsertChartDefinition(CODEUNIT::"Aged Acc. Receivable",AgedAccReceivableNameTxt);
      InsertChartDefinition(CODEUNIT::"Aged Acc. Payable",AgedAccPayableNameTxt);
      InsertChartDefinition(CODEUNIT::"Acc. Sched. Chart Management",XCashFlowChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Acc. Sched. Chart Management",XIncomeAndExpenseChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Acc. Sched. Chart Management",XCashCycleChartNameTxt);
    END;

    [External]
    PROCEDURE SelectChart@6011(VAR BusinessChartBuffer@6002 : Record 485;VAR ChartDefinition@6001 : Record 1310);
    VAR
      ChartList@6000 : Page 1391;
    BEGIN
      IF ChartDefinition.ISEMPTY THEN
        IF ChartDefinition.WRITEPERMISSION THEN BEGIN
          PopulateChartDefinitionTable;
          COMMIT;
        END ELSE
          ERROR(ChartDefinitionMissingErr);
      ChartList.LOOKUPMODE(TRUE);

      IF ChartList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ChartList.GETRECORD(ChartDefinition);
        SetDefaultPeriodLength(ChartDefinition,BusinessChartBuffer);
        UpdateChart(ChartDefinition,BusinessChartBuffer,Period::" ");
      END;
    END;

    [External]
    PROCEDURE SetDefaultPeriodLength@7002(ChartDefinition@4048 : Record 1310;VAR BusChartBuf@4047 : Record 485);
    VAR
      BusChartUserSetup@1000 : Record 487;
    BEGIN
      CASE ChartDefinition."Code Unit ID" OF
        CODEUNIT::"Aged Inventory Chart Mgt.":
          SetPeriodLength(ChartDefinition,BusChartBuf,BusChartBuf."Period Length"::Month,TRUE);
        CODEUNIT::"Aged Acc. Receivable":
          BEGIN
            BusChartUserSetup.InitSetupCU(CODEUNIT::"Aged Acc. Receivable");
            SetPeriodLength(ChartDefinition,BusChartBuf,BusChartUserSetup."Period Length",TRUE);
          END;
        CODEUNIT::"Aged Acc. Payable":
          BEGIN
            BusChartUserSetup.InitSetupCU(CODEUNIT::"Aged Acc. Payable");
            SetPeriodLength(ChartDefinition,BusChartBuf,BusChartUserSetup."Period Length",TRUE);
          END;
        CODEUNIT::"Acc. Sched. Chart Management":
          BEGIN
            AccountSchedulesChartSetup.GET('',ChartDefinition."Chart Name");
            SetPeriodLength(ChartDefinition,BusChartBuf,AccountSchedulesChartSetup."Period Length",TRUE);
          END;
      END;
    END;

    [External]
    PROCEDURE SetPeriodLength@7001(ChartDefinition@1000 : Record 1310;VAR BusChartBuf@4047 : Record 485;PeriodLength@4048 : Option;IsInitState@1002 : Boolean);
    VAR
      NewStartDate@1001 : Date;
    BEGIN
      CASE ChartDefinition."Code Unit ID" OF
        CODEUNIT::"Acc. Sched. Chart Management":
          BEGIN
            AccountSchedulesChartSetup.GET('',ChartDefinition."Chart Name");
            AccountSchedulesChartSetup.SetPeriodLength(PeriodLength);
            BusChartBuf."Period Length" := PeriodLength;
            IF AccountSchedulesChartSetup."Look Ahead" THEN
              NewStartDate := GetBaseDate(BusChartBuf,IsInitState)
            ELSE
              NewStartDate :=
                CALCDATE(
                  STRSUBSTNO(
                    '<-%1%2>',AccountSchedulesChartSetup."No. of Periods",BusChartBuf.GetPeriodLength),
                  GetBaseDate(BusChartBuf,IsInitState));
            IF AccountSchedulesChartSetup."Start Date" <> NewStartDate THEN BEGIN
              AccountSchedulesChartSetup.VALIDATE("Start Date",NewStartDate);
              AccountSchedulesChartSetup.MODIFY(TRUE);
            END;
          END;
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          SalesByCustGrpChartSetup.SetPeriodLength(PeriodLength);
        ELSE
          BusChartBuf."Period Length" := PeriodLength;
      END;
    END;

    [External]
    PROCEDURE UpdateChart@6012(VAR ChartDefinition@6001 : Record 1310;VAR BusinessChartBuffer@6000 : Record 485;Period@6002 : Option);
    BEGIN
      CASE ChartDefinition."Code Unit ID" OF
        CODEUNIT::"Acc. Sched. Chart Management":
          BEGIN
            AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartDefinition."Chart Name",0);
            AccSchedChartManagement.UpdateData(BusinessChartBuffer,Period,AccountSchedulesChartSetup);
          END;
        CODEUNIT::"Aged Inventory Chart Mgt.":
          AgedInventoryChartMgt.UpdateChart(BusinessChartBuffer);
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          BEGIN
            SalesByCustGrpChartSetup.SetPeriod(Period);
            SalesByCustGrpChartMgt.UpdateChart(BusinessChartBuffer);
          END;
        CODEUNIT::"Aged Acc. Receivable":
          BEGIN
            BusinessChartBuffer."Period Filter Start Date" := WORKDATE;
            AgedAccReceivable.UpdateDataPerGroup(BusinessChartBuffer,TempEntryNoAmountBuf);
            AgedAccReceivable.SaveSettings(BusinessChartBuffer);
          END;
        CODEUNIT::"Aged Acc. Payable":
          BEGIN
            BusinessChartBuffer."Period Filter Start Date" := WORKDATE;
            AgedAccPayable.UpdateData(BusinessChartBuffer,TempEntryNoAmountBuf);
            AgedAccPayable.SaveSettings(BusinessChartBuffer)
          END;
        CODEUNIT::"Top Five Customers Chart Mgt.":
          TopFiveCustomersChartMgt.UpdateChart(BusinessChartBuffer);
        ELSE
          TopTenCustomersChartMgt.UpdateChart(BusinessChartBuffer);
      END;
      UpdateLastUsedChart(ChartDefinition);
    END;

    [External]
    PROCEDURE UpdateNextPrevious@6002(VAR ChartDefinition@6001 : Record 1310) : Boolean;
    BEGIN
      EXIT(ChartDefinition."Code Unit ID" IN
        [CODEUNIT::"Acc. Sched. Chart Management",
         CODEUNIT::"Sales by Cust. Grp. Chart Mgt."]);
    END;

    [External]
    PROCEDURE UpdateStatusText@6003(VAR ChartDefinition@6000 : Record 1310;VAR BusinessChartBuffer@1000 : Record 485;VAR StatusText@6001 : Text);
    VAR
      StartDate@1001 : Date;
      EndDate@1002 : Date;
    BEGIN
      StartDate := BusinessChartBuffer."Period Filter Start Date";
      EndDate := BusinessChartBuffer."Period Filter End Date";
      CASE ChartDefinition."Code Unit ID" OF
        CODEUNIT::"Acc. Sched. Chart Management":
          WITH AccountSchedulesChartSetup DO
            CASE "Base X-Axis on" OF
              "Base X-Axis on"::Period:
                StatusText := STRSUBSTNO(MediumStatusTxt,ChartDefinition."Chart Name","Period Length");
              "Base X-Axis on"::"Acc. Sched. Line",
              "Base X-Axis on"::"Acc. Sched. Column":
                StatusText := STRSUBSTNO(LongStatusTxt,ChartDefinition."Chart Name",StartDate,EndDate,"Period Length");
            END;
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.",
        CODEUNIT::"Aged Acc. Receivable",
        CODEUNIT::"Aged Acc. Payable",
        CODEUNIT::"Aged Inventory Chart Mgt.":
          StatusText := STRSUBSTNO(MediumStatusTxt,ChartDefinition."Chart Name",BusinessChartBuffer."Period Length");
        ELSE
          StatusText := ChartDefinition."Chart Name";
      END;
    END;

    LOCAL PROCEDURE UpdateLastUsedChart@4(ChartDefinition@1001 : Record 1310);
    VAR
      LastUsedChart@1000 : Record 1311;
    BEGIN
      WITH LastUsedChart DO
        IF GET(USERID) THEN BEGIN
          VALIDATE("Code Unit ID",ChartDefinition."Code Unit ID");
          VALIDATE("Chart Name",ChartDefinition."Chart Name");
          MODIFY;
        END ELSE BEGIN
          VALIDATE(UID,USERID);
          VALIDATE("Code Unit ID",ChartDefinition."Code Unit ID");
          VALIDATE("Chart Name",ChartDefinition."Chart Name");
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InsertChartDefinition@7(ChartCodeunitId@1000 : Integer;ChartName@1001 : Text[60]);
    VAR
      ChartDefinition@1002 : Record 1310;
    BEGIN
      IF NOT ChartDefinition.GET(ChartCodeunitId,ChartName) THEN BEGIN
        ChartDefinition."Code Unit ID" := ChartCodeunitId;
        ChartDefinition."Chart Name" := ChartName;
        ChartDefinition.Enabled := TRUE;
        ChartDefinition.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetPeriodLength@31() : Text[1];
    BEGIN
      CASE AccountSchedulesChartSetup."Period Length" OF
        AccountSchedulesChartSetup."Period Length"::Day:
          EXIT('D');
        AccountSchedulesChartSetup."Period Length"::Week:
          EXIT('W');
        AccountSchedulesChartSetup."Period Length"::Month:
          EXIT('M');
        AccountSchedulesChartSetup."Period Length"::Quarter:
          EXIT('Q');
        AccountSchedulesChartSetup."Period Length"::Year:
          EXIT('Y');
      END;
    END;

    LOCAL PROCEDURE GetBaseDate@8(VAR BusChartBuf@1005 : Record 485;IsInitState@1001 : Boolean) : Date;
    VAR
      ColumnIndex@1000 : Integer;
      StartDate@1002 : Date;
      EndDate@1003 : Date;
    BEGIN
      IF AccountSchedulesChartSetup."Look Ahead" THEN
        ColumnIndex := 0
      ELSE
        ColumnIndex := AccountSchedulesChartSetup."No. of Periods" - 1;

      IF IsInitState THEN
        EXIT(WORKDATE);

      BusChartBuf.GetPeriodFromMapColumn(ColumnIndex,StartDate,EndDate);

      IF AccountSchedulesChartSetup."Look Ahead" THEN
        EXIT(StartDate);

      EXIT(CALCDATE(STRSUBSTNO('<1%1>',GetPeriodLength),EndDate));
    END;

    PROCEDURE AgedAccReceivableName@9() : Text[60];
    BEGIN
      EXIT(AgedAccReceivableNameTxt)
    END;

    PROCEDURE AgedAccPayableName@10() : Text[60];
    BEGIN
      EXIT(AgedAccPayableNameTxt)
    END;

    BEGIN
    END.
  }
}

