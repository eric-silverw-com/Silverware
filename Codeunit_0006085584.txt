OBJECT Codeunit 6085584 File System Management
{
  OBJECT-PROPERTIES
  {
    Date=08/13/18;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.4.50.07;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FileSystem@161024012 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=4.50.0.0, Culture=neutral, PublicKeyToken=005df25b46c40152'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.FileSystem";

    PROCEDURE GetClientFilename@1160040002(ServerFilename@1160040000 : Text[1024];WriteProtected@6085573 : Boolean) ClientFileName : Text[1024];
    VAR
      DCSetup@6085575 : Record 6085573;
      FileMgt@6085574 : Codeunit 419;
    BEGIN
      IF NOT CreateVars THEN
        EXIT('');

      ClientFileName := FileMgt.ClientTempFileName(FileMgt.GetExtension(ServerFilename));

      IF NOT WriteProtected THEN
        ClientFileName := DownloadTempFile(ServerFilename)
      ELSE
        IF FILE.EXISTS(ServerFilename) THEN
          FileMgt.DownloadToFile(ServerFilename,ClientFileName);

      IF WriteProtected THEN
        WriteProtectClientFile(ClientFileName);
    END;

    PROCEDURE GetServerFile@6085574(ServerFilename@6085573 : Text[1024]) ClientFileName : Text;
    VAR
      FileMgt@6085574 : Codeunit 419;
    BEGIN
      ClientFileName := FileMgt.ClientTempFileName(FileMgt.GetExtension(ServerFilename));
      FileMgt.DownloadToFile(ServerFilename,ClientFileName);
    END;

    PROCEDURE DirectoryExists@161024013(Path@161024012 : Text[1024]) : Boolean;
    BEGIN
      IF NOT CreateVars THEN
        EXIT(FALSE);

      EXIT(FileSystem.DirectoryExists(Path));
    END;

    PROCEDURE CreateDirectory@161024015(Path@161024012 : Text[1024]) : Boolean;
    BEGIN
      IF NOT CreateVars THEN
        EXIT(FALSE);

      EXIT(FileSystem.CreateDirectory(Path));
    END;

    PROCEDURE CreateTempDirectory@6085575(FolderName@161024012 : Text[1024]) FolderPath : Text;
    BEGIN
      IF NOT CreateVars THEN
        EXIT;

      FolderPath := TEMPORARYPATH + FolderName;
      IF FileSystem.DirectoryExists(FolderPath) THEN
        FileSystem.DeleteDirectory(FolderPath);

      IF NOT FileSystem.CreateDirectory(FolderPath) THEN
        EXIT('');
    END;

    PROCEDURE IsFileLocked@161024017(Filename@161024012 : Text[1024]) : Boolean;
    BEGIN
      IF NOT CreateVars THEN
        EXIT(FALSE);

      EXIT(FileSystem.IsFileLocked(Filename));
    END;

    PROCEDURE CopyFile@1160040000(FromFile@1160040001 : Text[1024];ToFile@1160040000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(FILE.COPY(FromFile,ToFile));
    END;

    PROCEDURE MoveFile@161024020(FromFile@161024012 : Text[1024];ToFile@161024013 : Text[1024]) : Boolean;
    BEGIN
      IF NOT CreateVars THEN
        EXIT(FALSE);

      EXIT(FileSystem.Move(FromFile,ToFile));
    END;

    PROCEDURE DeleteFile@1160040001(Filename@1160040000 : Text[1024];SupressError@1160040001 : Boolean) : Boolean;
    BEGIN
      IF SupressError THEN
        EXIT(FILE.ERASE(Filename))
      ELSE
        FILE.ERASE(Filename)
    END;

    PROCEDURE UploadFileSilent@10(ClientFilePath@1001 : Text;ServerDirPath@6085573 : Text) : Boolean;
    VAR
      FileMgt@6085574 : Codeunit 419;
      ServerTempPath@6085576 : Text;
      ServerFileName@6085575 : Text;
    BEGIN
      IF COPYSTR(ServerDirPath,STRLEN(ServerDirPath)) = '\' THEN
        ServerFileName := ServerDirPath + GetFilename(ClientFilePath)
      ELSE
        ServerFileName := ServerDirPath + '\' + GetFilename(ClientFilePath);

      ServerTempPath := FileMgt.UploadFileSilent(ClientFilePath);

      IF NOT CopyFile(ServerTempPath,ServerFileName) THEN
        EXIT(FALSE);

      DeleteFile(ServerTempPath,TRUE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateVars@161024012() : Boolean;
    BEGIN
      IF NOT ISNULL(FileSystem) THEN
        EXIT(TRUE);

      IF NOT CANLOADTYPE(FileSystem) THEN
        EXIT(FALSE);

      FileSystem := FileSystem.FileSystem;
      EXIT(TRUE);
    END;

    PROCEDURE GetFilePath@161024016(FullFilename@161024012 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(COPYSTR(FullFilename,1,LastIndexOf(FullFilename,'\',TRUE)));
    END;

    PROCEDURE GetFilename@161024018(FullFilename@161024012 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(COPYSTR(FullFilename,LastIndexOf(FullFilename,'\',TRUE)+1));
    END;

    PROCEDURE GetFilenameWithoutExt@161024019(FullFilename@161024012 : Text[1024]) : Text[1024];
    BEGIN
      FullFilename := COPYSTR(FullFilename,LastIndexOf(FullFilename,'\',TRUE)+1);
      IF STRPOS(FullFilename,'.') <> 0 THEN
        FullFilename := COPYSTR(FullFilename,1,LastIndexOf(FullFilename,'.',TRUE)-1);
      EXIT(FullFilename);
    END;

    PROCEDURE GetFileExtension@161024021(FullFilename@161024012 : Text[1024]) : Text[30];
    VAR
      Filename@6085573 : Text[250];
      Index@6085574 : Integer;
    BEGIN
      Filename := COPYSTR(FullFilename,LastIndexOf(FullFilename,'\',TRUE) + 1);

      Index := LastIndexOf(Filename,'.',TRUE);
      IF Index = 0 THEN
        EXIT('');

      EXIT(COPYSTR(Filename,Index + 1));
    END;

    PROCEDURE GetTempFilename@1160040004(Filename@1160040002 : Text[1024];Extension@1160040000 : Text[30]) : Text[1024];
    VAR
      TierAutoMgt@1160040001 : Codeunit 419;
    BEGIN
      EXIT(TierAutoMgt.ServerTempFileName(Extension));
    END;

    PROCEDURE LocalShell@1160040003(Filename@1160040000 : Text[1024]);
    VAR
      LocalFileSystem@6085573 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=4.50.0.0, Culture=neutral, PublicKeyToken=005df25b46c40152'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.FileSystem" RUNONCLIENT;
    BEGIN
      LocalFileSystem := LocalFileSystem.FileSystem;
      LocalFileSystem.OpenFile(Filename);
      CLEAR(LocalFileSystem);
    END;

    PROCEDURE LocalShellModal@1160040008(Filename@1160040000 : Text[1024]) Succes : Boolean;
    VAR
      LocalFileSystem@6085573 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=4.50.0.0, Culture=neutral, PublicKeyToken=005df25b46c40152'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.FileSystem" RUNONCLIENT;
    BEGIN
      LocalFileSystem := LocalFileSystem.FileSystem;
      Succes := LocalFileSystem.OpenFileModal(Filename);
      CLEAR(LocalFileSystem);
    END;

    PROCEDURE LastIndexOf@6085573(Text@161024012 : Text[1024];CharToFind@161024013 : Text[1];IgnoreCase@161024014 : Boolean) : Integer;
    VAR
      StartIndex@161024015 : Integer;
    BEGIN
      IF IgnoreCase THEN BEGIN
        Text := UPPERCASE(Text);
        CharToFind := UPPERCASE(CharToFind);
      END;

      StartIndex := STRLEN(Text);
      WHILE StartIndex > 0 DO BEGIN
        IF COPYSTR(Text,StartIndex,1) = CharToFind THEN
          EXIT(StartIndex)
        ELSE
          StartIndex -= 1;
      END;
    END;

    PROCEDURE WriteProtectClientFile@1160040011(FilePath@1160040000 : Text[1024]) : Boolean;
    VAR
      FileAttributes@6085573 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileAttributes" RUNONCLIENT;
      File@6085574 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File" RUNONCLIENT;
      IntAtt@6085575 : Integer;
      IntAtt2@6085576 : Integer;
    BEGIN
      FileAttributes := File.GetAttributes(FilePath);
      IntAtt := FileAttributes;
      IntAtt2 := FileAttributes.ReadOnly;
      File.SetAttributes(FilePath,IntAtt + IntAtt2);
    END;

    PROCEDURE RemoveClientFileWriteProtection@1160040012(FilePath@6085577 : Text[1024]) : Boolean;
    VAR
      FileAttributes@6085576 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileAttributes" RUNONCLIENT;
      File@6085575 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File" RUNONCLIENT;
      IntAtt@6085574 : Integer;
      IntAtt2@6085573 : Integer;
    BEGIN
      FileAttributes := File.GetAttributes(FilePath);
      IntAtt := FileAttributes;
      IntAtt2 := FileAttributes.ReadOnly;
      File.SetAttributes(FilePath,IntAtt - IntAtt2);
    END;

    PROCEDURE GetFilesInDir@1000000005(DirectoryPath@1000000002 : Text[1024];Pattern@161024012 : Text[30]) : Integer;
    VAR
      Directory@1160040001 : DotNet "'mscorlib'.System.IO.Directory";
    BEGIN
      IF NOT DirectoryExists(DirectoryPath) THEN
        EXIT;

      EXIT(Directory.GetFiles(DirectoryPath,Pattern).Length);
    END;

    PROCEDURE GetFilesInDir2@1160040006(DirectoryPath@1160040000 : Text[250];Pattern@1160040001 : Text[30];VAR OutFileArray@1160040003 : ARRAY [10000] OF Text[250]) FileCount : Integer;
    VAR
      FileDirectory@6085575 : DotNet "'mscorlib'.System.IO.Directory";
      FileObject@6085574 : DotNet "'mscorlib'.System.Object";
      FileList@6085573 : DotNet "'mscorlib'.System.Collections.Generic.List`1";
      FileNo@1160040004 : Integer;
    BEGIN
      IF NOT CreateVars THEN
        EXIT(0);

      IF NOT FileDirectory.Exists(DirectoryPath) THEN
        EXIT(0);

      FileObject := FileDirectory.GetFiles(DirectoryPath,Pattern);
      FileList := FileList.List;

      FileList.AddRange(FileObject);

      FileCount := FileList.Count;

      FOR FileNo := 1 TO FileCount DO
        OutFileArray[FileNo] := FileList.Item(FileNo-1);

      CLEAR(FileObject);
      CLEAR(FileList);
    END;

    PROCEDURE GetDirectories@1160040005(DirectoryPath@1160040003 : Text[250];Pattern@1160040001 : Text[30];VAR OutDirectoryArray@1160040000 : ARRAY [10000] OF Text[250]) DirectoryCount : Integer;
    VAR
      Directory@6085576 : DotNet "'mscorlib'.System.IO.Directory";
      DirectoryObject@6085575 : DotNet "'mscorlib'.System.Object";
      DirectoryList@6085574 : DotNet "'mscorlib'.System.Collections.Generic.List`1";
      DirectoryNo@6085573 : Integer;
    BEGIN
      IF NOT CreateVars THEN
        EXIT(0);

      IF Pattern = '' THEN
        DirectoryObject := Directory.GetDirectories(DirectoryPath)
      ELSE
        DirectoryObject := Directory.GetDirectories(DirectoryPath,Pattern);

      DirectoryList := DirectoryList.List;
      DirectoryList.AddRange(DirectoryObject);

      DirectoryCount := DirectoryList.Count;

      FOR DirectoryNo := 1 TO DirectoryCount DO
        OutDirectoryArray[DirectoryNo] := DirectoryList.Item(DirectoryNo-1);

      CLEAR(DirectoryList);
    END;

    PROCEDURE DownloadTempFile@7(ServerFileName@1001 : Text) : Text;
    VAR
      FileName@1102601003 : Text;
      Path@1102601004 : Text;
    BEGIN
      FileName := ServerFileName;
      Path := '<TEMP>';
      IF DOWNLOAD(ServerFileName,'',Path,'',FileName) THEN
        EXIT(FileName);
    END;

    BEGIN
    END.
  }
}

