OBJECT Page 9800 Users
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:05 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Users;
    ApplicationArea=#Basic,#Suite;
    SourceTable=Table2000000120;
    DelayedInsert=Yes;
    SourceTableView=SORTING(User Name);
    PageType=List;
    UsageCategory=Lists;
    CardPageID=User Card;
    OnInit=VAR
             PermissionManager@1000 : Codeunit 9002;
           BEGIN
             SoftwareAsAService := PermissionManager.SoftwareAsAService;
             CurrentUserIsSuper := PermissionManager.IsSuper(USERSECURITYID);
             CanManageUsers := PermissionManager.CanCurrentUserManagePlansAndGroups;
             IsIntelligentCloud := PermissionManager.IsIntelligentCloud;
           END;

    OnOpenPage=BEGIN
                 NoUserExists := ISEMPTY;

                 HideExternalUsers;
               END;

    OnAfterGetRecord=BEGIN
                       WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                       NoUserExists := FALSE;
                       RestoreUserGroupsForAnotherUser := "User Security ID" <> USERSECURITYID;
                     END;

    OnNewRecord=BEGIN
                  "User Security ID" := CREATEGUID;
                  WindowsUserName := '';
                END;

    OnInsertRecord=BEGIN
                     IF NOT UserCard.ManageUsersIsAllowed THEN
                       ERROR('');
                     IF "User Name" = '' THEN
                       ERROR(Text004Err,FIELDCAPTION("User Name"));
                   END;

    OnDeleteRecord=BEGIN
                     IF NOT UserCard.ManageUsersIsAllowed THEN
                       ERROR('');
                   END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      CaptionML=ENU=User Groups }
      { 15      ;2   ;Action    ;
                      CaptionML=ENU=User Groups;
                      ToolTipML=ENU=Set up or modify user groups as a fast way of giving users access to the functionality that is relevant to their work.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9830;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Users;
                      PromotedCategory=Process }
      { 25      ;1   ;ActionGroup;
                      CaptionML=ENU=Permissions }
      { 38      ;2   ;Action    ;
                      CaptionML=ENU=Effective Permissions;
                      ToolTipML=ENU=View this user's actual permissions for all objects per assigned permission set, and edit the user's permissions in permission sets of type User-Defined.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Permission;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 EffectivePermissionsMgt@1000 : Codeunit 9852;
                               BEGIN
                                 EffectivePermissionsMgt.OpenPageForUser("User Security ID");
                               END;
                                }
      { 16      ;2   ;Action    ;
                      CaptionML=ENU=Permission Sets;
                      ToolTipML=ENU=View or edit which feature objects that users need to access and set up the related permissions in permission sets that you can assign to the users of the database.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9802;
                      Promoted=Yes;
                      Image=Permission;
                      PromotedCategory=Process }
      { 9       ;2   ;Action    ;
                      CaptionML=ENU=Permission Set by User;
                      ToolTipML=ENU=View or edit the available permission sets and apply permission sets to existing users.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9816;
                      Promoted=Yes;
                      Image=Permission;
                      PromotedCategory=Process }
      { 19      ;2   ;Action    ;
                      CaptionML=ENU=Permission Set by User Group;
                      ToolTipML=ENU=View or edit the available permission sets and apply permission sets to existing user groups.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9837;
                      Promoted=Yes;
                      Image=Permission;
                      PromotedCategory=Process }
      { 23      ;1   ;Action    ;
                      CaptionML=ENU=User Setup;
                      ToolTipML=ENU=Set up users and define their permissions..;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 119;
                      Image=UserSetup }
      { 26      ;1   ;Action    ;
                      CaptionML=ENU=Printer Selections;
                      ToolTipML=ENU=Assign printers to users and/or reports so that a user always uses a specific printer, or a specific report only prints on a specific printer.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 64;
                      Image=Print }
      { 27      ;1   ;Action    ;
                      CaptionML=ENU=Warehouse Employees;
                      ToolTipML=ENU=View the warehouse employees that exist in the system.;
                      ApplicationArea=#Warehouse;
                      RunObject=Page 7328;
                      Image=WarehouseSetup }
      { 31      ;1   ;Action    ;
                      CaptionML=ENU=FA Journal Setup;
                      ToolTipML=ENU=Set up journals, journal templates, and journal batches for fixed assets.;
                      ApplicationArea=#FixedAssets;
                      RunObject=Page 5609;
                      Image=FixedAssets }
      { 22      ;    ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 21      ;1   ;Action    ;
                      Name=AddMeAsSuper;
                      CaptionML=ENU=Add me as Administrator;
                      ToolTipML=ENU=Assign the Administrator status to your user account.;
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=NoUserExists AND (NOT SoftwareAsAService);
                      PromotedIsBig=Yes;
                      Image=User;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF CONFIRM(STRSUBSTNO(CreateQst,USERID),FALSE) THEN
                                   CODEUNIT.RUN(CODEUNIT::"Users - Create Super User");
                               END;
                                }
      { 34      ;1   ;Action    ;
                      Name=Get Users from Office 365;
                      CaptionML=ENU=Get Users from Office 365;
                      ToolTipML=ENU=Gets updated information about users from the Office portal.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=SoftwareAsAService;
                      PromotedIsBig=Yes;
                      Image=Users;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 AzureADUserManagement@1000 : Codeunit 9010;
                               BEGIN
                                 AzureADUserManagement.CreateNewUsersFromAzureAD;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 36      ;1   ;Action    ;
                      Name=Invite External Accountant;
                      CaptionML=ENU=Invite External Accountant;
                      ToolTipML=ENU=Set up an external accountant with access to your Dynamics 365.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=SoftwareAsAService;
                      PromotedIsBig=Yes;
                      Image=SalesPerson;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 PAGE.RUN(PAGE::"Invite External Accountant");
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 35      ;1   ;Action    ;
                      Name=Restore User Default User Groups;
                      CaptionML=ENU=Restore User's Default User Groups;
                      ToolTipML=ENU=Restore the default user groups based on changes to the related plan.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=SoftwareAsAService;
                      Enabled=CurrentUserIsSuper AND RestoreUserGroupsForAnotherUser AND (NOT NoUserExists) AND (NOT IsIntelligentCloud);
                      PromotedIsBig=Yes;
                      Image=UserInterface;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 PermissionManager@1000 : Codeunit 9002;
                                 AzureADUserManagement@1001 : Codeunit 9010;
                               BEGIN
                                 IF CONFIRM(RestoreUserGroupsToDefaultQst,FALSE,"User Name") THEN BEGIN
                                   AzureADUserManagement.RefreshUserPlanAssignments("User Security ID");
                                   PermissionManager.ResetUserToDefaultUserGroups("User Security ID");
                                 END;
                               END;
                                }
      { 37      ;1   ;Action    ;
                      Name=Refresh all User Groups;
                      CaptionML=ENU=Refresh all User Groups;
                      ToolTipML=ENU=Refresh all users' user groups with changes to the related plan.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=SoftwareAsAService;
                      Enabled=CanManageUsers AND (NOT NoUserExists);
                      PromotedIsBig=Yes;
                      Image=SKU;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 Plan@1000 : Record 9004;
                                 AzureADUserManagement@1001 : Codeunit 9010;
                               BEGIN
                                 IF CONFIRM(RefreshAllUserPlansQst) THEN BEGIN
                                   AzureADUserManagement.UpdateUserPlansFromAzureGraphAllUsers;
                                   IF AzureADUserManagement.MixedPlansExist THEN BEGIN
                                     IF AzureADUserManagement.PlansExist(Plan.GetBasicPlanId) THEN
                                       ERROR(MixedSKUsWithBasicErr);
                                     ERROR(MixedSKUsWithoutBasicErr);
                                   END;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                ToolTipML=ENU=Specifies an ID that uniquely identifies the user. This value is generated automatically and should not be changed.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Security ID";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                Name=User Name;
                CaptionML=ENU=User Name;
                ToolTipML=ENU=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Name";
                OnValidate=BEGIN
                             ValidateUserName;
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=Full Name;
                CaptionML=ENU=Full Name;
                ToolTipML=ENU=Specifies the full name of the user.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Full Name";
                Editable=NOT SoftwareAsAService }

    { 77  ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the user's login is enabled.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=State }

    { 7   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the Windows Security ID of the user. This is only relevant for Windows authentication.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Windows Security ID";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                Name=Windows User Name;
                CaptionML=ENU=Windows User Name;
                ToolTipML=ENU=Specifies the user's name on Windows.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Visible=NOT SoftwareAsAService;
                OnValidate=VAR
                             UserSID@1000 : Text;
                           BEGIN
                             IF WindowsUserName = '' THEN
                               "Windows Security ID" := ''
                             ELSE BEGIN
                               UserSID := SID(WindowsUserName);
                               WindowsUserName := IdentityManagement.UserName(UserSID);
                               IF WindowsUserName <> '' THEN BEGIN
                                 "Windows Security ID" := UserSID;
                                 ValidateSid;
                                 SetUserName;
                               END ELSE
                                 ERROR(Text001Err,WindowsUserName);
                             END;
                           END;

                OnAssistEdit=VAR
                               DSOP@1000 : DotNet "'Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Management.DSObjectPicker.DSObjectPickerWrapper" RUNONCLIENT;
                               result@1001 : Text;
                             BEGIN
                               DSOP := DSOP.DSObjectPickerWrapper;
                               result := DSOP.InvokeDialogAndReturnSid;
                               IF result <> '' THEN BEGIN
                                 "Windows Security ID" := result;
                                 ValidateSid;
                                 WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                                 SetUserName;
                               END;
                             END;
                              }

    { 14  ;2   ;Field     ;
                Name=License Type;
                CaptionML=ENU=License Type;
                ToolTipML=ENU=Specifies the type of license that applies to the user. For more information, see License Types.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="License Type" }

    { 13  ;2   ;Field     ;
                Name=Authentication Email;
                ExtendedDatatype=E-Mail;
                ToolTipML=ENU=Specifies the Microsoft account that this user signs into Office 365 or SharePoint Online with.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Authentication Email";
                Visible=SoftwareAsAService;
                Editable=FALSE }

    { 8   ;0   ;Container ;
                ContainerType=FactBoxArea }

    { 18  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User Security ID=FIELD(User Security ID);
                PagePartID=Page9817;
                PartType=Page }

    { 17  ;1   ;Part      ;
                CaptionML=ENU=User Group Memberships;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User Security ID=FIELD(User Security ID);
                PagePartID=Page9836;
                PartType=Page }

    { 20  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User ID=FIELD(User Name);
                PagePartID=Page9819;
                PartType=Page }

    { 33  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User SID=FIELD(User Security ID);
                PagePartID=Page9821;
                PartType=Page }

    { 32  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User ID=FIELD(User Name);
                PagePartID=Page9839;
                PartType=Page;
                ShowFilter=No }

    { 28  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User ID=FIELD(User Name);
                PagePartID=Page9150;
                Visible=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 29  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User ID=FIELD(User Name);
                PagePartID=Page9151;
                Visible=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 30  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User ID=FIELD(User Name);
                PagePartID=Page9152;
                Visible=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 11  ;1   ;Part      ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

    { 12  ;1   ;Part      ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      IdentityManagement@1004 : Codeunit 9801;
      UserCard@1009 : Page 9807;
      WindowsUserName@1000 : Text[208];
      Text001Err@1003 : TextConst '@@@="%1=user name";ENU=The account %1 is not a valid Windows account.';
      Text002Err@1002 : TextConst '@@@="%1=user name";ENU=The account %1 already exists.';
      Text003Err@1001 : TextConst '@@@="%1=user name";ENU=The account %1 is not allowed.';
      Text004Err@1005 : TextConst '@@@="%1=user name";ENU=%1 cannot be empty.';
      NoUserExists@1006 : Boolean;
      CreateQst@1007 : TextConst '@@@="%1=user name, e.g. europe\myaccountname";ENU=Do you want to create %1 as super user?';
      SoftwareAsAService@1008 : Boolean;
      RestoreUserGroupsToDefaultQst@1011 : TextConst '@@@=Do you want to restore the default user groups to for user Annie?;ENU=Do you want to restore the default user groups to for user %1?';
      CurrentUserIsSuper@1014 : Boolean;
      RestoreUserGroupsForAnotherUser@1013 : Boolean;
      RefreshAllUserPlansQst@1010 : TextConst 'ENU=Do you want to refresh plans for all users?';
      MixedSKUsWithoutBasicErr@1012 : TextConst 'ENU=You cannot mix plans of type Essential and Premium. Make sure all users are on the same plan.';
      CanManageUsers@1015 : Boolean;
      MixedSKUsWithBasicErr@1016 : TextConst 'ENU=You cannot mix plans of type Basic, Essential, and Premium. Make sure all users are on the same plan.';
      IsIntelligentCloud@1017 : Boolean;

    LOCAL PROCEDURE ValidateSid@1();
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      IF "Windows Security ID" = '' THEN
        ERROR(Text001Err,"User Name");

      IF ("Windows Security ID" = 'S-1-1-0') OR ("Windows Security ID" = 'S-1-5-7') THEN
        ERROR(Text003Err,"User Name");

      User.SETFILTER("Windows Security ID","Windows Security ID");
      User.SETFILTER("User Security ID",'<>%1',"User Security ID");
      IF NOT User.ISEMPTY THEN
        ERROR(Text002Err,WindowsUserName);
    END;

    LOCAL PROCEDURE ValidateUserName@3();
    VAR
      UserMgt@1000 : Codeunit 418;
    BEGIN
      UserMgt.ValidateUserName(Rec,xRec,WindowsUserName);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SetUserName@4();
    BEGIN
      "User Name" := WindowsUserName;
      ValidateUserName;
    END;

    [External]
    PROCEDURE GetSelectionFilter@2(VAR User@1000 : Record 2000000120);
    BEGIN
      CurrPage.SETSELECTIONFILTER(User);
    END;

    LOCAL PROCEDURE HideExternalUsers@5();
    VAR
      PermissionManager@1001 : Codeunit 9002;
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    BEGIN
    END.
  }
}

