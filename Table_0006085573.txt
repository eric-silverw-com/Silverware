OBJECT Table 6085573 Document Capture Setup
{
  OBJECT-PROPERTIES
  {
    Date=08/03/18;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.5.00.02;
  }
  PROPERTIES
  {
    OnInsert=VAR
               UpgradeMgt@1000 : Codeunit 6085606;
             BEGIN
               "Data Version" := UpgradeMgt.GetCurrentVersion;
             END;

    CaptionML=ENU=Document Capture Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Document Nos.       ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Document Nos. }
    { 3   ;   ;Template Nos.       ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Template Nos. }
    { 4   ;   ;Scanned File Path for OCR;Text200  ;OnValidate=BEGIN
                                                                AddFolderSlash("Scanned File Path for OCR");
                                                              END;

                                                   CaptionML=ENU=Scanned File Path for OCR }
    { 6   ;   ;File Path for OCR-proc. files;Text200;
                                                   OnValidate=BEGIN
                                                                AddFolderSlash("File Path for OCR-proc. files");
                                                              END;

                                                   CaptionML=ENU=File Path for OCR-processed files }
    { 7   ;   ;PDF File Path for OCR;Text200      ;OnValidate=BEGIN
                                                                AddFolderSlash("PDF File Path for OCR");
                                                              END;

                                                   CaptionML=ENU=PDF File Path for OCR }
    { 8   ;   ;Unidentified Company File Path;Text200;
                                                   OnValidate=BEGIN
                                                                AddFolderSlash("Unidentified Company File Path");
                                                              END;

                                                   CaptionML=ENU=Unidentified Company File Path }
    { 9   ;   ;Fill-out LCY        ;Boolean       ;OnValidate=VAR
                                                                GLSetup@6085574 : Record 98;
                                                                Currency@6085573 : Record 4;
                                                              BEGIN
                                                                IF "Fill-out LCY" THEN BEGIN
                                                                  GLSetup.GET;
                                                                  GLSetup.TESTFIELD("LCY Code");
                                                                  IF NOT Currency.GET(GLSetup."LCY Code") THEN
                                                                    ERROR(CurrencyMisingErr,FIELDCAPTION("Fill-out LCY"),GLSetup.FIELDCAPTION("LCY Code"),GLSetup.TABLECAPTION,
                                                                      Currency.TABLECAPTION,GLSetup."LCY Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Fill-out LCY }
    { 11  ;   ;Archive File Path   ;Text200       ;OnValidate=BEGIN
                                                                AddFolderSlash("Archive File Path");
                                                                IsFilePathUniqueCrossComp("Archive File Path");
                                                              END;

                                                   CaptionML=ENU=Archive File Path }
    { 14  ;   ;Disk File Directory Structure;Option;
                                                   OnValidate=BEGIN
                                                                IF "Disk File Directory Structure" <> xRec."Disk File Directory Structure" THEN
                                                                  MoveDocFilesToNewStorageSetup(FIELDCAPTION("Disk File Directory Structure"));
                                                              END;

                                                   CaptionML=ENU=Disk File Directory Structure;
                                                   OptionCaptionML=ENU=One Directory,Year\Month,Year\Month\Day;
                                                   OptionString=One Directory,Year\Month,Year\Month\Day }
    { 15  ;   ;Miscellaneous File Path;Text200    ;OnValidate=BEGIN
                                                                AddFolderSlash("Miscellaneous File Path");
                                                                IsFilePathUniqueCrossComp("Miscellaneous File Path");
                                                              END;

                                                   CaptionML=ENU=Miscellaneous File Path }
    { 17  ;   ;Export Local OCR Config.;Boolean   ;InitValue=Yes;
                                                   CaptionML=ENU=Export Local OCR Configuration }
    { 18  ;   ;Export Remote OCR Config.;Boolean  ;CaptionML=ENU=Export Remote OCR Configuration }
    { 19  ;   ;Remote OCR Config. Path;Text200    ;OnValidate=BEGIN
                                                                AddFolderSlash("Remote OCR Config. Path");
                                                              END;

                                                   CaptionML=ENU=Remote OCR Config. Path }
    { 20  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 23  ;   ;Document Storage Type;Option       ;OnValidate=BEGIN
                                                                IF "Document Storage Type" <> xRec."Document Storage Type" THEN
                                                                  MoveDocFilesToNewStorageSetup(FIELDCAPTION("Document Storage Type"));
                                                              END;

                                                   CaptionML=ENU=Document Storage Type;
                                                   OptionCaptionML=ENU=File System,Database;
                                                   OptionString=File System,Database }
    { 30  ;   ;SMTP Require SSL/TLS;Boolean       ;CaptionML=ENU=SMTP require SSL/TLS }
    { 31  ;   ;Sender E-mail       ;Text80        ;CaptionML=ENU=Sender E-Mail }
    { 32  ;   ;Sender Name         ;Text50        ;CaptionML=ENU=Sender Name }
    { 40  ;   ;Scanner Driver Type ;Option        ;CaptionML=ENU=Scanner Driver Type;
                                                   OptionCaptionML=ENU=None,Isis,Twain;
                                                   OptionString=None,Isis,Twain }
    { 41  ;   ;Sign Scanned Documents;Boolean     ;CaptionML=ENU=Sign Scanned Documents }
    { 43  ;   ;PDF Signature Certificate;BLOB     ;CaptionML=ENU=PDF Signature Certificate }
    { 44  ;   ;PDF Signature Cert. Password;Text30;CaptionML=ENU=PDF Signature Certificate Password }
    { 64  ;   ;Delimiters          ;Text250       ;CaptionML=ENU=Delimiters }
    { 68  ;   ;Data Version        ;Integer       ;CaptionML=ENU=Data Version }
    { 81  ;   ;Web: Dimension 1 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 1 Code (Header) }
    { 82  ;   ;Web: Dimension 2 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 2 Code (Header) }
    { 83  ;   ;Web: Dimension 3 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 3 Code (Header) }
    { 84  ;   ;Web: Dimension 4 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 4 Code (Header) }
    { 85  ;   ;Web: Dimension 5 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 5 Code (Header) }
    { 86  ;   ;Web: Dimension 6 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 6 Code (Header) }
    { 87  ;   ;Web: Dimension 7 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 7 Code (Header) }
    { 88  ;   ;Web: Dimension 8 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 8 Code (Header) }
    { 89  ;   ;Web: Dimension 1 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 1 Code (Lines) }
    { 90  ;   ;Web: Dimension 2 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 2 Code (Lines) }
    { 91  ;   ;Web: Dimension 3 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 3 Code (Lines) }
    { 92  ;   ;Web: Dimension 4 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 4 Code (Lines) }
    { 93  ;   ;Web: Dimension 5 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 5 Code (Lines) }
    { 94  ;   ;Web: Dimension 6 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 6 Code (Lines) }
    { 95  ;   ;Web: Dimension 7 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 7 Code (Lines) }
    { 96  ;   ;Web: Dimension 8 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 8 Code (Lines) }
    { 97  ;   ;Web: Show Job No.   ;Boolean       ;CaptionML=ENU=Show Job No. }
    { 98  ;   ;Web: Show Job Task No.;Boolean     ;CaptionML=ENU=Show Job Task No. }
    { 99  ;   ;Web: Show VAT Prod. Group;Boolean  ;CaptionML=[ENU=Show VAT Prod. Group;
                                                              ENC=Show Tax Prod. Group] }
    { 100 ;   ;Purch: Use TIFF-Form for Appr.;Boolean;
                                                   CaptionML=ENU=Use TIFF-Form for Approval }
    { 101 ;   ;Purch: No. of Open PIs;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Status=CONST(Open)));
                                                   CaptionML=ENU=No. of Open Invoices;
                                                   Editable=No }
    { 102 ;   ;Purch: No. of Released PIs;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Status=CONST(Released)));
                                                   CaptionML=ENU=No. of Released Invoices;
                                                   Editable=No }
    { 103 ;   ;Purch: No. of PIs for Approval;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Status=CONST(Pending Approval)));
                                                   CaptionML=ENU=No. of Invoices for Approval;
                                                   Editable=No }
    { 104 ;   ;Purch: No. of Overdue PIs;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Due Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=No. of Overdue Invoices;
                                                   Editable=No }
    { 110 ;   ;Purch: No. of Open PCs;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Status=CONST(Open)));
                                                   CaptionML=ENU=No. of Open Credit Memoes;
                                                   Editable=No }
    { 111 ;   ;Purch: No. of Released PCs;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Status=CONST(Released)));
                                                   CaptionML=ENU=No. of Released PCM;
                                                   Editable=No }
    { 112 ;   ;Purch: No. of PCs for Approval;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Status=CONST(Pending Approval)));
                                                   CaptionML=ENU=No. of Credit Memoes for Approval;
                                                   Editable=No }
    { 119 ;   ;Purch: No. of Overdue Ap. Ent.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Table ID=CONST(38),
                                                                                             Document Type=FILTER(Invoice|Credit Memo),
                                                                                             Status=FILTER(Created|Open),
                                                                                             Due Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=No. of Overdue Approval Entries;
                                                   Editable=No }
    { 120 ;   ;Purch: Last Status E-Mail Sent;Date;FieldClass=FlowField;
                                                   CalcFormula=Max("Event Register"."Creation Date" WHERE (Area=CONST(Purch. Approval Status E-mail)));
                                                   CaptionML=ENU=Last Status E-Mail Sent;
                                                   Editable=No }
    { 121 ;   ;Purch: 4-eyes Approval;Option      ;CaptionML=ENU=4-eyes Approval;
                                                   OptionCaptionML=ENU=Not Required,Required,Required - both with full amounts limits;
                                                   OptionString=Not Required,Required,Required - both with full amounts limits }
    { 122 ;   ;Purch: Approval Template;BLOB      ;CaptionML=ENU=Approval Template;
                                                   SubType=User-Defined }
    { 123 ;   ;Purch: Approval E-Mail Subject;Text80;
                                                   CaptionML=ENU=Approval E-Mail Subject }
    { 124 ;   ;Check Amounts on Approval;Option   ;CaptionML=ENU=Check Amounts on Approval;
                                                   OptionCaptionML=ENU=No,Every Approval,Last Approval;
                                                   OptionString=No,Every Approval,Last Approval }
    { 125 ;   ;Arch. Doc. on Approv. and Reg.;Boolean;
                                                   OnValidate=BEGIN
                                                                IF NOT "Arch. Doc. on Approv. and Reg." THEN
                                                                  TESTFIELD("Use Acc. and Dim. App. Pms.",FALSE);
                                                              END;

                                                   CaptionML=ENU=Archive Document on Approval and Register }
    { 126 ;   ;Purch: Amount Valid. on Post.;Option;
                                                   CaptionML=ENU=Amount Validation on Post;
                                                   OptionCaptionML=[ENU=Not Required,Amount Excl. VAT and Amount Incl. VAT must match imported amounts,Only Amount Incl. VAT must match imported amounts,Only Amount Excl. VAT must match imported amounts;
                                                                    ENC=Not Required,Amount Excl. Tax and Amount Incl. Tax must match imported amounts,Only Amount Incl. Tax must match imported amounts,Only Amount Excl. Tax must match imported amounts];
                                                   OptionString=Not Required,Amount Excl. VAT and Amount Incl. VAT must match imported amounts,Only Amount Incl. VAT must match imported amounts,Only Amount Excl. VAT must match imported amounts }
    { 127 ;   ;Purch: Allow Force Approval;Boolean;CaptionML=ENU=Allow Force Approval }
    { 128 ;   ;Purch: 4-eyes, 2nd Approver;Option ;CaptionML=ENU=4-eyes Approval, 2nd Approver;
                                                   OptionCaptionML=ENU=Manual selection,Automatic selection;
                                                   OptionString=Manuel selection,Automatic selection }
    { 130 ;   ;Purch. Allocation Nos.;Code20      ;TableRelation="No. Series";
                                                   CaptionML=ENU=Purchase Allocation Nos. }
    { 131 ;   ;Enable Purchase Allocation;Boolean ;OnValidate=VAR
                                                                PurchAllocationHeader@6085573 : Record 6085730;
                                                              BEGIN
                                                                IF NOT "Enable Purchase Allocation" THEN BEGIN
                                                                  PurchAllocationHeader.SETRANGE(Status,PurchAllocationHeader.Status::Open);
                                                                  IF NOT PurchAllocationHeader.ISEMPTY THEN
                                                                    ERROR(ExistPurchAllocErr);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Enable Purchase Allocation }
    { 132 ;   ;Auto. Post Purch. Allocation;Boolean;
                                                   CaptionML=ENU=Auto. Post Purchase Allocation }
    { 133 ;   ;Purch. Alloc. G/L Account Type;Option;
                                                   CaptionML=ENU=Purchase Allocation G/L Account Type;
                                                   OptionCaptionML=ENU=Use Posting Setup,Use Account on Purchase Lines;
                                                   OptionString=Use Posting Setup,Use Account on Purchase Lines }
    { 134 ;   ;Purch. Alloc. Source Code;Code10   ;TableRelation="Source Code";
                                                   CaptionML=ENU=Purchase Allocation Source Code }
    { 135 ;   ;Purch. Alloc. Amounts to Use;Option;OnValidate=BEGIN
                                                                IF "Purch. Alloc. Amounts to Use" = "Purch. Alloc. Amounts to Use"::"Always use Imported Amounts" THEN
                                                                  VALIDATE("Purch. Alloc. G/L Account Type","Purch. Alloc. G/L Account Type"::"Use Posting Setup");
                                                              END;

                                                   CaptionML=ENU=Purchase Allocation Amounts to Use;
                                                   OptionCaptionML=ENU=Use Lines or Imported Amounts,Always use Imported Amounts;
                                                   OptionString=Use Lines or Imported Amounts,Always use Imported Amounts }
    { 136 ;   ;Purch.: Recreate Appvl. Hiera.;Boolean;
                                                   CaptionML=ENU=Recreate Approval Hierarchy on Forward }
    { 137 ;   ;Check Dim. Submit for Approval;Boolean;
                                                   CaptionML=ENU=Check Dimensions on Submit for Approval }
    { 138 ;   ;Rev. Purch.Alloc. Posting Date;Option;
                                                   CaptionML=ENU=Reversed Purch. Alloc. Posting Date;
                                                   OptionCaptionML=ENU=Original purch. allocation posting date,Invoice/cr. memo posting date;
                                                   OptionString=Original purch. allocation posting date,Invoice/cr. memo posting date }
    { 139 ;   ;Check Dimensions on Approval;Option;CaptionML=ENU=Check Dimensions on Approval;
                                                   OptionCaptionML=ENU=No,Every Approval,Last Approval;
                                                   OptionString=No,Every Approval,Last Approval }
    { 140 ;   ;Web: Show Description 2;Boolean    ;CaptionML=ENU=Show Description 2 }
    { 141 ;   ;Web: Show Line Discount Pct.;Boolean;
                                                   CaptionML=ENU=Show Line Discount Pct. }
    { 142 ;   ;Web: Show Prod. Posting Group;Boolean;
                                                   CaptionML=ENU=Show Prod. Posting Group }
    { 143 ;   ;Maintain User Document Search;Boolean;
                                                   OnValidate=VAR
                                                                PurchInvHeader@161024012 : Record 122;
                                                                PurchCrMemoHeader@161024014 : Record 124;
                                                                WebSearchMgnt@161024013 : Codeunit 6085748;
                                                              BEGIN
                                                                IF "Maintain User Document Search" THEN BEGIN
                                                                  IF PurchInvHeader.FINDSET THEN
                                                                    REPEAT
                                                                      WebSearchMgnt.UpdateWebSearchFromInvoice(PurchInvHeader,COMPANYNAME);
                                                                    UNTIL PurchInvHeader.NEXT = 0;

                                                                  IF PurchCrMemoHeader.FINDSET THEN
                                                                    REPEAT
                                                                      WebSearchMgnt.UpdateWebSearchFromCrMemo(PurchCrMemoHeader,COMPANYNAME);
                                                                    UNTIL PurchCrMemoHeader.NEXT = 0;

                                                                  MODIFY;
                                                                END ELSE
                                                                  TESTFIELD("Web: Historical Documents","Web: Historical Documents"::"Only Posted Documents");
                                                              END;

                                                   CaptionML=ENU=Maintain User Specific Doc. Search }
    { 144 ;   ;Web: Show Posting Account Name;Boolean;
                                                   CaptionML=ENU=Show Posting Account Name }
    { 145 ;   ;Web: Dim. & Job Field Place.;Option;CaptionML=ENU=Dimension && Job Fields Placement;
                                                   OptionCaptionML=ENU=Before Quantity,After Amount;
                                                   OptionString=Before Quantity,After Amount }
    { 146 ;   ;Web: Show Unit of Measure;Boolean  ;CaptionML=ENU=Show Unit of Measure }
    { 147 ;   ;Web: Show Type      ;Boolean       ;CaptionML=ENU=Show Type }
    { 148 ;   ;Web: Show Amounts in LCY;Option    ;CaptionML=[ENU=Show Amounts in LCY;
                                                              ENC=Show Amounts in $];
                                                   OptionCaptionML=ENU=Never,Always,If different from purchase currency;
                                                   OptionString=Never,Always,If different from purchase currency }
    { 149 ;   ;Web: Historical Documents;Option   ;OnValidate=VAR
                                                                PurchHeader@161024013 : Record 38;
                                                                WebDocSearch@161024014 : Record 6086005;
                                                                WebSearchMgnt@161024012 : Codeunit 6085748;
                                                              BEGIN
                                                                TESTFIELD("Maintain User Document Search");
                                                                MODIFY;

                                                                IF "Web: Historical Documents" = "Web: Historical Documents"::"Only Posted Documents" THEN BEGIN
                                                                  WebDocSearch.SETFILTER(Type,'%1|%2',WebDocSearch.Type::"Purchase Invoice",WebDocSearch.Type::"Purchase Credit Memo");
                                                                  WebDocSearch.DELETEALL(TRUE);
                                                                END ELSE BEGIN
                                                                  PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo");
                                                                  IF PurchHeader.FINDSET THEN
                                                                    REPEAT
                                                                      WebSearchMgnt.UpdateWebSearchFromPurchHeader(PurchHeader,FALSE);
                                                                    UNTIL PurchHeader.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Show in Historical Documents;
                                                   OptionCaptionML=ENU=Only Posted Documents,Posted and Un-posted Documents;
                                                   OptionString=Only Posted Documents,Posted and Un-posted Documents }
    { 150 ;   ;Error E-Mail        ;Text80        ;CaptionML=ENU=Error E-Mail }
    { 153 ;   ;Dynamics NAV Server Tenant;Text50  ;OnValidate=VAR
                                                                Company@6085574 : Record 2000000006;
                                                                DCSetup@6085573 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Tenant" := "Dynamics NAV Server Tenant";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Tenant }
    { 154 ;   ;Dynamics NAV Server Name;Text50    ;OnValidate=VAR
                                                                Company@6085573 : Record 2000000006;
                                                                DCSetup@6085574 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Name" := "Dynamics NAV Server Name";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Name }
    { 155 ;   ;Dynamics NAV Server Instance;Text50;OnValidate=VAR
                                                                Company@6085573 : Record 2000000006;
                                                                DCSetup@6085574 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Instance" := "Dynamics NAV Server Instance";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Instance }
    { 156 ;   ;Dynamics NAV Server Port;Integer   ;OnValidate=VAR
                                                                Company@6085573 : Record 2000000006;
                                                                DCSetup@6085574 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Port" := "Dynamics NAV Server Port";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Port;
                                                   MinValue=0 }
    { 157 ;   ;Purch: Approval NAV Client;Option  ;OnValidate=BEGIN
                                                                IF "Purch: Approval NAV Client" = "Purch: Approval NAV Client"::RoleTailored THEN BEGIN
                                                                  TESTFIELD("Dynamics NAV Server Name");
                                                                  TESTFIELD("Dynamics NAV Server Port");
                                                                  TESTFIELD("Dynamics NAV Server Instance");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Approval NAV Client;
                                                   OptionCaptionML=ENU=Classic,RoleTailored;
                                                   OptionString=Classic,RoleTailored }
    { 158 ;   ;Barcode Nos.        ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Barcode Nos. }
    { 159 ;   ;Web: Show FA Posting Type;Boolean  ;CaptionML=ENU=Show FA Posting Type }
    { 160 ;   ;Security Certificate;BLOB          ;CaptionML=ENU=Security Certificate }
    { 161 ;   ;Dynamics NAV Web Server Name;Text50;OnValidate=VAR
                                                                Company@6085573 : Record 2000000006;
                                                                DCSetup@6085574 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Web Server Name" := "Dynamics NAV Web Server Name";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Web Server Name }
    { 162 ;   ;Dynamics NAV Web Server Port;Integer;
                                                   OnValidate=VAR
                                                                Company@6085573 : Record 2000000006;
                                                                DCSetup@6085574 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Web Server Port" := "Dynamics NAV Web Server Port";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Web Server Port;
                                                   MinValue=0 }
    { 163 ;   ;Dynamics NAV Web Server Inst.;Text50;
                                                   OnValidate=VAR
                                                                Company@6085573 : Record 2000000006;
                                                                DCSetup@6085574 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Web Server Inst." := "Dynamics NAV Web Server Inst.";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Web Server Instance }
    { 164 ;   ;Dynamics NAV Web Server Tenant;Text50;
                                                   OnValidate=VAR
                                                                Company@6085574 : Record 2000000006;
                                                                DCSetup@6085573 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Web Server Tenant" := "Dynamics NAV Web Server Tenant";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;

                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Web Server Tenant }
    { 170 ;   ;Codeunit ID: Record ID Lookup;Integer;
                                                   TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=ENU=Codeunit ID: Record ID Lookup;
                                                   BlankZero=Yes }
    { 171 ;   ;Company Code in Archive;Boolean    ;OnValidate=BEGIN
                                                                IF "Company Code in Archive" <> xRec."Company Code in Archive" THEN BEGIN
                                                                  VerifyFilePathsCrossComp;
                                                                  MoveDocFilesToNewStorageSetup(FIELDCAPTION("Company Code in Archive"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Include Company Code in Archive paths }
    { 172 ;   ;Use Cloud OCR       ;Boolean       ;OnValidate=VAR
                                                                COMgt@1160040000 : Codeunit 6192772;
                                                                CODC@1160040001 : Codeunit 6085617;
                                                              BEGIN
                                                                IF "Use Cloud OCR" THEN BEGIN
                                                                  COMgt.IsActive(TRUE);
                                                                  CODC.IsCompanyActive(TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Use Cloud OCR }
    { 173 ;   ;Cloud OCR Cache Timeout;Integer    ;CaptionML=ENU=Cloud OCR Cache Timeout }
    { 174 ;   ;Category Code in Archive;Boolean   ;OnValidate=BEGIN
                                                                IF "Category Code in Archive" <> xRec."Category Code in Archive" THEN
                                                                  MoveDocFilesToNewStorageSetup(FIELDCAPTION("Category Code in Archive"));
                                                              END;

                                                   CaptionML=ENU=Include Category Code in Archive paths }
    { 179 ;   ;Use Acc. and Dim. App. Pms.;Boolean;OnValidate=BEGIN
                                                                IF "Use Acc. and Dim. App. Pms." AND NOT "Arch. Doc. on Approv. and Reg." THEN
                                                                  VALIDATE("Arch. Doc. on Approv. and Reg.",TRUE);
                                                              END;

                                                   CaptionML=ENU=Use Account and Dimension Approval Permissions }
    { 180 ;   ;Use UIC Documents   ;Boolean       ;CaptionML=ENU=Use Unidentified Company Documents }
    { 190 ;   ;Allow Forward and Approve;Boolean  ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Forward and Approve }
    { 191 ;   ;Allow Forward w/o Approv.;Boolean  ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Forward w/o Approval }
    { 192 ;   ;Allow Forward and Return;Boolean   ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Forward and return for Approval }
    { 193 ;   ;Web: Show Deferral Code;Boolean    ;CaptionML=ENU=Show Deferral Code }
    { 194 ;   ;Web: Show Location Code;Boolean    ;CaptionML=ENU=Show Location Code }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@161024013 : TextConst 'ENU=%1 must be unique.\\%1 ''%2'' has also been entered in company ''%3''.';
      Text004@1160040000 : TextConst 'ENU=Moving files\#1######################\@2@@@@@@@@@@@@@@@@@@@@@@';
      Text005@161024016 : TextConst 'ENU=The value in %1 must be the same in all companies that are using Document Capture Web Approval.\\Do you want to update the value of this field in all other companies?';
      Text006@161024017 : TextConst 'ENU=Unable to connect to the Document Capture Web Site. Please make sure that you are running the latest version of the Document Capture Web Site.';
      Text008@1160040001 : TextConst 'ENU=Do you want to create and assign %1 for all Document Categories?';
      Text009@1160040002 : TextConst 'ENU=Do you want to export all document categories to Cloud OCR?';
      GotContiniaCompanySetup@6085576 : Boolean;
      HideValidation@1160040003 : Boolean;
      Text010@6085575 : TextConst 'ENU="All companies using the functionality for Unidentified Company Documents must use the same %1. Company %2 has been set up with %1 = %3.\\Please make sure that %1 is the same in all companies using the functionality for Unidentified Company Documents."';
      TextMoveFileSystemSetup@6085577 : TextConst 'ENU=One or more documents have already been imported.\\When you change %1 the system will automatically move all files to %2. This can take a long time depending on the number of documents in the system.\\Do you want to continue?';
      TextMoveFromDBToFileSystem@1001 : TextConst 'ENU=One or more documents have already been imported.\\When you change %1 the system will automatically move all files from the database to the file system. This can take a long time depending on the number of documents in the system.\\Do you want to continue?';
      TextMoveFromFileSystemToDB@1000 : TextConst 'ENU=One or more documents have already been imported.\\When you change %1 the system will automatically move all files from the file system to the database. This can take a long time depending on the number of documents in the system.\\Do you want to continue?';
      InvalidFilePathsErr@6085574 : TextConst 'ENU=The companies %1 and %2 have been setup with conflicting file paths, the file paths must be unique in each company.\Change the file paths in the Document Capture setup or enable %3, before you can continue.';
      CompanyCodeAlreadyRegErr@6085573 : TextConst 'ENU=%1 %2 is the same in the companies %3 and %4.\\%1 must be unique in each company before you can continue.';
      ExistPurchAllocErr@6085578 : TextConst 'ENU=You cannot disable Purchase Allocations as one or more open purchase allocations already exists.\\Please reverse all open purchase allocations before disabling.';
      CurrencyMisingErr@6085579 : TextConst 'ENU=%1 can only be populated when %2 is populated in %3 and when a %4 has been created for %5.';

    PROCEDURE DrillDownPurchHeader@161024012(Type@161024012 : Integer;Status@161024013 : Integer);
    VAR
      PurchHeader@161024014 : Record 38;
    BEGIN
      PurchHeader.RESET;
      PurchHeader.SETRANGE("Document Type",Type);
      PurchHeader.SETRANGE(Status,Status);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE DrillDownOverdueApprEntries@161024013();
    VAR
      PurchHeader@161024013 : Record 38;
      ApprovalEntry@161024012 : Record 454;
    BEGIN
      ApprovalEntry.FILTERGROUP(2);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETFILTER("Document Type",'%1|%2',ApprovalEntry."Document Type"::Invoice,
        ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETFILTER("Due Date",GETFILTER("Date Filter"));
      ApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Purch. Approval Req. Entries",ApprovalEntry);
    END;

    PROCEDURE DrillDownOverduePI@161024015();
    VAR
      PurchHeader@161024012 : Record 38;
    BEGIN
      PurchHeader.RESET;
      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
      PurchHeader.SETFILTER("Due Date",GETFILTER("Date Filter"));
      PAGE.RUN(0,PurchHeader);
    END;

    LOCAL PROCEDURE MoveDocFilesToNewStorageSetup@5(CaptionFieldChanged@1160040000 : Text[100]);
    VAR
      Document@161024012 : Record 6085590;
      DocumentUIC@6085573 : Record 6085601;
      Window@1160040003 : Dialog;
      Current@1000 : Integer;
      Total@1001 : Integer;
    BEGIN
      IF Document.ISEMPTY THEN
        EXIT;

      CASE TRUE OF
        HideValidation : ;
        ("Document Storage Type" = "Document Storage Type"::"File System") AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::"File System"):
          IF NOT CONFIRM(TextMoveFileSystemSetup,FALSE,CaptionFieldChanged,GetStorageLocation(xRec),GetStorageLocation(Rec)) THEN
            ERROR('');
        ("Document Storage Type" = "Document Storage Type"::"File System") AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::Database):
          IF NOT CONFIRM(TextMoveFromDBToFileSystem,FALSE,CaptionFieldChanged,GetStorageLocation(Rec)) THEN
            ERROR('');
        ("Document Storage Type" = "Document Storage Type"::Database) AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::"File System"):
          IF NOT CONFIRM(TextMoveFromFileSystemToDB,FALSE,CaptionFieldChanged,GetStorageLocation(xRec)) THEN
            ERROR('');
      END;

      IF ("Document Storage Type" = "Document Storage Type"::"File System") AND
        (xRec."Document Storage Type" = xRec."Document Storage Type"::Database)
      THEN
        // to prevent page run when updated from setup wizard
        IF GUIALLOWED AND (CurrFieldNo = FIELDNO("Document Storage Type")) THEN
          UpdateStorageSettings;

      Window.OPEN(Text004);

      Total := Document.COUNT;
      IF "Use UIC Documents" THEN
        Total += DocumentUIC.COUNT;

      IF Document.FINDSET THEN
        REPEAT
          Current += 1;
          Window.UPDATE(1,Document."No.");
          Window.UPDATE(2,Current/Total * 10000 DIV 1);
          CopyDocFilesToNewStorageSetup(Document,Rec,xRec);
        UNTIL Document.NEXT = 0;

      IF "Use UIC Documents" THEN
        IF DocumentUIC.FINDSET THEN
          REPEAT
            Current += 1;
            Window.UPDATE(1,Document."No.");
            Window.UPDATE(2,Current/Total * 10000 DIV 1);
            CopyUICFilesToNewStorageSetup(DocumentUIC,Rec,xRec);
          UNTIL Document.NEXT = 0;

      Window.CLOSE;

      COMMIT;
      MODIFY;

      Document.SetDCSetup(xRec);
      Window.OPEN(Text004);
      Total := Document.COUNT;
      IF "Use UIC Documents" THEN
        Total += DocumentUIC.COUNT;
      Current := 0;

      IF Document.FINDSET THEN
        REPEAT
          Current += 1;
          Window.UPDATE(1,Document."No.");
          Window.UPDATE(2,Current/Total * 10000 DIV 1);
          ClearDocFiles(Document);
        UNTIL Document.NEXT = 0;

      DocumentUIC.SetDCSetup(xRec);
      IF "Use UIC Documents" THEN
        IF DocumentUIC.FINDSET THEN
          REPEAT
            Current += 1;
            Window.UPDATE(1,Document."No.");
            Window.UPDATE(2,Current/Total * 10000 DIV 1);
            ClearUICDocFiles(DocumentUIC);
          UNTIL Document.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE CopyDocFilesToNewStorageSetup@2(Document@1160040012 : Record 6085590;DCSetup@1001 : Record 6085573;xDCSetup@1000 : Record 6085573);
    VAR
      NewDocument@1002 : Record 6085590;
      TempFile@1003 : TEMPORARY Record 6085608;
    BEGIN
      Document.SetDCSetup(xDCSetup);
      NewDocument := Document;
      NewDocument.SetDCSetup(DCSetup);

      IF Document.HasTiffFile THEN BEGIN
        Document.GetTiffFile(TempFile);
        NewDocument.SetTiffFile(TempFile);
      END;

      IF Document.HasPdfFile THEN BEGIN
        Document.GetPdfFile(TempFile);
        NewDocument.SetPdfFile(TempFile);
      END;

      IF Document.HasMiscFile THEN BEGIN
        Document.GetMiscFile(TempFile);
        NewDocument.SetMiscFile(TempFile);
      END;

      IF Document.HasEmailFile THEN BEGIN
        Document.GetEmailFile(TempFile);
        NewDocument.SetEmailFile(TempFile);
      END;
    END;

    PROCEDURE CopyUICFilesToNewStorageSetup@6085575(Document@1160040012 : Record 6085601;DCSetup@1001 : Record 6085573;xDCSetup@1000 : Record 6085573);
    VAR
      NewDocument@1002 : Record 6085601;
      TempFile@6085573 : TEMPORARY Record 6085608;
    BEGIN
      Document.SetDCSetup(xDCSetup);
      NewDocument := Document;
      NewDocument.SetDCSetup(DCSetup);

      IF Document.GetTiffFile(TempFile) THEN
        NewDocument.SetTiffFile(TempFile);

      IF Document.GetPdfFile(TempFile) THEN
        NewDocument.SetPdfFile(TempFile);

      IF Document.GetEmailFile(TempFile) THEN
        NewDocument.SetEmailFile(TempFile);
    END;

    PROCEDURE ClearDocFiles@15(VAR Document@1160040012 : Record 6085590);
    VAR
      SubDir@1160040013 : Text[1024];
      FilePath@1160040000 : Text[1024];
    BEGIN
      Document.ClearTiffFile;
      Document.ClearPdfFile;
      Document.ClearMiscFile;
      Document.ClearEmailFile;
    END;

    PROCEDURE ClearUICDocFiles@6085576(VAR DocumentUIC@1160040012 : Record 6085601);
    VAR
      SubDir@1160040013 : Text[1024];
      FilePath@1160040000 : Text[1024];
    BEGIN
      DocumentUIC.ClearTiffFile;
      DocumentUIC.ClearPdfFile;
      DocumentUIC.ClearEmailFile;
    END;

    PROCEDURE CreateAndAssignConnEndpoints@1160040002();
    VAR
      ConnEndpoint@1160040000 : Record 6085620;
      DocCat@1160040001 : Record 6085575;
      EndpointCode@1160040002 : Code[10];
    BEGIN
      IF NOT ConnEndpoint.ISEMPTY THEN
        EXIT;

      IF NOT HideValidation THEN
        IF NOT CONFIRM(Text008,TRUE,ConnEndpoint.TABLECAPTION) THEN
          EXIT;

      DocCat.SETRANGE("Drag and Drop Category",FALSE);
      IF DocCat.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF (DocCat."Source Table No." = DATABASE::Vendor) AND
            (DocCat."Destination Header Table No." = DATABASE::"Purchase Header")
          THEN
            EndpointCode := 'INVOICE'
          ELSE
            EndpointCode := FormatText(DocCat.Code);

          ConnEndpoint.INIT;
          ConnEndpoint.Code := EndpointCode;
          ConnEndpoint.Protocol := ConnEndpoint.Protocol::"Continia Email";
          ConnEndpoint.INSERT(TRUE);

          DocCat."E-Mail Connection Endpoint" := ConnEndpoint.Code;
          DocCat.MODIFY(TRUE);
        UNTIL DocCat.NEXT = 0;

      IF NOT HideValidation THEN
        IF CONFIRM(Text009,TRUE) THEN
          CODEUNIT.RUN(CODEUNIT::"Export Doc. Cat. Config. - DC");
    END;

    PROCEDURE FormatText@1160040000(TheText@1160040001 : Text[250]) NewText : Text[250];
    VAR
      i@1160040000 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(TheText) DO
        IF STRPOS('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',COPYSTR(TheText,i,1)) > 0 THEN
          NewText := NewText + COPYSTR(TheText,i,1);
    END;

    PROCEDURE SetHideValidate@1160040001(NewHideValidation@1160040000 : Boolean);
    BEGIN
      HideValidation := NewHideValidation;
    END;

    PROCEDURE AddFolderSlash@1(VAR FolderPath@1000 : Text[200]);
    BEGIN
      IF FolderPath <> '' THEN
        IF NOT (COPYSTR(FolderPath,STRLEN(FolderPath)) = '\') THEN
          FolderPath += '\';
    END;

    PROCEDURE IsFilePathUniqueCrossComp@6085582(FilePath@6085577 : Text[200]);
    VAR
      Company@6085576 : Record 2000000006;
      DCSetup2@6085575 : Record 6085573;
      COLicenseMgt@6085574 : Codeunit 6192773;
      AboutDC@6085579 : Codeunit 6085589;
      SingleInstanceStorage@6085578 : Codeunit 6085789;
      ActivationState@6085573 : 'NeverActivated,NeedReactivation,Activated,OfflineStarted';
    BEGIN
      IF SingleInstanceStorage.GetDisableDCSetupFilePathCheck THEN
        EXIT;

      IF "Company Code in Archive" THEN
        EXIT;

      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF Company.FINDSET THEN
        REPEAT
          DCSetup2.CHANGECOMPANY(Company.Name);
          IF DCSetup2.GET THEN
            IF DCSetup2."Document Storage Type" <> DCSetup2."Document Storage Type"::Database THEN
              IF NOT DCSetup2."Company Code in Archive" THEN
                IF COLicenseMgt.GetProductActivationState(AboutDC.ProductCode,Company.Name) = ActivationState::Activated THEN
                  IF (FilePath = DCSetup2."Archive File Path") OR
                    (FilePath = DCSetup2."Miscellaneous File Path")
                  THEN
                    ERROR(InvalidFilePathsErr,COMPANYNAME,Company.Name,FIELDCAPTION("Company Code in Archive"));
        UNTIL Company.NEXT = 0;
    END;

    PROCEDURE VerifyFilePathsCrossComp@6085574();
    BEGIN
      IsFilePathUniqueCrossComp("Archive File Path");
      IsFilePathUniqueCrossComp("Miscellaneous File Path");
    END;

    PROCEDURE GetStorageLocation@6085581(VAR DCSetup@1160040000 : Record 6085573) Location : Text[1024];
    VAR
      DocumentFileInterface@6085573 : Codeunit 6085635;
    BEGIN
      DocumentFileInterface.SetDCSetup(DCSetup);
      EXIT(DocumentFileInterface.GetStorageLocation);
    END;

    PROCEDURE IsUICSetupConsistent@6085577(ThrowError@6085576 : Boolean) : Boolean;
    VAR
      Company@6085573 : Record 2000000006;
      DCSetup@6085575 : Record 6085573;
      DCSetup2@6085574 : Record 6085573;
    BEGIN
      DCSetup.GET;
      IF NOT DCSetup."Use UIC Documents" THEN
        EXIT;

      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF Company.FINDSET THEN
        REPEAT
          DCSetup2.CHANGECOMPANY(Company.Name);
          IF DCSetup2.GET AND DCSetup2."Use UIC Documents" AND
            (DCSetup."Document Storage Type" <> DCSetup2."Document Storage Type")
          THEN BEGIN
            IF ThrowError THEN
              ERROR(Text010,DCSetup.FIELDCAPTION("Document Storage Type"),Company.Name,DCSetup2."Document Storage Type")
            ELSE
              EXIT(FALSE);
          END;
        UNTIL Company.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateStorageSettings@6085578();
    VAR
      UpdateStorageSettingsPage@6085573 : Page 6085712;
      NewArchiveFilePath@6085575 : Text[200];
      NewMiscellaneousFilePath@6085574 : Text[200];
      NewDiskFileDirStructure@1160040000 : 'One Directory,Year\Month,Year\Month\Day';
    BEGIN
      UpdateStorageSettingsPage.SetFilePaths("Archive File Path","Miscellaneous File Path","Disk File Directory Structure");
      UpdateStorageSettingsPage.LOOKUPMODE := TRUE;
      IF UpdateStorageSettingsPage.RUNMODAL IN [ACTION::LookupOK,ACTION::OK] THEN BEGIN
        UpdateStorageSettingsPage.GetFilePaths(NewArchiveFilePath,NewMiscellaneousFilePath,NewDiskFileDirStructure);
        AddFolderSlash(NewArchiveFilePath);
        AddFolderSlash(NewMiscellaneousFilePath);

        IF (NewArchiveFilePath <> "Archive File Path") OR
          (NewMiscellaneousFilePath <> "Miscellaneous File Path") OR
          (NewDiskFileDirStructure <> "Disk File Directory Structure")
        THEN BEGIN
          IF NewArchiveFilePath <> "Archive File Path" THEN
            "Archive File Path" := NewArchiveFilePath;
          IF NewMiscellaneousFilePath <> "Miscellaneous File Path" THEN
            "Miscellaneous File Path" := NewMiscellaneousFilePath;
          IF NewDiskFileDirStructure <> "Disk File Directory Structure" THEN
            "Disk File Directory Structure" := NewDiskFileDirStructure;
          MODIFY;
        END;
      END ELSE
        ERROR('');
    END;

    BEGIN
    END.
  }
}

