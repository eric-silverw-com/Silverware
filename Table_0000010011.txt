OBJECT Table 10011 Sales Tax Amount Line
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:15:50 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Tax Amount Line;
  }
  FIELDS
  {
    { 1   ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 2   ;   ;Tax Jurisdiction Code;Code10       ;TableRelation="Tax Jurisdiction";
                                                   CaptionML=ENU=Tax Jurisdiction Code }
    { 3   ;   ;Tax %               ;Decimal       ;CaptionML=ENU=Tax %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 4   ;   ;Tax Base Amount     ;Decimal       ;CaptionML=ENU=Tax Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;Tax Amount          ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Tax %");
                                                                TESTFIELD("Tax Base Amount");
                                                                IF "Tax Amount" / "Tax Base Amount" < 0 THEN
                                                                  ERROR(Text002,FIELDCAPTION("Tax Amount"));
                                                                "Tax Difference" := "Tax Difference" + "Tax Amount" - xRec."Tax Amount";
                                                              END;

                                                   CaptionML=ENU=Tax Amount }
    { 6   ;   ;Amount Including Tax;Decimal       ;CaptionML=ENU=Amount Including Tax;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7   ;   ;Line Amount         ;Decimal       ;CaptionML=ENU=Line Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 10  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code;
                                                   Editable=No }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 12  ;   ;Modified            ;Boolean       ;CaptionML=ENU=Modified }
    { 13  ;   ;Use Tax             ;Boolean       ;CaptionML=ENU=Use Tax }
    { 14  ;   ;Calculated Tax Amount;Decimal      ;CaptionML=ENU=Calculated Tax Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;Tax Difference      ;Decimal       ;CaptionML=ENU=Tax Difference;
                                                   Editable=No }
    { 16  ;   ;Tax Type            ;Option        ;CaptionML=ENU=Tax Type;
                                                   OptionCaptionML=ENU=Sales and Use Tax,Excise Tax,Sales Tax Only,Use Tax Only;
                                                   OptionString=Sales and Use Tax,Excise Tax,Sales Tax Only,Use Tax Only }
    { 17  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 20  ;   ;Tax Area Code for Key;Code20       ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code for Key }
    { 25  ;   ;Invoice Discount Amount;Decimal    ;CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 26  ;   ;Inv. Disc. Base Amount;Decimal     ;CaptionML=ENU=Inv. Disc. Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 10010;  ;Expense/Capitalize  ;Boolean       ;CaptionML=ENU=Expense/Capitalize }
    { 10020;  ;Print Order         ;Integer       ;CaptionML=ENU=Print Order }
    { 10030;  ;Print Description   ;Text50        ;CaptionML=ENU=Print Description }
    { 10040;  ;Calculation Order   ;Integer       ;CaptionML=ENU=Calculation Order }
    { 10041;  ;Round Tax           ;Option        ;CaptionML=ENU=Round Tax;
                                                   OptionCaptionML=ENU=To Nearest,Up,Down;
                                                   OptionString=To Nearest,Up,Down;
                                                   Editable=No }
    { 10042;  ;Is Report-to Jurisdiction;Boolean  ;CaptionML=ENU=Is Report-to Jurisdiction;
                                                   Editable=No }
    { 10043;  ;Positive            ;Boolean       ;CaptionML=ENU=Positive }
    { 10044;  ;Tax Base Amount FCY ;Decimal       ;CaptionML=ENU=Tax Base Amount FCY }
  }
  KEYS
  {
    {    ;Tax Area Code for Key,Tax Jurisdiction Code,Tax %,Tax Group Code,Expense/Capitalize,Tax Type,Use Tax,Positive;
                                                   Clustered=Yes }
    {    ;Print Order,Tax Area Code for Key,Tax Jurisdiction Code }
    {    ;Tax Area Code for Key,Tax Group Code,Tax Type,Calculation Order }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Currency@1005 : Record 4;
      AllowTaxDifference@1006 : Boolean;
      PricesIncludingTax@1007 : Boolean;
      Text000@1480004 : TextConst 'ENU=%1% Tax';
      Text001@1480003 : TextConst 'ENU=Tax Amount';
      Text002@1480002 : TextConst 'ENU=%1 must not be negative.';
      Text004@1480000 : TextConst 'ENU="%1 for %2 must not exceed %3 = %4."';

    [External]
    PROCEDURE CheckTaxDifference@11(NewCurrencyCode@1000 : Code[10];NewAllowTaxDifference@1001 : Boolean;NewPricesIncludingTax@1002 : Boolean);
    BEGIN
      InitGlobals(NewCurrencyCode,NewAllowTaxDifference,NewPricesIncludingTax);
      IF NOT AllowTaxDifference THEN
        TESTFIELD("Tax Difference",0);
      IF ABS("Tax Difference") > Currency."Max. VAT Difference Allowed" THEN
        ERROR(
          Text004,FIELDCAPTION("Tax Difference"),Currency.Code,
          Currency.FIELDCAPTION("Max. VAT Difference Allowed"),Currency."Max. VAT Difference Allowed");
    END;

    LOCAL PROCEDURE InitGlobals@4(NewCurrencyCode@1000 : Code[10];NewAllowTaxDifference@1001 : Boolean;NewPricesIncludingTax@1002 : Boolean);
    BEGIN
      SetCurrency(NewCurrencyCode);
      AllowTaxDifference := NewAllowTaxDifference;
      PricesIncludingTax := NewPricesIncludingTax;
    END;

    LOCAL PROCEDURE SetCurrency@15(CurrencyCode@1000 : Code[10]);
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(CurrencyCode);
    END;

    [External]
    PROCEDURE TaxAmountText@3() : Text[30];
    VAR
      TaxAmountLine2@1020000 : Record 10011;
      TaxAreaCount@1020001 : Integer;
      TaxPercent@1020002 : Decimal;
    BEGIN
      IF FINDFIRST THEN BEGIN
        TaxAmountLine2 := Rec;
        TaxAreaCount := 1;
        REPEAT
          IF "Tax Area Code" <> TaxAmountLine2."Tax Area Code" THEN BEGIN
            TaxAreaCount := TaxAreaCount + 1;
            TaxAmountLine2 := Rec;
          END;
          TaxPercent := TaxPercent + "Tax %";
        UNTIL NEXT = 0;
      END;
      IF TaxPercent <> 0 THEN
        EXIT(STRSUBSTNO(Text000,TaxPercent / TaxAreaCount));
      EXIT(Text001);
    END;

    [External]
    PROCEDURE GetTotalLineAmount@10(SubtractTax@1000 : Boolean;CurrencyCode@1001 : Code[10]) : Decimal;
    VAR
      LineAmount@1002 : Decimal;
    BEGIN
      IF SubtractTax THEN
        SetCurrency(CurrencyCode);

      LineAmount := 0;

      IF FIND('-') THEN
        REPEAT
          IF SubtractTax THEN
            LineAmount :=
              LineAmount + ROUND("Line Amount" / (1 + "Tax %" / 100),Currency."Amount Rounding Precision")
          ELSE
            LineAmount := LineAmount + "Line Amount";
        UNTIL NEXT = 0;

      EXIT(LineAmount);
    END;

    [External]
    PROCEDURE GetTotalTaxAmount@5() : Decimal;
    VAR
      TaxAmount@1000 : Decimal;
      PrevJurisdiction@1020000 : Code[10];
    BEGIN
      TaxAmount := 0;
      IF FIND('-') THEN
        REPEAT
          IF PrevJurisdiction <> "Tax Jurisdiction Code" THEN BEGIN
            IF "Tax Area Code for Key" = '' THEN     // indicates Canada
              TaxAmount := ROUND(TaxAmount);
            PrevJurisdiction := "Tax Jurisdiction Code";
          END;
          TaxAmount := TaxAmount + "Tax Amount";
        UNTIL NEXT = 0;
      EXIT(TaxAmount);
    END;

    [External]
    PROCEDURE GetTotalTaxAmountFCY@1020000() : Decimal;
    VAR
      TaxAmount@1000 : Decimal;
      PrevJurisdiction@1020000 : Code[10];
    BEGIN
      IF FINDSET THEN
        REPEAT
          IF PrevJurisdiction <> "Tax Jurisdiction Code" THEN BEGIN
            IF "Tax Area Code for Key" = '' THEN     // indicates Canada
              TaxAmount := ROUND(TaxAmount);
            PrevJurisdiction := "Tax Jurisdiction Code";
          END;
          TaxAmount := TaxAmount + ("Tax Base Amount FCY" * "Tax %" / 100);
        UNTIL NEXT = 0;
      EXIT(TaxAmount);
    END;

    [External]
    PROCEDURE GetTotalTaxBase@14() : Decimal;
    VAR
      TaxBase@1002 : Decimal;
    BEGIN
      TaxBase := 0;

      IF FIND('-') THEN
        REPEAT
          TaxBase := TaxBase + "Tax Base Amount";
        UNTIL NEXT = 0;
      EXIT(TaxBase);
    END;

    [External]
    PROCEDURE GetTotalAmountInclTax@17() : Decimal;
    VAR
      AmountInclTax@1002 : Decimal;
    BEGIN
      AmountInclTax := 0;

      IF FIND('-') THEN
        REPEAT
          AmountInclTax := AmountInclTax + "Amount Including Tax";
        UNTIL NEXT = 0;
      EXIT(AmountInclTax);
    END;

    [External]
    PROCEDURE GetAnyLineModified@7() : Boolean;
    BEGIN
      IF FIND('-') THEN
        REPEAT
          IF Modified THEN
            EXIT(TRUE);
        UNTIL NEXT = 0;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetTotalInvDiscAmount@9() : Decimal;
    VAR
      InvDiscAmount@1000 : Decimal;
    BEGIN
      InvDiscAmount := 0;
      IF FIND('-') THEN
        InvDiscAmount := "Invoice Discount Amount";
      EXIT(InvDiscAmount);
    END;

    [External]
    PROCEDURE SetInvoiceDiscountPercent@16(NewInvoiceDiscountPct@1000 : Decimal;NewCurrencyCode@1001 : Code[10];NewPricesIncludingVAT@1002 : Boolean;CalcInvDiscPerVATID@1003 : Boolean;NewVATBaseDiscPct@1005 : Decimal);
    VAR
      NewRemainder@1004 : Decimal;
    BEGIN
      InitGlobals(NewCurrencyCode,FALSE,NewPricesIncludingVAT);
      IF FIND('-') THEN
        REPEAT
          IF "Inv. Disc. Base Amount" <> 0 THEN BEGIN
            NewRemainder :=
              NewRemainder + NewInvoiceDiscountPct * "Inv. Disc. Base Amount" / 100;
            VALIDATE(
              "Invoice Discount Amount",ROUND(NewRemainder,Currency."Amount Rounding Precision"));
            IF CalcInvDiscPerVATID THEN
              NewRemainder := 0
            ELSE
              NewRemainder := NewRemainder - "Invoice Discount Amount";
            Modified := TRUE;
            MODIFY;
          END;
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE GetTotalInvDiscBaseAmount@6(SubtractVAT@1000 : Boolean;CurrencyCode@1001 : Code[10]) : Decimal;
    VAR
      InvDiscBaseAmount@1002 : Decimal;
    BEGIN
      IF SubtractVAT THEN
        SetCurrency(CurrencyCode);

      InvDiscBaseAmount := 0;

      IF FIND('-') THEN
        REPEAT
          IF SubtractVAT THEN
            InvDiscBaseAmount :=
              InvDiscBaseAmount +
              ROUND("Inv. Disc. Base Amount" / (1 + "Tax %" / 100),Currency."Amount Rounding Precision")
          ELSE
            InvDiscBaseAmount := InvDiscBaseAmount + "Inv. Disc. Base Amount";
        UNTIL NEXT = 0;
      EXIT(InvDiscBaseAmount);
    END;

    [External]
    PROCEDURE SetInvoiceDiscountAmount@13(NewInvoiceDiscount@1000 : Decimal;NewCurrencyCode@1001 : Code[10];NewPricesIncludingVAT@1002 : Boolean;NewVATBaseDiscPct@1005 : Decimal);
    VAR
      TotalInvDiscBaseAmount@1003 : Decimal;
      NewRemainder@1004 : Decimal;
    BEGIN
      InitGlobals(NewCurrencyCode,FALSE,NewPricesIncludingVAT);
      TotalInvDiscBaseAmount := GetTotalInvDiscBaseAmount(FALSE,Currency.Code);
      IF TotalInvDiscBaseAmount = 0 THEN
        EXIT;
      FIND('-');
      REPEAT
        IF "Inv. Disc. Base Amount" <> 0 THEN BEGIN
          IF TotalInvDiscBaseAmount = 0 THEN
            NewRemainder := 0
          ELSE
            NewRemainder :=
              NewRemainder + NewInvoiceDiscount * "Inv. Disc. Base Amount" / TotalInvDiscBaseAmount;
          VALIDATE(
            "Invoice Discount Amount",ROUND(NewRemainder,Currency."Amount Rounding Precision"));
          NewRemainder := NewRemainder - "Invoice Discount Amount";
          MODIFY;
        END;
      UNTIL NEXT = 0;
    END;

    BEGIN
    END.
  }
}

