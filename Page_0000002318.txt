OBJECT Page 2318 BC O365 Sales Customer Card
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:48 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer;
    SourceTable=Table18;
    DataCaptionExpr=Name;
    PageType=Card;
    OnInit=VAR
             O365SalesInitialSetup@1000 : Record 2110;
           BEGIN
             IF O365SalesInitialSetup.GET THEN
               IsUsingVAT := O365SalesInitialSetup.IsUsingVAT;
           END;

    OnOpenPage=BEGIN
                 SETRANGE("Date Filter",0D,WORKDATE);
               END;

    OnNewRecord=BEGIN
                  OnNewRec;
                END;

    OnInsertRecord=BEGIN
                     IF Name = '' THEN
                       CustomerCardState := CustomerCardState::Prompt
                     ELSE
                       CustomerCardState := CustomerCardState::Keep;

                     EXIT(TRUE);
                   END;

    OnModifyRecord=BEGIN
                     IF Name = '' THEN
                       CustomerCardState := CustomerCardState::Prompt
                     ELSE
                       CustomerCardState := CustomerCardState::Keep;

                     EXIT(TRUE);
                   END;

    OnDeleteRecord=BEGIN
                     O365SalesManagement.BlockOrDeleteCustomerAndDeleteContact(Rec);
                     EXIT(FALSE);
                   END;

    OnQueryClosePage=BEGIN
                       EXIT(CanExitAfterProcessingCustomer);
                     END;

    OnAfterGetCurrRecord=VAR
                           TaxArea@1001 : Record 318;
                           LanguageManagement@1000 : Codeunit 43;
                         BEGIN
                           CreateCustomerFromTemplate;

                           OverdueAmount := CalcOverdueBalance;

                           IF TaxArea.GET("Tax Area Code") THEN
                             TaxAreaDescription := TaxArea.GetDescriptionInCurrentLanguage;

                           BlockedStatus := IsBlocked;

                           // Supergroup is visible only if one of the two subgroups is visible
                           SalesAndPaymentsVisible := (NOT TotalsHidden) OR
                             (("Contact Type" = "Contact Type"::Company) AND IsUsingVAT);

                           LanguageName := LanguageManagement.GetWindowsLanguageNameFromLanguageCode("Language Code");
                           CountryRegionCode := "Country/Region Code";
                           CurrPageEditable := CurrPage.EDITABLE;
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's name.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Name;
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                           END;
                            }

    { 25  ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the contact is a company or a person.;
                OptionCaptionML=ENU=Company contact,Person;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Contact Type";
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 130 ;1   ;Group     ;
                CaptionML=ENU=Contact & Address;
                GroupType=Group }

    { 122 ;2   ;Group     ;
                Name=ContactDetails;
                CaptionML=ENU=Contact;
                GroupType=Group }

    { 4   ;3   ;Field     ;
                ExtendedDatatype=E-Mail;
                CaptionML=ENU=Email Address;
                ToolTipML=ENU=Specifies the customer's email address.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="E-Mail";
                Importance=Promoted;
                OnValidate=VAR
                             MailManagement@1000 : Codeunit 9520;
                           BEGIN
                             MailManagement.ValidateEmailAddressField("E-Mail");
                           END;
                            }

    { 7   ;3   ;Field     ;
                CaptionML=ENU=Phone Number;
                ToolTipML=ENU=Specifies the customer's telephone number.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Phone No.";
                Importance=Promoted }

    { 129 ;2   ;Group     ;
                Name=AddressDetails;
                CaptionML=ENU=Address;
                GroupType=Group }

    { 15  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Address }

    { 17  ;3   ;Field     ;
                ToolTipML=ENU=Specifies additional address information.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Address 2" }

    { 22  ;3   ;Field     ;
                Lookup=No;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=City }

    { 18  ;3   ;Field     ;
                Lookup=No;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Post Code" }

    { 20  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=County }

    { 23  ;3   ;Field     ;
                Lookup=Yes;
                CaptionML=ENU=Country/Region Code;
                ToolTipML=ENU=Specifies the country/region of the address.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=CountryRegionCode;
                TableRelation=Country/Region;
                Editable=CurrPageEditable;
                LookupPageID=BC O365 Country/Region List;
                OnValidate=BEGIN
                             CountryRegionCode := O365SalesInvoiceMgmt.FindCountryCodeFromInput(CountryRegionCode);
                             "Country/Region Code" := CountryRegionCode;
                           END;
                            }

    { 123 ;3   ;Field     ;
                Name=ShowMap;
                ToolTipML=ENU=Specifies the customer's address on your preferred map website.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowMapLbl;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              CurrPage.UPDATE(TRUE);
                              DisplayMap;
                            END;

                ShowCaption=No }

    { 30  ;3   ;Field     ;
                Name=LanguageName;
                CaptionML=ENU=Preferred Language;
                ToolTipML=ENU=Specifies the preferred language for the contact.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=LanguageName;
                Importance=Promoted;
                Visible=FALSE;
                OnValidate=VAR
                             LanguageManagement@1001 : Codeunit 43;
                             NewLanguageCode@1000 : Code[10];
                           BEGIN
                             NewLanguageCode :=
                               LanguageManagement.GetLanguageCodeFromLanguageID(
                                 LanguageManagement.GetWindowsLanguageIDFromLanguageName(LanguageName));
                             IF NewLanguageCode <> '' THEN
                               "Language Code" := NewLanguageCode;
                             UpdateLanguageCodeOnUnpostedDocuments;
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           LookupLanguage;
                         END;

                QuickEntry=FALSE }

    { 28  ;1   ;Group     ;
                CaptionML=ENU=Sales and Payments;
                Visible=SalesAndPaymentsVisible;
                GroupType=Group }

    { 16  ;2   ;Group     ;
                Visible=NOT TotalsHidden;
                GroupType=Group }

    { 5   ;3   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Outstanding;
                ToolTipML=ENU=Specifies the customer's balance.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Balance (LCY)";
                AutoFormatType=10;
                AutoFormatExpr='1';
                Importance=Promoted }

    { 6   ;3   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Overdue;
                ToolTipML=ENU=Specifies payments from the customer that are overdue per today's date.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=OverdueAmount;
                AutoFormatType=10;
                AutoFormatExpr='1';
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=OverdueAmount > 0 }

    { 8   ;3   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=ENU=Total Sales (Excl. Tax);
                ToolTipML=ENU=Specifies the total net amount of sales to the customer in $.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sales (LCY)";
                AutoFormatType=10;
                AutoFormatExpr='1' }

    { 13  ;2   ;Group     ;
                Visible=("Contact Type" = "Contact Type"::Company) AND IsUsingVAT;
                GroupType=Group }

    { 21  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="VAT Registration No." }

    { 12  ;1   ;Group     ;
                Name=Tax Information;
                CaptionML=ENU=Tax;
                Visible=NOT IsUsingVAT;
                GroupType=Group }

    { 14  ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the sales invoice contains sales tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Tax Liable" }

    { 19  ;2   ;Field     ;
                CaptionML=ENU=Tax Rate;
                ToolTipML=ENU=Specifies the customer's tax area.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                NotBlank=Yes;
                SourceExpr=TaxAreaDescription;
                Importance=Promoted;
                Enabled=CurrPageEditable;
                Editable=FALSE;
                OnLookup=VAR
                           TaxArea@1001 : Record 318;
                         BEGIN
                           IF PAGE.RUNMODAL(PAGE::"O365 Tax Area List",TaxArea) = ACTION::LookupOK THEN BEGIN
                             VALIDATE("Tax Area Code",TaxArea.Code);
                             TaxAreaDescription := TaxArea.GetDescriptionInCurrentLanguage;
                           END;
                         END;

                OnAssistEdit=VAR
                               TaxArea@1000 : Record 318;
                             BEGIN
                               IF PAGE.RUNMODAL(PAGE::"O365 Tax Area List",TaxArea) = ACTION::LookupOK THEN BEGIN
                                 VALIDATE("Tax Area Code",TaxArea.Code);
                                 TaxAreaDescription := TaxArea.GetDescriptionInCurrentLanguage;
                                 CurrPage.UPDATE;
                               END;
                             END;

                QuickEntry=FALSE }

    { 34  ;1   ;Group     ;
                Name=Status;
                CaptionML=ENU=Status;
                Visible=BlockedStatus;
                GroupType=Group }

    { 35  ;2   ;Field     ;
                CaptionML=ENU=Blocked;
                ToolTipML=ENU=Specifies if you want to block the customer for any further business.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=BlockedStatus;
                OnValidate=BEGIN
                             IF NOT BlockedStatus THEN
                               IF CONFIRM(UnblockCustomerQst) THEN BEGIN
                                 VALIDATE(Blocked,Blocked::" ");
                                 IF NOT ContBusRel.FindByRelation(ContBusRel."Link to Table"::Customer,"No.") THEN
                                   CustContUpdate.OnInsert(Rec)
                               END ELSE
                                 BlockedStatus := TRUE
                             ELSE
                               VALIDATE(Blocked,Blocked::All)
                           END;
                            }

    { 31  ;1   ;Group     ;
                Name=Privacy;
                GroupType=Group;
                InstructionalTextML=ENU=Export customer privacy data in an Excel file and email it to yourself for review before sending it to the customer. }

    { 29  ;2   ;Field     ;
                Name=ExportData;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=ExportDataLbl;
                Importance=Promoted;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              SETRECFILTER;
                              PAGE.RUNMODAL(PAGE::"O365 Export Customer Data",Rec);
                            END;

                ShowCaption=No }

    { 51  ;0   ;Container ;
                ContainerType=FactBoxArea }

    { 50  ;1   ;Part      ;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page785;
                PartType=Page }

    { 43  ;1   ;Part      ;
                Name=SalesHistSelltoFactBox;
                CaptionML=ENU=Sales History;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page2309;
                PartType=Page }

  }
  CODE
  {
    VAR
      ContBusRel@1017 : Record 5054;
      CustContUpdate@1006 : Codeunit 5056;
      O365SalesManagement@1013 : Codeunit 2107;
      O365SalesInvoiceMgmt@1014 : Codeunit 2310;
      CustomerCardState@1000 : 'Keep,Delete,Prompt';
      NewMode@1007 : Boolean;
      IsUsingVAT@1005 : Boolean;
      OverdueAmount@1008 : Decimal;
      TaxAreaDescription@1004 : Text[50];
      TotalsHidden@1009 : Boolean;
      SalesAndPaymentsVisible@1011 : Boolean;
      LanguageName@1012 : Text;
      ClosePageQst@1016 : TextConst 'ENU=You haven''t specified a name. Do you want to save this customer?';
      CountryRegionCode@1015 : Code[10];
      BlockedStatus@1022 : Boolean;
      UnblockCustomerQst@1003 : TextConst 'ENU=Are you sure you want to unblock the customer for further business?';
      ExportDataLbl@1001 : TextConst 'ENU=Export customer privacy data';
      ShowMapLbl@1020 : TextConst 'ENU=Show on Map';
      CurrPageEditable@1035 : Boolean;

    LOCAL PROCEDURE CanExitAfterProcessingCustomer@2() : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT(TRUE);

      IF CustomerCardState = CustomerCardState::Delete THEN
        EXIT(DeleteCustomerRelatedData);

      IF GUIALLOWED AND (CustomerCardState = CustomerCardState::Prompt) AND NOT IsBlocked
      THEN BEGIN
        IF CONFIRM(ClosePageQst,TRUE) THEN
          EXIT(TRUE);
        EXIT(DeleteCustomerRelatedData);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DeleteCustomerRelatedData@4() : Boolean;
    BEGIN
      CustContUpdate.DeleteCustomerContacts(Rec);

      // workaround for bug: delete for new empty record returns false
      IF DELETE(TRUE) THEN;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE OnNewRec@1();
    VAR
      DocumentNoVisibility@1000 : Codeunit 1400;
    BEGIN
      IF GUIALLOWED AND DocumentNoVisibility.CustomerNoSeriesIsDefault THEN
        NewMode := TRUE;
    END;

    LOCAL PROCEDURE CreateCustomerFromTemplate@3();
    VAR
      MiniCustomerTemplate@1001 : Record 1300;
      Customer@1000 : Record 18;
      O365TaxSettingsManagement@1020000 : Codeunit 10150;
    BEGIN
      IF NewMode THEN BEGIN
        O365TaxSettingsManagement.CheckCustomerTemplateTaxIntegrity;
        IF MiniCustomerTemplate.NewCustomerFromTemplate(Customer) THEN
          COPY(Customer);

        TotalsHidden := TRUE;

        CustomerCardState := CustomerCardState::Delete;
        NewMode := FALSE;
        CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE LookupLanguage@11();
    VAR
      Language@1002 : Record 8;
      LanguageManagement@1001 : Codeunit 43;
      LanguageID@1000 : Integer;
    BEGIN
      IF "Language Code" <> '' THEN
        IF NOT Language.GET("Language Code") THEN
          Language."Windows Language ID" := WINDOWSLANGUAGE;
      LanguageID := Language."Windows Language ID";
      LanguageManagement.LookupApplicationLanguage(LanguageID);
      Language.SETRANGE("Windows Language ID",LanguageID);
      IF Language.FINDFIRST THEN
        "Language Code" := Language.Code
      ELSE
        "Language Code" := '';

      UpdateLanguageCodeOnUnpostedDocuments;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE UpdateLanguageCodeOnUnpostedDocuments@6();
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      IF "Language Code" = xRec."Language Code" THEN
        EXIT;
      SalesHeader.SETRANGE("Bill-to Customer No.","No.");
      SalesHeader.MODIFYALL("Language Code","Language Code");
    END;

    BEGIN
    END.
  }
}

