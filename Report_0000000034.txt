OBJECT Report 34 Change Payment Tolerance
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:47 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 4=rm,
                TableData 21=rm,
                TableData 25=rm,
                TableData 98=rm;
    CaptionML=ENU=Change Payment Tolerance;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   IF AllCurrencies THEN BEGIN
                     IF Currency.FIND('-') THEN
                       REPEAT
                         IF Currency."Payment Tolerance %" <> PaymentTolerancePct THEN
                           Currency."Payment Tolerance %" := PaymentTolerancePct;
                         IF Currency."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount THEN
                           Currency."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                         Currency."Max. Payment Tolerance Amount" := ROUND(
                             Currency."Max. Payment Tolerance Amount",Currency."Amount Rounding Precision");
                         Currency.MODIFY;
                       UNTIL Currency.NEXT = 0;
                     GLSetup.GET;
                     IF GLSetup."Payment Tolerance %" <> PaymentTolerancePct THEN
                       GLSetup."Payment Tolerance %" := PaymentTolerancePct;
                     IF GLSetup."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount THEN
                       GLSetup."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                     GLSetup."Max. Payment Tolerance Amount" := ROUND(
                         GLSetup."Max. Payment Tolerance Amount",GLSetup."Amount Rounding Precision");
                     GLSetup.MODIFY;
                   END ELSE
                     IF CurrencyCode = '' THEN BEGIN
                       GLSetup.GET;
                       AmountRoundingPrecision := GLSetup."Amount Rounding Precision";
                       IF GLSetup."Payment Tolerance %" <> PaymentTolerancePct THEN
                         GLSetup."Payment Tolerance %" := PaymentTolerancePct;
                       IF GLSetup."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount THEN
                         GLSetup."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                       GLSetup."Max. Payment Tolerance Amount" := ROUND(
                           GLSetup."Max. Payment Tolerance Amount",GLSetup."Amount Rounding Precision");
                       GLSetup.MODIFY;
                     END ELSE
                       IF CurrencyCode <> '' THEN BEGIN
                         Currency.GET(CurrencyCode);
                         AmountRoundingPrecision := Currency."Amount Rounding Precision";
                         IF Currency."Payment Tolerance %" <> PaymentTolerancePct THEN
                           Currency."Payment Tolerance %" := PaymentTolerancePct;
                         IF Currency."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount THEN
                           Currency."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                         Currency."Max. Payment Tolerance Amount" := ROUND(
                             Currency."Max. Payment Tolerance Amount",Currency."Amount Rounding Precision");
                         Currency.MODIFY;
                       END;

                   IF AllCurrencies THEN BEGIN
                     IF CONFIRM(Text001,TRUE) THEN BEGIN
                       IF Currency.FIND('-') THEN
                         REPEAT
                           AmountRoundingPrecision := Currency."Amount Rounding Precision";
                           CurrencyCode := Currency.Code;
                           ChangeCustLedgEntries;
                           ChangeVendLedgEntries;
                         UNTIL Currency.NEXT = 0;
                       CurrencyCode := '';
                       GLSetup.GET;
                       AmountRoundingPrecision := GLSetup."Amount Rounding Precision";
                       ChangeCustLedgEntries;
                       ChangeVendLedgEntries;
                     END;
                   END ELSE
                     IF CONFIRM(Text001,TRUE) THEN BEGIN
                       ChangeCustLedgEntries;
                       ChangeVendLedgEntries;
                     END;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               CurrencyCodeEnable := TRUE;
             END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 7   ;2   ;Field     ;
                  CaptionML=ENU=All Currencies;
                  ToolTipML=ENU=Specifies if you want to change the tolerance setup for both local and all foreign currencies.;
                  ApplicationArea=#Suite;
                  SourceExpr=AllCurrencies;
                  OnValidate=BEGIN
                               IF AllCurrencies THEN BEGIN
                                 CurrencyCode := '';
                                 PaymentTolerancePct := 0;
                                 MaxPmtToleranceAmount := 0;
                                 CurrencyCodeEnable := FALSE;
                               END ELSE BEGIN
                                 CurrencyCodeEnable := TRUE;
                                 CurrencyCode := '';
                                 PaymentTolerancePct := GLSetup."Payment Tolerance %";
                                 MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
                                 DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
                               END;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  Name=Currency Code;
                  CaptionML=ENU=Currency Code;
                  ToolTipML=ENU=Specifies the code for the currency that amounts are shown in.;
                  ApplicationArea=#Suite;
                  SourceExpr=CurrencyCode;
                  TableRelation=Currency;
                  Enabled=CurrencyCodeEnable;
                  OnValidate=BEGIN
                               IF NOT AllCurrencies THEN
                                 IF CurrencyCode = '' THEN BEGIN
                                   GLSetup.GET;
                                   PaymentTolerancePct := GLSetup."Payment Tolerance %";
                                   MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
                                   DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
                                 END ELSE BEGIN
                                   Currency.GET(CurrencyCode);
                                   PaymentTolerancePct := Currency."Payment Tolerance %";
                                   MaxPmtToleranceAmount := Currency."Max. Payment Tolerance Amount";
                                   DecimalPlaces := CheckApplnRounding(Currency."Amount Decimal Places");
                                 END;
                             END;

                  OnLookup=BEGIN
                             Currencies.LOOKUPMODE := TRUE;
                             IF Currencies.RUNMODAL = ACTION::LookupOK THEN
                               Currencies.GetCurrency(CurrencyCode);
                             CLEAR(Currencies);
                             IF CurrencyCode = '' THEN BEGIN
                               GLSetup.GET;
                               PaymentTolerancePct := GLSetup."Payment Tolerance %";
                               MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
                             END ELSE BEGIN
                               Currency.GET(CurrencyCode);
                               PaymentTolerancePct := Currency."Payment Tolerance %";
                               MaxPmtToleranceAmount := Currency."Max. Payment Tolerance Amount";
                             END;
                           END;
                            }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Payment Tolerance %;
                  ToolTipML=ENU=Specifies the percentage by which the payment or refund is allowed to be less than the amount on the invoice or credit memo.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=PaymentTolerancePct;
                  Enabled=TRUE }

      { 5   ;2   ;Field     ;
                  Name=Max. Pmt. Tolerance Amount;
                  CaptionML=ENU=Max. Pmt. Tolerance Amount;
                  ToolTipML=ENU=Specifies the maximum allowed amount by which the payment or refund can differ from the amount on the invoice or credit memo.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=MaxPmtToleranceAmount;
                  Enabled=TRUE;
                  OnValidate=BEGIN
                               IF AllCurrencies THEN BEGIN
                                 DecimalPlaces := 5;
                                 FormatString := Text002 + '0:5' + Text003;
                               END ELSE
                                 IF Currency.Code <> '' THEN BEGIN
                                   Currency.GET(Currency.Code);
                                   DecimalPlaces := CheckApplnRounding(Currency."Amount Decimal Places");
                                   FormatString := Text002 + Currency."Amount Decimal Places" + Text003;
                                 END ELSE BEGIN
                                   GLSetup.GET;
                                   DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
                                   FormatString := Text002 + GLSetup."Amount Decimal Places" + Text003;
                                 END;
                               TextFormat := FORMAT(MaxPmtToleranceAmount,0,FormatString);
                               TextInput := FORMAT(MaxPmtToleranceAmount);
                               IF STRLEN(TextFormat) < STRLEN(TextInput) THEN
                                 ERROR(Text004,DecimalPlaces);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Currency@1003 : Record 4;
      GLSetup@1004 : Record 98;
      Currencies@1006 : Page 5;
      CurrencyCode@1007 : Code[10];
      PaymentTolerancePct@1001 : Decimal;
      MaxPmtToleranceAmount@1000 : Decimal;
      Text001@1005 : TextConst 'ENU=Do you want to change all open entries for every customer and vendor that are not blocked?';
      AmountRoundingPrecision@1008 : Decimal;
      DecimalPlaces@1010 : Integer;
      AllCurrencies@1009 : Boolean;
      FormatString@1014 : Text[80];
      TextFormat@1015 : Text[250];
      TextInput@1016 : Text[250];
      Text002@1012 : TextConst 'ENU=<Precision,';
      Text003@1013 : TextConst 'ENU=><Standard Format,0>';
      Text004@1017 : TextConst 'ENU=The field can have a maximum of %1 decimal places.';
      CurrencyCodeEnable@19025310 : Boolean INDATASET;

    LOCAL PROCEDURE CheckApplnRounding@4(AmountDecimalPlaces@1000 : Text[5]) : Integer;
    VAR
      ColonPlace@1001 : Integer;
      ReturnNumber@1002 : Integer;
      OK@1003 : Boolean;
      TempAmountDecimalPlaces@1004 : Text[5];
    BEGIN
      ColonPlace := STRPOS(AmountDecimalPlaces,':');

      IF ColonPlace = 0 THEN BEGIN
        OK := EVALUATE(ReturnNumber,AmountDecimalPlaces);
        IF OK THEN
          EXIT(ReturnNumber);
      END ELSE BEGIN
        TempAmountDecimalPlaces := COPYSTR(AmountDecimalPlaces,ColonPlace + 1,ColonPlace + 1);
        OK := EVALUATE(ReturnNumber,TempAmountDecimalPlaces);
        IF OK THEN
          EXIT(ReturnNumber);
      END;
    END;

    LOCAL PROCEDURE ChangeCustLedgEntries@1();
    VAR
      Customer@1001 : Record 18;
      CustLedgEntry@1000 : Record 21;
      NewPaymentTolerancePct@1003 : Decimal;
      NewMaxPmtToleranceAmount@1002 : Decimal;
    BEGIN
      Customer.SETCURRENTKEY("No.");
      Customer.LOCKTABLE;
      IF NOT Customer.FIND('-')THEN
        EXIT;

      REPEAT
        IF NOT Customer."Block Payment Tolerance" THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
          CustLedgEntry.SETRANGE("Customer No.",Customer."No.");
          CustLedgEntry.SETRANGE(Open,TRUE);

          CustLedgEntry.SETFILTER("Document Type",'%1|%2',
            CustLedgEntry."Document Type"::Invoice,
            CustLedgEntry."Document Type"::"Credit Memo");

          CustLedgEntry.SETRANGE("Currency Code",CurrencyCode);
          NewPaymentTolerancePct := PaymentTolerancePct;
          NewMaxPmtToleranceAmount := MaxPmtToleranceAmount;

          CustLedgEntry.LOCKTABLE;
          IF CustLedgEntry.FIND('-') THEN BEGIN
            REPEAT
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              CustLedgEntry."Max. Payment Tolerance" :=
                ROUND(NewPaymentTolerancePct * CustLedgEntry."Remaining Amount" / 100,AmountRoundingPrecision);
              IF (CustLedgEntry."Max. Payment Tolerance" = 0) AND
                 (NewMaxPmtToleranceAmount <> 0) OR
                 ((ABS(CustLedgEntry."Max. Payment Tolerance") > NewMaxPmtToleranceAmount) AND
                  (CustLedgEntry."Max. Payment Tolerance" <> 0) AND
                  (NewMaxPmtToleranceAmount <> 0))
              THEN BEGIN
                IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice THEN
                  CustLedgEntry."Max. Payment Tolerance" :=
                    ROUND(NewMaxPmtToleranceAmount,AmountRoundingPrecision)
                ELSE
                  CustLedgEntry."Max. Payment Tolerance" :=
                    ROUND(-NewMaxPmtToleranceAmount,AmountRoundingPrecision);
              END;
              IF ABS(CustLedgEntry."Remaining Amount") < ABS(CustLedgEntry."Max. Payment Tolerance") THEN
                CustLedgEntry."Max. Payment Tolerance" := CustLedgEntry."Remaining Amount";
              CustLedgEntry.MODIFY;
            UNTIL CustLedgEntry.NEXT = 0;
          END;
        END;
      UNTIL Customer.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeVendLedgEntries@2();
    VAR
      Vendor@1001 : Record 23;
      VendLedgEntry@1000 : Record 25;
      NewPaymentTolerancePct@1003 : Decimal;
      NewMaxPmtToleranceAmount@1002 : Decimal;
    BEGIN
      Vendor.SETCURRENTKEY("No.");
      Vendor.LOCKTABLE;
      IF NOT Vendor.FIND('-')THEN
        EXIT;
      REPEAT
        IF NOT Vendor."Block Payment Tolerance" THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
          VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

          VendLedgEntry.SETRANGE(Open,TRUE);

          VendLedgEntry.SETFILTER("Document Type",'%1|%2',
            VendLedgEntry."Document Type"::Invoice,
            VendLedgEntry."Document Type"::"Credit Memo");

          VendLedgEntry.SETRANGE("Currency Code",CurrencyCode);
          NewPaymentTolerancePct := PaymentTolerancePct;
          NewMaxPmtToleranceAmount := MaxPmtToleranceAmount;

          VendLedgEntry.LOCKTABLE;
          IF VendLedgEntry.FIND('-') THEN BEGIN
            REPEAT
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Max. Payment Tolerance" :=
                ROUND(NewPaymentTolerancePct * VendLedgEntry."Remaining Amount" / 100,AmountRoundingPrecision);
              IF (VendLedgEntry."Max. Payment Tolerance" = 0) AND
                 (NewMaxPmtToleranceAmount <> 0) OR
                 ((ABS(VendLedgEntry."Max. Payment Tolerance") > NewMaxPmtToleranceAmount) AND
                  (VendLedgEntry."Max. Payment Tolerance" <> 0) AND
                  (NewMaxPmtToleranceAmount <> 0))
              THEN BEGIN
                IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice THEN
                  VendLedgEntry."Max. Payment Tolerance" :=
                    ROUND(-NewMaxPmtToleranceAmount,AmountRoundingPrecision)
                ELSE
                  VendLedgEntry."Max. Payment Tolerance" :=
                    ROUND(NewMaxPmtToleranceAmount,AmountRoundingPrecision);
              END;
              IF ABS(VendLedgEntry."Remaining Amount") < ABS(VendLedgEntry."Max. Payment Tolerance") THEN
                VendLedgEntry."Max. Payment Tolerance" := VendLedgEntry."Remaining Amount";
              VendLedgEntry.MODIFY;
            UNTIL VendLedgEntry.NEXT = 0;
          END;
        END;
      UNTIL Vendor.NEXT = 0;
    END;

    PROCEDURE SetCurrency@3(NewCurrency@1000 : Record 4);
    BEGIN
      PageSetCurrency(NewCurrency);
      EXIT;
    END;

    LOCAL PROCEDURE PageSetCurrency@19033490(NewCurrency@1000 : Record 4);
    BEGIN
      Currency := NewCurrency;

      IF Currency.Code <> ''THEN BEGIN
        Currency.GET(Currency.Code);
        CurrencyCode := Currency.Code;
        PaymentTolerancePct := Currency."Payment Tolerance %";
        MaxPmtToleranceAmount := Currency."Max. Payment Tolerance Amount";
        DecimalPlaces := CheckApplnRounding(Currency."Amount Decimal Places");
      END ELSE BEGIN
        GLSetup.GET;
        PaymentTolerancePct := GLSetup."Payment Tolerance %";
        MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
        DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
      END;
    END;

    PROCEDURE InitializeRequest@5(AllCurrenciesFrom@1000 : Boolean;CurrencyCodeFrom@1001 : Code[10];PaymentTolerancePctFrom@1002 : Decimal;MaxPmtToleranceAmountFrom@1003 : Decimal);
    BEGIN
      AllCurrencies := AllCurrenciesFrom;
      CurrencyCode := CurrencyCodeFrom;
      PaymentTolerancePct := PaymentTolerancePctFrom;
      MaxPmtToleranceAmount := MaxPmtToleranceAmountFrom;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

