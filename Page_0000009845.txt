OBJECT Page 9845 Event Recorder
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:06 PM;
    Version List=;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=Event Recorder;
    ApplicationArea=#Basic,#Suite;
    SourceTable=Table9804;
    PopulateAllFields=Yes;
    SourceTableView=SORTING(Call Order)
                    ORDER(Ascending);
    PageType=Worksheet;
    UsageCategory=Lists;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Record Events;
    OnAfterGetRecord=BEGIN
                       IF "Event Type" = "Event Type"::"Custom Event" THEN
                         EventTypeStyleExpr := 'Attention'
                       ELSE
                         EventTypeStyleExpr := 'AttentionAccent';
                     END;

    ActionList=ACTIONS
    {
      { 12      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 51      ;1   ;ActionGroup;
                      Name=Recording;
                      CaptionML=ENU=Record Events;
                      ActionContainerType=ActionItems }
      { 50      ;2   ;Action    ;
                      Name=Start;
                      CaptionML=ENU=Start;
                      ToolTipML=ENU=Start recording UI activities to generate the list of events that are called. The new recording will erase any events that have previously been recorded.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=NOT EventLoggingRunning;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(StartRecordingQst) THEN
                                   EXIT;

                                 // Delete events from the current table.
                                 DELETEALL;

                                 LogRecordedEvents.Start;
                                 EventLoggingRunning := TRUE;
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Name=Stop;
                      CaptionML=ENU=Stop;
                      ToolTipML=ENU=Stop recording and generate the list of events that are recorded.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=EventLoggingRunning;
                      PromotedIsBig=Yes;
                      Image=Stop;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 EventLoggingRunning := FALSE;
                                 LogRecordedEvents.Stop(TempRecordedEventBuffer);

                                 IF TempRecordedEventBuffer.COUNT = 0 THEN BEGIN
                                   MESSAGE(NoEventsRecordedMsg);
                                   EXIT;
                                 END;

                                 IF NOT CONFIRM(AddRecordingQst,FALSE,TempRecordedEventBuffer.COUNT) THEN
                                   EXIT;

                                 // Add elements to the source table of the page to display them in the repeater.
                                 IF TempRecordedEventBuffer.FINDSET THEN BEGIN
                                   REPEAT
                                     INIT;
                                     Rec := TempRecordedEventBuffer;
                                     INSERT;
                                   UNTIL TempRecordedEventBuffer.NEXT = 0;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                CaptionML=ENU=All Recorded Events;
                Editable=FALSE;
                GroupType=Repeater }

    { 8   ;2   ;Field     ;
                Name=CallOrder;
                CaptionML=ENU=Call Order;
                ToolTipML=ENU=Specifies the order in which the events are called.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Call Order" }

    { 7   ;2   ;Field     ;
                Name=EventType;
                CaptionML=ENU=Event Type;
                ToolTipML=ENU=Specifies the type of the event that is called.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Event Type";
                StyleExpr=EventTypeStyleExpr }

    { 14  ;2   ;Field     ;
                Name=HitCount;
                CaptionML=ENU=Hit Count;
                ToolTipML=ENU=Specifies the number of time this event is called consecutively.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Hit Count" }

    { 11  ;2   ;Field     ;
                Name=ObjectType;
                CaptionML=ENU=Object Type;
                ToolTipML=ENU=Specifies the type of object that contains the called event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object Type" }

    { 10  ;2   ;Field     ;
                Name=ObjectID;
                CaptionML=ENU=Object ID;
                ToolTipML=ENU=Specifies the ID of the object that contains the called event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object ID";
                Visible=FALSE;
                LookupPageID=All Objects with Caption;
                HideValue=("Object ID" = 0) }

    { 9   ;2   ;Field     ;
                Name=ObjectName;
                DrillDown=No;
                CaptionML=ENU=Object Name;
                ToolTipML=ENU=Specifies the name of the object that contains the called event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object Name" }

    { 3   ;2   ;Field     ;
                Name=EventName;
                CaptionML=ENU=Event Name;
                ToolTipML=ENU=Specifies the name of the called event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Event Name" }

    { 17  ;2   ;Field     ;
                Name=ElementName;
                CaptionML=ENU=Element Name;
                ToolTipML=ENU=Specifies the name of the element in which the event is called.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Element Name" }

    { 5   ;2   ;Field     ;
                Name=CallingObjectType;
                CaptionML=ENU=Calling Object Type;
                ToolTipML=ENU=Specifies the type of the object that calls the event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Calling Object Type";
                HideValue=("Calling Object Type" = 0) }

    { 4   ;2   ;Field     ;
                Name=CallingObjectID;
                CaptionML=ENU=Calling Object ID;
                ToolTipML=ENU=Specifies the ID of the object that calls the event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Calling Object ID";
                Visible=FALSE;
                HideValue=("Calling Object ID" = 0) }

    { 6   ;2   ;Field     ;
                Name=CallingObjectName;
                DrillDown=No;
                CaptionML=ENU=Calling Object Name;
                ToolTipML=ENU=Specifies the name of the object that calls the event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Calling Object Name" }

    { 13  ;2   ;Field     ;
                Name=CallingMethod;
                CaptionML=ENU=Calling Method;
                ToolTipML=ENU=Specifies the name of method that calls the event.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Calling Method" }

    { 18  ;2   ;Field     ;
                Name=GetALSnippet;
                CaptionML=ENU=Get AL Snippet;
                ToolTipML=ENU=Specifies the AL snippet to subscribe to this event.;
                ApplicationArea=#All;
                SourceExpr=GetAlSnippetLbl;
                OnDrillDown=BEGIN
                              MESSAGE(DisplaySnippet);
                            END;
                             }

  }
  CODE
  {
    VAR
      TempRecordedEventBuffer@1015 : TEMPORARY Record 9804;
      LogRecordedEvents@1013 : Codeunit 9804;
      AddRecordingQst@1007 : TextConst '@@@=%1 represents the number of events recorded.;ENU=%1 events have been recorded. Do you want to display them?';
      StartRecordingQst@1014 : TextConst 'ENU=Do you want to start the recording now?';
      NoEventsRecordedMsg@1000 : TextConst 'ENU=No events have been recorded.';
      GetAlSnippetLbl@1004 : TextConst 'ENU=Get AL Snippet.';
      EventLoggingRunning@1003 : Boolean;
      EventTypeStyleExpr@1001 : Text INDATASET;

    LOCAL PROCEDURE DisplaySnippet@4() Snippet : Text;
    VAR
      ObjectTypeForId@1000 : Text[30];
    BEGIN
      // In AL, the ID of a table is accessed as Database::MyTable.
      IF "Object Type" = "Object Type"::Table THEN
        ObjectTypeForId := 'Database'
      ELSE
        ObjectTypeForId := FORMAT("Object Type");

      Snippet := '[EventSubscriber(ObjectType::' + FORMAT("Object Type") + ', ' +
        ObjectTypeForId + '::' + '"' + "Object Name" + '"' + ', ' +
        '''' + "Event Name" + '''' + ', ' +
        '''' + "Element Name" + '''' + ', ' +
        'true, true)] ' + '\' +
        'local procedure MyProcedure()\' +
        'begin\' +
        'end;\';
    END;

    BEGIN
    END.
  }
}

