OBJECT Page 6303 Power BI Report Spinner Part
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Power BI Reports;
               ESM=Informes de Power BI;
               FRC=Rapports Power BI;
               ENC=Power BI Reports];
    PageType=CardPart;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             // Variables used by PingPong timer when deploying default PBI reports.
             TimerDelay := 30000; // 30 seconds
             MaxTimerCount := (60000 / TimerDelay) * 5; // 5 minutes
           END;

    OnOpenPage=BEGIN
                 UpdateContext;
                 RefreshPart;
                 IsAdmin := PermissionManager.IsSuper(USERSECURITYID);
                 IsSaaSUser := AzureAdMgt.IsSaaS;
               END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Select Report;
                      CaptionML=[ENU=Select Report;
                                 ESM=Seleccionar informe;
                                 FRC=S‚lectionner un rapport;
                                 ENC=Select Report];
                      ToolTipML=[ENU=Select the report.;
                                 ESM=Seleccione el informe.;
                                 FRC=S‚lectionnez le rapport.;
                                 ENC=Select the report.];
                      ApplicationArea=#All;
                      Enabled=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible;
                      Image=SelectChart;
                      OnAction=BEGIN
                                 SelectReports;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=Expand Report;
                      CaptionML=[ENU=Expand Report;
                                 ESM=Expandir informe;
                                 FRC=D‚velopper le rapport;
                                 ENC=Expand Report];
                      ToolTipML=[ENU=View all information in the report.;
                                 ESM=Permite ver toda la informaci¢n en el informe.;
                                 FRC=Affichez toutes les informations dans le rapport.;
                                 ENC=View all information in the report.];
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=View;
                      OnAction=VAR
                                 PowerBiReportDialog@1000 : Page 6305;
                               BEGIN
                                 PowerBiReportDialog.SetUrl(GetEmbedUrlWithNavigation,GetMessage);
                                 PowerBiReportDialog.CAPTION(TempPowerBiReportBuffer.ReportName);
                                 PowerBiReportDialog.RUN;
                               END;
                                }
      { 5       ;1   ;Action    ;
                      Name=Previous Report;
                      CaptionML=[ENU=Previous Report;
                                 ESM=Informe anterior;
                                 FRC=Rapport pr‚c‚dent;
                                 ENC=Previous Report];
                      ToolTipML=[ENU=Go to the previous report.;
                                 ESM=Permite desplazarse al informe anterior.;
                                 FRC=Acc‚dez au rapport pr‚c‚dent.;
                                 ENC=Go to the previous report.];
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=PreviousSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',TRUE);
                                 IF TempPowerBiReportBuffer.NEXT(-1) = 0 THEN
                                   TempPowerBiReportBuffer.FINDLAST;

                                 IF AddInReady THEN
                                   CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=Next Report;
                      CaptionML=[ENU=Next Report;
                                 ESM=Informe siguiente;
                                 FRC=Rapport suivant;
                                 ENC=Next Report];
                      ToolTipML=[ENU=Go to the next report.;
                                 ESM=Permite desplazarse al informe siguiente.;
                                 FRC=Acc‚der au rapport suivant.;
                                 ENC=Go to the next report.];
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=NextSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',TRUE);
                                 IF TempPowerBiReportBuffer.NEXT = 0 THEN
                                   TempPowerBiReportBuffer.FINDFIRST;

                                 IF AddInReady THEN
                                   CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
      { 26      ;1   ;Action    ;
                      Name=Manage Report;
                      CaptionML=[ENU=Manage Report;
                                 ESM=Administrar informe;
                                 FRC=G‚rer le rapport;
                                 ENC=Manage Report];
                      ToolTipML=[ENU=Opens current selected report for edits.;
                                 ESM=Abre el informe seleccionado actual para las ediciones.;
                                 FRC=Ouvre le rapport actuel s‚lectionn‚ pour des modifications.;
                                 ENC=Opens current selected report for edits.];
                      ApplicationArea=#All;
                      Visible=IsSaaSUser;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=PowerBI;
                      OnAction=VAR
                                 PowerBIManagement@1000 : Page 6319;
                               BEGIN
                                 PowerBIManagement.SetTargetReport(LastOpenedReportID,GetEmbedUrl);
                                 PowerBIManagement.LOOKUPMODE(TRUE);
                                 PowerBIManagement.RUNMODAL;

                                 RefreshPart;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      Name=Refresh;
                      CaptionML=[ENU=Refresh Page;
                                 ESM=Actualiza la p gina;
                                 FRC=Actualiser la page;
                                 ENC=Refresh Page];
                      ToolTipML=[ENU=Refresh the visible content.;
                                 ESM=Actualizar el contenido visible.;
                                 FRC=Actualiser le contenu visible.;
                                 ENC=Refresh the visible content.];
                      ApplicationArea=#All;
                      Enabled=NOT IsGettingStartedVisible;
                      Image=Refresh;
                      OnAction=BEGIN
                                 RefreshPart;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      Name=Upload Report;
                      CaptionML=[ENU=Upload Report;
                                 ESM=Cargar informe;
                                 FRC=T‚l‚charger le rapport;
                                 ENC=Upload Report];
                      ToolTipML=[ENU=Uploads a report from a PBIX file.;
                                 ESM=Carga un informe desde un archivo PBIX.;
                                 FRC=T‚l‚charge un rapport … partir d'un fichier PBIX.;
                                 ENC=Uploads a report from a PBIX file.];
                      ApplicationArea=#All;
                      Visible=IsSaaSUser;
                      Image=Add;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Upload Power BI Report");
                                 RefreshPart;
                               END;
                                }
      { 27      ;1   ;Action    ;
                      Name=Reset All Reports;
                      CaptionML=[ENU=Reset All Reports;
                                 ESM=Restablecer todos los informes;
                                 FRC=R‚initialiser tous les rapports;
                                 ENC=Reset All Reports];
                      ToolTipML=[ENU=Resets all reports for redeployment.;
                                 ESM=Restablece todos los informes para su reimplementaci¢n.;
                                 FRC=R‚initialise tous les rapports pour un red‚ploiement.;
                                 ENC=Resets all reports for redeployment.];
                      ApplicationArea=#All;
                      Visible=IsAdmin AND IsSaaSUser;
                      Image=Reuse;
                      OnAction=VAR
                                 PowerBIReportUploads@1000 : Record 6307;
                                 PowerBIReportConfiguration@1001 : Record 6301;
                                 PowerBIOngoingDeployments@1002 : Record 6308;
                                 PowerBIServiceStatusSetup@1003 : Record 6309;
                                 PowerBIUserConfiguration@1004 : Record 6304;
                                 PowerBICustomerReports@1005 : Record 6310;
                               BEGIN
                                 IF CONFIRM(ResetReportsQst,FALSE) THEN BEGIN
                                   PowerBIReportUploads.RESET;
                                   PowerBIReportUploads.DELETEALL;
                                   PowerBIReportConfiguration.RESET;
                                   PowerBIReportConfiguration.DELETEALL;
                                   PowerBIOngoingDeployments.DELETEALL;
                                   PowerBIServiceStatusSetup.DELETEALL;
                                   PowerBICustomerReports.DELETEALL;
                                   PowerBIUserConfiguration.RESET;
                                   PowerBIUserConfiguration.DELETEALL;
                                   COMMIT;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                ContainerType=ContentArea }

    { 11  ;1   ;Group     ;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND HasReports;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=WebReportViewer;
                ApplicationArea=#All;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.WebPageViewer;PublicKeyToken=31bf3856ad364e35] }

    { 15  ;1   ;Group     ;
                GroupType=GridLayout;
                Layout=Columns }

    { 13  ;2   ;Group     ;
                GroupType=Group }

    { 7   ;3   ;Group     ;
                Visible=IsGettingStartedVisible;
                GroupType=Group }

    { 19  ;4   ;Field     ;
                Name=GettingStarted;
                ToolTipML=[ENU="Specifies that the Azure AD setup window opens. ";
                           ESM="Especifica que se abre la ventana Configuraci¢n de Azure AD. ";
                           FRC="Sp‚cifie que la fenˆtre Configuration Azure AD s'ouvre. ";
                           ENC="Specifies that the Azure AD setup window opens. "];
                ApplicationArea=#All;
                SourceExpr='Get started with Power BI';
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              IF NOT TryAzureAdMgtGetAccessToken THEN
                                ShowErrorMessage(GETLASTERRORTEXT);

                              PowerBiServiceMgt.SelectDefaultReports;
                              LoadContent;
                            END;

                ShowCaption=No }

    { 10  ;3   ;Group     ;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 16  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the error message from Power BI.;
                           ESM=Especifica el mensaje de error de Power BI.;
                           FRC=Sp‚cifie le message d'erreur de Power BI.;
                           ENC=Specifies the error message from Power BI.];
                ApplicationArea=#All;
                SourceExpr=ErrorMessageText;
                Editable=FALSE;
                ShowCaption=No }

    { 14  ;4   ;Field     ;
                ExtendedDatatype=URL;
                ToolTipML=[ENU=Specifies the link that generated the error.;
                           ESM=Especifica el v¡nculo que gener¢ el error.;
                           FRC=Sp‚cifie le lien qui a g‚n‚r‚ l'erreur.;
                           ENC=Specifies the link that generated the error.];
                ApplicationArea=#All;
                SourceExpr=ErrorUrlText;
                Visible=IsUrlFieldVisible;
                Editable=FALSE;
                ShowCaption=No }

    { 17  ;4   ;Field     ;
                Name=GetReportsLink;
                ToolTipML=[ENU=Specifies the reports.;
                           ESM=Especifica los informes.;
                           FRC=Sp‚cifie les rapports.;
                           ENC=Specifies the reports.];
                ApplicationArea=#All;
                SourceExpr='Get reports';
                Visible=IsGetReportsVisible;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              SelectReports;
                            END;

                ShowCaption=No }

    { 12  ;3   ;Group     ;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND NOT HasReports AND NOT IsDeployingReports;
                GroupType=Group }

    { 9   ;4   ;Field     ;
                Name=EmptyMessage;
                CaptionML=[ENU=There are no enabled reports. Choose Select Report to see a list of reports that you can display.;
                           ESM=No hay informes habilitados. Elija Seleccionar informe para ver una lista de informes que se pueden visualizar.;
                           FRC=Aucun rapport n'est activ‚. Choisissez S‚lectionner un rapport pour afficher la liste des rapports disponibles.;
                           ENC=There are no enabled reports. Choose Select Report to see a list of reports that you can display.];
                ToolTipML=[ENU=Specifies that the user needs to select Power BI reports.;
                           ESM=Especifica que el usuario debe seleccionar los informes de Power BI.;
                           FRC=Sp‚cifie que l'utilisateur doit s‚lectionner les rapports Power BI.;
                           ENC=Specifies that the user needs to select Power BI reports.];
                ApplicationArea=#All;
                Visible=NOT IsDeployingReports;
                Editable=FALSE;
                ShowCaption=No }

    { 24  ;3   ;Group     ;
                Visible=NOT IsDeploymentUnavailable AND IsDeployingReports AND NOT HasReports;
                GroupType=Group }

    { 18  ;4   ;Field     ;
                Name=InProgressMessage;
                CaptionML=[ENU=Power BI report deployment is in progress.;
                           ESM=La implementaci¢n del informe de Power BI est  en curso.;
                           FRC=Le d‚ploiement de rapports Power BI est en cours.;
                           ENC=Power BI report deployment is in progress.];
                ToolTipML=[ENU=Specifies that the page is deploying reports to Power BI.;
                           ESM=Especifica que la p gina est  implementando informes a Power BI.;
                           FRC=Sp‚cifie que la page d‚ploie des rapports dans Power BI.;
                           ENC=Specifies that the page is deploying reports to Power BI.];
                ApplicationArea=#All;
                Editable=FALSE;
                ShowCaption=No }

    { 30  ;3   ;Group     ;
                Visible=IsDeploymentUnavailable AND NOT IsDeployingReports AND NOT HasReports;
                GroupType=Group }

    { 25  ;4   ;Field     ;
                Name=ServiceUnavailableMessage;
                CaptionML=[ENU=Power BI report deployment is currently unavailable.;
                           ESM=La implementaci¢n del informe de Power BI no est  disponible.;
                           FRC=Le d‚ploiement de rapports Power BI est actuellement indisponible.;
                           ENC=Power BI report deployment is currently unavailable.];
                ToolTipML=[ENU=Specifies that the page cannot currently deploy reports to Power BI.;
                           ESM=Especifica que la p gina no puede implementar actualmente informes a Power BI.;
                           FRC=Sp‚cifie que la page ne peut actuellement pas d‚ployer de rapports dans Power BI.;
                           ENC=Specifies that the page cannot currently deploy reports to Power BI.];
                ApplicationArea=#All }

    { 20  ;3   ;Group     ;
                GroupType=Group }

    { 22  ;4   ;Field     ;
                Name=DeployTimer;
                OptionCaptionML=[ENU="Width=1;Height=1";
                                 ESM="Ancho=1;Alto=1";
                                 FRC="Largeur=1;Hauteur=1";
                                 ENC="Width=1;Height=1"];
                ApplicationArea=#All;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.PowerBIManagement;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      NoReportsAvailableErr@1004 : TextConst 'ENU=There are no reports available from Power BI.;ESM=No hay informes disponibles en Power BI.;FRC=Aucun ‚tat n''est disponible dans Power BI.;ENC=There are no reports available from Power BI.';
      ResetReportsQst@1030 : TextConst 'ENU=This action will remove all Power BI reports in the database for all users. Reports in your Power BI workspace need to be removed manually. Continue?;ESM=Esta acci¢n eliminar  todos los informes Power BI en la base de datos para todos los usuarios. Los informes de su espacio de trabajo de Power BI deben eliminarse manualmente. ¨Desea continuar?;FRC=Cette action supprimera tous les rapports Power BI de la base de donn‚es pour tous les utilisateurs. Les rapports de votre espace de travail Power BI doivent ˆtre supprim‚s manuellement. Continuer?;ENC=This action will remove all Power BI reports in the database for all users. Reports in your Power BI workspace need to be removed manually. Continue?';
      TempPowerBiReportBuffer@1031 : TEMPORARY Record 6302;
      PowerBIUserConfiguration@1029 : Record 6304;
      SetPowerBIUserConfig@1032 : Codeunit 6305;
      ConfPersonalizationMgt@1028 : Codeunit 9170;
      PowerBiServiceMgt@1026 : Codeunit 6301;
      AzureAdMgt@1025 : Codeunit 6300;
      ClientTypeManagement@1024 : Codeunit 4;
      PermissionManager@1023 : Codeunit 9002;
      LastOpenedReportID@1022 : GUID;
      Context@1021 : Text[30];
      NameFilter@1020 : Text;
      IsGettingStartedVisible@1019 : Boolean;
      HasReports@1018 : Boolean;
      AddInReady@1017 : Boolean;
      IsErrorMessageVisible@1016 : Boolean;
      ErrorMessageText@1015 : Text;
      IsUrlFieldVisible@1014 : Boolean;
      IsGetReportsVisible@1013 : Boolean;
      IsDeployingReports@1012 : Boolean;
      IsDeploymentUnavailable@1011 : Boolean;
      IsTimerReady@1010 : Boolean;
      IsTimerActive@1009 : Boolean;
      ErrorUrlText@1008 : Text;
      ExceptionMessage@1007 : Text;
      ExceptionDetails@1006 : Text;
      TimerDelay@1005 : Integer;
      MaxTimerCount@1003 : Integer;
      CurrentTimerCount@1002 : Integer;
      IsSaaSUser@1001 : Boolean;
      IsAdmin@1000 : Boolean;

    LOCAL PROCEDURE GetMessage@1() : Text;
    VAR
      HttpUtility@1000 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      EXIT(
        '{"action":"loadReport","accessToken":"' +
        HttpUtility.JavaScriptStringEncode(AzureAdMgt.GetAccessToken(
            PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,FALSE)) + '"}');
    END;

    LOCAL PROCEDURE GetEmbedUrl@2() : Text;
    BEGIN
      IF TempPowerBiReportBuffer.ISEMPTY THEN BEGIN
        // Clear out last opened report if there are no reports to display.
        CLEAR(LastOpenedReportID);
        SetLastOpenedReportID(LastOpenedReportID);
      END ELSE BEGIN
        // update last loaded report
        SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
        // Hides both filters and tabs for embedding in small spaces where navigation is unnecessary.
        EXIT(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false&navContentPaneEnabled=false');
      END;
    END;

    LOCAL PROCEDURE GetEmbedUrlWithNavigation@3() : Text;
    BEGIN
      // update last loaded report
      SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
      // Hides filters and shows tabs for embedding in large spaces where navigation is necessary.
      EXIT(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false');
    END;

    LOCAL PROCEDURE LoadContent@13();
    BEGIN
      // The end to end process for loading reports onscreen, or defaulting to an error state if that fails,
      // including deploying default reports in case they haven't been loaded yet. Called when first logging
      // into Power BI or any time the part has reloaded from scratch.
      IF NOT TryLoadPart THEN
        ShowErrorMessage(GETLASTERRORTEXT);

      // Always call this function after calling TryLoadPart to log exceptions to ActivityLog table
      PowerBiServiceMgt.LogException(ExceptionMessage,ExceptionDetails);
      CurrPage.UPDATE;
      DeployDefaultReports;
    END;

    LOCAL PROCEDURE LoadPart@5();
    BEGIN
      IsGettingStartedVisible := NOT PowerBiServiceMgt.IsUserReadyForPowerBI;

      TempPowerBiReportBuffer.RESET;
      TempPowerBiReportBuffer.DELETEALL;
      IF IsGettingStartedVisible THEN BEGIN
        IF AzureAdMgt.IsSaaS THEN
          ERROR(PowerBiServiceMgt.GetGenericError);

        TempPowerBiReportBuffer.INSERT // Hack to display Get Started link.
      END ELSE BEGIN
        PowerBiServiceMgt.GetReports(TempPowerBiReportBuffer,ExceptionMessage,ExceptionDetails,Context);
        IF PowerBiServiceMgt.UserHasMissingReportUrls(Context) THEN BEGIN
          // Call PBI service only when cached reports are invalid (niche upgrade scenario).
          IF TempPowerBiReportBuffer.ISEMPTY THEN
            ERROR(NoReportsAvailableErr); // No reports in PBI account - even more niche scenario.
        END ELSE
          PowerBiServiceMgt.GetCachedReports(TempPowerBiReportBuffer,Context);

        RefreshAvailableReports;
      END;
    END;

    LOCAL PROCEDURE RefreshAvailableReports@7();
    BEGIN
      // Filters the report buffer to show the user's selected report onscreen if possible, otherwise defaulting
      // to other enabled reports.
      // (The updated selection will automatically get saved on render - can't save to database here without
      // triggering errors about calling MODIFY during a TryFunction.)
      TempPowerBiReportBuffer.RESET;
      TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',TRUE);
      IF NOT ISNULLGUID(LastOpenedReportID) THEN BEGIN
        TempPowerBiReportBuffer.SETFILTER(ReportID,'%1',LastOpenedReportID);

        IF TempPowerBiReportBuffer.ISEMPTY THEN BEGIN
          // If last selection is invalid, clear it and default to showing the first enabled report.
          CLEAR(LastOpenedReportID);
          RefreshAvailableReports;
        END;
      END;

      HasReports := TempPowerBiReportBuffer.FINDFIRST;
    END;

    LOCAL PROCEDURE RefreshPart@22();
    BEGIN
      // Refreshes content by re-rendering the whole page part - removes any current error message text, and tries to
      // reload the user's list of reports, as if the page just loaded. Used by the Refresh button or when closing the
      // Select Reports page, to make sure we have the most up to date list of reports and aren't stuck in an error state.
      IsErrorMessageVisible := FALSE;
      IsUrlFieldVisible := FALSE;
      IsGetReportsVisible := FALSE;

      IsDeployingReports := PowerBiServiceMgt.IsUserDeployingReports OR PowerBiServiceMgt.IsUserRetryingUploads OR
        PowerBiServiceMgt.IsUserDeletingReports;
      IsDeploymentUnavailable := NOT PowerBiServiceMgt.IsPBIServiceAvailable;

      PowerBiServiceMgt.SelectDefaultReports;

      SetPowerBIUserConfig.CreateOrReadUserConfigEntry(PowerBIUserConfiguration,LastOpenedReportID,Context);
      LoadContent;

      IF AddInReady THEN
        CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
    END;

    [External]
    PROCEDURE SetContext@6(ParentContext@1000 : Text[30]);
    BEGIN
      // Sets an ID that tracks which page to show reports for - called by the parent page hosting the part,
      // if possible (see UpdateContext).
      Context := ParentContext;
    END;

    LOCAL PROCEDURE UpdateContext@8();
    VAR
      ConfPersonalizationMgt@1000 : Codeunit 9170;
    BEGIN
      // Automatically sets the parent page ID based on the user's selected role center (role centers can't
      // have codebehind, so they have no other way to set the context for their reports).
      IF Context = '' THEN
        SetContext(ConfPersonalizationMgt.GetCurrentProfileIDNoError);
    END;

    [External]
    PROCEDURE SetNameFilter@9(ParentFilter@1000 : Text);
    BEGIN
      // Sets a text value that tells the selection page how to filter the reports list. This should be called
      // by the parent page hosting this page part, if possible.
      NameFilter := ParentFilter;
    END;

    LOCAL PROCEDURE ShowErrorMessage@4(TextToShow@1000 : Text);
    BEGIN
      // this condition checks if we caught the authorization error that contains a link to Power BI
      // the function divide the error message into simple text and url part
      IF TextToShow = PowerBiServiceMgt.GetUnauthorizedErrorText THEN BEGIN
        IsUrlFieldVisible := TRUE;
        // this message is required to have ':' at the end, but it has '.' instead due to C/AL Localizability requirement
        TextToShow := DELSTR(PowerBiServiceMgt.GetUnauthorizedErrorText,STRLEN(PowerBiServiceMgt.GetUnauthorizedErrorText),1) + ':';
        ErrorUrlText := PowerBiServiceMgt.GetPowerBIUrl;
      END;

      IsGetReportsVisible := (TextToShow = NoReportsAvailableErr);

      IsErrorMessageVisible := TRUE;
      IsGettingStartedVisible := FALSE;
      TempPowerBiReportBuffer.DELETEALL; // Required to avoid one INSERT after another (that will lead to an error)
      IF TextToShow = '' THEN
        TextToShow := PowerBiServiceMgt.GetGenericError;
      ErrorMessageText := TextToShow;
      TempPowerBiReportBuffer.INSERT; // Hack to show the field with the text
      CurrPage.UPDATE;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryLoadPart@11();
    BEGIN
      // Need the try function here to catch any possible internal errors
      LoadPart;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@33();
    BEGIN
      AzureAdMgt.GetAccessToken(PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,TRUE);
    END;

    LOCAL PROCEDURE SetReport@10();
    BEGIN
      IF (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone) AND
         (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Windows)
      THEN
        CurrPage.WebReportViewer.InitializeIFrame(PowerBiServiceMgt.GetReportPageSize);
      // CurrPage.WebReportViewer.InitializeFullIFrame();
      CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
    END;

    PROCEDURE SetLastOpenedReportID@14(LastOpenedReportIDInputValue@1000 : GUID);
    BEGIN
      LastOpenedReportID := LastOpenedReportIDInputValue;
      // filter to find the proper record
      PowerBIUserConfiguration.RESET;
      PowerBIUserConfiguration.SETFILTER("Page ID",'%1',Context);
      PowerBIUserConfiguration.SETFILTER("Profile ID",'%1',ConfPersonalizationMgt.GetCurrentProfileIDNoError);
      PowerBIUserConfiguration.SETFILTER("User Security ID",'%1',USERSECURITYID);

      // update the last loaded report field (the record at this point should already exist bacause it was created OnOpenPage)
      IF NOT PowerBIUserConfiguration.ISEMPTY THEN BEGIN
        PowerBIUserConfiguration."Selected Report ID" := LastOpenedReportID;
        PowerBIUserConfiguration.MODIFY;
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE SelectReports@16();
    VAR
      PowerBIReportSelection@1000 : Page 6304;
    BEGIN
      // Opens the report selection page, then updates the onscreen report depending on the user's
      // subsequent selection and enabled/disabled settings.
      PowerBIReportSelection.SetContext(Context);
      PowerBIReportSelection.SetNameFilter(NameFilter);
      PowerBIReportSelection.LOOKUPMODE(TRUE);

      PowerBIReportSelection.RUNMODAL;
      IF PowerBIReportSelection.IsPageClosedOkay THEN BEGIN
        PowerBIReportSelection.GETRECORD(TempPowerBiReportBuffer);

        IF TempPowerBiReportBuffer.Enabled THEN
          LastOpenedReportID := TempPowerBiReportBuffer.ReportID; // RefreshAvailableReports handles fallback logic on invalid selection.

        RefreshPart;
        // At this point, NAV will load the web page viewer since HasReports should be true. WebReportViewer::ControlAddInReady will then fire, calling Navigate()
      END;
    END;

    LOCAL PROCEDURE DeployDefaultReports@26();
    BEGIN
      // Checks if there are any default reports the user needs to upload, select, or delete and automatically begins
      // those processes. The page will refresh when the timer control runs later.
      DeleteMarkedReports;
      FinishPartialUploads;
      IF NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND AzureAdMgt.IsSaaS AND
         PowerBiServiceMgt.UserNeedsToDeployReports AND NOT PowerBiServiceMgt.IsUserDeployingReports
      THEN BEGIN
        IsDeployingReports := TRUE;
        PowerBiServiceMgt.UploadDefaultReportsInBackground;
        StartDeploymentTimer;
      END;
    END;

    LOCAL PROCEDURE FinishPartialUploads@15();
    BEGIN
      // Checks if there are any default reports whose uploads only partially completed, and begins a
      // background process for those reports. The page will refresh when the timer control runs later.
      IF NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND AzureAdMgt.IsSaaS AND
         PowerBiServiceMgt.UserNeedsToRetryUploads AND NOT PowerBiServiceMgt.IsUserRetryingUploads
      THEN BEGIN
        IsDeployingReports := TRUE;
        PowerBiServiceMgt.RetryUnfinishedReportsInBackground;
        StartDeploymentTimer;
      END;
    END;

    LOCAL PROCEDURE DeleteMarkedReports@19();
    BEGIN
      // Checks if there are any default reports that have been marked to be deleted on page 6321, and begins
      // a background process for those reports. The page will refresh when the timer control runs later.
      IF NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND AzureAdMgt.IsSaaS AND
         PowerBiServiceMgt.UserNeedsToDeleteReports AND NOT PowerBiServiceMgt.IsUserDeletingReports
      THEN BEGIN
        IsDeployingReports := TRUE;
        PowerBiServiceMgt.DeleteDefaultReportsInBackground;
        StartDeploymentTimer;
        // TODO: Make same changes on factbox page.
      END;
    END;

    LOCAL PROCEDURE StartDeploymentTimer@25();
    BEGIN
      // Resets the timer for refreshing the page during OOB report deployment, if the add-in is
      // ready to go and the timer isn't already going.
      IF IsTimerReady AND NOT IsTimerActive THEN BEGIN
        CurrentTimerCount := 0;
        IsTimerActive := TRUE;
        CurrPage.DeployTimer.Ping(TimerDelay);
      END;
    END;

    EVENT WebReportViewer@-2::ControlAddInReady@7(callbackUrl@1000 : Text);
    BEGIN
      AddInReady := TRUE;
      IF NOT TempPowerBiReportBuffer.ISEMPTY THEN
        SetReport;
    END;

    EVENT WebReportViewer@-2::DocumentReady@8();
    BEGIN
      IF NOT TempPowerBiReportBuffer.ISEMPTY THEN
        CurrPage.WebReportViewer.PostMessage(GetMessage,'*',FALSE);
    END;

    EVENT WebReportViewer@-2::Callback@9(data@1000 : Text);
    BEGIN
    END;

    EVENT WebReportViewer@-2::Refresh@10(callbackUrl@1000 : Text);
    BEGIN
      IF AddInReady AND NOT TempPowerBiReportBuffer.ISEMPTY THEN
        SetReport;
    END;

    EVENT DeployTimer@-22::AddInReady@5();
    BEGIN
      // Timer for refreshing the page during OOB report deployment - usually deployment will
      // start on page load before the add-in is ready.
      IsTimerReady := TRUE;
      IF IsDeployingReports AND NOT IsErrorMessageVisible THEN
        StartDeploymentTimer;
    END;

    EVENT DeployTimer@-22::Pong@6();
    BEGIN
      // Select default reports and refresh the page, or possibly wait and check again later
      // if it looks like uploading hasn't finished yet.
      PowerBiServiceMgt.SelectDefaultReports;
      DeployDefaultReports;

      IsDeployingReports := PowerBiServiceMgt.IsUserDeployingReports OR PowerBiServiceMgt.IsUserRetryingUploads OR
        PowerBiServiceMgt.IsUserDeletingReports;

      CurrentTimerCount := CurrentTimerCount + 1;
      IsTimerActive := IsDeployingReports AND (CurrentTimerCount < MaxTimerCount) AND NOT IsErrorMessageVisible;

      IF IsTimerActive THEN
        CurrPage.DeployTimer.Ping(TimerDelay);

      IF NOT HasReports THEN
        RefreshPart;

      IF NOT IsDeployingReports THEN
        CurrPage.DeployTimer.Stop;
    END;

    BEGIN
    END.
  }
}

