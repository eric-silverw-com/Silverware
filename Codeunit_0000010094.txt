OBJECT Codeunit 10094 Export EFT (ACH)
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVNA13.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BankAccount@1020025 : Record 270;
      CompanyInformation@1020024 : Record 79;
      TempEraseFileNameValueBuffer@1020050 : TEMPORARY Record 823;
      FileManagement@1020023 : Codeunit 419;
      EFTValues@1020007 : Codeunit 10340;
      ExportPaymentsACH@1020004 : Codeunit 10090;
      BatchHashTotal@1020008 : Decimal;
      FileHashTotal@1020000 : Decimal;
      RecordLength@1020018 : Integer;
      BlockingFactor@1020017 : Integer;
      BlockCount@1020011 : Integer;
      FileName@1020006 : Text;
      FileDate@1020003 : Date;
      FileTime@1020002 : Time;
      ModifierValues@1020001 : ARRAY [26] OF Code[1];
      IsNotValidErr@1020045 : TextConst 'ENU=The specified transit number is not valid.;ESM=El n£mero de tr nsito especificado no es v lido.;FRC=Le num‚ro de transit sp‚cifi‚ n''est pas valide.;ENC=The specified transit number is not valid.';
      AlreadyExistsErr@1020043 : TextConst 'ENU=The file already exists. Check the "Last E-Pay Export File Name" field in the bank account.;ESM=El archivo ya existe. Compruebe el campo Nomb. arch. exp. £lt. pago electr. en la ficha de cuenta bancaria.;FRC=Le fichier existe d‚j…. V‚rifiez le champ Nom du dernier fichier d''exportation du paiement ‚lectronique sur la fiche compte bancaire.;ENC=The file already exists. Check the "Last CPA Export File Name" field in the bank account.';
      CustomerBankAccErr@1020036 : TextConst 'ENU=The customer has no bank account setup for electronic payments.;ESM=El cliente no tiene una cuenta bancaria configurada para pagos electr¢nicos.;FRC=Le client n''a pas de compte bancaire configur‚ pour les paiements ‚lectroniques.;ENC=The customer has no bank account setup for electronic payments.';
      CustomerMoreThanOneBankAccErr@1020035 : TextConst 'ENU=The customer has more than one bank account setup for electronic payments.;ESM=El cliente tiene m s de una cuenta configurada para pagos electr¢nicos.;FRC=Le client a plusieurs comptes bancaires configur‚s pour les paiements ‚lectroniques.;ENC=The customer has more than one bank account setup for electronic payments.';
      ReferErr@1020028 : TextConst 'ENU=Either Account type or balance account type must refer to either a vendor or a customer for an electronic payment.;ESM=El campo Tipo de cta. o el campo Tipo de cuenta de contrapartida deben hacer referencia a un proveedor o a un cliente para un pago electr¢nico.;FRC=Le champ Type de compte ou Type compte de solde doit se rapporter … un fournisseur ou un client pour un paiement ‚lectronique.;ENC=Either Account type or balance account type must refer to either a vendor or a customer for an electronic payment.';
      IsBlockedErr@1020027 : TextConst 'ENU=Account type is blocked for processing.;ESM=El pago electr¢nico no es posible para este tipo de cuenta.;FRC=Le paiement ‚lectronique n''est pas possible pour ce type de compte.;ENC=Account type is blocked for processing.';
      PrivacyBlockedErr@1234567 : TextConst 'ENU=Account type is blocked for privacy.;ESM=El tipo de cuenta est  bloqueado por motivos de privacidad.;FRC=Le type de compte est bloqu‚ … des fins de confidentialit‚.;ENC=Account type is blocked for privacy.';
      ZipDownloadTxt@1020051 : TextConst 'ENU=AllReports.zip;ESM=AllReports.zip;FRC=AllReports.zip;ENC=AllReports.zip';
      PathLengthErr@1020052 : TextConst '@@@=%1: a file name, generated by the system;ENU=The file name is too long and cannot be used.;ESM=El nombre del archivo es demasiado largo y no puede usarse.;FRC=Le nom de fichier est trop long et ne peut pas ˆtre utilis‚.;ENC=The file name is too long and cannot be used.';

    PROCEDURE StartExportFile@6(BankAccountNo@1000 : Code[20];ReferenceCode@1001 : Code[10];DataExchEntryNo@1020001 : Integer);
    VAR
      ACHUSHeader@1020000 : Record 10300;
      i@1003 : Integer;
      BankName@1020002 : Text[50];
    BEGIN
      BuildIDModifier(ModifierValues);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      WITH BankAccount DO BEGIN
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::US);
        TESTFIELD("Transit No.");
        IF NOT ExportPaymentsACH.CheckDigit("Transit No.") THEN
          ERROR(IsNotValidErr);
        TESTFIELD("Last E-Pay Export File Name");
        TESTFIELD(Blocked,FALSE);
        BankName := Name;
        FileName := FileManagement.ServerTempFileName('');

        IF "Last ACH File ID Modifier" = '' THEN
          "Last ACH File ID Modifier" := '1'
        ELSE BEGIN
          i := 1;
          WHILE (i < ARRAYLEN(ModifierValues)) AND
                ("Last ACH File ID Modifier" <> ModifierValues[i])
          DO
            i := i + 1;
          IF i = ARRAYLEN(ModifierValues) THEN
            i := 1
          ELSE
            i := i + 1;
          "Last ACH File ID Modifier" := ModifierValues[i];
        END;
        "Last E-Pay File Creation No." := "Last E-Pay File Creation No." + 1;
        MODIFY;

        IF EXISTS(FileName) THEN
          ERROR(AlreadyExistsErr);

        FileDate := TODAY;
        FileTime := TIME;
        EFTValues.SetNoOfRec(0);
        EFTValues.SetTotalFileDebit(0);
        EFTValues.SetTotalFileCredit(0);
        EFTValues.SetFileEntryAddendaCount(0);
        EFTValues.SetBatchCount(0);
        EFTValues.SetBatchNo(0);
        BlockingFactor := 10;
        RecordLength := 94;

        ACHUSHeader.GET(DataExchEntryNo);
        ACHUSHeader."File Record Type" := 1;
        ACHUSHeader."Priority Code" := 1;
        ACHUSHeader."Transit Routing Number" := "Transit No.";
        ACHUSHeader."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
        ACHUSHeader."File Creation Date" := FileDate;
        ACHUSHeader."File Creation Time" := FileTime;
        ACHUSHeader."File ID Modifier" := "Last ACH File ID Modifier";
        ACHUSHeader."Record Size" := RecordLength;
        ACHUSHeader."Blocking Factor" := BlockingFactor;
        ACHUSHeader."Format Code" := 1;
        ACHUSHeader."Company Name" := CompanyInformation.Name;
        ACHUSHeader.Reference := ReferenceCode;
        ACHUSHeader."Bank Name" := BankName;
        ACHUSHeader.MODIFY;
      END;
    END;

    PROCEDURE StartExportBatch@7(SourceCode@1002 : Code[10];SettleDate@1003 : Date;DataExchEntryNo@1020001 : Integer);
    VAR
      ACHUSHeader@1020000 : Record 10300;
    BEGIN
      EFTValues.SetBatchNo(EFTValues.GetBatchNo + 1);
      BatchHashTotal := 0;
      EFTValues.SetBatchHashTotal(BatchHashTotal);
      EFTValues.SetTotalBatchDebit(0);
      EFTValues.SetTotalBatchCredit(0);
      EFTValues.SetEntryAddendaCount(0);
      EFTValues.SetTraceNo(0);

      ACHUSHeader.GET(DataExchEntryNo);
      ACHUSHeader."Batch Record Type" := 5;
      ACHUSHeader."Service Class Code" := '';
      ACHUSHeader."Company Name" := CompanyInformation.Name;
      ACHUSHeader."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSHeader."Standard Class Code" := '';
      ACHUSHeader."Company Entry Description" := SourceCode;
      ACHUSHeader."Payment Date" := FORMAT(WORKDATE,0,'<Year><Month,2><Day,2>');
      ACHUSHeader."Company Descriptive Date" := WORKDATE;
      ACHUSHeader."Effective Date" := SettleDate;
      ACHUSHeader."Originator Status Code" := 1;
      ACHUSHeader."Transit Routing Number" := BankAccount."Transit No.";
      ACHUSHeader."Batch Number" := EFTValues.GetBatchNo;
      ACHUSHeader.MODIFY;
    END;

    PROCEDURE ExportOffSettingDebit@1240470000(DataExchEntryNo@1020002 : Integer) : Code[30];
    VAR
      ACHUSDetail@1020000 : Record 10301;
    BEGIN
      EFTValues.SetTraceNo(EFTValues.GetTraceNo + 1);

      ACHUSDetail.GET(DataExchEntryNo);
      ACHUSDetail."Record Type" := 6;
      ACHUSDetail."Transaction Code" := 27;
      ACHUSDetail."Payee Transit Routing Number" := BankAccount."Transit No.";
      ACHUSDetail."Payee Bank Account Number" := DELCHR(BankAccount."Bank Account No.",'=',' ');
      ACHUSDetail."Payment Amount" := EFTValues.GetTotalBatchCredit;
      ACHUSDetail."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSDetail."Payee Name" := CompanyInformation.Name;
      ACHUSDetail."Addenda Record Indicator" := 0;
      ACHUSDetail."Trace Number" := GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");
      ACHUSDetail.MODIFY;

      EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(BankAccount."Transit No.",1,8)));
      EFTValues.SetBatchHashTotal(BatchHashTotal);
      EFTValues.SetTotalBatchDebit(EFTValues.GetTotalBatchCredit);

      EXIT(GenerateFullTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No."));
    END;

    PROCEDURE ExportElectronicPayment@17(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record 10811;PaymentAmount@1001 : Decimal;DataExchEntryNo@1020002 : Integer;DataExchLineDefCode@1020004 : Code[20]) : Code[30];
    VAR
      Vendor@1002 : Record 23;
      VendorBankAccount@1003 : Record 288;
      Customer@1004 : Record 18;
      CustomerBankAccount@1005 : Record 287;
      ACHUSDetail@1020001 : Record 10301;
      AcctType@1006 : Text[1];
      AcctNo@1007 : Code[20];
      AcctName@1008 : Text[16];
      BankAcctNo@1009 : Text[30];
      TransitNo@1010 : Text[20];
      DemandCredit@1012 : Boolean;
    BEGIN
      // NOTE:  If PaymentAmount is Positive, then we are Receiving money.
      // If PaymentAmount is Negative, then we are Sending money.
      IF PaymentAmount = 0 THEN
        EXIT('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);

      WITH TempEFTExportWorkset DO BEGIN
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          AcctType := 'V';
          AcctNo := "Account No.";
        END ELSE
          IF "Account Type" = "Account Type"::Customer THEN BEGIN
            AcctType := 'C';
            AcctNo := "Account No.";
          END ELSE
            IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN BEGIN
              AcctType := 'V';
              AcctNo := "Bal. Account No.";
            END ELSE
              IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                AcctType := 'C';
                AcctNo := "Bal. Account No.";
              END ELSE
                ERROR(ReferErr);

        IF AcctType = 'V' THEN BEGIN
          ExportPaymentsACH.CheckVendorTransitNum(AcctNo,Vendor,VendorBankAccount);

          AcctName := COPYSTR(Vendor.Name,1,MAXSTRLEN(AcctName));
          VendorBankAccount.TESTFIELD("Bank Account No.");
          TransitNo := VendorBankAccount."Transit No.";
          BankAcctNo := VendorBankAccount."Bank Account No.";
        END ELSE
          IF AcctType = 'C' THEN BEGIN
            Customer.GET(AcctNo);
            IF Customer."Privacy Blocked" THEN
              ERROR(IsBlockedErr);
            IF Customer.Blocked IN [Customer.Blocked::All] THEN
              ERROR(PrivacyBlockedErr);
            AcctName := COPYSTR(Customer.Name,1,MAXSTRLEN(AcctName));
            CustomerBankAccount.SETRANGE("Customer No.",AcctNo);
            CustomerBankAccount.SETRANGE("Use for Electronic Payments",TRUE);
            CustomerBankAccount.FINDFIRST;

            IF CustomerBankAccount.COUNT < 1 THEN
              ERROR(CustomerBankAccErr);
            IF CustomerBankAccount.COUNT > 1 THEN
              ERROR(CustomerMoreThanOneBankAccErr);

            IF NOT ExportPaymentsACH.CheckDigit(CustomerBankAccount."Transit No.") THEN
              ERROR(IsNotValidErr);

            CustomerBankAccount.TESTFIELD("Bank Account No.");
            TransitNo := CustomerBankAccount."Transit No.";
            BankAcctNo := CustomerBankAccount."Bank Account No.";
          END;

        EFTValues.SetTraceNo(EFTValues.GetTraceNo + 1);

        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
        IF DemandCredit THEN
          EFTValues.SetTotalBatchCredit(EFTValues.GetTotalBatchCredit + PaymentAmount)
        ELSE
          EFTValues.SetTotalBatchDebit(EFTValues.GetTotalBatchDebit + PaymentAmount);

        IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(TransitNo,1,8)));
        EFTValues.SetBatchHashTotal(BatchHashTotal);
      END;

      ACHUSDetail.GET(DataExchEntryNo,DataExchLineDefCode);
      ACHUSDetail."Record Type" := 6;
      IF DemandCredit THEN
        ACHUSDetail."Transaction Code" := 22
      ELSE
        ACHUSDetail."Transaction Code" := 27;
      ACHUSDetail."Payee Transit Routing Number" := TransitNo;
      ACHUSDetail."Payee Bank Account Number" := DELCHR(BankAcctNo,'=',' ');
      ACHUSDetail."Payment Amount" := PaymentAmount;
      ACHUSDetail."Payee ID/Cross Reference Numbe" := AcctNo;
      ACHUSDetail."Addenda Record Indicator" := 0;
      ACHUSDetail."Payee Name" := AcctName;
      ACHUSDetail."Discretionary Data" := AcctType;
      ACHUSDetail."Trace Number" := GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");
      ACHUSDetail.MODIFY;

      TempEFTExportWorkset.TraceNumber := GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");

      EXIT(GenerateFullTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No."));
    END;

    PROCEDURE EndExportBatch@9(DataExchEntryNo@1020002 : Integer);
    VAR
      ACHUSFooter@1020000 : Record 10302;
    BEGIN
      EFTValues.SetBatchCount(EFTValues.GetBatchCount + 1);
      IncrementHashTotal(FileHashTotal,EFTValues.GetBatchHashTotal);
      EFTValues.SetFileHashTotal(FileHashTotal);
      EFTValues.SetTotalFileDebit(EFTValues.GetTotalFileDebit + EFTValues.GetTotalBatchDebit);
      EFTValues.SetTotalFileCredit(EFTValues.GetTotalFileCredit + EFTValues.GetTotalBatchCredit);
      EFTValues.SetFileEntryAddendaCount(EFTValues.GetFileEntryAddendaCount + EFTValues.GetEntryAddendaCount);

      ACHUSFooter.GET(DataExchEntryNo);
      ACHUSFooter."Batch Record Type" := 8;
      ACHUSFooter."Batch Count" := EFTValues.GetBatchCount;
      ACHUSFooter."Service Class Code" := '';
      ACHUSFooter."Total Batch Credit Amount" := EFTValues.GetTotalBatchCredit;
      ACHUSFooter."Total Batch Debit Amount" := EFTValues.GetTotalBatchDebit;
      ACHUSFooter."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSFooter."Transit Routing Number" := BankAccount."Transit No.";
      ACHUSFooter."Batch Number" := EFTValues.GetBatchNo;
      ACHUSFooter."Entry Addenda Count" := EFTValues.GetFileEntryAddendaCount;
      ACHUSFooter."Batch Hash Total" := BatchHashTotal;
      ACHUSFooter.MODIFY;
    END;

    PROCEDURE EndExportFile@10(DataExchEntryNo@1020001 : Integer) : Boolean;
    VAR
      ACHUSFooter@1020002 : Record 10302;
    BEGIN
      BlockCount := (EFTValues.GetNoOfRec + 1) DIV BlockingFactor;
      IF (EFTValues.GetNoOfRec + 1) MOD BlockingFactor <> 0 THEN
        BlockCount := BlockCount + 1;

      ACHUSFooter.GET(DataExchEntryNo);
      ACHUSFooter."File Record Type" := 9;
      ACHUSFooter."Batch Count" := EFTValues.GetBatchCount;
      ACHUSFooter."Block Count" := BlockCount;
      ACHUSFooter."Entry Addenda Count" := EFTValues.GetFileEntryAddendaCount;
      ACHUSFooter."File Hash Total" := EFTValues.GetFileHashTotal;
      ACHUSFooter."Total File Debit Amount" := EFTValues.GetTotalFileDebit;
      ACHUSFooter."Total File Credit Amount" := EFTValues.GetTotalFileCredit;
      ACHUSFooter.MODIFY;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@14(TraceNo@1000 : Integer;BankTransitNo@1020000 : Text[20]) : Code[30];
    VAR
      TraceCode@1001 : Text[250];
    BEGIN
      TraceCode := '';
      TraceCode := FORMAT(FileDate,0,'<Year><Month,2><Day,2>') + BankAccount."Last ACH File ID Modifier" +
        FORMAT(EFTValues.GetBatchNo) + FORMAT(GenerateTraceNoCode(TraceNo,BankTransitNo));
      EXIT(TraceCode);
    END;

    PROCEDURE GenerateTraceNoCode@15(TraceNo@1000 : Integer;BankTransitNo@1020000 : Text[20]) : Code[15];
    VAR
      StringConversionManagement@1020003 : Codeunit 47;
      TraceCode@1001 : Text[250];
      TempTraceNo@1020002 : Text[250];
      Justification@1020001 : 'Right,Left';
    BEGIN
      TraceCode := '';
      TempTraceNo := StringConversionManagement.GetPaddedString(FORMAT(TraceNo),7,'0',Justification::Right);
      TraceCode := COPYSTR(BankTransitNo,1,8) + COPYSTR(TempTraceNo,1,7);
      EXIT(TraceCode);
    END;

    LOCAL PROCEDURE IncrementHashTotal@13(VAR HashTotal@1000 : Decimal;HashIncrement@1001 : Decimal) : Decimal;
    VAR
      SubTotal@1002 : Decimal;
    BEGIN
      SubTotal := HashTotal + HashIncrement;
      IF SubTotal < 10000000000.0 THEN
        HashTotal := SubTotal
      ELSE
        HashTotal := SubTotal - 10000000000.0;
    END;

    LOCAL PROCEDURE MakeHash@21(InputString@1000 : Text[30]) : Decimal;
    VAR
      HashAmt@1001 : Decimal;
    BEGIN
      InputString := DELCHR(InputString,'=','.,- ');
      IF EVALUATE(HashAmt,InputString) THEN
        EXIT(HashAmt);

      EXIT(0);
    END;

    PROCEDURE BuildIDModifier@5(VAR ModifierVal@1020000 : ARRAY [26] OF Code[1]);
    BEGIN
      ModifierVal[1] := 'A';
      ModifierVal[2] := 'B';
      ModifierVal[3] := 'C';
      ModifierVal[4] := 'D';
      ModifierVal[5] := 'E';
      ModifierVal[6] := 'F';
      ModifierVal[7] := 'G';
      ModifierVal[8] := 'H';
      ModifierVal[9] := 'I';
      ModifierVal[10] := 'J';
      ModifierVal[11] := 'K';
      ModifierVal[12] := 'L';
      ModifierVal[13] := 'M';
      ModifierVal[14] := 'N';
      ModifierVal[15] := 'O';
      ModifierVal[16] := 'P';
      ModifierVal[17] := 'Q';
      ModifierVal[18] := 'R';
      ModifierVal[19] := 'S';
      ModifierVal[20] := 'T';
      ModifierVal[21] := 'U';
      ModifierVal[22] := 'V';
      ModifierVal[23] := 'W';
      ModifierVal[24] := 'X';
      ModifierVal[25] := 'Y';
      ModifierVal[26] := 'Z';
    END;

    PROCEDURE DownloadWebclientZip@1020000(VAR TempNameValueBuffer@1020000 : TEMPORARY Record 823;ZipFileName@1020001 : Text;VAR FileManagementUnit@1020002 : Codeunit 419);
    BEGIN
      // Download the .zip file containing the reports if one was generated (usually from being on the web client)
      IF (ZipFileName <> '') AND TempNameValueBuffer.FINDSET THEN
        // If there's a single file, download it directly instead of the zip file
        IF TempNameValueBuffer.COUNT = 1 THEN
          FileManagementUnit.DownloadHandler(TempNameValueBuffer.Value,'','','',TempNameValueBuffer.Name)
        ELSE BEGIN
          REPEAT
            FileManagementUnit.AddFileToZipArchive(TempNameValueBuffer.Value,TempNameValueBuffer.Name);
            TempEraseFileNameValueBuffer.AddNewEntry(TempNameValueBuffer.Value,'');
          UNTIL TempNameValueBuffer.NEXT = 0;
          FileManagementUnit.CloseZipArchive;
          FileManagementUnit.DownloadHandler(ZipFileName,'','','',ZipDownloadTxt);
        END;

      CleanupTempFiles;
    END;

    PROCEDURE AddFileToClientZip@82(TempFileName@1000 : Text;ClientFileName@1001 : Text;VAR TempNameValueBuffer@1020000 : TEMPORARY Record 823;VAR ZipFileName@1020001 : Text;VAR FileManagementUnit@1020002 : Codeunit 419);
    BEGIN
      IF STRLEN(TempFileName) > 250 THEN
        ERROR(PathLengthErr);

      IF STRLEN(ClientFileName) > 250 THEN
        ERROR(PathLengthErr);

      // Ensure we have a zip file object
      IF ZipFileName = '' THEN
        ZipFileName := FileManagementUnit.CreateZipArchiveObject;

      TempNameValueBuffer.AddNewEntry(COPYSTR(ClientFileName,1,250),COPYSTR(TempFileName,1,250));
    END;

    LOCAL PROCEDURE CleanupTempFiles@1020001();
    VAR
      DeleteError@1000 : Boolean;
    BEGIN
      // Sometimes file handles are kept by .NET - we try to delete what we can.
      IF TempEraseFileNameValueBuffer.FINDSET THEN
        REPEAT
          IF NOT TryDeleteFile(TempEraseFileNameValueBuffer.Name) THEN
            DeleteError := TRUE;
        UNTIL TempEraseFileNameValueBuffer.NEXT = 0;

      IF DeleteError THEN
        ERROR('');
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDeleteFile@1020002(FileName@1000 : Text);
    BEGIN
      FileManagement.DeleteServerFile(FileName);
    END;

    BEGIN
    END.
  }
}

