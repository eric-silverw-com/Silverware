OBJECT Page 762 Finance Performance
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:28 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Finance Performance;
    SourceTable=Table485;
    PageType=CardPart;
    ActionList=ACTIONS
    {
      { 23      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;Action    ;
                      Name=SelectChart;
                      CaptionML=ENU=Select Chart;
                      ToolTipML=ENU=Select the analysis report that the chart will be based on.;
                      ApplicationArea=#Basic,#Suite;
                      Image=SelectChart;
                      OnAction=VAR
                                 AccountSchedulesChartSetup2@1002 : Record 762;
                               BEGIN
                                 AccountSchedulesChartSetup2.SETFILTER("User ID",'%1|%2',USERID,'');
                                 AccountSchedulesChartSetup2 := AccountSchedulesChartSetup;
                                 IF PAGE.RUNMODAL(0,AccountSchedulesChartSetup2) = ACTION::LookupOK THEN BEGIN
                                   AccountSchedulesChartSetup := AccountSchedulesChartSetup2;
                                   InitializePeriodFilter(0D,0D);
                                   UpdateChart(Period::" ");
                                 END;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=PreviousChart;
                      CaptionML=ENU=Previous Chart;
                      ToolTipML=ENU=View the previous chart.;
                      ApplicationArea=#Basic,#Suite;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 IF StatusText <> '' THEN
                                   MoveAndUpdateChart(Period::" ",-1)
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=NextChart;
                      CaptionML=ENU=Next Chart;
                      ToolTipML=ENU=View the next chart.;
                      ApplicationArea=#Basic,#Suite;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 IF StatusText <> '' THEN
                                   MoveAndUpdateChart(Period::" ",1)
                               END;
                                }
      { 5       ;1   ;Separator  }
      { 15      ;1   ;ActionGroup;
                      Name=PeriodLength;
                      CaptionML=ENU=Period Length;
                      Image=Period }
      { 14      ;2   ;Action    ;
                      Name=Day;
                      CaptionML=ENU=Day;
                      ToolTipML=ENU=Each stack covers one day.;
                      ApplicationArea=#Basic,#Suite;
                      OnAction=BEGIN
                                 AccountSchedulesChartSetup.SetPeriodLength(AccountSchedulesChartSetup."Period Length"::Day);
                                 UpdateChart(Period::" ");
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=Week;
                      CaptionML=ENU=Week;
                      ToolTipML=ENU=Each stack except for the last stack covers one week. The last stack contains data from the start of the week until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      OnAction=BEGIN
                                 AccountSchedulesChartSetup.SetPeriodLength(AccountSchedulesChartSetup."Period Length"::Week);
                                 UpdateChart(Period::" ");
                               END;
                                }
      { 12      ;2   ;Action    ;
                      Name=Month;
                      CaptionML=ENU=Month;
                      ToolTipML=ENU=Each stack except for the last stack covers one month. The last stack contains data from the start of the month until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      OnAction=BEGIN
                                 AccountSchedulesChartSetup.SetPeriodLength(AccountSchedulesChartSetup."Period Length"::Month);
                                 UpdateChart(Period::" ");
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=Quarter;
                      CaptionML=ENU=Quarter;
                      ToolTipML=ENU=Each stack except for the last stack covers one quarter. The last stack contains data from the start of the quarter until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      OnAction=BEGIN
                                 AccountSchedulesChartSetup.SetPeriodLength(AccountSchedulesChartSetup."Period Length"::Quarter);
                                 UpdateChart(Period::" ");
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=Year;
                      CaptionML=ENU=Year;
                      ToolTipML=ENU=Each stack except for the last stack covers one year. The last stack contains data from the start of the year until the date that is defined by the Show option.;
                      ApplicationArea=#Basic,#Suite;
                      OnAction=BEGIN
                                 AccountSchedulesChartSetup.SetPeriodLength(AccountSchedulesChartSetup."Period Length"::Year);
                                 UpdateChart(Period::" ");
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Name=PreviousPeriod;
                      CaptionML=ENU=Previous Period;
                      ToolTipML=ENU=Show the information based on the previous period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#Basic,#Suite;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 UpdateChart(Period::Previous);
                               END;
                                }
      { 17      ;1   ;Action    ;
                      Name=NextPeriod;
                      CaptionML=ENU=Next Period;
                      ToolTipML=ENU=Show the information based on the next period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#Basic,#Suite;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 UpdateChart(Period::Next);
                               END;
                                }
      { 7       ;1   ;Separator  }
      { 8       ;1   ;Action    ;
                      Name=ChartInformation;
                      CaptionML=ENU=Chart Information;
                      ToolTipML=ENU=View a description of the chart.;
                      ApplicationArea=#Basic,#Suite;
                      Image=AboutNav;
                      OnAction=BEGIN
                                 IF StatusText = '' THEN
                                   EXIT;
                                 IF AccountSchedulesChartSetup.Description = '' THEN
                                   MESSAGE(NoDescriptionMsg)
                                 ELSE
                                   MESSAGE(AccountSchedulesChartSetup.Description);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=container;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=Status Text;
                CaptionML=ENU=Status Text;
                ToolTipML=ENU=Specifies the status of the chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=StatusText;
                Enabled=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                ShowCaption=No }

    { 3   ;1   ;Field     ;
                Name=BusinessChart;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      AccountSchedulesChartSetup@1004 : Record 762;
      AccSchedChartManagement@1002 : Codeunit 762;
      StatusText@1001 : Text[250];
      Period@1005 : ' ,Next,Previous';
      Text001@1000 : TextConst '@@@=%1 Account Schedule Chart Setup Name, %2 Period Length, %3 Current time;ENU=%1 | %2 (Updated %3)';
      Text002@1003 : TextConst '@@@="%1 Account Schedule Chart Setup Name, %2 = Start Date, %3 = End Date, %4 Period Length, %5 Current time";ENU=%1 | %2..%3 | %4 (Updated %5)';
      NoDescriptionMsg@1006 : TextConst 'ENU=A description was not specified for this chart.';
      IsChartAddInReady@1007 : Boolean;

    LOCAL PROCEDURE UpdateChart@6(Period@1000 : ',Next,Previous');
    BEGIN
      MoveAndUpdateChart(Period,0);
    END;

    LOCAL PROCEDURE MoveAndUpdateChart@3(Period@1000 : ',Next,Previous';Move@1001 : Integer);
    BEGIN
      IF NOT IsChartAddInReady THEN
        EXIT;
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,AccountSchedulesChartSetup.Name,Move);
      AccSchedChartManagement.UpdateData(Rec,Period,AccountSchedulesChartSetup);
      Update(CurrPage.BusinessChart);
      StatusText := GetCurrentSelectionText("Period Filter Start Date","Period Filter End Date");
    END;

    LOCAL PROCEDURE GetCurrentSelectionText@1(FromDate@1002 : Date;ToDate@1003 : Date) : Text[100];
    BEGIN
      WITH AccountSchedulesChartSetup DO
        CASE "Base X-Axis on" OF
          "Base X-Axis on"::Period:
            EXIT(STRSUBSTNO(Text001,Name,"Period Length",TIME));
          "Base X-Axis on"::"Acc. Sched. Line",
          "Base X-Axis on"::"Acc. Sched. Column":
            EXIT(STRSUBSTNO(Text002,Name,FromDate,ToDate,"Period Length",TIME));
        END;
    END;

    EVENT BusinessChart@-5::DataPointClicked@12(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      SetDrillDownIndexes(point);
      AccSchedChartManagement.DrillDown(Rec,AccountSchedulesChartSetup);
    END;

    EVENT BusinessChart@-5::DataPointDoubleClicked@13(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT BusinessChart@-3::AddInReady@14();
    BEGIN
      IsChartAddInReady := TRUE;
      UpdateChart(Period::" ");
    END;

    EVENT BusinessChart@-5::Refresh@15();
    BEGIN
      IF IsChartAddInReady THEN BEGIN
        InitializePeriodFilter(0D,0D);
        UpdateChart(Period::" ");
      END;
    END;

    BEGIN
    END.
  }
}

