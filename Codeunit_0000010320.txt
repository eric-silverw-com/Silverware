OBJECT Codeunit 10320 Exp. Launcher EFT
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:08:57 PM;
    Version List=;
  }
  PROPERTIES
  {
    TableNo=10811;
    Permissions=TableData 1220=rimd;
    OnRun=BEGIN
            // EFTPaymentProcess(Rec);
          END;

  }
  CODE
  {
    VAR
      ExportEFTACH@1020001 : Codeunit 10094;
      InvalidExportFormatErr@1020003 : TextConst '@@@="%1=Bank account export format,%2=Bank account export format field caption,%3=Bank account table caption,%4=Bank account number";ENU=%1 is not a valid %2 in %3 %4.';
      ExportEFTRB@1020004 : Codeunit 10095;
      ExportEFTCecoban@1020005 : Codeunit 10096;
      ExportEFTIAT@1020000 : Codeunit 10097;
      EFTExportCodeErr@1020006 : TextConst 'ENU=The EFT export code entered on the bank account does not work with the export format entered on the bank account.';
      IsTestMode@1020002 : Boolean;

    PROCEDURE EFTPaymentProcess@2(VAR TempEFTExportWorkset@1015 : TEMPORARY Record 10811;VAR TempNameValueBuffer@1020004 : TEMPORARY Record 823;VAR FileManagementUnit@1020001 : Codeunit 419;VAR ZipFileName@1020000 : Text;VAR EFTValues@1020007 : Codeunit 10340);
    VAR
      DataExch@1014 : Record 1220;
      DataExchDef@1013 : Record 1222;
      BankAccount@1011 : Record 270;
      BankExportImportSetup@1010 : Record 1200;
      FileManagement@1020006 : Codeunit 419;
      ExpWritingEFT@1008 : Codeunit 10322;
      DataExchEntryCodeDetail@1006 : Integer;
      DataExchEntryCodeFooter@1005 : Integer;
      DataExchDefCode@1004 : Code[20];
      Filename@1003 : Text;
      HeaderArray@1002 : ARRAY [100] OF Integer;
      DetailArray@1001 : ARRAY [100] OF Integer;
      FooterArray@1000 : ARRAY [100] OF Integer;
      Filepath@1020002 : Text;
      ACHFileName@1020003 : Text;
    BEGIN
      TempEFTExportWorkset.FINDFIRST;

      BankAccount.GET(TempEFTExportWorkset."Bank Account No.");

      CASE BankAccount."Export Format" OF
        BankAccount."Export Format"::US:
          ExpWritingEFT.PreCleanUpUSWorkTables;
        BankAccount."Export Format"::CA:
          ExpWritingEFT.PreCleanUpCAWorkTables;
        BankAccount."Export Format"::MX:
          ExpWritingEFT.PreCleanUpMXWorkTables;
      END;

      IF TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT" THEN
        BankExportImportSetup.SETRANGE(Code,BankAccount."EFT Export Code")
      ELSE
        BankExportImportSetup.SETRANGE(Code,BankAccount."Payment Export Format");

      IF BankExportImportSetup.FINDFIRST THEN BEGIN
        DataExchDefCode := BankExportImportSetup."Data Exch. Def. Code";
        ACHFileName := BankAccount."Last E-Pay Export File Name";
        UpdateLastEPayExportFileName(BankAccount);
        Filepath := TempEFTExportWorkset.Pathname;
        Filename := FileManagement.ServerTempFileName('');

        ProcessHeaders(TempEFTExportWorkset,BankAccount,DataExchDefCode,HeaderArray,Filename,EFTValues);
        IF EXISTS(Filename) THEN BEGIN
          REPEAT
            ProcessDetails(TempEFTExportWorkset,BankAccount,DataExchDefCode,DataExchEntryCodeDetail,DetailArray,Filename,EFTValues);
          UNTIL TempEFTExportWorkset.NEXT = 0;
          TempEFTExportWorkset.FINDFIRST;
          ProcessFooters(TempEFTExportWorkset,BankAccount,DataExchDefCode,FooterArray,Filename,DataExchEntryCodeFooter,EFTValues);

          IF NOT IsTestMode THEN
            ExpWritingEFT.ExportEFT(DataExchEntryCodeDetail,DataExchEntryCodeFooter,Filepath,Filename,ACHFileName,
              FooterArray,TempNameValueBuffer,ZipFileName,FileManagementUnit);

          // This should only be called from a test codeunit, calling CreateExportFile MUST pass in a FALSE parameter
          DataExchDef.GET(DataExchDefCode);
          IF DataExchDef."Ext. Data Handling Codeunit" > 0 THEN
            DataExch.GET(DataExchEntryCodeDetail);

          IF DataExchDef."User Feedback Codeunit" > 0 THEN BEGIN
            DataExch.GET(DataExchEntryCodeDetail);
            CODEUNIT.RUN(DataExchDef."User Feedback Codeunit",DataExch);
          END;
        END ELSE
          ERROR(EFTExportCodeErr);
      END;

      // Clean up the work tables.
      ExpWritingEFT.CleanUpEFTWorkTables(HeaderArray,DetailArray,FooterArray);
    END;

    LOCAL PROCEDURE ProcessHeaders@3(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record 10811;VAR BankAccount@1006 : Record 270;DataExchDefCode@1001 : Code[20];VAR HeaderArray@1009 : ARRAY [100] OF Integer;Filename@1008 : Text;VAR EFTValues@1020001 : Codeunit 10340);
    VAR
      DataExch@1002 : Record 1220;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1018 : Record 1227;
      DataExchMapping@1004 : Record 1224;
      EFTExportMgt@1005 : Codeunit 10331;
      HdrCount@1000 : Integer;
    BEGIN
      HdrCount := 0;
      DataExchLineDef.INIT;
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Line Type",DataExchLineDef."Line Type"::Header);
      IF DataExchLineDef.FINDSET THEN BEGIN
        REPEAT
          // Insert the Data Exchange Header records
          DataExch."Entry No." := 0;
          DataExch."Data Exch. Def Code" := DataExchDefCode;
          DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
          DataExch.INSERT;
          COMMIT;

          HdrCount := HdrCount + 1;
          HeaderArray[HdrCount] := DataExch."Entry No.";

          // It is only here where we know the True DataExch."Entry No"..
          DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
          DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
          DataExchMapping.FINDFIRST;

          // Populate the Header work tables
          EFTExportMgt.PrepareEFTHeader(DataExch,BankAccount."Bank Account No.",BankAccount."No.");

          IF DataExchMapping."Pre-Mapping Codeunit" > 0 THEN
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          CASE BankAccount."Export Format" OF
            BankAccount."Export Format"::US:
              IF TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment"
              THEN BEGIN
                EFTValues.SetNoOfRec(EFTValues.GetNoOfRec + 1);
                IF HdrCount = 1 THEN
                  ExportEFTACH.StartExportFile(BankAccount."No.",'',DataExch."Entry No.")
                ELSE
                  ExportEFTACH.StartExportBatch(TempEFTExportWorkset."Source Code",
                    TempEFTExportWorkset.UserSettleDate,DataExch."Entry No.");
                EFTValues.SetEFTFileCreated(TRUE);
              END ELSE
                IF TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT"
                THEN BEGIN
                  IF HdrCount = 1 THEN
                    ExportEFTIAT.StartExportFile(BankAccount."No.",'',DataExch."Entry No.",EFTValues)
                  ELSE
                    ExportEFTIAT.StartExportBatch(TempEFTExportWorkset,TempEFTExportWorkset.UserSettleDate,
                      DataExch."Entry No.",EFTValues);
                  EFTValues.SetIATFileCreated(TRUE);
                END;
            BankAccount."Export Format"::CA:
              BEGIN
                ExportEFTRB.StartExportFile(TempEFTExportWorkset,BankAccount."No.",DataExch."Entry No.",EFTValues);
                EFTValues.SetEFTFileCreated(TRUE);
              END;
            BankAccount."Export Format"::MX:
              BEGIN
                IF HdrCount = 1 THEN
                  ExportEFTCecoban.StartExportFile(BankAccount."No.")
                ELSE
                  ExportEFTCecoban.StartExportBatch(TempEFTExportWorkset.UserSettleDate,DataExch."Entry No.");
                EFTValues.SetIATFileCreated(FALSE);
                EFTValues.SetEFTFileCreated(TRUE);
              END;
            ELSE
              ERROR(InvalidExportFormatErr,
                BankAccount."Export Format",
                BankAccount.FIELDCAPTION("Export Format"),
                BankAccount.TABLECAPTION,
                BankAccount."No.");
          END;

          // Create the Entries and values in the Data Exch. Field table
          IF DataExchMapping."Mapping Codeunit" > 0 THEN
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          DataExchDef.GET(DataExchDefCode);
          IF DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Exp. Writing EFT" THEN
            EFTExportMgt.ExportDataExchToFlatFile(DataExch."Entry No.",Filename,DataExchLineDef."Line Type",HdrCount);
        UNTIL  DataExchLineDef.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ProcessDetails@4(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record 10811;VAR BankAccount@1020002 : Record 270;DataExchDefCode@1008 : Code[20];VAR DataExchEntryCodeDetail@1009 : Integer;VAR DetailArray@1010 : ARRAY [100] OF Integer;Filename@1007 : Text;VAR EFTValues@1020005 : Codeunit 10340);
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1005 : Record 1222;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1003 : Record 1224;
      EFTExportMgt@1002 : Codeunit 10331;
      ExpPreMappingDetEFTUS@1020001 : Codeunit 10327;
      ExpPreMappingDetEFTCA@1020003 : Codeunit 10338;
      ExpPreMappingDetEFTMX@1020004 : Codeunit 10339;
    BEGIN
      DataExchLineDef.INIT;
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Line Type",DataExchLineDef."Line Type"::Detail);
      IF DataExchLineDef.FINDSET THEN BEGIN
        REPEAT
          // Insert the Data Exchange Detail records
          DataExch."Entry No." := 0;
          DataExch."Data Exch. Def Code" := DataExchDefCode;
          DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
          DataExch.INSERT;
          COMMIT;

          // It is only here where we know the True DataExch."Entry No"..
          DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
          DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
          DataExchMapping.FINDFIRST;

          IF (EFTValues.GetParentDefCode = '') OR (EFTValues.GetParentDefCode = DataExchLineDef.Code) THEN BEGIN
            EFTValues.SetParentDefCode(DataExchLineDef.Code);
            EFTValues.SetParentBoolean := TRUE;
          END ELSE
            EFTValues.SetParentBoolean := FALSE;

          IF DataExchEntryCodeDetail = 0 THEN
            DataExchEntryCodeDetail := DataExch."Entry No.";

          // Fill the detail work tables
          CASE BankAccount."Export Format" OF
            BankAccount."Export Format"::US:
              ExpPreMappingDetEFTUS.PrepareEFTDetails(TempEFTExportWorkset,DataExch."Entry No.",0,DetailArray,
                ExportEFTACH,ExportEFTIAT,DataExchLineDef.Code,EFTValues);
            BankAccount."Export Format"::CA:
              ExpPreMappingDetEFTCA.PrepareEFTDetails(TempEFTExportWorkset,DataExch."Entry No.",0,DetailArray,
                ExportEFTRB,DataExchLineDef.Code,EFTValues);
            BankAccount."Export Format"::MX:
              ExpPreMappingDetEFTMX.PrepareEFTDetails(TempEFTExportWorkset,DataExch."Entry No.",0,DetailArray,
                ExportEFTCecoban,DataExchLineDef.Code);
          END;

          // Create the Entries and values in the Data Exch. Field table
          IF DataExchMapping."Mapping Codeunit" > 0 THEN
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          DataExchDef.GET(DataExchDefCode);
          IF DataExchDef."Reading/Writing Codeunit" > 0 THEN
            IF DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Exp. Writing EFT" THEN
              EFTExportMgt.ExportDataExchToFlatFile(DataExch."Entry No.",Filename,DataExchLineDef."Line Type",0)
            ELSE
              CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",DataExch);

        UNTIL DataExchLineDef.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ProcessFooters@5(VAR TempEFTExportWorkset@1020001 : TEMPORARY Record 10811;VAR BankAccount@1020000 : Record 270;DataExchDefCode@1001 : Code[20];VAR FooterArray@1012 : ARRAY [100] OF Integer;Filename@1000 : Text;VAR DataExchEntryCodeFooter@1011 : Integer;VAR EFTValues@1020002 : Codeunit 10340);
    VAR
      DataExch@1009 : Record 1220;
      DataExchDef@1008 : Record 1222;
      DataExchLineDef@1007 : Record 1227;
      DataExchMapping@1006 : Record 1224;
      EFTExportMgt@1005 : Codeunit 10331;
      FooterCount@1003 : Integer;
    BEGIN
      FooterCount := 0;
      DataExchLineDef.INIT;
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Line Type",DataExchLineDef."Line Type"::Footer);
      IF DataExchLineDef.FINDSET THEN BEGIN
        REPEAT
          // Insert the Data Exchange Footer records
          DataExch."Entry No." := 0;
          DataExch."Data Exch. Def Code" := DataExchDefCode;
          DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
          DataExch.INSERT;
          COMMIT;

          FooterCount := FooterCount + 1;
          FooterArray[FooterCount] := DataExch."Entry No.";

          // It is only here where we know the True DataExch."Entry No"..
          DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
          DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
          DataExchMapping.FINDFIRST;

          // Create the Entries and values in the Data Exch. Field table
          IF DataExchMapping."Pre-Mapping Codeunit" > 0 THEN
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          // Populate the Footer work table
          EFTExportMgt.PrepareEFTFooter(DataExch,BankAccount."No.");

          CASE BankAccount."Export Format" OF
            BankAccount."Export Format"::US:
              IF TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment"
              THEN BEGIN
                EFTValues.SetNoOfRec(EFTValues.GetNoOfRec + 1);
                IF FooterCount = 1 THEN
                  ExportEFTACH.EndExportBatch(DataExch."Entry No.")
                ELSE
                  ExportEFTACH.EndExportFile(DataExch."Entry No.");
              END ELSE
                IF TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT"
                THEN BEGIN
                  IF FooterCount = 1 THEN
                    ExportEFTIAT.EndExportBatch(DataExch."Entry No.",EFTValues)
                  ELSE
                    ExportEFTIAT.EndExportFile(DataExch."Entry No.",EFTValues);
                END;
            BankAccount."Export Format"::CA:
              ExportEFTRB.EndExportFile(DataExch."Entry No.",EFTValues);
            BankAccount."Export Format"::MX:
              ExportEFTCecoban.EndExportBatch(DataExch."Entry No.");
            ELSE
              ERROR(InvalidExportFormatErr,
                BankAccount."Export Format",
                BankAccount.FIELDCAPTION("Export Format"),
                BankAccount.TABLECAPTION,
                BankAccount."No.");
          END;

          IF DataExchMapping."Mapping Codeunit" > 0 THEN
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          DataExchDef.GET(DataExchDefCode);
          IF DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Exp. Writing EFT" THEN
            EFTExportMgt.ExportDataExchToFlatFile(DataExch."Entry No.",Filename,DataExchLineDef."Line Type",0);
          DataExchEntryCodeFooter := DataExch."Entry No.";
        UNTIL DataExchLineDef.NEXT = 0;
        IF BankAccount."Export Format" = BankAccount."Export Format"::US THEN
          EFTExportMgt.AddPadBlocks(Filename,EFTValues);
      END;
    END;

    LOCAL PROCEDURE UpdateLastEPayExportFileName@1020000(BankAccount@1020000 : Record 270);
    BEGIN
      WITH BankAccount DO BEGIN
        "Last E-Pay Export File Name" := INCSTR("Last E-Pay Export File Name");
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE SetTestMode@1020001();
    BEGIN
      IsTestMode := TRUE;
    END;

    BEGIN
    END.
  }
}

