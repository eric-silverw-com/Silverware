OBJECT Codeunit 10145 E-Invoice Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:08:55 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 112=rimd,
                TableData 114=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1020005 : Record 18;
      GLSetup@1020004 : Record 98;
      CompanyInfo@1020000 : Record 79;
      SourceCodeSetup@1020001 : Record 242;
      DocNameSpace@1020009 : Text;
      Text000@1020012 : TextConst 'ENU=Dear customer, please find invoice number %1 in the attachment.';
      PaymentAttachmentMsg@1020016 : TextConst '@@@="%1=The payment number.";ENU=Dear customer, please find payment number %1 in the attachment.';
      Text001@1020018 : TextConst 'ENU=E-Document %1 has been sent.';
      Text002@1020002 : TextConst 'ENU=One or more invoices have already been sent.\Do you want to continue?';
      PaymentsAlreadySentQst@1020015 : TextConst 'ENU=One or more payments have already been sent.\Do you want to continue?';
      Text004@1020006 : TextConst 'ENU=Dear customer, please find credit memo number %1 in the attachment.';
      Text005@1020010 : TextConst 'ENU=Invoice no. %1.';
      Text006@1020011 : TextConst 'ENU=Credit memo no. %1.';
      Export@1020007 : Boolean;
      PaymentNoMsg@1020017 : TextConst '@@@="%1=The payment number.";ENU=Payment no. %1.';
      Text007@1020008 : TextConst 'ENU=You cannot perform this action on a deleted document.';
      Text008@1020013 : TextConst 'ENU=&Request Stamp,&Send,Request Stamp &and Send';
      Text009@1020020 : TextConst 'ENU=Cannot find a valid PAC web service for the action %1.\You must specify web service details for the combination of the %1 action and the %2 and %3 that you have selected in the %4 window.';
      Text010@1020022 : TextConst 'ENU=You cannot choose the action %1 when the document status is %2.';
      EDocAction@1020023 : 'Request Stamp,Send,Cancel';
      Text011@1020024 : TextConst 'ENU=There is no electronic stamp for document no. %1.\Do you want to continue?';
      MethodType@1020025 : 'Request Stamp,Cancel';
      Text012@1020026 : TextConst 'ENU="Cannot contact the PAC. You must specify a value for the %1 field in the %2 window for the PAC that you selected in the %3 window. "';
      Text013@1020027 : TextConst 'ENU=Request Stamp,Send,Cancel';
      Text014@1020028 : TextConst 'ENU=You cannot perform this action because the %1 field in the %2 window is set to %3.';
      Text015@1020030 : TextConst 'ENU=Do you want to cancel the electronic document?';
      Text016@1020003 : TextConst 'ENU=The SMTP mail system returned the following error: %1.';
      FileDialogTxt@1020029 : TextConst 'ENU=Import electronic invoice';
      ImportFailedErr@1020031 : TextConst 'ENU=The import failed. The XML document is not a valid electronic invoice.';
      WebClientErr@1020032 : TextConst 'ENU=The import is not supported on the webclient.';
      StampErr@1020014 : TextConst '@@@="%1=Document Type";ENU=You have chosen the document type %1. You can only request and send documents if the document type is Payment.';
      UnableToStampErr@1020019 : TextConst 'ENU=An existing payment is applied to the invoice that has not been stamped. That payment must be stamped before you can request a stamp for any additional payments.';
      UnableToStampAppliedErr@1020021 : TextConst '@@@="%1=The invoice number.";ENU=The prepayment invoice %1 has not been stamped. That invoice must be stamped before you can request a stamp for this applied invoice.';
      CurrencyDecimalPlaces@1020033 : Integer;

    [External]
    PROCEDURE RequestStampDocument@1020000(VAR RecRef@1020000 : RecordRef;Prepayment@1020001 : Boolean);
    VAR
      Selection@1020003 : Integer;
      ElectronicDocumentStatus@1020006 : Option;
    BEGIN
      // Called from Send Action
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;
      Selection := STRMENU(Text008,3);

      ElectronicDocumentStatus := RecRef.FIELD(10030).VALUE;

      CASE Selection OF
        1:// Request Stamp
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestStamp(RecRef,Prepayment,FALSE);
          END;
        2:// Send
          BEGIN
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            Send(RecRef,FALSE);
          END;
        3:// Request Stamp and Send
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestStamp(RecRef,Prepayment,FALSE);
            COMMIT;
            ElectronicDocumentStatus := RecRef.FIELD(10030).VALUE;
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            Send(RecRef,FALSE);
          END;
      END;
    END;

    [External]
    PROCEDURE CancelDocument@1020029(VAR RecRef@1020000 : RecordRef);
    VAR
      SalesInvHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020001 : Record 114;
      ServiceInvHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
      CustLedgerEntry@1020003 : Record 21;
    BEGIN
      IF NOT CONFIRM(Text015,FALSE) THEN
        EXIT;
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvHeader);
            EDocActionValidation(EDocAction::Cancel,SalesInvHeader."Electronic Document Status");
            CancelESalesInvoice(SalesInvHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,SalesCrMemoHeader."Electronic Document Status");
            CancelESalesCrMemo(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServiceInvHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceInvHeader."Electronic Document Status");
            CancelEServiceInvoice(ServiceInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServiceCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceCrMemoHeader."Electronic Document Status");
            CancelEServiceCrMemo(ServiceCrMemoHeader);
          END;
        DATABASE::"Cust. Ledger Entry":
          BEGIN
            RecRef.SETTABLE(CustLedgerEntry);
            EDocActionValidation(EDocAction::Cancel,CustLedgerEntry."Electronic Document Status");
            CancelEPayment(CustLedgerEntry);
          END;
      END;
    END;

    [External]
    PROCEDURE EDocActionValidation@1020028(Action@1020000 : 'Request Stamp,Send,Cancel';Status@1020001 : ' ,Stamp Received,Sent,Canceled,Stamp Request Error,Cancel Error') Selection : Integer;
    VAR
      TempSalesInvoiceHeader@1020002 : TEMPORARY Record 112;
    BEGIN
      TempSalesInvoiceHeader."Electronic Document Status" := Status;

      IF Action = Action::"Request Stamp" THEN
        IF Status IN [Status::"Stamp Received",Status::Sent,Status::"Cancel Error",Status::Canceled] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      IF Action = Action::Send THEN
        IF Status IN [Status::" ",Status::Canceled,Status::"Cancel Error",Status::"Stamp Request Error"] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      IF Action = Action::Cancel THEN
        IF Status IN [Status::" ",Status::Canceled,Status::"Stamp Request Error"] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");
    END;

    [External]
    PROCEDURE EDocPrintValidation@1020013(EDocStatus@1020001 : ' ,Stamp Received,Sent,Canceled,Stamp Request Error,Cancel Error';DocNo@1020000 : Code[20]);
    BEGIN
      GLSetup.GET;
      IF (GLSetup."PAC Environment" <> GLSetup."PAC Environment"::Disabled) AND
         (EDocStatus IN [EDocStatus::" ",EDocStatus::Canceled,EDocStatus::"Cancel Error",EDocStatus::"Stamp Request Error"])
      THEN
        IF NOT CONFIRM(STRSUBSTNO(Text011,DocNo)) THEN
          ERROR('');
    END;

    LOCAL PROCEDURE RequestStamp@1020082(VAR DocumentHeaderRecordRef@1020000 : RecordRef;Prepayment@1020024 : Boolean;Reverse@1020031 : Boolean);
    VAR
      TempDocumentHeader@1020004 : TEMPORARY Record 10002;
      TempDocumentLine@1020018 : TEMPORARY Record 10003;
      SalesInvoiceHeader@1020017 : Record 112;
      SalesCrMemoHeader@1020021 : Record 114;
      ServiceInvoiceHeader@1020016 : Record 5992;
      ServiceCrMemoHeader@1020015 : Record 5994;
      TempBlobOriginalString@1020008 : Record 99008535;
      TempBlobDigitalStamp@1020019 : Record 99008535;
      CFDIDocuments@1020032 : Record 27005;
      XMLDOMManagement@1020010 : Codeunit 6224;
      OutStrOriginalDoc@1020012 : OutStream;
      OutStrSignedDoc@1020020 : OutStream;
      XMLDoc@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Environment@1020022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
      OriginalString@1020006 : Text;
      SignedString@1020007 : Text;
      Certificate@1020005 : Text;
      Response@1020002 : Text;
      DateTimeFirstReqSent@1020003 : Text[50];
      CertificateSerialNo@1020014 : Text[250];
      SubTotal@1020011 : Decimal;
      RetainAmt@1020009 : Decimal;
      AmountInclVAT@1020001 : Decimal;
      UUID@1020028 : Text[50];
      AdvanceSettle@1020029 : Boolean;
      AdvanceAmount@1020030 : Decimal;
      SalesInvoiceNumber@1020023 : Code[20];
    BEGIN
      Export := TRUE;

      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesInvoiceHeader);
            IF NOT Reverse THEN // If reverse, AdvanceSettle must be false else you fall into an infinite loop
              AdvanceSettle := IsInvoicePrepaymentSettle(SalesInvoiceHeader."No.",AdvanceAmount);
            IF AdvanceSettle THEN
              IF GetUUIDFromOriginalPrepayment(SalesInvoiceHeader,SalesInvoiceNumber) = '' THEN
                ERROR(UnableToStampAppliedErr,SalesInvoiceNumber);
            CreateAbstractDocument(SalesInvoiceHeader,TempDocumentHeader,TempDocumentLine,AdvanceSettle);
            ValidateSalesInvoice(SalesInvoiceHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqSalesInv(SalesInvoiceHeader);
            CalcSalesInvLineTotal(SubTotal,RetainAmt,TempDocumentHeader."No.",AdvanceSettle);
            SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := SalesInvoiceHeader."Amount Including VAT";
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesCrMemoHeader);
            CreateAbstractDocument(SalesCrMemoHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            ValidateSalesCrMemo(SalesCrMemoHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqSalesCr(SalesCrMemoHeader);
            CalcSalesCrMemoLineTotal(SubTotal,RetainAmt,TempDocumentHeader."No.");
            SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := SalesCrMemoHeader."Amount Including VAT";
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceInvoiceHeader);
            CreateAbstractDocument(ServiceInvoiceHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            ValidateServiceInvoice(ServiceInvoiceHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqServInv(ServiceInvoiceHeader);
            CalcServiceInvLineTotal(SubTotal,RetainAmt,AmountInclVAT,TempDocumentHeader."No.");
            TempDocumentHeader."Amount Including VAT" := AmountInclVAT;
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceCrMemoHeader);
            CreateAbstractDocument(ServiceCrMemoHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            ValidateServiceCrMemo(ServiceCrMemoHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqServCr(ServiceCrMemoHeader);
            CalcServiceCrMemoLineTotal(SubTotal,RetainAmt,AmountInclVAT,TempDocumentHeader."No.");
            TempDocumentHeader."Amount Including VAT" := AmountInclVAT;
          END;
      END;

      GetCustomer(TempDocumentHeader."Bill-to/Pay-To No.");
      CurrencyDecimalPlaces := GetCurrencyDecimalPlaces(TempDocumentHeader."Currency Code");

      // Create Digital Stamp
      IF Reverse THEN BEGIN
        UUID := SalesInvoiceHeader."Fiscal Invoice Number PAC";
        AdvanceAmount := GetAdvanceAmountFromSettledInvoice(SalesInvoiceHeader);
        CreateOriginalStr33AdvanceReverse(
          TempDocumentHeader,DateTimeFirstReqSent,TempBlobOriginalString,UUID,AdvanceAmount);
      END ELSE
        IF Prepayment THEN
          CreateOriginalStr33AdvancePayment(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SubTotal,RetainAmt,
            TempBlobOriginalString)
        ELSE
          IF NOT AdvanceSettle THEN
            CreateOriginalStr33(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SubTotal,RetainAmt,
              DocumentHeaderRecordRef.NUMBER IN [DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header"],
              TempBlobOriginalString)
          ELSE BEGIN
            UUID := GetUUIDFromOriginalPrepayment(SalesInvoiceHeader,SalesInvoiceNumber);
            CreateOriginalStr33AdvanceSettle(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SubTotal,RetainAmt,
              TempBlobOriginalString,UUID)
          END;

      OriginalString := TempBlobOriginalString.ReadAsText(Environment.NewLine,TEXTENCODING::MSDos);
      CreateDigitalSignature(OriginalString,SignedString,CertificateSerialNo,Certificate);
      TextToBlob(TempBlobDigitalStamp,SignedString);

      // Create Original XML
      IF Reverse THEN
        CreateXMLDocument33AdvanceReverse(
          TempDocumentHeader,DateTimeFirstReqSent,SignedString,
          Certificate,CertificateSerialNo,XMLDoc,UUID,AdvanceAmount)
      ELSE
        IF Prepayment THEN
          CreateXMLDocument33AdvancePayment(
            TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,SubTotal,RetainAmt,
            XMLDoc)
        ELSE
          IF NOT AdvanceSettle THEN
            CreateXMLDocument33(
              TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,SubTotal,RetainAmt,
              DocumentHeaderRecordRef.NUMBER IN [DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header"],XMLDoc)
          ELSE
            CreateXMLDocument33AdvanceSettle(
              TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,SubTotal,RetainAmt,
              XMLDoc,UUID);

      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          WITH SalesInvoiceHeader DO
            IF NOT Reverse THEN BEGIN
              "Original String" := TempBlobOriginalString.Blob;
              "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
              "Certificate Serial No." := CertificateSerialNo;
              "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
              "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
              XMLDoc.Save(OutStrOriginalDoc);
              MODIFY;
            END ELSE BEGIN
              IF NOT CFDIDocuments.GET("No.",DATABASE::"Sales Invoice Header",TRUE,TRUE) THEN BEGIN
                CFDIDocuments.INIT;
                CFDIDocuments."No." := "No.";
                CFDIDocuments."Document Table ID" := DATABASE::"Sales Invoice Header";
                CFDIDocuments.Prepayment := TRUE;
                CFDIDocuments.Reversal := TRUE;
                CFDIDocuments.INSERT;
              END;

              CFDIDocuments."Original String" := TempBlobOriginalString.Blob;
              CFDIDocuments."Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
              CFDIDocuments."Certificate Serial No." := CertificateSerialNo;
              CFDIDocuments."Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
              CFDIDocuments."Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
              XMLDoc.Save(OutStrOriginalDoc);
              MODIFY;
            END;
        DATABASE::"Sales Cr.Memo Header":
          WITH SalesCrMemoHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
        DATABASE::"Service Invoice Header":
          WITH ServiceInvoiceHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
        DATABASE::"Service Cr.Memo Header":
          WITH ServiceCrMemoHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
      END;

      COMMIT;

      Response := InvokeMethod(XMLDoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        IF Reverse THEN
          WITH CFDIDocuments DO BEGIN
            XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
            XMLDocResult.Save(OutStrSignedDoc);
            MODIFY;
          END;
        IF NOT Reverse THEN BEGIN
          XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
          XMLDocResult.Save(OutStrSignedDoc);
        END;
      END;

      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            ProcessResponseESalesInvoice(SalesInvoiceHeader,EDocAction::"Request Stamp",Reverse);
            SalesInvoiceHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::"Request Stamp");
            SalesCrMemoHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ProcessResponseEServiceInvoice(ServiceInvoiceHeader,EDocAction::"Request Stamp",AmountInclVAT);
            ServiceInvoiceHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::"Request Stamp",AmountInclVAT);
            ServiceCrMemoHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(ServiceCrMemoHeader);
          END;
      END;

      // If Advance Settle, and everything went well, then need to create CFDI document for Advance reverse.
      IF AdvanceSettle THEN BEGIN
        IF SalesInvoiceHeader."Electronic Document Status" = SalesInvoiceHeader."Electronic Document Status"::"Stamp Received" THEN
          RequestStamp(DocumentHeaderRecordRef,TRUE,TRUE);
      END;
    END;

    PROCEDURE Send@1020072(VAR DocumentHeaderRecordRef@1020004 : RecordRef;Reverse@1020005 : Boolean);
    VAR
      SalesInvHeader@1020003 : Record 112;
      SalesCrMemoHeader@1020002 : Record 114;
      ServiceInvHeader@1020001 : Record 5992;
      ServiceCrMemoHeader@1020000 : Record 5994;
    BEGIN
      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesInvHeader);
            SendESalesInvoice(SalesInvHeader,Reverse);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesCrMemoHeader);
            SendESalesCrMemo(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceInvHeader);
            SendEServiceInvoice(ServiceInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceCrMemoHeader);
            SendEServiceCrMemo(ServiceCrMemoHeader);
          END;
      END;
    END;

    LOCAL PROCEDURE SendESalesInvoice@1020030(VAR SalesInvHeader@1020000 : Record 112;Reverse@1020004 : Boolean);
    VAR
      CFDIDocuments@1020007 : Record 27005;
      CFDIDocumentsLoc@1020009 : Record 27005;
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      SalesInvHeaderLoc@1020008 : Record 112;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020002 : Text;
    BEGIN
      IF Reverse THEN
        CFDIDocuments.GET(SalesInvHeader."No.",DATABASE::"Sales Invoice Header",TRUE,TRUE);

      GetCustomer(SalesInvHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF NOT Reverse THEN
        IF SalesInvHeader."No. of E-Documents Sent" <> 0 THEN
          IF NOT CONFIRM(Text002) THEN
            ERROR('');
      IF Reverse THEN
        IF CFDIDocuments."No. of E-Documents Sent" <> 0 THEN
          IF NOT CONFIRM(PaymentsAlreadySentQst) THEN
            ERROR('');

      // Export XML
      IF NOT Reverse THEN BEGIN
        SalesInvHeader.CALCFIELDS("Signed Document XML");
        TempBlob.Blob := SalesInvHeader."Signed Document XML";
        TempBlob.Blob.CREATEINSTREAM(XMLInstream);
        FileNameEdoc := SalesInvHeader."No." + '.xml';
      END ELSE BEGIN
        CFDIDocuments.CALCFIELDS("Signed Document XML");
        TempBlob.Blob := CFDIDocuments."Signed Document XML";
        TempBlob.Blob.CREATEINSTREAM(XMLInstream);
        FileNameEdoc := CFDIDocuments."No." + '.xml';
        CFDIDocumentsLoc."Signed Document XML" := TempBlob.Blob;
        CFDIDocumentsLoc."Signed Document XML" := CFDIDocumentsLoc."Signed Document XML";
      END;

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(SalesInvHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      IF NOT Reverse THEN BEGIN
        SalesInvHeaderLoc.GET(SalesInvHeader."No.");
        SalesInvHeaderLoc."No. Printed" := SalesInvHeader."No. Printed";
        SalesInvHeaderLoc.MODIFY;
      END;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,SalesInvHeader."No."),
        STRSUBSTNO(Text000,SalesInvHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      IF NOT Reverse THEN BEGIN
        SalesInvHeaderLoc.GET(SalesInvHeader."No.");
        SalesInvHeaderLoc."No. of E-Documents Sent" := SalesInvHeaderLoc."No. of E-Documents Sent" + 1;
        IF NOT SalesInvHeaderLoc."Electronic Document Sent" THEN
          SalesInvHeaderLoc."Electronic Document Sent" := TRUE;
        SalesInvHeaderLoc."Electronic Document Status" := SalesInvHeaderLoc."Electronic Document Status"::Sent;
        SalesInvHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
        SalesInvHeaderLoc.MODIFY;
      END ELSE BEGIN
        CFDIDocumentsLoc.GET(SalesInvHeader."No.",DATABASE::"Sales Invoice Header",TRUE,TRUE);
        CFDIDocumentsLoc."No. of E-Documents Sent" := CFDIDocumentsLoc."No. of E-Documents Sent" + 1;
        IF NOT CFDIDocumentsLoc."Electronic Document Sent" THEN
          CFDIDocumentsLoc."Electronic Document Sent" := TRUE;
        CFDIDocumentsLoc."Electronic Document Status" := CFDIDocumentsLoc."Electronic Document Status"::Sent;
        CFDIDocumentsLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
        CFDIDocumentsLoc.MODIFY;
      END;
      MESSAGE(Text001,SalesInvHeader."No.");
    END;

    LOCAL PROCEDURE SendESalesCrMemo@1020031(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      SalesCrMemoHeaderLoc@1020008 : Record 114;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF SalesCrMemoHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');

      // Export XML
      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := SalesCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := SalesCrMemoHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(SalesCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Cr.Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. Printed" := SalesCrMemoHeader."No. Printed";
      SalesCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,SalesCrMemoHeader."No."),
        STRSUBSTNO(Text004,SalesCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. of E-Documents Sent" := SalesCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT SalesCrMemoHeaderLoc."Electronic Document Sent" THEN
        SalesCrMemoHeaderLoc."Electronic Document Sent" := TRUE;
      SalesCrMemoHeaderLoc."Electronic Document Status" := SalesCrMemoHeaderLoc."Electronic Document Status"::Sent;
      SalesCrMemoHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      SalesCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE SendEServiceInvoice@1020043(VAR ServiceInvoiceHeader@1020000 : Record 5992);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      ServiceInvoiceHeaderLoc@1020008 : Record 5992;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceInvoiceHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF ServiceInvoiceHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      ServiceInvoiceHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceInvoiceHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceInvoiceHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(ServiceInvoiceHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. Printed" := ServiceInvoiceHeader."No. Printed";
      ServiceInvoiceHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,ServiceInvoiceHeader."No."),
        STRSUBSTNO(Text000,ServiceInvoiceHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. of E-Documents Sent" := ServiceInvoiceHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT ServiceInvoiceHeaderLoc."Electronic Document Sent" THEN
        ServiceInvoiceHeaderLoc."Electronic Document Sent" := TRUE;
      ServiceInvoiceHeaderLoc."Electronic Document Status" := ServiceInvoiceHeaderLoc."Electronic Document Status"::Sent;
      ServiceInvoiceHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      ServiceInvoiceHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE SendEServiceCrMemo@1020045(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      ServiceCrMemoHeaderLoc@1020008 : Record 5994;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF ServiceCrMemoHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      ServiceCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceCrMemoHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(ServiceCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Credit Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. Printed" := ServiceCrMemoHeader."No. Printed";
      ServiceCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,ServiceCrMemoHeader."No."),
        STRSUBSTNO(Text004,ServiceCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. of E-Documents Sent" := ServiceCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT ServiceCrMemoHeaderLoc."Electronic Document Sent" THEN
        ServiceCrMemoHeaderLoc."Electronic Document Sent" := TRUE;
      ServiceCrMemoHeaderLoc."Electronic Document Status" := ServiceCrMemoHeaderLoc."Electronic Document Status"::Sent;
      ServiceCrMemoHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      ServiceCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE CancelESalesInvoice@1170000000(VAR SalesInvHeader@1020000 : Record 112);
    VAR
      TempBlob@1020004 : Record 99008535;
      XMLDOMManagement@1020002 : Codeunit 6224;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF SalesInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH SalesInvHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        SalesInvHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesInvHeader.MODIFY;
      ProcessResponseESalesInvoice(SalesInvHeader,EDocAction::Cancel,FALSE);
      SalesInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelESalesCrMemo@1020033(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      TempBlob@1020002 : Record 99008535;
      XMLDOMManagement@1020004 : Codeunit 6224;
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF SalesCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH SalesCrMemoHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        SalesCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesCrMemoHeader.MODIFY;
      ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::Cancel);
      SalesCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEServiceInvoice@1020034(VAR ServiceInvHeader@1020000 : Record 5992);
    VAR
      TempBlob@1020004 : Record 99008535;
      XMLDOMManagement@1020002 : Codeunit 6224;
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF ServiceInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH ServiceInvHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        ServiceInvHeader."Signed Document XML" := TempBlob.Blob;
      END;

      ServiceInvHeader.MODIFY;
      ProcessResponseEServiceInvoice(ServiceInvHeader,EDocAction::Cancel,0);
      ServiceInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEServiceCrMemo@1020037(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      TempBlob@1020004 : Record 99008535;
      XMLDOMManagement@1020002 : Codeunit 6224;
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF ServiceCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH ServiceCrMemoHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        ServiceCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;

      ServiceCrMemoHeader.MODIFY;
      ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::Cancel,0);
      ServiceCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEPayment@1020010(VAR CustLedgerEntry@1020000 : Record 21);
    VAR
      TempBlob@1020004 : Record 99008535;
      XMLDOMManagement@1020002 : Codeunit 6224;
      OutStr@1020003 : OutStream;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH CustLedgerEntry DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        CustLedgerEntry."Signed Document XML" := TempBlob.Blob;
      END;

      CustLedgerEntry.MODIFY;
      ProcessResponseEPayment(CustLedgerEntry,EDocAction::Cancel);
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE ProcessResponseESalesInvoice@1020054(VAR SalesInvoiceHeader@1020000 : Record 112;Action@1020007 : Option;Reverse@1020016 : Boolean);
    VAR
      CFDIDocuments@1020017 : Record 27005;
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDocResult) THEN
        XMLDocResult := XMLDocResult.XmlDocument;

      IF NOT Reverse THEN BEGIN
        SalesInvoiceHeader.CALCFIELDS("Signed Document XML");
        SalesInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
        CLEAR(SalesInvoiceHeader."Signed Document XML");
      END ELSE BEGIN
        CFDIDocuments.GET(SalesInvoiceHeader."No.",DATABASE::"Sales Invoice Header",TRUE,TRUE);
        CFDIDocuments.CALCFIELDS("Signed Document XML");
        CFDIDocuments."Signed Document XML".CREATEINSTREAM(InStr);
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
        CLEAR(CFDIDocuments."Signed Document XML");
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");

      IF NOT Reverse THEN
        SalesInvoiceHeader."PAC Web Service Name" := PACWebService.Name
      ELSE
        CFDIDocuments."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN // Error encountered
        IF NOT Reverse THEN BEGIN
          SalesInvoiceHeader."Error Code" := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
          ErrorDescription := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
          IF NOT ISNULL(XMLCurrNode) THEN
            ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
          IF STRLEN(ErrorDescription) > 250 THEN
            ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
          SalesInvoiceHeader."Error Description" := COPYSTR(ErrorDescription,1,250);
          CASE Action OF
            EDocAction::"Request Stamp":
              SalesInvoiceHeader."Electronic Document Status" :=
                SalesInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
            EDocAction::Cancel:
              BEGIN
                SalesInvoiceHeader."Electronic Document Status" :=
                  SalesInvoiceHeader."Electronic Document Status"::"Cancel Error";
                SalesInvoiceHeader."Date/Time Canceled" := '';
              END;
          END;
        END ELSE BEGIN
          CFDIDocuments."Error Code" := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
          ErrorDescription := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
          IF NOT ISNULL(XMLCurrNode) THEN
            ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
          IF STRLEN(ErrorDescription) > 250 THEN
            ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
          CFDIDocuments."Error Description" := COPYSTR(ErrorDescription,1,250);
          CASE Action OF
            EDocAction::"Request Stamp":
              CFDIDocuments."Electronic Document Status" := CFDIDocuments."Electronic Document Status"::"Stamp Request Error";
          END;
          CFDIDocuments.MODIFY;
        END;
        EXIT;
      END;

      IF NOT Reverse THEN BEGIN
        SalesInvoiceHeader."Error Code" := '';
        SalesInvoiceHeader."Error Description" := '';
        IF Action = EDocAction::Cancel THEN BEGIN
          SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::Canceled;
          EXIT;
        END;
      END ELSE BEGIN
        CFDIDocuments."Error Code" := '';
        CFDIDocuments."Error Description" := '';
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      IF NOT Reverse THEN
        SalesInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr)
      ELSE
        CFDIDocuments."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      IF NOT Reverse THEN BEGIN
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
        SalesInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
        SalesInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
        SalesInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;
      END ELSE BEGIN
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
        CFDIDocuments."Date/Time Stamped" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
        CFDIDocuments."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
        CFDIDocuments."Certificate Serial No." := XMLCurrNode.Value;
      END;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      IF NOT Reverse THEN BEGIN
        SalesInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
        OutStr.WRITETEXT(XMLCurrNode.Value);
        // Certificate Serial
        SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::"Stamp Received";
      END ELSE BEGIN
        CFDIDocuments."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
        OutStr.WRITETEXT(XMLCurrNode.Value);
        // Certificate Serial
        CFDIDocuments."Electronic Document Status" := CFDIDocuments."Electronic Document Status"::"Stamp Received";
      END;

      // Create QRCode
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      IF NOT Reverse THEN BEGIN
        QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
            FORMAT(SalesInvoiceHeader."Fiscal Invoice Number PAC"));
        CreateQRCode(QRCodeInput,TempBlob);
        SalesInvoiceHeader."QR Code" := TempBlob.Blob;
      END ELSE BEGIN
        QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
            FORMAT(CFDIDocuments."Fiscal Invoice Number PAC"));
        CreateQRCode(QRCodeInput,TempBlob);
        CFDIDocuments."QR Code" := TempBlob.Blob;
        CFDIDocuments.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ProcessResponseESalesCrMemo@1020032(VAR SalesCrMemoHeader@1020000 : Record 114;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020010 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      SalesCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(SalesCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      SalesCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        SalesCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        SalesCrMemoHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        CASE Action OF
          EDocAction::"Request Stamp":
            SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Cancel Error";
              SalesCrMemoHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      SalesCrMemoHeader."Error Code" := '';
      SalesCrMemoHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      SalesCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      SalesCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      SalesCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      SalesCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      SalesCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesCrMemoHeader."Amount Including VAT",
          FORMAT(SalesCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      SalesCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseEServiceInvoice@1020042(VAR ServInvoiceHeader@1020000 : Record 5992;Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020016 : Codeunit 6224;
      XMLDoc@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
      ErrorDescription@1020011 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      ServInvoiceHeader.CALCFIELDS("Signed Document XML");
      ServInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(ServInvoiceHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServInvoiceHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        ServInvoiceHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        ServInvoiceHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        CASE Action OF
          EDocAction::"Request Stamp":
            ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Cancel Error";
              ServInvoiceHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      ServInvoiceHeader."Error Code" := '';
      ServInvoiceHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      ServInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      ServInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      ServInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certiificate Serial
      ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServInvoiceHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServInvoiceHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseEServiceCrMemo@1020044(VAR ServCrMemoHeader@1020000 : Record 5994;Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020016 : Codeunit 6224;
      XMLDoc@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
      ErrorDescription@1020011 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      ServCrMemoHeader.CALCFIELDS("Signed Document XML");
      ServCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(ServCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        ServCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        ServCrMemoHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        CASE Action OF
          EDocAction::"Request Stamp":
            ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Cancel Error";
              ServCrMemoHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      ServCrMemoHeader."Error Code" := '';
      ServCrMemoHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      ServCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      ServCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      ServCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ValidateSalesInvoice@1020075(VAR SalesInvoiceHeader@1020000 : Record 112);
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        IF "Source Code" = SourceCodeSetup."Deleted Document" THEN
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      END;
    END;

    LOCAL PROCEDURE ValidateSalesCrMemo@1020078(VAR SalesCrMemoHeader@1020000 : Record 114);
    BEGIN
      WITH SalesCrMemoHeader DO BEGIN
        IF "Source Code" = SourceCodeSetup."Deleted Document" THEN
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      END;
    END;

    LOCAL PROCEDURE ValidateServiceInvoice@1020079(VAR ServiceInvoiceHeader@1020000 : Record 5992);
    BEGIN
      WITH ServiceInvoiceHeader DO BEGIN
        IF "Source Code" = SourceCodeSetup."Deleted Document" THEN
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      END;
    END;

    LOCAL PROCEDURE ValidateServiceCrMemo@1020080(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    BEGIN
      WITH ServiceCrMemoHeader DO BEGIN
        IF "Source Code" = SourceCodeSetup."Deleted Document" THEN
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33@1020003(VAR TempDocumentHeader@1020000 : TEMPORARY Record 10002;VAR TempDocumentLine@1020009 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];SubTotal@1020004 : Decimal;RetainAmt@1020003 : Decimal;IsCredit@1020010 : Boolean;VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TotalDiscount@1020013 : Decimal;
      TotalTaxes@1020014 : Decimal;
      TaxCode@1020015 : Code[10];
      TaxType@1020016 : 'Translado,Retencion';
      LineTaxes@1020017 : Boolean;
    BEGIN
      InitXML33(XMLDoc,XMLCurrNode);
      WITH TempDocumentHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago',SATUtilities.GetSATPaymentTerm("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatAmount(SubTotal));

        // Need the sum of line discount to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          UNTIL TempDocumentLine.NEXT = 0;
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));

        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatDecimal(1 / "Currency Factor",6));
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount("Amount Including VAT"));
        IF IsCredit THEN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','E') // Egreso
        ELSE
          AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        IsCredit := FALSE;

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago',SATUtilities.GetSATPaymentMethod("Payment Method Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',Customer."CFDI Purpose");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        TotalDiscount := 0;
        LineTaxes := FALSE;
        TempDocumentLine.RESET;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(
              XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
            AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
            AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',TempDocumentLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost"));
            AddAttribute(
              XMLDoc,XMLCurrNode,'Importe',FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2));

            // might not need the following nodes, took out of original string....
            AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TempDocumentLine."Line Discount Amount"));
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN
              LineTaxes := TRUE;
              // Impuestos per line
              AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              // Impuestos->Traslados/Retenciones
              IF IsCredit THEN
                AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild)
              ELSE
                AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              TaxCode := '002';
              IF IsCredit THEN BEGIN
                AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild);
                IF TempDocumentLine."VAT %" <> 0 THEN
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
              END ELSE BEGIN
                AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
                IF TempDocumentLine."VAT %" <> 0 THEN
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
              END;
              XMLCurrNode := XMLNewChild;
              AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

              AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
              IF TempDocumentLine."VAT %" <> 0 THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
                AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
                AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                  FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount))
              END ELSE
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
              XMLCurrNode := XMLCurrNode.ParentNode;
              XMLCurrNode := XMLCurrNode.ParentNode;

              XMLCurrNode := XMLCurrNode.ParentNode;
              // End of tax info per line
            END;
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL TempDocumentLine.NEXT = 0;

        IF LineTaxes THEN BEGIN
          // Impuestos
          XMLCurrNode := XMLCurrNode.ParentNode;
          // AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));// Descuento
          AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;

          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          IF TempDocumentLine.FINDSET THEN BEGIN
            // Impuestos->Traslados/Retenciones
            TaxCode := '002';
            IF IsCredit THEN BEGIN
              AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild);
              IF TempDocumentLine."VAT %" <> 0 THEN
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
            END ELSE BEGIN
              AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
              IF TempDocumentLine."VAT %" <> 0 THEN
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            END;
            XMLCurrNode := XMLNewChild;

            IF IsCredit THEN
              AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild)
            ELSE
              AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
              IF NOT IsCredit THEN BEGIN // Retencion does not use the following two nodes
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
                AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
              END;
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatAmount(TotalTaxes));
            END ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            IF IsCredit THEN
              AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosRetenidos',FormatAmountNoABS(RetainAmt)) // TotalImpuestosRetenidos
            ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatAmount(RetainAmt)); // TotalImpuestosTrasladados
          END;
        END; // Line taxes exist
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvanceSettle@1020088(VAR TempDocumentHeader@1020017 : TEMPORARY Record 10002;VAR TempDocumentLine@1020010 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020009 : Text[50];SignedString@1020008 : Text;Certificate@1020007 : Text;CertificateSerialNo@1020005 : Text[250];SubTotal@1020004 : Decimal;RetainAmt@1020003 : Decimal;VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";UUID@1020001 : Text[50]);
    VAR
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TotalDiscount@1020013 : Decimal;
      TotalTaxes@1020014 : Decimal;
      TaxCode@1020015 : Code[10];
      TaxType@1020016 : 'Translado,Retencion';
      LineTaxes@1020018 : Boolean;
    BEGIN
      InitXML33(XMLDoc,XMLCurrNode);
      WITH TempDocumentHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago','30'); // Hardcoded for Advance Settle
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);

        // Need the sum of line discounts to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          UNTIL TempDocumentLine.NEXT = 0;

        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatAmount(SubTotal));
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));

        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatDecimal(1 / "Currency Factor",6));
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount(SubTotal - TotalDiscount + RetainAmt));
        // AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount(SubTotal - TotalDiscount + AdvanceAmount - RetainAmt));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago',SATUtilities.GetSATPaymentMethod("Payment Method Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        AddElementCFDI(XMLCurrNode,'CfdiRelacionados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'TipoRelacion','07'); // Hardcoded for Advance Settle
        AddElementCFDI(XMLCurrNode,'CfdiRelacionado','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',UUID); // UUID for source invoice
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',Customer."CFDI Purpose");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        TotalDiscount := 0;
        TempDocumentLine.RESET;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(
              XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
            AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
            AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',TempDocumentLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost"));
            AddAttribute(
              XMLDoc,XMLCurrNode,'Importe',FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2));

            // might not need the following nodes, took out of original string....
            AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TempDocumentLine."Line Discount Amount"));
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN
              LineTaxes := TRUE;
              // Impuestos per line
              AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              // Impuestos->Traslados/Retenciones
              AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              TaxCode := '002';
              AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
              IF TempDocumentLine."VAT %" <> 0 THEN
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
              XMLCurrNode := XMLNewChild;
              AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

              AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
              IF TempDocumentLine."VAT %" <> 0 THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
                AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
                AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                  FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount));
              END ELSE
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
              TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
              XMLCurrNode := XMLCurrNode.ParentNode;
              XMLCurrNode := XMLCurrNode.ParentNode;

              XMLCurrNode := XMLCurrNode.ParentNode;
              // End of tax info per line
            END;
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL TempDocumentLine.NEXT = 0;

        IF LineTaxes THEN BEGIN
          // Impuestos
          XMLCurrNode := XMLCurrNode.ParentNode;

          AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;

          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          IF TempDocumentLine.FINDSET THEN BEGIN
            // Impuestos->Traslados/Retenciones
            TaxCode := '002';
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            IF TempDocumentLine."VAT %" <> 0 THEN
              TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatAmount(TotalTaxes));
            END ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatAmount(RetainAmt)); // TotalImpuestosTrasladados
          END;
        END; // Line taxes exist
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvancePayment@1020055(VAR TempDocumentHeader@1020000 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];SubTotal@1020004 : Decimal;RetainAmt@1020009 : Decimal;VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TaxCode@1020013 : Code[10];
      TaxType@1020014 : 'Translado,Retencion';
      TotalTaxes@1020015 : Decimal;
      TaxAmount@1310000 : Decimal;
      TaxPercentage@1310001 : Decimal;
    BEGIN
      InitXML33AdvancePayment(XMLDoc,XMLCurrNode);
      WITH TempDocumentHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago',SATUtilities.GetSATPaymentTerm("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatDecimal(ROUND(SubTotal + RetainAmt,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago','PUE');
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        // Just ONE concept
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(1));
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Anticipo bien o servicio');

        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatDecimal(0,0));

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN BEGIN
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          IF TaxAmount <> 0 THEN BEGIN
            // Impuestos per line
            AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            // Impuestos->Traslados/Retenciones
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TaxPercentage / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                FormatDecimal(TaxAmount,0))
            END ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            // End of tax info per line
          END;
        END;

        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN BEGIN
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          IF TaxAmount <> 0 THEN BEGIN
            // Impuestos per line
            AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            // Impuestos->Traslados
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;
            // AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TaxPercentage / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                FormatDecimal(TaxAmount,0))
            END ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            TotalTaxes := TotalTaxes + TaxAmount;
            // End of tax info per line
          END;
        END;
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        IF TotalTaxes <> 0 THEN
          AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatDecimal(TotalTaxes,0)); // TotalImpuestosTrasladados
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvanceReverse@1020012(VAR TempDocumentHeader@1020003 : TEMPORARY Record 10002;DateTimeReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";UUID@1020004 : Text[50];AdvanceAmount@1020000 : Decimal);
    VAR
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      InitXML33AdvancePayment(XMLDoc,XMLCurrNode);
      WITH TempDocumentHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago','30');
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','E'); // Egreso

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago','PUE');
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        AddElementCFDI(XMLCurrNode,'CfdiRelacionados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'TipoRelacion','07');
        // 01 = Credit memo, 06 = Invoice
        AddElementCFDI(XMLCurrNode,'CfdiRelacionado','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',UUID);
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',Customer.Name);
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        // Just ONE concept
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(1));
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Aplicacion de anticipo');

        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));

        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatDecimal(0,0));
      END;
    END;

    [External]
    PROCEDURE CreateOriginalStr33@1020004(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;IsCredit@1020006 : Boolean;VAR TempBlob@1020002 : Record 99008535);
    VAR
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      TotalDiscount@1020011 : Decimal;
      TotalTaxes@1020009 : Decimal;
      TaxCode@1020013 : Code[10];
      TaxType@1020012 : 'Translado,Retencion';
      LineTaxes@1020014 : Boolean;
    BEGIN
      WITH TempDocumentHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write(RemoveInvalidChars("No.") + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm("Payment Terms Code") + '|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatAmount(SubTotal) + '|'); // SubTotal

        // Need the sum of line discount to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          UNTIL TempDocumentLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(TotalDiscount) + '|'); // Descuento

        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write("Currency Code" + '|'); // Moneda
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            BlobManagement.Write(FormatDecimal(1 / "Currency Factor",6) + '|'); // TipoCambio
        END;

        BlobManagement.Write(FormatAmount("Amount Including VAT") + '|'); // Total
        IF IsCredit THEN
          BlobManagement.Write(FORMAT('E') + '|') // Egreso
        ELSE
          BlobManagement.Write(FORMAT('I') + '|'); // Ingreso

        IsCredit := FALSE;

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        END;
        BlobManagement.Write(SATUtilities.GetSATPaymentMethod("Payment Method Code") + '|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write(RemoveInvalidChars(Customer."CFDI Purpose") + '|'); // UsoCFDI

        LineTaxes := FALSE;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
            BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
            BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
            BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
            BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
            BlobManagement.Write(TempDocumentLine.Description + '|'); // Descripcion
            BlobManagement.Write(FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost") + '|'); // ValorUnitario
            BlobManagement.Write(FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2) + '|'); // Importe
            BlobManagement.Write(FormatAmount(TempDocumentLine."Line Discount Amount") + '|'); // Descuento

            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN
              LineTaxes := TRUE;
              BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              IF IsCredit THEN BEGIN
                IF TempDocumentLine."VAT %" <> 0 THEN
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
              END ELSE BEGIN
                IF TempDocumentLine."VAT %" <> 0 THEN
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
              END;

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              IF TempDocumentLine."VAT %" <> 0 THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(
                  FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount) + '|') // Importe
              END ELSE
                BlobManagement.Write('Exento' + '|'); // TipoFactor
            END;
          UNTIL TempDocumentLine.NEXT = 0;

        IF LineTaxes THEN BEGIN
          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          IF TempDocumentLine.FINDSET THEN BEGIN
            IF IsCredit THEN
              IF TempDocumentLine."VAT %" <> 0 THEN
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
            IF NOT IsCredit THEN
              IF TempDocumentLine."VAT %" <> 0 THEN
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
              IF NOT IsCredit THEN BEGIN // Retencion does not use the following 2 nodes...
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              END;
              BlobManagement.Write(FormatAmount(TotalTaxes) + '|'); // Importe
            END ELSE
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          END;
          BlobManagement.Write(FormatAmount(RetainAmt) + '||'); // TotalImpuestosTrasladados or TotalImpuestosRetenidos
        END ELSE
          BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalString33.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvanceSettle@1020084(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;VAR TempBlob@1020002 : Record 99008535;UUID@1020006 : Text[50]);
    VAR
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      TotalDiscount@1020011 : Decimal;
      TotalTaxes@1020009 : Decimal;
      TaxCode@1020013 : Code[10];
      TaxType@1020012 : 'Translado,Retencion';
      LineTaxes@1020010 : Boolean;
    BEGIN
      WITH TempDocumentHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write(RemoveInvalidChars("No.") + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write('30|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado

        // Need the sum of line discounts to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          UNTIL TempDocumentLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(SubTotal) + '|'); // SubTotal
        BlobManagement.Write(FormatAmount(TotalDiscount) + '|'); // Desuento
        // BlobManagement.Write(FormatAmount(AdvanceAmount + TotalDiscount) + '|'); // Desuento
        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write("Currency Code" + '|'); // Moneda
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            BlobManagement.Write(FormatDecimal(1 / "Currency Factor",6) + '|'); // TipoCambio
        END;

        BlobManagement.Write(FormatAmount(SubTotal - TotalDiscount + RetainAmt) + '|'); // Total
        // BlobManagement.Write(FormatAmount("Amount Including VAT" + TotalDiscount + AdvanceAmount) + '|'); // Total
        BlobManagement.Write(FORMAT('I') + '|'); // Ingreso -- TipoDeComprante

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        END;
        BlobManagement.Write(SATUtilities.GetSATPaymentMethod("Payment Method Code") + '|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Related documents
        BlobManagement.Write('07|'); // TipoRelacion
        BlobManagement.Write(UUID + '|'); // UUID

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write(RemoveInvalidChars(Customer."CFDI Purpose") + '|'); // UsoCFDI

        LineTaxes := FALSE;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
            BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
            BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
            BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
            BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
            BlobManagement.Write(TempDocumentLine.Description + '|'); // Descripcion
            BlobManagement.Write(FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost") + '|'); // ValorUnitario
            BlobManagement.Write(FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2) + '|'); // Importe
            BlobManagement.Write(FormatAmount(TempDocumentLine."Line Discount Amount") + '|'); // Descuento
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN
              LineTaxes := TRUE;
              BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              IF TempDocumentLine."VAT %" <> 0 THEN
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              IF TempDocumentLine."VAT %" <> 0 THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount) + '|'); // Importe
              END ELSE
                BlobManagement.Write('Exento' + '|'); // TipoFactor
              TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
            END;
          UNTIL TempDocumentLine.NEXT = 0;

        IF LineTaxes THEN BEGIN
          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          IF TempDocumentLine.FINDSET THEN BEGIN
            IF TempDocumentLine."VAT %" <> 0 THEN
              TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            IF TempDocumentLine."VAT %" <> 0 THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
              BlobManagement.Write('Tasa' + '|'); // TipoFactor
              BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(FormatAmount(TotalTaxes) + '|'); // Importe
            END ELSE
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          END;
          BlobManagement.Write(FormatAmount(RetainAmt) + '||'); // TotalImpuestosTrasladados
        END ELSE
          BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalStringAdvanceSettle.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvancePayment@1020056(VAR TempDocumentHeader@1020004 : TEMPORARY Record 10002;VAR TempDocumentLine@1020001 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020006 : Decimal;RetainAmt@1020003 : Decimal;VAR TempBlob@1020002 : Record 99008535);
    VAR
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      TaxCode@1020010 : Code[10];
      TaxType@1020009 : 'Translado,Retencion';
      TotalTaxes@1020011 : Decimal;
      TaxAmount@1310001 : Decimal;
      TaxPercentage@1310002 : Decimal;
    BEGIN
      WITH TempDocumentHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write("No." + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm("Payment Terms Code") + '|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // SubTotal
        BlobManagement.Write('XXX|'); // Moneda

        BlobManagement.Write(FormatDecimal(ROUND(SubTotal + RetainAmt,1,'='),0) + '|'); // Total
        BlobManagement.Write(FORMAT('I') + '|'); // TipoDeComprobante

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        END;

        BlobManagement.Write('PUE|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write('P01|'); // UsoCFDI

        // Write the one line
        BlobManagement.Write('84111506|'); // ClaveProdServ
        // BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
        BlobManagement.Write(FORMAT(1) + '|'); // Cantidad
        BlobManagement.Write('ACT|'); // ClaveUnidad
        BlobManagement.Write('Anticipo bien o servicio|'); // Descripcion
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // ValorUnitario
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // Importe
        BlobManagement.Write(FormatDecimal(0,0) + '|'); // Descuento

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN BEGIN
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          IF TaxAmount <> 0 THEN BEGIN
            BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            // TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
              BlobManagement.Write('Tasa' + '|'); // TipoFactor
              // BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(PADSTR(FormatAmount(TaxPercentage / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(
                FormatDecimal(TaxAmount,0) + '|') // Importe
            END ELSE
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          END;
        END;

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
            IF TaxAmount <> 0 THEN BEGIN
              // BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
              TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TaxPercentage / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(
                  FormatDecimal(TaxAmount,0) + '|') // Importe
              END ELSE
                BlobManagement.Write('Exento' + '|'); // TipoFactor
              TotalTaxes := TotalTaxes + TaxAmount;
            END;
          UNTIL TempDocumentLine.NEXT = 0;
        IF TotalTaxes <> 0 THEN
          BlobManagement.Write(FormatDecimal(TotalTaxes,0) + '|'); // TotalImpuestosTrasladados
        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalString33.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvanceReverse@1020014(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;DateTimeReqSent@1020005 : Text;VAR TempBlob@1020002 : Record 99008535;UUID@1020006 : Text[50];AdvanceAmount@1020007 : Decimal);
    VAR
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
    BEGIN
      WITH TempDocumentHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write("No." + '|'); // Folio
        BlobManagement.Write(DateTimeReqSent + '|'); // Fecha
        BlobManagement.Write('30|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // SubTotal
        BlobManagement.Write('XXX|'); // Moneda

        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // Total
        BlobManagement.Write(FORMAT('E') + '|'); // TipoDeComprobante

        IF NOT Export THEN
          GetCompanyInfo;

        BlobManagement.Write('PUE|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Related documents
        BlobManagement.Write('07|'); // TipoRelacion
        BlobManagement.Write(UUID + '|'); // UUID

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(Customer.Name) + '|'); // Nombre
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write('P01|'); // UsoCFDI

        BlobManagement.Write('84111506|'); // ClaveProdServ
        BlobManagement.Write(FORMAT(1) + '|'); // Cantidad
        BlobManagement.Write('ACT|'); // ClaveUnidad
        BlobManagement.Write('Aplicacion de anticipo|'); // Descripcion
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // ValorUnitario
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // Importe
        BlobManagement.Write(FormatDecimal(0,0) + '||'); // Descuento

        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalStringAdvanceReverse.xml',TRUE);
    END;

    LOCAL PROCEDURE CreateDigitalSignature@1020021(OriginalString@1020000 : Text;VAR SignedString@1020002 : Text;VAR SerialNoOfCertificateUsed@1020005 : Text[250];VAR Certificate@1020003 : Text);
    VAR
      EInvoiceObjectFactory@1020004 : Codeunit 10147;
      ISignatureProvider@1020001 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.SignatureProviders.ISignatureProvider";
    BEGIN
      GetGLSetup;
      IF NOT GLSetup."Sim. Signature" THEN BEGIN
        EInvoiceObjectFactory.GetSignatureProvider(ISignatureProvider);
        SignedString := ISignatureProvider.SignData(OriginalString,GLSetup."SAT Certificate Thumbprint");
        Certificate := ISignatureProvider.LastUsedCertificate;
        SerialNoOfCertificateUsed := ISignatureProvider.LastUsedCertificateSerialNo;
      END ELSE BEGIN
        SignedString := OriginalString;
        Certificate := '';
        SerialNoOfCertificateUsed := '';
      END;
    END;

    LOCAL PROCEDURE SaveAsPDFOnServer@1020017(DocumentHeaderRef@1020000 : RecordRef;ReportNo@1020001 : Integer) : Text;
    VAR
      SalesInvoiceHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020003 : Record 114;
      ServiceInvoiceHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
      FileManagement@1020007 : Codeunit 419;
      DestinationFilePath@1020006 : Text;
    BEGIN
      DestinationFilePath := FileManagement.GetDirectoryName(FileManagement.ServerTempFileName(''));
      DestinationFilePath := DELCHR(DestinationFilePath,'>','\');
      DestinationFilePath += '\';
      CASE DocumentHeaderRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.SETRECFILTER;
            DestinationFilePath += SalesInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.SETRECFILTER;
            DestinationFilePath += SalesCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(ServiceInvoiceHeader);
            ServiceInvoiceHeader.SETRECFILTER;
            DestinationFilePath += ServiceInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(ServiceCrMemoHeader);
            ServiceCrMemoHeader.SETRECFILTER;
            DestinationFilePath += ServiceCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceCrMemoHeader);
          END;
      END;
      EXIT(DestinationFilePath);
    END;

    LOCAL PROCEDURE SendEmail@1020008(SendToAddress@1020001 : Text;Subject@1020007 : Text;MessageBody@1020008 : Text;FilePathEDoc@1020000 : Text;PDFFilePath@1020002 : Text;SendPDF@1020003 : Boolean;XMLInstream@1170000000 : InStream);
    VAR
      SMTPMail@1020005 : Codeunit 400;
      SendOK@1020004 : Boolean;
    BEGIN
      GetGLSetup;
      IF GLSetup."Sim. Send" THEN
        EXIT;

      SMTPMail.CreateMessage(CompanyInfo.Name,CompanyInfo."E-Mail",SendToAddress,Subject,MessageBody,TRUE);

      SMTPMail.AddAttachmentStream(XMLInstream,FilePathEDoc);
      IF SendPDF THEN
        SMTPMail.AddAttachment(PDFFilePath,'');

      SendOK := SMTPMail.TrySend;

      IF SendPDF THEN
        DeleteServerFile(PDFFilePath);

      IF NOT SendOK THEN
        ERROR(Text016,SMTPMail.GetLastSendMailErrorText);
    END;

    [External]
    PROCEDURE ImportElectronicInvoice@1020027(VAR PurchaseHeader@1020000 : Record 38);
    VAR
      FileManagement@1020006 : Codeunit 419;
      XMLDOMManagement@1020008 : Codeunit 6224;
      XMLDoc@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Node@1020003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeList@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      ServerFileName@1020001 : Text;
      ClientFileName@1020004 : Text;
    BEGIN
      IF FileManagement.IsWebClient THEN
        ERROR(WebClientErr);

      ClientFileName := FileManagement.OpenFileDialog(FileDialogTxt,'',FileManagement.GetToFilterText('','.xml'));
      IF ClientFileName = '' THEN
        EXIT;

      ServerFileName := FileManagement.UploadFileToServer(ClientFileName);

      XMLDOMManagement.LoadXMLDocumentFromFile(ServerFileName,XMLDoc);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');

      // Import UUID
      NodeList := XMLDoc.DocumentElement.SelectNodes('//cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      IF NodeList.Count <> 0 THEN BEGIN
        Node := NodeList.Item(0);
        PurchaseHeader.VALIDATE("Fiscal Invoice Number PAC",Node.Attributes.GetNamedItem('UUID').Value);
        PurchaseHeader.MODIFY(TRUE);
      END ELSE
        ERROR(ImportFailedErr);
    END;

    LOCAL PROCEDURE WriteCompanyInfo33@1020002(VAR XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNewChild@1020004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH CompanyInfo DO BEGIN
        // Emisor
        AddElementCFDI(XMLCurrNode,'Emisor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',"RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',Name);
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscal',"SAT Tax Regime Classification");
      END;
    END;

    LOCAL PROCEDURE InitXML33@1020053(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE InitXML33AdvancePayment@1020041(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd ' +
        'http://www.sat.gob.mx/Pagos http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos10.xsd"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE AddElementCFDI@1000010(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'cfdi:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddElement@1020039(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddAttribute@1000009(VAR XMLDomDocParam@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDomNode@1000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttribName@1000002 : Text;AttribValue@1000003 : Text) : Boolean;
    VAR
      XMLDomAttribute@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      XMLDomAttribute := XMLDomDocParam.CreateAttribute(AttribName);
      IF ISNULL(XMLDomAttribute) THEN
        EXIT(FALSE);

      IF AttribValue <> '' THEN BEGIN
        XMLDomAttribute.Value := RemoveInvalidChars(AttribValue);
        XMLDomNode.Attributes.SetNamedItem(XMLDomAttribute);
      END;
      CLEAR(XMLDomAttribute);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FormatAmount@1000017(InAmount@1000000 : Decimal) : Text;
    BEGIN
      EXIT(FORMAT(ABS(InAmount),0,'<Precision,' + FORMAT(CurrencyDecimalPlaces) + ':' +
          FORMAT(CurrencyDecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE FormatAmountNoABS@1020035(InAmount@1000000 : Decimal) : Text;
    BEGIN
      EXIT(FORMAT(InAmount,0,'<Precision,' + FORMAT(CurrencyDecimalPlaces) + ':' +
          FORMAT(CurrencyDecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE FormatDecimal@1020074(InAmount@1000000 : Decimal;DecimalPlaces@1020000 : Integer) : Text;
    BEGIN
      EXIT(FORMAT(ABS(InAmount),0,'<Precision,' + FORMAT(DecimalPlaces) + ':' + FORMAT(DecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE RemoveInvalidChars@1020005(PassedStr@1020000 : Text) : Text;
    BEGIN
      PassedStr := DELCHR(PassedStr,'=','|');
      PassedStr := RemoveExtraWhiteSpaces(PassedStr);
      EXIT(PassedStr);
    END;

    LOCAL PROCEDURE GetReportNo@1020016(VAR ReportSelection@1020000 : Record 77) : Integer;
    BEGIN
      ReportSelection.SETFILTER("Report ID",'<>0');
      IF ReportSelection.FINDFIRST THEN
        EXIT(ReportSelection."Report ID");
      EXIT(0);
    END;

    LOCAL PROCEDURE FormatDateTime@1020040(DateTime@1020000 : DateTime) : Text[50];
    BEGIN
      EXIT(FORMAT(DateTime,0,'<Year4>-<Month,2>-<Day,2>T<Hours24,2>:<Minutes,2>:<Seconds,2>'));
    END;

    LOCAL PROCEDURE FormatAsDateTime@1020007(DocDate@1020000 : Date;DocTime@1020001 : Time) : Text[50];
    BEGIN
      EXIT(FormatDateTime(CREATEDATETIME(DocDate,DocTime)));
    END;

    LOCAL PROCEDURE GetGLSetup@1020009();
    BEGIN
      GLSetup.GET;
      GLSetup.TESTFIELD("SAT Certificate Thumbprint");
    END;

    LOCAL PROCEDURE GetCompanyInfo@1020015();
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD(Name);
      CompanyInfo.TESTFIELD("RFC No.");
      CompanyInfo.TESTFIELD(Address);
      CompanyInfo.TESTFIELD(City);
      CompanyInfo.TESTFIELD("Country/Region Code");
      CompanyInfo.TESTFIELD("Post Code");
      CompanyInfo.TESTFIELD("E-Mail");
      CompanyInfo.TESTFIELD("Tax Scheme");
    END;

    LOCAL PROCEDURE GetCustomer@1020020(CustomerNo@1020000 : Code[20]);
    BEGIN
      Customer.GET(CustomerNo);
      Customer.TESTFIELD("RFC No.");
      Customer.TESTFIELD("Country/Region Code");
    END;

    LOCAL PROCEDURE CalcSalesInvLineTotal@1020019(VAR SubTotal@1020002 : Decimal;VAR RetainAmt@1020001 : Decimal;DocumentNo@1020003 : Code[20];AdvanceSettle@1020004 : Boolean);
    VAR
      SalesInvoiceLine@1020000 : Record 113;
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
      IF AdvanceSettle THEN
        SalesInvoiceLine.SETFILTER("Prepayment Line",'=0');
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          SalesInvoiceLine.TESTFIELD(Description);
          SubTotal := SubTotal + (SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price");
          RetainAmt := RetainAmt + (SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount);
        UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcSalesCrMemoLineTotal@1020022(VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;DocumentNo@1020003 : Code[20]);
    VAR
      SalesCrMemoLine@1020002 : Record 115;
    BEGIN
      SalesCrMemoLine.RESET;
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
      IF SalesCrMemoLine.FINDSET THEN
        REPEAT
          SalesCrMemoLine.TESTFIELD(Description);
          SubTotal := SubTotal + (SalesCrMemoLine.Quantity * SalesCrMemoLine."Unit Price");
          RetainAmt := RetainAmt + (SalesCrMemoLine."Amount Including VAT" - SalesCrMemoLine.Amount);
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcServiceInvLineTotal@1020026(VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;VAR AmontInclVAT@1020004 : Decimal;DocumentNo@1020003 : Code[20]);
    VAR
      ServiceInvoiceLine@1020002 : Record 5993;
    BEGIN
      ServiceInvoiceLine.RESET;
      ServiceInvoiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
      IF ServiceInvoiceLine.FINDSET THEN
        REPEAT
          ServiceInvoiceLine.TESTFIELD(Description);
          SubTotal := SubTotal + (ServiceInvoiceLine.Quantity * ServiceInvoiceLine."Unit Price");
          RetainAmt := RetainAmt + (ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount);
          AmontInclVAT := AmontInclVAT + ServiceInvoiceLine."Amount Including VAT";
        UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcServiceCrMemoLineTotal@1020023(VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;VAR AmontInclVAT@1020004 : Decimal;DocumentNo@1020003 : Code[20]);
    VAR
      ServiceCrMemoLine@1020002 : Record 5995;
    BEGIN
      ServiceCrMemoLine.RESET;
      ServiceCrMemoLine.SETRANGE("Document No.",DocumentNo);
      ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
      IF ServiceCrMemoLine.FINDSET THEN
        REPEAT
          ServiceCrMemoLine.TESTFIELD(Description);
          SubTotal := SubTotal + (ServiceCrMemoLine.Quantity * ServiceCrMemoLine."Unit Price");
          RetainAmt := RetainAmt + (ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount);
          AmontInclVAT := AmontInclVAT + ServiceCrMemoLine."Amount Including VAT";
        UNTIL ServiceCrMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RemoveExtraWhiteSpaces@1020018(StrParam@1020000 : Text) StrReturn : Text;
    VAR
      Cntr1@1020001 : Integer;
      Cntr2@1020002 : Integer;
      WhiteSpaceFound@1020003 : Boolean;
    BEGIN
      StrParam := DELCHR(StrParam,'<>',' ');
      WhiteSpaceFound := FALSE;
      Cntr2 := 1;
      FOR Cntr1 := 1 TO STRLEN(StrParam) DO
        IF StrParam[Cntr1] <> ' ' THEN BEGIN
          WhiteSpaceFound := FALSE;
          StrReturn[Cntr2] := StrParam[Cntr1];
          Cntr2 += 1;
        END ELSE
          IF NOT WhiteSpaceFound THEN BEGIN
            WhiteSpaceFound := TRUE;
            StrReturn[Cntr2] := StrParam[Cntr1];
            Cntr2 += 1;
          END;
    END;

    LOCAL PROCEDURE InvokeMethod@1020036(VAR XMLDoc@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";MethodType@1020004 : 'Request Stamp,Cancel') : Text;
    VAR
      PACWebService@1020002 : Record 10000;
      PACWebServiceDetail@1020000 : Record 10001;
      EInvoiceObjectFactory@1020005 : Codeunit 10147;
      IWebServiceInvoker@1020003 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.WebServiceInvokers.IWebServiceInvoker";
    BEGIN
      GetGLSetup;
      IF GLSetup."Sim. Request Stamp" THEN
        EXIT;
      IF GLSetup."PAC Environment" = GLSetup."PAC Environment"::Disabled THEN
        ERROR(Text014,GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION,GLSetup."PAC Environment");

      EInvoiceObjectFactory.GetWebServiceInvoker(IWebServiceInvoker);

      // Depending on the chosen service provider, this section needs to be modified.
      // The parameters for the invoked method need to be added in the correct order.
      CASE MethodType OF
        MethodType::"Request Stamp":
          BEGIN
            IF NOT PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::"Request Stamp") THEN BEGIN
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::"Request Stamp";
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            END;
            IWebServiceInvoker.AddParameter(XMLDoc.InnerXml);
            IWebServiceInvoker.AddParameter(FALSE);
          END;
        MethodType::Cancel:
          BEGIN
            IF NOT PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::Cancel) THEN
              BEGIN
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::Cancel;
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            END;
            IWebServiceInvoker.AddParameter(XMLDoc.InnerXml);
          END;
      END;

      PACWebService.GET(GLSetup."PAC Code");
      IF PACWebService."Certificate Thumbprint" = '' THEN
        ERROR(Text012,PACWebService.FIELDCAPTION("Certificate Thumbprint"),PACWebService.TABLECAPTION,GLSetup.TABLECAPTION);

      EXIT(IWebServiceInvoker.InvokeMethod(PACWebServiceDetail.Address,
          PACWebServiceDetail."Method Name",PACWebService."Certificate Thumbprint"));
    END;

    LOCAL PROCEDURE GetQRCode@1020038(QRCodeInput@1020001 : Text[95]) QRCodeFileName : Text;
    VAR
      EInvoiceObjectFactory@1020002 : Codeunit 10147;
      IBarCodeProvider@1020000 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.BarcodeProviders.IBarcodeProvider";
    BEGIN
      EInvoiceObjectFactory.GetBarCodeProvider(IBarCodeProvider);
      QRCodeFileName := IBarCodeProvider.GetBarcode(QRCodeInput);
    END;

    LOCAL PROCEDURE CreateQRCodeInput@1020046(IssuerRFC@1020000 : Text;CustomerRFC@1020001 : Text;Amount@1020002 : Decimal;UUID@1020003 : Text) QRCodeInput : Text[95];
    BEGIN
      QRCodeInput :=
        '?re=' +
        COPYSTR(IssuerRFC,1,13) +
        '&rr=' +
        COPYSTR(CustomerRFC,1,13) +
        '&tt=' +
        CONVERTSTR(FORMAT(Amount,0,'<Integer,10><Filler Character,0><Decimals,7>'),',','.') +
        '&id=' +
        COPYSTR(FORMAT(UUID),1,36);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesInv@1020049(VAR SalesInvoiceHeader@1020000 : Record 112) : Text[50];
    BEGIN
      IF SalesInvoiceHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(SalesInvoiceHeader."Date/Time First Req. Sent");

      SalesInvoiceHeader."Date/Time First Req. Sent" := FormatAsDateTime(SalesInvoiceHeader."Document Date",TIME);
      EXIT(SalesInvoiceHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesCr@1020050(VAR SalesCrMemoHeader@1020000 : Record 114) : Text[50];
    BEGIN
      IF SalesCrMemoHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(SalesCrMemoHeader."Date/Time First Req. Sent");

      SalesCrMemoHeader."Date/Time First Req. Sent" := FormatAsDateTime(SalesCrMemoHeader."Document Date",TIME);
      EXIT(SalesCrMemoHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServInv@1020051(VAR ServiceInvoiceHeader@1020000 : Record 5992) : Text[50];
    BEGIN
      IF ServiceInvoiceHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(ServiceInvoiceHeader."Date/Time First Req. Sent");

      ServiceInvoiceHeader."Date/Time First Req. Sent" := FormatAsDateTime(ServiceInvoiceHeader."Document Date",TIME);
      EXIT(ServiceInvoiceHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServCr@1020052(VAR ServiceCrMemoHeader@1020000 : Record 5994) : Text[50];
    BEGIN
      IF ServiceCrMemoHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(ServiceCrMemoHeader."Date/Time First Req. Sent");

      ServiceCrMemoHeader."Date/Time First Req. Sent" := FormatAsDateTime(ServiceCrMemoHeader."Document Date",TIME);
      EXIT(ServiceCrMemoHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE DeleteServerFile@1020047(ServerFileName@1020000 : Text);
    BEGIN
      IF ERASE(ServerFileName) THEN;
    END;

    LOCAL PROCEDURE CreateQRCode@1020089(QRCodeInput@1020047 : Text[95];VAR TempBLOB@1020048 : Record 99008535);
    VAR
      FileManagement@1020000 : Codeunit 419;
      QRCodeFileName@1020049 : Text;
    BEGIN
      CLEAR(TempBLOB);
      QRCodeFileName := GetQRCode(QRCodeInput);
      FileManagement.BLOBImportFromServerFile(TempBLOB,QRCodeFileName);
      DeleteServerFile(QRCodeFileName);
    END;

    LOCAL PROCEDURE TextToBlob@1020048(VAR TempBlob@1020000 : Record 99008535;Content@1020001 : Text);
    VAR
      OutStream@1020002 : OutStream;
      BigString@1020003 : BigText;
    BEGIN
      CLEAR(TempBlob);
      BigString.ADDTEXT(Content);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      BigString.WRITE(OutStream);
    END;

    [External]
    PROCEDURE CreateAbstractDocument@1020090(DocumentHeaderVariant@1020000 : Variant;VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020002 : TEMPORARY Record 10003;AdvanceSettle@1020007 : Boolean);
    VAR
      SalesInvoiceHeader@1020005 : Record 112;
      SalesInvoiceLine@1020006 : Record 113;
      SalesCrMemoHeader@1310002 : Record 114;
      SalesCrMemoLine@1310003 : Record 115;
      ServiceInvoiceHeader@1310001 : Record 5992;
      ServiceInvoiceLine@1310004 : Record 5993;
      ServiceCrMemoHeader@1310000 : Record 5994;
      ServiceCrMemoLine@1310005 : Record 5995;
      DataTypeManagement@1020003 : Codeunit 701;
      RecRef@1020004 : RecordRef;
      LineVatPercent@1020009 : Decimal;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentHeaderVariant,RecRef);
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvoiceHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesInvoiceHeader);
            IF TempDocumentHeader."Currency Code" = '' THEN BEGIN
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            END;
            TempDocumentHeader.INSERT;

            SalesInvoiceLine.RESET;
            SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
            SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
            IF AdvanceSettle THEN
              SalesInvoiceLine.SETFILTER("Prepayment Line",'=0');

            IF SalesInvoiceLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(SalesInvoiceLine);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + SalesInvoiceLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              UNTIL SalesInvoiceLine.NEXT = 0;
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesCrMemoHeader);
            IF TempDocumentHeader."Currency Code" = '' THEN BEGIN
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            END;
            TempDocumentHeader.INSERT;

            SalesCrMemoLine.RESET;
            SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
            SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
            IF SalesCrMemoLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(SalesCrMemoLine);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + SalesCrMemoLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              UNTIL SalesCrMemoLine.NEXT = 0;
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServiceInvoiceHeader);
            TempDocumentHeader.TRANSFERFIELDS(ServiceInvoiceHeader);
            IF TempDocumentHeader."Currency Code" = '' THEN BEGIN
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            END;
            TempDocumentHeader.INSERT;

            ServiceInvoiceLine.RESET;
            ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
            ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
            IF ServiceInvoiceLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(ServiceInvoiceLine);
                TempDocumentLine.Type := MapServiceTypeToTempDocType(ServiceInvoiceLine.Type);
                LineVatPercent :=
                  ((ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount) / ServiceInvoiceLine.Amount);
                TempDocumentLine."VAT %" := (LineVatPercent * 100);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + ServiceInvoiceLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              UNTIL ServiceInvoiceLine.NEXT = 0;
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServiceCrMemoHeader);
            TempDocumentHeader.TRANSFERFIELDS(ServiceCrMemoHeader);
            IF TempDocumentHeader."Currency Code" = '' THEN BEGIN
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            END;
            TempDocumentHeader.INSERT;

            ServiceCrMemoLine.RESET;
            ServiceCrMemoLine.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
            ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
            IF ServiceCrMemoLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(ServiceCrMemoLine);
                TempDocumentLine.Type := MapServiceTypeToTempDocType(ServiceCrMemoLine.Type);
                LineVatPercent :=
                  ((ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount) / ServiceCrMemoLine.Amount);
                TempDocumentLine."VAT %" := (LineVatPercent * 100);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + ServiceCrMemoLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              UNTIL ServiceCrMemoLine.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE ValidateSalesInvoiceValues@1020001(SalesInvoiceNumber@1020000 : Code[20]) : Boolean;
    VAR
      SalesInvoiceHeader@1020004 : Record 112;
      SalesInvoiceLine@1020005 : Record 113;
      SATUtilities@1020001 : Codeunit 27030;
      SubTotal@1020003 : Decimal;
      RetainAmt@1020002 : Decimal;
      Passed@1020006 : Boolean;
    BEGIN
      Passed := FALSE;
      SalesInvoiceHeader.GET(SalesInvoiceNumber);
      // Comprobante
      CalcSalesInvLineTotal(SubTotal,RetainAmt,SalesInvoiceNumber,FALSE);
      IF SubTotal = 0 THEN
        EXIT(Passed);

      IF SalesInvoiceHeader."Currency Code" = '' THEN
        EXIT(Passed);

      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      IF SalesInvoiceHeader."Amount Including VAT" = 0 THEN
        EXIT(Passed);

      IF SalesInvoiceHeader."Amount Including VAT" = 0 THEN
        EXIT(Passed);

      GetCompanyInfo;
      IF CompanyInfo."SAT Postal Code" = '' THEN
        EXIT(Passed);

      // CFDIRelacionados
      GetCustomer(SalesInvoiceHeader."Bill-to Customer No.");
      IF Customer."CFDI Relation" = '' THEN
        EXIT(Passed);

      // Emisor
      IF (CompanyInfo."RFC No." = '') OR (CompanyInfo."SAT Tax Regime Classification" = '') THEN
        EXIT(Passed);

      // Receptor
      IF (Customer."RFC No." = '') OR (Customer."CFDI Purpose" = '') THEN
        EXIT(Passed);

      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          IF SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item THEN
            IF SATUtilities.GetSATItemClassification(SalesInvoiceLine.Type,SalesInvoiceLine."No.") = '' THEN // ClaveProdServ
              EXIT(Passed);
          IF SalesInvoiceLine.Quantity = 0 THEN // Cantidad
            EXIT(Passed);
          IF SATUtilities.GetSATUnitofMeasure(SalesInvoiceLine."Unit of Measure Code") = '' THEN // Unidad
            EXIT(Passed);
          IF SalesInvoiceLine.Description = '' THEN // Descripcion
            EXIT(Passed);
          IF SalesInvoiceLine."Unit Price" = 0 THEN // ValorUnitario
            EXIT(Passed);
          IF (SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price") = 0 THEN  // Importe
            EXIT(Passed);

          // Impuestos
          IF SalesInvoiceLine.Amount = 0 THEN
            EXIT(Passed);

          // NumeroPedimento for InformacionAduanera element?
          // Numero for CuentaPredial element?

          // All of the required fields in the Parte section have been valided in other sections already
        UNTIL SalesInvoiceLine.NEXT = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCertificateSerialNo@1020061() : Text;
    VAR
      TempBlob@1020005 : Record 99008535;
      BlobManagement@1020004 : Codeunit 10146;
      EInvoiceObjectFactory@1020001 : Codeunit 10147;
      ISignatureProvider@1020000 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.SignatureProviders.ISignatureProvider";
      SerialNo@1020002 : Text;
    BEGIN
      GetGLSetup;
      IF NOT GLSetup."Sim. Signature" THEN BEGIN
        EInvoiceObjectFactory.GetSignatureProvider(ISignatureProvider);

        BlobManagement.Get(TempBlob);

        ISignatureProvider.SignData('DummyString',GLSetup."SAT Certificate Thumbprint");
        SerialNo := ISignatureProvider.LastUsedCertificateSerialNo;
        EXIT(SerialNo);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE TaxCodeFromTaxRate@1020006(TaxRate@1020000 : Decimal;TaxType@1020001 : 'Translado,Retencion') : Code[10];
    BEGIN
      IF (TaxType = TaxType::Translado) AND (TaxRate = 0.16) THEN
        EXIT('002'); // IVA

      IF (TaxType = TaxType::Retencion) AND ((TaxRate >= 0.0) AND (TaxRate <= 0.16)) THEN
        EXIT('002'); // IVA

      IF (TaxType = TaxType::Retencion) AND ((TaxRate >= 0.0) AND (TaxRate <= 0.35)) THEN
        EXIT('001'); // ISR

      CASE TaxRate OF
        0.265,0.3,0.53,0.5,1.6,0.304,0.25,0.09,0.08,0.07,0.06,0.03:
          IF (TaxRate = 0.03) AND (TaxType <> TaxType::Retencion) THEN
            EXIT('003'); // IEPS
      END;

      IF (TaxRate >= 0.0) AND (TaxRate <= 43.77) THEN
        EXIT('003'); // IEPS
    END;

    [External]
    PROCEDURE RequestPaymentStampDocument@1020058(VAR CustLedgerEntry@1020000 : Record 21);
    VAR
      SourceCodeSetup@1020004 : Record 242;
      Selection@1020003 : Integer;
      ElectronicDocumentStatus@1020006 : Option;
    BEGIN
      IF CustLedgerEntry."Document Type" <> CustLedgerEntry."Document Type"::Payment THEN
        ERROR(StampErr,CustLedgerEntry."Document Type");

      // Called from Send Action
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;
      Selection := STRMENU(Text008,3);

      ElectronicDocumentStatus := CustLedgerEntry."Electronic Document Status";
      CASE Selection OF
        1:// Request Stamp
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestPaymentStamp(CustLedgerEntry);
          END;
        2:// Send
          BEGIN
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            SendPayment(CustLedgerEntry);
          END;
        3:// Request Stamp and Send
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestPaymentStamp(CustLedgerEntry);
            COMMIT;
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            SendPayment(CustLedgerEntry);
          END;
      END;
    END;

    PROCEDURE RequestPaymentStamp@1020024(CustLedgerEntry@1020000 : Record 21);
    VAR
      Customer@1020004 : Record 18;
      DetailedCustLedgEntry@1020015 : Record 379;
      TempDetailedCustLedgEntry@1020017 : TEMPORARY Record 379;
      TempBlobOriginalString@1020008 : Record 99008535;
      TempBlobDigitalStamp@1020019 : Record 99008535;
      XMLDOMManagement@1020010 : Codeunit 6224;
      OutStrOriginalDoc@1020012 : OutStream;
      OutStrSignedDoc@1020020 : OutStream;
      XMLDoc@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Environment@1020022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
      OriginalString@1020006 : Text;
      SignedString@1020007 : Text;
      Certificate@1020005 : Text;
      Response@1020002 : Text;
      DateTimeFirstReqSent@1020003 : Text[50];
      CertificateSerialNo@1020014 : Text[250];
    BEGIN
      Export := TRUE;
      Customer.GET(CustLedgerEntry."Customer No.");
      IF NOT CheckPaymentStamp(CustLedgerEntry) THEN
        ERROR(UnableToStampErr);

      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1|=%2',
        DetailedCustLedgEntry."Initial Document Type"::Invoice,
        DetailedCustLedgEntry."Initial Document Type"::"Credit Memo");
      IF DetailedCustLedgEntry.FINDSET THEN BEGIN
        REPEAT
          CLEAR(TempDetailedCustLedgEntry);
          TempDetailedCustLedgEntry.TRANSFERFIELDS(DetailedCustLedgEntry,TRUE);
          TempDetailedCustLedgEntry.INSERT;
        UNTIL DetailedCustLedgEntry.NEXT = 0;
      END;
      DateTimeFirstReqSent := GetDateTimeOfFirstReqPayment(CustLedgerEntry);
      CurrencyDecimalPlaces := GetCurrencyDecimalPlaces(CustLedgerEntry."Currency Code");

      // Create Payment Digital Stamp
      // UUID := GetPaymentInvoiceUUID(CustLedgerEntry."Entry No.");
      CreateOriginalPaymentStr33(Customer,CustLedgerEntry,TempDetailedCustLedgEntry,DateTimeFirstReqSent,
        TempBlobOriginalString);

      OriginalString := TempBlobOriginalString.ReadAsText(Environment.NewLine,TEXTENCODING::MSDos);
      CreateDigitalSignature(OriginalString,SignedString,CertificateSerialNo,Certificate);
      TextToBlob(TempBlobDigitalStamp,SignedString);

      // Create Payment Original XML
      CreateXMLPayment33(
        Customer,CustLedgerEntry,TempDetailedCustLedgEntry,DateTimeFirstReqSent,SignedString,
        Certificate,CertificateSerialNo,XMLDoc);

      WITH CustLedgerEntry DO BEGIN
        "Original String" := TempBlobOriginalString.Blob;
        "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
        "Certificate Serial No." := CertificateSerialNo;
        "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
        "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
        XMLDoc.Save(OutStrOriginalDoc);
        MODIFY;
        // CALCFIELDS("Original Document XML");
        // TempBlob.Blob := "Original Document XML";
        // FileManagement.BLOBExport(TempBlob,'PaymentXML.xml',TRUE);
      END;

      COMMIT;

      Response := InvokeMethod(XMLDoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
        XMLDocResult.Save(OutStrSignedDoc);
      END;

      // WITH CustLedgerEntry DO BEGIN
      // CALCFIELDS("Signed Document XML");
      // TempBlob.Blob := "Signed Document XML";
      // FileManagement.BLOBExport(TempBlob,'SignedPaymentDocument.xml',TRUE);
      // END;

      ProcessResponseEPayment(CustLedgerEntry,EDocAction::"Request Stamp");
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE CheckPaymentStamp@1020063(CustLedgerEntry@1020000 : Record 21) : Boolean;
    VAR
      CustLedgerEntryLoc@1020001 : Record 21;
      CustLedgerEntryLoc2@1020003 : Record 21;
      DetailedCustLedgEntry@1020002 : Record 379;
      ServiceCrMemoHeader@1020004 : Record 5994;
      SalesCrMemoHeader@1020005 : Record 114;
      ServiceSourceCode@1020006 : Code[10];
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Invoice);
      IF DetailedCustLedgEntry.FINDFIRST THEN BEGIN
        CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Cust. Ledger Entry No.");
        IF CustLedgerEntryLoc.FINDFIRST THEN BEGIN
          CustLedgerEntryLoc2.SETRANGE("Closed by Entry No.",CustLedgerEntryLoc."Entry No.");
          CustLedgerEntryLoc2.SETRANGE("Date/Time Stamped",'');
          CustLedgerEntryLoc2.SETCURRENTKEY("Entry No.");
          IF CustLedgerEntryLoc2.FINDSET THEN
            REPEAT
              IF CustLedgerEntryLoc2."Entry No." < CustLedgerEntry."Entry No." THEN
                // Before we throw warning, check to see if this is a credit memo
                IF CustLedgerEntryLoc2."Document Type" = CustLedgerEntryLoc2."Document Type"::"Credit Memo" THEN BEGIN
                  // Find the corresponding record
                  SourceCodeSetup.GET;
                  IF SourceCodeSetup."Service Management" <> '' THEN
                    ServiceSourceCode := SourceCodeSetup."Service Management";
                  IF CustLedgerEntryLoc2."Source Code" = ServiceSourceCode THEN
                    IF ServiceCrMemoHeader.GET(CustLedgerEntryLoc2."Document No.") THEN
                      IF ServiceCrMemoHeader."Fiscal Invoice Number PAC" <> '' THEN
                        EXIT(TRUE);
                  IF SalesCrMemoHeader.GET(CustLedgerEntryLoc2."Document No.") THEN
                    IF SalesCrMemoHeader."Fiscal Invoice Number PAC" <> '' THEN
                      EXIT(TRUE);
                  EXIT(FALSE);
                END;
              IF CustLedgerEntryLoc2."Entry No." = CustLedgerEntry."Entry No." THEN
                EXIT(TRUE);
            UNTIL CustLedgerEntryLoc2.NEXT = 0
          ELSE
            EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE SumStampedPayments@1020085(CustLedgerEntry@1020000 : Record 21) : Decimal;
    VAR
      DetailedCustLedgEntry@1020002 : Record 379;
      CustLedgerEntryLoc@1020001 : Record 21;
      CustLedgerEntryLoc2@1020003 : Record 21;
      StampedAmount@1020004 : Decimal;
    BEGIN
      DetailedCustLedgEntry.RESET;
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Invoice);
      IF DetailedCustLedgEntry.FINDFIRST THEN BEGIN
        CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Cust. Ledger Entry No.");
        IF CustLedgerEntryLoc.FINDFIRST THEN BEGIN
          CustLedgerEntryLoc2.SETRANGE("Closed by Entry No.",CustLedgerEntryLoc."Entry No.");
          CustLedgerEntryLoc2.SETFILTER("Date/Time Stamped",'<>%1','');
          CustLedgerEntryLoc2.SETCURRENTKEY("Entry No.");
          IF CustLedgerEntryLoc2.FINDSET THEN
            REPEAT
              StampedAmount += CustLedgerEntryLoc2."Closed by Amount";
            UNTIL CustLedgerEntryLoc2.NEXT = 0;
          EXIT(StampedAmount);
        END;
      END;
    END;

    LOCAL PROCEDURE SendPayment@1020059(VAR CustLedgerEntry@1020004 : Record 21);
    BEGIN
      SendEPayment(CustLedgerEntry);
    END;

    LOCAL PROCEDURE SendEPayment@1020060(VAR CustLedgerEntry@1020000 : Record 21);
    VAR
      CustLedgerEntryLoc@1020002 : Record 21;
      CustLedgerEntryLoc2@1020004 : Record 21;
      TempBlob@1020001 : Record 99008535;
      XMLInstream@1020003 : InStream;
      FileNameEdoc@1020006 : Text;
    BEGIN
      GetCustomer(CustLedgerEntry."Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF CustLedgerEntry."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(PaymentsAlreadySentQst) THEN
          ERROR('');

      // Export XML
      CustLedgerEntry.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := CustLedgerEntry."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := CustLedgerEntry."Document No." + '.xml';
      CustLedgerEntryLoc2."Signed Document XML" := TempBlob.Blob;
      CustLedgerEntryLoc2."Signed Document XML" := CustLedgerEntryLoc2."Signed Document XML";

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(PaymentNoMsg,CustLedgerEntry."Document No."),
        STRSUBSTNO(PaymentAttachmentMsg,CustLedgerEntry."Document No."),FileNameEdoc,'',FALSE,XMLInstream);

      CustLedgerEntryLoc.GET(CustLedgerEntry."Entry No.");
      CustLedgerEntryLoc."No. of E-Documents Sent" := CustLedgerEntryLoc."No. of E-Documents Sent" + 1;
      IF NOT CustLedgerEntryLoc."Electronic Document Sent" THEN
        CustLedgerEntryLoc."Electronic Document Sent" := TRUE;
      CustLedgerEntryLoc."Electronic Document Status" := CustLedgerEntryLoc."Electronic Document Status"::Sent;
      CustLedgerEntryLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      CustLedgerEntryLoc.MODIFY;

      MESSAGE(Text001,CustLedgerEntry."Document No.");
    END;

    LOCAL PROCEDURE ProcessResponseEPayment@1020073(VAR CustLedgerEntry@1020000 : Record 21;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text[250];
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      // Switch from sales hdr Bill-toCustomerNo. to just Customer no.
      GetCustomer(CustLedgerEntry."Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDocResult) THEN
        XMLDocResult := XMLDocResult.XmlDocument;

      CustLedgerEntry.CALCFIELDS("Signed Document XML");
      CustLedgerEntry."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
      CLEAR(CustLedgerEntry."Signed Document XML");
      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      CustLedgerEntry."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        CustLedgerEntry."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        CustLedgerEntry."Error Description" := ErrorDescription;
        CASE Action OF
          EDocAction::"Request Stamp":
            CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Cancel Error";
              CustLedgerEntry."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      CustLedgerEntry."Error Code" := '';
      CustLedgerEntry."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::Canceled;
        EXIT;
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      CustLedgerEntry."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);
      // *****Does any of this need to change for Payments?
      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('pago10','http://www.sat.gob.mx/Pagos');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      CustLedgerEntry."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      CustLedgerEntry."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      CustLedgerEntry."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      CustLedgerEntry."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      CustLedgerEntry.CALCFIELDS(Amount);
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",CustLedgerEntry.Amount,
          FORMAT(CustLedgerEntry."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      CustLedgerEntry."QR Code" := TempBlob.Blob;

      // FileManagement.BLOBExport(TempBlob,'PaymentResponse.xml',TRUE);
    END;

    LOCAL PROCEDURE CreateXMLPayment33@1020062(VAR TempCustomer@1020000 : TEMPORARY Record 18;VAR TempCustLedgerEntry@1020009 : TEMPORARY Record 21;VAR TempDetailedCustLedgEntry@1020013 : TEMPORARY Record 379;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SalesInvoiceHeader@1020010 : Record 112;
      CustLedgerEntry2@1020016 : Record 21;
      CustomerBankAccount@1020017 : Record 287;
      ServiceInvoiceHeader@1020021 : Record 5992;
      SalesCrMemoHeader@1020020 : Record 114;
      ServiceCrMemoHeader@1020019 : Record 5994;
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SumOfStamped@1020003 : Decimal;
      ServiceSourceCode@1020018 : Code[10];
      ServiceDoc@1020015 : Boolean;
      InvoiceDoc@1020004 : Boolean;
      PaymentAmount@1020023 : Decimal;
      UUID@1020014 : Text[50];
    BEGIN
      InitPaymentXML33(XMLDoc,XMLCurrNode);
      WITH TempCustLedgerEntry DO BEGIN
        IF TempCustomer."Currency Code" = '' THEN BEGIN
          TempCustomer."Currency Code" := GLSetup."LCY Code";
          "Original Currency Factor" := 1.0;
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"Document No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal','0');
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');
        AddAttribute(XMLDoc,XMLCurrNode,'Total','0');
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','P');// Pago
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',TempCustomer."RFC No.");
        IF SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',TempCustomer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion','');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad','1');
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Unidad','');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Pago');
        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario','0.00');
        AddAttribute(XMLDoc,XMLCurrNode,'Importe','0.00');
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Complemento
        AddElementCFDI(XMLCurrNode,'Complemento','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Pagos
        DocNameSpace := 'http://www.sat.gob.mx/Pagos';
        AddElementPago(XMLCurrNode,'Pagos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'xmlns:pago10','http://www.sat.gob.mx/Pagos');
        AddAttribute(XMLDoc,XMLCurrNode,'Version','1.0');

        // Pagos->Pago
        AddElementPago(XMLCurrNode,'Pago','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaPago',FormatAsDateTime("Posting Date",0T));
        AddAttribute(XMLDoc,XMLCurrNode,'FormaDePagoP',SATUtilities.GetSATPaymentTerm(TempCustomer."Payment Terms Code"));
        IF TempCustomer."Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'MonedaP',TempCustomer."Currency Code");// *********NEW/CHANGED
          IF (TempCustomer."Currency Code" <> 'MXN') AND (TempCustomer."Currency Code" <> 'XXX') THEN
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambioP',FormatDecimal(1 / "Original Currency Factor",6));
        END;

        PaymentAmount := 0;
        IF TempDetailedCustLedgEntry.FINDSET THEN
          REPEAT
            PaymentAmount := PaymentAmount + ABS(TempDetailedCustLedgEntry.Amount);
          UNTIL TempDetailedCustLedgEntry.NEXT = 0;
        AddAttribute(XMLDoc,XMLCurrNode,'Monto',FormatAmount(PaymentAmount));
        // AddAttribute(XMLDoc,XMLCurrNode,'Monto',FormatAmount(Amount));

        IF (TempCustomer."Currency Code" <> 'MXN') AND (TempCustomer."Currency Code" <> 'XXX') THEN
          IF TempCustomer."Preferred Bank Account Code" <> '' THEN
            AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt',TempCustomer."Preferred Bank Account Code")
          ELSE BEGIN
            CustomerBankAccount.RESET;
            CustomerBankAccount.SETRANGE("Customer No.",TempCustomer."No.");
            IF CustomerBankAccount.FINDFIRST THEN // Find the first one...
              AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt',CustomerBankAccount."Bank Account No.")
            ELSE // Put in a blank number
              AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt','');
          END;

        IF TempDetailedCustLedgEntry.FINDSET THEN
          REPEAT
            // DoctoRelacionado
            ServiceDoc := FALSE;
            InvoiceDoc := FALSE;
            AddElementPago(XMLCurrNode,'DoctoRelacionado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.");
            SourceCodeSetup.GET;
            IF SourceCodeSetup."Service Management" <> '' THEN
              ServiceSourceCode := SourceCodeSetup."Service Management";
            IF CustLedgerEntry2."Source Code" = ServiceSourceCode THEN
              ServiceDoc := TRUE;
            IF TempDetailedCustLedgEntry."Initial Document Type" = TempDetailedCustLedgEntry."Initial Document Type"::Invoice THEN
              InvoiceDoc := TRUE;

            IF ServiceDoc THEN
              IF InvoiceDoc THEN
                ServiceInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              ELSE
                ServiceCrMemoHeader.GET(CustLedgerEntry2."Document No.")
            ELSE
              IF InvoiceDoc THEN
                SalesInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              ELSE
                SalesCrMemoHeader.GET(CustLedgerEntry2."Document No.");

            UUID := GetPaymentInvoiceUUID("Entry No.",InvoiceDoc);
            AddAttribute(XMLDoc,XMLCurrNode,'IdDocumento',UUID);// this needs to be changed

            AddAttribute(XMLDoc,XMLCurrNode,'Folio',CustLedgerEntry2."Document No.");
            IF CustLedgerEntry2."Currency Code" <> '' THEN
              AddAttribute(XMLDoc,XMLCurrNode,'MonedaDR',CustLedgerEntry2."Currency Code")
            ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'MonedaDR',GLSetup."LCY Code");

            AddAttribute(XMLDoc,XMLCurrNode,'MetodoDePagoDR','PUE');
            AddAttribute(XMLDoc,XMLCurrNode,'NumParcialidad','1');
            IF ServiceDoc THEN
              IF InvoiceDoc THEN BEGIN
                ServiceInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmount(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              END ELSE BEGIN
                ServiceCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmountNoABS(ServiceCrMemoHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmountNoABS(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(-1 * ServiceCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              END;
            IF NOT ServiceDoc THEN
              IF InvoiceDoc THEN BEGIN
                SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmount(SalesInvoiceHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmount(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(SalesInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              END ELSE BEGIN
                SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmountNoABS(SalesCrMemoHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmountNoABS(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(-1 * SalesCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              END;
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL TempDetailedCustLedgEntry.NEXT = 0;

        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
      END;
    END;

    [External]
    PROCEDURE CreateOriginalPaymentStr33@1020064(VAR TempCustomer@1020001 : TEMPORARY Record 18;VAR TempCustLedgerEntry@1020003 : TEMPORARY Record 21;VAR TempDetailedCustLedgEntry@1020010 : TEMPORARY Record 379;DateTimeFirstReqSent@1020005 : Text;VAR TempBlob@1020002 : Record 99008535);
    VAR
      SalesInvoiceHeader@1020012 : Record 112;
      CustLedgerEntry2@1020006 : Record 21;
      CustomerBankAccount@1020004 : Record 287;
      ServiceInvoiceHeader@1020011 : Record 5992;
      SalesCrMemoHeader@1020017 : Record 114;
      ServiceCrMemoHeader@1020016 : Record 5994;
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      SumOfStamped@1020007 : Decimal;
      ServiceSourceCode@1020013 : Code[10];
      ServiceDoc@1020014 : Boolean;
      InvoiceDoc@1020018 : Boolean;
      PaymentAmount@1020020 : Decimal;
      UUID@1020009 : Text[50];
    BEGIN
      WITH TempCustLedgerEntry DO BEGIN
        IF TempCustomer."Currency Code" = '' THEN BEGIN
          TempCustomer."Currency Code" := GLSetup."LCY Code";
          "Original Currency Factor" := 1.0;
        END;
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write("Document No." + '|');// Folio...PaymentNo.
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write('0|');// Subtotal
        BlobManagement.Write('XXX|');// Monenda***notWritingOptional
        BlobManagement.Write('0|');// Total
        BlobManagement.Write('P|');// TipoDeComprobante
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|');// LugarExpedicion

        // Emisor
        GetCompanyInfo;
        BlobManagement.Write(CompanyInfo."RFC No." + '|');// RfcNoFromCompany
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');// Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|');// RegimenFiscal

        // Receptor
        BlobManagement.Write(TempCustomer."RFC No." + '|');// ReceptorCustomerRfcNo.
        IF SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") + '|');// ResidenciaFiscal
          BlobManagement.Write(TempCustomer."VAT Registration No." + '|');// NumRegIdTrib
        END;
        BlobManagement.Write('P01|');// UsoCFDIHCtoP01fixedValueForPayment

        // Conceptos->Concepto
        BlobManagement.Write('84111506' + '|');// ClaveProdServ
        BlobManagement.Write('1' + '|');// Cantidad
        BlobManagement.Write('ACT' + '|');// ClaveUnidad
        BlobManagement.Write('Pago' + '|');// Descripcion
        BlobManagement.Write('0.00' + '|');// ValorUnitario
        BlobManagement.Write('0.00' + '|');// Importe

        // Pagos
        BlobManagement.Write('1.0' + '|');// VersionForPagoHCto1.0
        // Pagos->Pago
        BlobManagement.Write(FormatAsDateTime("Posting Date",0T) + '|');// FechaPagoSetToPD
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm(TempCustomer."Payment Terms Code") + '|');// FormaDePagoP
        IF TempCustomer."Currency Code" <> '' THEN
          BlobManagement.Write(TempCustomer."Currency Code" + '|');// MonedaP
        IF (TempCustomer."Currency Code" <> 'MXN') AND (TempCustomer."Currency Code" <> 'XXX') THEN
          BlobManagement.Write(FormatDecimal(1 / "Original Currency Factor",6) + '|'); // TipoCambioP

        PaymentAmount := 0;
        IF TempDetailedCustLedgEntry.FINDSET THEN
          REPEAT
            PaymentAmount := PaymentAmount + ABS(TempDetailedCustLedgEntry.Amount);
          UNTIL TempDetailedCustLedgEntry.NEXT = 0;
        BlobManagement.Write(FormatAmount(PaymentAmount) + '|'); // Monto
        // BlobManagement.Write(FormatAmount(Amount) + '|'); // Monto

        IF (TempCustomer."Currency Code" <> 'MXN') AND (TempCustomer."Currency Code" <> 'XXX') THEN
          IF TempCustomer."Preferred Bank Account Code" <> '' THEN
            BlobManagement.Write(TempCustomer."Preferred Bank Account Code" + '|')
          ELSE BEGIN
            CustomerBankAccount.RESET;
            CustomerBankAccount.SETRANGE("Customer No.",TempCustomer."No.");
            IF CustomerBankAccount.FINDFIRST THEN // Find the first one...
              BlobManagement.Write(CustomerBankAccount."Bank Account No." + '|')
            ELSE
              BlobManagement.Write('' + '|');
          END;

        IF TempDetailedCustLedgEntry.FINDSET THEN
          REPEAT
            // DoctoRelacionado
            ServiceDoc := FALSE;
            InvoiceDoc := FALSE;
            CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.");
            SourceCodeSetup.GET;
            IF SourceCodeSetup."Service Management" <> '' THEN
              ServiceSourceCode := SourceCodeSetup."Service Management";
            IF CustLedgerEntry2."Source Code" = ServiceSourceCode THEN
              ServiceDoc := TRUE;
            IF TempDetailedCustLedgEntry."Initial Document Type" = TempDetailedCustLedgEntry."Initial Document Type"::Invoice THEN
              InvoiceDoc := TRUE;

            IF ServiceDoc THEN
              IF InvoiceDoc THEN
                ServiceInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              ELSE // Has to be a credit memo
                ServiceCrMemoHeader.GET(CustLedgerEntry2."Document No.")
            ELSE
              IF InvoiceDoc THEN
                SalesInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              ELSE
                SalesCrMemoHeader.GET(CustLedgerEntry2."Document No.");
            UUID := GetPaymentInvoiceUUID("Entry No.",InvoiceDoc);

            BlobManagement.Write(UUID + '|');// IdDocumento
            BlobManagement.Write(CustLedgerEntry2."Document No." + '|');// Folio
            IF CustLedgerEntry2."Currency Code" <> '' THEN
              BlobManagement.Write(CustLedgerEntry2."Currency Code" + '|') // MonedaDR
            ELSE
              BlobManagement.Write(GLSetup."LCY Code" + '|'); // MonedaDR
            BlobManagement.Write('PUE|');// MotodoDePagoDr
            BlobManagement.Write('1|');// NumParcialidad

            IF ServiceDoc THEN
              IF InvoiceDoc THEN BEGIN
                ServiceInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmount(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              END ELSE BEGIN
                ServiceCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmountNoABS(ServiceCrMemoHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmountNoABS(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(
                    -1 * ServiceCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              END;
            IF NOT ServiceDoc THEN
              IF InvoiceDoc THEN BEGIN
                SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmount(SalesInvoiceHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmount(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(SalesInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              END ELSE BEGIN
                SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmountNoABS(SalesCrMemoHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmountNoABS(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(
                    -1 * SalesCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              END;
          UNTIL TempDetailedCustLedgEntry.NEXT = 0;
        // Need one more pipe character at end of built string...
        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
        // FileManagement.BLOBExport(TempBlob,'OriginalStringPayment.xml',TRUE);
      END;
    END;

    LOCAL PROCEDURE InitPaymentXML33@1020065(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd' +
        ' http://www.sat.gob.mx/Pagos http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos10.xsd" ' +
        'xmlns:pago10="http://www.sat.gob.mx/Pagos"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE GetPaymentInvoiceUUID@1020067(EntryNumber@1020000 : Integer;InvoiceDoc@1020004 : Boolean) : Text[50];
    VAR
      CustLedgerEntry2@1020002 : Record 21;
      DetailedCustLedgEntry@1020003 : Record 379;
      SalesInvoiceHeader@1020001 : Record 112;
      ServiceInvoiceHeader@1020006 : Record 5992;
      SalesCrMemoHeader@1020009 : Record 114;
      ServiceCrMemoHeader@1020008 : Record 5994;
      ServiceSourceCode@1020005 : Code[10];
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",EntryNumber);
      IF InvoiceDoc THEN
        DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1',DetailedCustLedgEntry."Initial Document Type"::Invoice)
      ELSE
        DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1',DetailedCustLedgEntry."Initial Document Type"::"Credit Memo");

      IF DetailedCustLedgEntry.FINDFIRST THEN BEGIN
        CustLedgerEntry2.GET(DetailedCustLedgEntry."Cust. Ledger Entry No.");
        SourceCodeSetup.GET;
        IF SourceCodeSetup."Service Management" <> '' THEN
          ServiceSourceCode := SourceCodeSetup."Service Management";

        IF CustLedgerEntry2."Source Code" = ServiceSourceCode THEN BEGIN
          IF InvoiceDoc THEN BEGIN
            ServiceInvoiceHeader.GET(CustLedgerEntry2."Document No.");
            EXIT(ServiceInvoiceHeader."Fiscal Invoice Number PAC");
          END;
          IF NOT InvoiceDoc THEN BEGIN
            ServiceCrMemoHeader.GET(CustLedgerEntry2."Document No.");
            EXIT(ServiceCrMemoHeader."Fiscal Invoice Number PAC");
          END;
        END;

        IF InvoiceDoc THEN BEGIN
          SalesInvoiceHeader.GET(CustLedgerEntry2."Document No.");
          EXIT(SalesInvoiceHeader."Fiscal Invoice Number PAC");
        END;
        IF NOT InvoiceDoc THEN BEGIN
          SalesCrMemoHeader.GET(CustLedgerEntry2."Document No.");
          EXIT(SalesCrMemoHeader."Fiscal Invoice Number PAC");
        END;
      END;
      EXIT('');
    END;

    PROCEDURE GetUUIDFromOriginalPrepayment@1020011(SalesInvoiceHeader@1020000 : Record 112;VAR SalesInvoiceNumber@1020002 : Code[20]) : Text[50];
    VAR
      SalesInvoiceHeader2@1020001 : Record 112;
    BEGIN
      // First, get the common sales order number
      SalesInvoiceHeader2.RESET;
      SalesInvoiceHeader2.SETFILTER("Prepayment Order No.",'=%1',SalesInvoiceHeader."Order No.");
      IF SalesInvoiceHeader2.FINDFIRST THEN BEGIN // We have the prepayment invoice
        SalesInvoiceNumber := SalesInvoiceHeader2."No.";
        EXIT(SalesInvoiceHeader2."Fiscal Invoice Number PAC");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqPayment@1020068(VAR CustLedgerEntry@1020000 : Record 21) : Text[50];
    BEGIN
      IF CustLedgerEntry."Date/Time First Req. Sent" <> '' THEN
        EXIT(CustLedgerEntry."Date/Time First Req. Sent");

      CustLedgerEntry."Date/Time First Req. Sent" := FormatAsDateTime(CustLedgerEntry."Document Date",TIME);
      EXIT(CustLedgerEntry."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE AddElementPago@1020114(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'pago10:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsInvoicePrepaymentSettle@1020070(InvoiceNumber@1020000 : Code[20];VAR AdvanceAmount@1020002 : Decimal) : Boolean;
    VAR
      SalesInvoiceLine@1020001 : Record 113;
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETFILTER("Document No.",'=%1',InvoiceNumber);
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          IF SalesInvoiceLine."Prepayment Line" THEN BEGIN
            AdvanceAmount := SalesInvoiceLine."Amount Including VAT";
            EXIT(TRUE);
          END;
        UNTIL SalesInvoiceLine.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE MapServiceTypeToTempDocType@1020025(Type@1020000 : ' ,Item,Resource,Cost,G/L Account') : Integer;
    VAR
      TrueType@1020001 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';
    BEGIN
      CASE Type OF
        Type::Item:
          EXIT(TrueType::Item);
        Type::Resource:
          EXIT(TrueType::Resource);
        Type::"G/L Account":
          EXIT(TrueType::"G/L Account");
        ELSE
          EXIT(TrueType::" ");
      END;
    END;

    LOCAL PROCEDURE GetAdvanceAmountFromSettledInvoice@1020093(SalesInvoiceHeader@1020000 : Record 112) : Decimal;
    VAR
      SalesInvoiceLine@1020001 : Record 113;
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER("Prepayment Line",'=1');
      IF SalesInvoiceLine.FINDFIRST THEN
        EXIT(ABS(SalesInvoiceLine."Amount Including VAT"));
    END;

    LOCAL PROCEDURE GetCurrencyDecimalPlaces@1020057(CurrencyCode@1020000 : Code[10]) : Integer;
    BEGIN
      CASE CurrencyCode OF
        'CLF':
          EXIT(4);
        'BHD','IQD','JOD','KWD','LYD','OMR','TND','CLF':
          EXIT(3);
        'BIF','BYR','CLP','DJF','GNF','ISK','JPY','KMF','KRW','PYG','RWF',
        'UGX','UYI','VND','VUV','XAF','XAG','XAU','XBA','XBB','XBC','XBD',
        'XDR','XOF','XPD','XPF','XPT','XSU','XTS','XUA','XXX':
          EXIT(0);
        ELSE
          EXIT(2);
      END;
    END;

    LOCAL PROCEDURE GetTaxPercentage@1310002(Amount@1310000 : Decimal;Tax@1310001 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(Tax / Amount,0.01,'=') * 100);
    END;

    BEGIN
    END.
  }
}

