OBJECT Codeunit 5052 AttachmentManagement
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Send attachments...\\;ESM=Enviar anexos...\\;FRC=Envoi des piäces jointes...\\;ENC=Send attachments...\\';
      Text001@1001 : TextConst 'ENU=Preparing;ESM=Preparando;FRC=PrÇparation;ENC=Preparing';
      Text002@1002 : TextConst 'ENU=Deliver misc.;ESM=Entregar varios;FRC=Envoi divers;ENC=Deliver misc.';
      Text008@1003 : TextConst 'ENU=You must select an interaction template with an attachment.;ESM=Debe seleccionar una plantilla de interacci¢n que incluya un archivo adjunto.;FRC=Vous devez sÇlectionner un modäle d''interaction avec une piäce jointe.;ENC=You must select an interaction template with an attachment.';
      AttachmentTok@1004 : TextConst 'ENU=Attachment;ESM=Anexo;FRC=Piäce jointe;ENC=Attachment';

    PROCEDURE InsertAttachment@14(AttachmentNo@1000 : Integer) : Integer;
    VAR
      Attachment@1001 : Record 5062;
      Attachment3@1003 : Record 5062;
    BEGIN
      IF AttachmentNo <> 0 THEN BEGIN
        Attachment.GET(AttachmentNo);
        IF Attachment."Storage Type" = Attachment."Storage Type"::Embedded THEN
          Attachment.CALCFIELDS("Attachment File");
        Attachment3 := Attachment; // Remember "from" attachment
      END;

      Attachment.INSERT(TRUE);

      IF AttachmentNo <> 0 THEN
        // New attachment is based on old attachment
        TransferAttachment(Attachment3,Attachment); // Transfer attachments of different types.

      EXIT(Attachment."No.");
    END;

    PROCEDURE Send@1(VAR DeliverySorter@1000 : Record 5074);
    VAR
      TempDeliverySorterHtml@1014 : TEMPORARY Record 5074;
      TempDeliverySorterWord@1002 : TEMPORARY Record 5074;
      TempDeliverySorterOther@1003 : TEMPORARY Record 5074;
      InteractLogEntry@1004 : Record 5065;
      WordManagement@1006 : Codeunit 5054;
    BEGIN
      ProcessDeliverySorter(DeliverySorter,TempDeliverySorterHtml,TempDeliverySorterWord,TempDeliverySorterOther);

      IF TempDeliverySorterWord.FINDFIRST THEN
        WordManagement.Merge(TempDeliverySorterWord);

      IF TempDeliverySorterHtml.FINDFIRST THEN
        DeliverHTMLEmail(TempDeliverySorterHtml,InteractLogEntry);

      IF TempDeliverySorterOther.FINDFIRST THEN
        DeliverEmailWithAttachment(TempDeliverySorterOther,InteractLogEntry);
    END;

    PROCEDURE SendUsingExchange@15(VAR DeliverySorter@1000 : Record 5074);
    VAR
      TempDeliverySorterHtml@1014 : TEMPORARY Record 5074;
      TempDeliverySorterWord@1002 : TEMPORARY Record 5074;
      TempDeliverySorterOther@1003 : TEMPORARY Record 5074;
      InteractLogEntry@1004 : Record 5065;
      WordManagement@1006 : Codeunit 5054;
      ExchangeWebServicesServer@1001 : Codeunit 5321;
    BEGIN
      ProcessDeliverySorter(DeliverySorter,TempDeliverySorterHtml,TempDeliverySorterWord,TempDeliverySorterOther);

      IF TempDeliverySorterWord.FINDFIRST THEN
        WordManagement.Merge(TempDeliverySorterWord);

      InitializeExchange(ExchangeWebServicesServer);
      IF TempDeliverySorterHtml.FINDFIRST THEN
        DeliverHTMLEmailViaExchange(ExchangeWebServicesServer,TempDeliverySorterHtml,InteractLogEntry);

      IF TempDeliverySorterOther.FINDFIRST THEN
        DeliverEmailWithAttachmentViaExchange(ExchangeWebServicesServer,TempDeliverySorterOther,InteractLogEntry);
    END;

    LOCAL PROCEDURE TransferAttachment@5(FromAttachment@1000 : Record 5062;VAR ToAttachment@1001 : Record 5062);
    VAR
      RMSetup@1002 : Record 5079;
      FileName@1003 : Text;
    BEGIN
      // Transfer attachments of different types

      IF (FromAttachment."Storage Type" = FromAttachment."Storage Type"::Embedded) AND
         (ToAttachment."Storage Type" = ToAttachment."Storage Type"::"Disk File")
      THEN BEGIN
        FileName := ToAttachment.ConstDiskFileName;
        FromAttachment.ExportAttachmentToServerFile(FileName); // Export blob to UNC location
        WITH ToAttachment DO BEGIN
          CLEAR("Attachment File");
          RMSetup.GET;
          RMSetup.TESTFIELD("Attachment Storage Location");
          "Storage Pointer" := RMSetup."Attachment Storage Location";
          MODIFY;
        END;
      END;

      IF (FromAttachment."Storage Type" = FromAttachment."Storage Type"::"Disk File") AND
         (ToAttachment."Storage Type" = ToAttachment."Storage Type"::"Disk File")
      THEN BEGIN
        // Copy external attachment (to new storage)
        RMSetup.GET;
        RMSetup.TESTFIELD("Attachment Storage Location");
        ToAttachment."Storage Pointer" := RMSetup."Attachment Storage Location";
        ToAttachment.MODIFY;
        FILE.COPY(FromAttachment.ConstDiskFileName,ToAttachment.ConstDiskFileName);
      END;

      IF (FromAttachment."Storage Type" = FromAttachment."Storage Type"::"Disk File") AND
         (ToAttachment."Storage Type" = ToAttachment."Storage Type"::Embedded)
      THEN
        // Transfer External to Embedded attachment
        WITH ToAttachment DO BEGIN
          ImportAttachmentFromServerFile(FromAttachment.ConstDiskFileName,TRUE,FALSE); // Import file from UNC location
          "File Extension" := FromAttachment."File Extension";
          "Storage Pointer" := '';
          MODIFY;
        END;
    END;

    [External]
    PROCEDURE InteractionEMail@6(VAR InteractLogEntry@1000 : Record 5065) : Text[80];
    VAR
      Cont@1001 : Record 5050;
      ContAltAddr@1002 : Record 5051;
    BEGIN
      IF InteractLogEntry."Contact Alt. Address Code" = '' THEN BEGIN
        Cont.GET(InteractLogEntry."Contact No.");
        EXIT(Cont."E-Mail");
      END;
      ContAltAddr.GET(InteractLogEntry."Contact No.",InteractLogEntry."Contact Alt. Address Code");
      IF ContAltAddr."E-Mail" <> '' THEN
        EXIT(ContAltAddr."E-Mail");

      Cont.GET(InteractLogEntry."Contact No.");
      EXIT(Cont."E-Mail");
    END;

    [External]
    PROCEDURE InteractionFax@7(VAR InteractLogEntry@1000 : Record 5065) : Text[30];
    VAR
      Cont@1001 : Record 5050;
      ContAltAddr@1002 : Record 5051;
    BEGIN
      IF InteractLogEntry."Contact Alt. Address Code" = '' THEN BEGIN
        Cont.GET(InteractLogEntry."Contact No.");
        EXIT(Cont."Fax No.");
      END;
      ContAltAddr.GET(InteractLogEntry."Contact No.",InteractLogEntry."Contact Alt. Address Code");
      IF ContAltAddr."Fax No." <> '' THEN
        EXIT(ContAltAddr."Fax No.");

      Cont.GET(InteractLogEntry."Contact No.");
      EXIT(Cont."Fax No.");
    END;

    PROCEDURE GenerateHTMLContent@9(VAR Attachment@1001 : Record 5062;SegmentLine@1000 : Record 5077) : Boolean;
    BEGIN
      IF NOT Attachment.IsHTML THEN
        EXIT(FALSE);

      IF Attachment.IsHTMLReady THEN
        EXIT(TRUE);

      EXIT(GenerateHTMLReadyAttachmentFromCustomLayout(Attachment,SegmentLine));
    END;

    PROCEDURE LoadHTMLContent@3(VAR Attachment@1001 : Record 5062;SegmentLine@1000 : Record 5077) : Text;
    BEGIN
      IF NOT Attachment.IsHTML THEN
        EXIT('');

      IF Attachment.IsHTMLReady THEN
        EXIT(Attachment.Read);

      EXIT(LoadHTMLContentFromCustomLayoutAttachment(Attachment,SegmentLine));
    END;

    LOCAL PROCEDURE LoadHTMLContentFromCustomLayoutAttachment@51(VAR Attachment@1003 : Record 5062;SegmentLine@1004 : Record 5077) Result : Text;
    VAR
      TempAttachment@1000 : TEMPORARY Record 5062;
      FileName@1001 : Text;
    BEGIN
      Result := '';
      FileName := GenerateHTMLReadyContentFromCustomLayoutAttachment(Attachment,SegmentLine);
      IF FileName = '' THEN
        EXIT;

      TempAttachment.INIT;
      TempAttachment.ImportAttachmentFromServerFile(FileName,TRUE,TRUE);
      TempAttachment."No." := 0;
      TempAttachment.INSERT;
      Result := TempAttachment.Read;
      TempAttachment.RemoveAttachment(FALSE);
    END;

    LOCAL PROCEDURE GenerateHTMLReadyAttachmentFromCustomLayout@36(VAR Attachment@1001 : Record 5062;SegmentLine@1002 : Record 5077) : Boolean;
    VAR
      FileName@1000 : Text;
    BEGIN
      FileName := GenerateHTMLReadyContentFromCustomLayoutAttachment(Attachment,SegmentLine);
      IF FileName = '' THEN
        EXIT(FALSE);

      Attachment.DELETE;
      Attachment.INIT;
      Attachment.ImportAttachmentFromServerFile(FileName,TRUE,TRUE);
      Attachment."No." := 0;
      Attachment.INSERT;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GenerateHTMLReadyContentFromCustomLayoutAttachment@30(VAR Attachment@1001 : Record 5062;SegmentLine@1002 : Record 5077) FileName : Text;
    VAR
      ReportLayoutSelection@1004 : Record 9651;
      EmailMerge@1006 : Report 5084;
      FileMgt@1003 : Codeunit 419;
      ContentBodyText@1000 : Text;
      CustomLayoutNo@1010 : Code[20];
    BEGIN
      CLEAR(EmailMerge);
      FileName := FileMgt.ServerTempFileName('html');
      IF FileName = '' THEN
        EXIT;

      Attachment.ReadHTMLCustomLayoutAttachment(ContentBodyText,CustomLayoutNo);
      ReportLayoutSelection.SetTempLayoutSelected(CustomLayoutNo);
      EmailMerge.InitializeRequest(SegmentLine,ContentBodyText);
      EmailMerge.SAVEASHTML(FileName);
      ReportLayoutSelection.SetTempLayoutSelected('');
    END;

    LOCAL PROCEDURE InitializeExchange@16(VAR ExchangeWebServicesServer@1001 : Codeunit 5321);
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      COMMIT;
      User.SETRANGE("User Name",USERID);
      IF NOT User.FINDFIRST AND NOT InitializeExchangeWithToken(ExchangeWebServicesServer,User."Authentication Email") THEN
        IF NOT InitializeExchangeWithCredentials(ExchangeWebServicesServer) THEN
          ERROR('');
    END;

    [TryFunction]
    LOCAL PROCEDURE InitializeExchangeWithCredentials@73(VAR ExchangeWebServicesServer@1001 : Codeunit 5321);
    VAR
      TempOfficeAdminCredentials@1003 : TEMPORARY Record 1612;
      WebCredentials@1002 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
      WebCredentialsLogin@1000 : Text[250];
    BEGIN
      TempOfficeAdminCredentials.INIT;
      TempOfficeAdminCredentials.INSERT;
      COMMIT;
      CLEARLASTERROR;
      IF PAGE.RUNMODAL(PAGE::"Office 365 Credentials",TempOfficeAdminCredentials) <> ACTION::LookupOK THEN
        ERROR('');
      WebCredentialsLogin := TempOfficeAdminCredentials.Email;
      WebCredentials := WebCredentials.WebCredentials(WebCredentialsLogin,TempOfficeAdminCredentials.GetPassword);
      TempOfficeAdminCredentials.DELETE;
      ExchangeWebServicesServer.Initialize(
        WebCredentialsLogin,ExchangeWebServicesServer.ProdEndpoint,WebCredentials,FALSE);
    END;

    [TryFunction]
    LOCAL PROCEDURE InitializeExchangeWithToken@34(VAR ExchangeWebServicesServer@1004 : Codeunit 5321;AuthenticationEmail@1003 : Text[250]);
    VAR
      ExchangeServiceSetup@1000 : Record 5324;
      AzureADMgt@1001 : Codeunit 6300;
      AccessToken@1002 : Text;
    BEGIN
      AccessToken := AzureADMgt.GetAccessToken(AzureADMgt.GetO365Resource,AzureADMgt.GetO365ResourceName,FALSE);

      IF AccessToken <> '' THEN BEGIN
        ExchangeWebServicesServer.InitializeWithOAuthToken(AccessToken,ExchangeWebServicesServer.GetEndpoint);
        EXIT;
      END;

      ExchangeServiceSetup.GET;

      ExchangeWebServicesServer.InitializeWithCertificate(
        ExchangeServiceSetup."Azure AD App. ID",ExchangeServiceSetup."Azure AD App. Cert. Thumbprint",
        ExchangeServiceSetup."Azure AD Auth. Endpoint",ExchangeServiceSetup."Exchange Service Endpoint",
        ExchangeServiceSetup."Exchange Resource Uri");

      ExchangeWebServicesServer.SetImpersonatedIdentity(AuthenticationEmail);
    END;

    LOCAL PROCEDURE GetSenderSalesPersonEmail@23(VAR InteractLogEntry@1000 : Record 5065) : Text;
    VAR
      SalesPersonPurchaser@1001 : Record 13;
    BEGIN
      SalesPersonPurchaser.GET(InteractLogEntry."Salesperson Code");
      EXIT(SalesPersonPurchaser."E-Mail");
    END;

    LOCAL PROCEDURE DeliverHTMLEmail@25(VAR TempDeliverySorterHtml@1001 : TEMPORARY Record 5074;VAR InteractLogEntry@1003 : Record 5065);
    VAR
      Attachment@1005 : Record 5062;
      FileMgt@1004 : Codeunit 419;
      EmailBodyFilePath@1006 : Text;
    BEGIN
      InteractLogEntry.LOCKTABLE;
      REPEAT
        InteractLogEntry.GET(TempDeliverySorterHtml."No.");

        IF TempDeliverySorterHtml."Correspondence Type" = TempDeliverySorterHtml."Correspondence Type"::Email THEN BEGIN
          GetAttachment(Attachment,TempDeliverySorterHtml."Attachment No.",FALSE);
          EmailBodyFilePath := FileMgt.ServerTempFileName('HTML');
          Attachment.ExportAttachmentToServerFile(EmailBodyFilePath);

          COMMIT;
          SendHTMLEmail(
            TempDeliverySorterHtml,InteractLogEntry,EmailBodyFilePath);
          // Clean up
          FileMgt.DeleteServerFile(EmailBodyFilePath)
        END ELSE
          SetDeliveryState(InteractLogEntry,FALSE);
      UNTIL TempDeliverySorterHtml.NEXT = 0;
    END;

    LOCAL PROCEDURE DeliverHTMLEmailViaExchange@20(VAR ExchangeWebServicesServer@1002 : Codeunit 5321;VAR TempDeliverySorterHtml@1001 : TEMPORARY Record 5074;VAR InteractLogEntry@1003 : Record 5065);
    VAR
      Attachment@1005 : Record 5062;
      FileMgt@1004 : Codeunit 419;
      EmailBodyFilePath@1006 : Text;
    BEGIN
      InteractLogEntry.LOCKTABLE;
      REPEAT
        InteractLogEntry.GET(TempDeliverySorterHtml."No.");

        IF TempDeliverySorterHtml."Correspondence Type" = TempDeliverySorterHtml."Correspondence Type"::Email THEN BEGIN
          GetAttachment(Attachment,TempDeliverySorterHtml."Attachment No.",FALSE);
          EmailBodyFilePath := FileMgt.ServerTempFileName('HTML');
          Attachment.ExportAttachmentToServerFile(EmailBodyFilePath);

          COMMIT;
          SendHTMLEmailViaExchange(
            ExchangeWebServicesServer,TempDeliverySorterHtml,InteractLogEntry,Attachment);
          // Clean up
          FileMgt.DeleteServerFile(EmailBodyFilePath)
        END ELSE
          SetDeliveryState(InteractLogEntry,FALSE);
      UNTIL TempDeliverySorterHtml.NEXT = 0;
    END;

    LOCAL PROCEDURE DeliverEmailWithAttachment@19(VAR TempDeliverySorterOther@1001 : TEMPORARY Record 5074;VAR InteractLogEntry@1004 : Record 5065);
    VAR
      FileMgt@1011 : Codeunit 419;
      AttachmentFileFullName@1006 : Text;
      EmailBodyFilePath@1005 : Text;
    BEGIN
      REPEAT
        InteractLogEntry.LOCKTABLE;
        InteractLogEntry.GET(TempDeliverySorterOther."No.");
        IF TempDeliverySorterOther."Correspondence Type" = TempDeliverySorterOther."Correspondence Type"::Email THEN BEGIN
          // Export the attachment to the client TEMP directory, giving it a GUID
          AttachmentFileFullName := PrepareServerAttachment(TempDeliverySorterOther."Attachment No.");
          EmailBodyFilePath := PrepareDummyEmailBody;

          COMMIT;
          SendEmailWithAttachment(
            TempDeliverySorterOther,InteractLogEntry,AttachmentFileFullName,EmailBodyFilePath);
          // Clean up
          FileMgt.DeleteServerFile(AttachmentFileFullName);
          FileMgt.DeleteServerFile(EmailBodyFilePath);
        END ELSE
          SetDeliveryState(InteractLogEntry,FALSE);
      UNTIL TempDeliverySorterOther.NEXT = 0;
    END;

    LOCAL PROCEDURE DeliverEmailWithAttachmentViaExchange@28(VAR ExchangeWebServicesServer@1010 : Codeunit 5321;VAR TempDeliverySorterOther@1001 : TEMPORARY Record 5074;VAR InteractLogEntry@1004 : Record 5065);
    VAR
      Contact@1009 : Record 5050;
      FileMgt@1011 : Codeunit 419;
      Window@1000 : Dialog;
      I@1002 : Integer;
      NoOfAttachments@1003 : Integer;
      AttachmentFileFullName@1006 : Text;
    BEGIN
      Window.OPEN(
        Text000 +
        '#1############ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\' +
        '#3############ @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Window.UPDATE(1,Text001);
      Window.UPDATE(2,10000);
      Window.UPDATE(3,Text002);
      I := 0;
      NoOfAttachments := TempDeliverySorterOther.COUNT;
      REPEAT
        InteractLogEntry.LOCKTABLE;
        InteractLogEntry.GET(TempDeliverySorterOther."No.");
        IF TempDeliverySorterOther."Correspondence Type" = TempDeliverySorterOther."Correspondence Type"::Email THEN BEGIN
          // Export the attachment to the server TEMP directory, giving it a GUID
          AttachmentFileFullName := PrepareServerAttachment(
              TempDeliverySorterOther."Attachment No.");

          // Send the mail
          Contact.GET(InteractLogEntry."Contact No.");
          SendEmailWithAttachmentViaExchange(
            ExchangeWebServicesServer,TempDeliverySorterOther,InteractLogEntry,AttachmentFileFullName);
          // Clean up
          FileMgt.DeleteServerFile(AttachmentFileFullName);
        END ELSE
          SetDeliveryState(InteractLogEntry,FALSE);
        I := I + 1;
        Window.UPDATE(4,ROUND(I / NoOfAttachments * 10000,1));
      UNTIL TempDeliverySorterOther.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE SendHTMLEmail@8(VAR TempDeliverySorterHtml@1001 : TEMPORARY Record 5074;VAR InteractLogEntry@1003 : Record 5065;EmailBodyFilePath@1006 : Text);
    VAR
      DocumentMailing@1005 : Codeunit 260;
      IsSent@1007 : Boolean;
    BEGIN
      IsSent :=
        DocumentMailing.EmailFileWithSubject(
          '','',EmailBodyFilePath,
          TempDeliverySorterHtml.Subject,InteractionEMail(InteractLogEntry),FALSE);

      SetDeliveryState(InteractLogEntry,IsSent);
    END;

    LOCAL PROCEDURE SendHTMLEmailViaExchange@17(VAR ExchangeWebServicesServer@1002 : Codeunit 5321;VAR TempDeliverySorterHtml@1001 : TEMPORARY Record 5074;VAR InteractLogEntry@1003 : Record 5065;Attachment@1000 : Record 5062);
    VAR
      IsSent@1007 : Boolean;
    BEGIN
      IsSent :=
        ExchangeWebServicesServer.SendEmailMessageWithAttachment(
          TempDeliverySorterHtml.Subject,InteractionEMail(InteractLogEntry),
          Attachment.Read,'',GetSenderSalesPersonEmail(InteractLogEntry));

      SetDeliveryState(InteractLogEntry,IsSent);
    END;

    LOCAL PROCEDURE SendEmailWithAttachment@12(TempDeliverySorterOther@1002 : TEMPORARY Record 5074;InteractLogEntry@1003 : Record 5065;AttachmentFileFullName@1004 : Text;EmailBodyFilePath@1000 : Text);
    VAR
      DocumentMailing@1001 : Codeunit 260;
      IsSent@1005 : Boolean;
    BEGIN
      IsSent :=
        DocumentMailing.EmailFileWithSubject(
          AttachmentFileFullName,GetAttachmentFileDefaultName(TempDeliverySorterOther."Attachment No."),
          EmailBodyFilePath,TempDeliverySorterOther.Subject,InteractionEMail(InteractLogEntry),FALSE);

      SetDeliveryState(InteractLogEntry,IsSent);
    END;

    LOCAL PROCEDURE SendEmailWithAttachmentViaExchange@33(VAR ExchangeWebServicesServer@1001 : Codeunit 5321;TempDeliverySorterOther@1002 : TEMPORARY Record 5074;InteractLogEntry@1003 : Record 5065;AttachmentFileFullName@1004 : Text);
    VAR
      IsSent@1005 : Boolean;
    BEGIN
      IsSent :=
        ExchangeWebServicesServer.SendEmailMessageWithAttachment(
          TempDeliverySorterOther.Subject,InteractionEMail(InteractLogEntry),
          '',AttachmentFileFullName,GetSenderSalesPersonEmail(InteractLogEntry));
      SetDeliveryState(InteractLogEntry,IsSent);
    END;

    LOCAL PROCEDURE PrepareServerAttachment@40(AttachmentNo@1000 : Integer) : Text;
    VAR
      Attachment@1003 : Record 5062;
      FileManagement@1002 : Codeunit 419;
      TempFileFullName@1001 : Text;
      AttachmentFileFullName@1004 : Text;
    BEGIN
      GetAttachment(Attachment,AttachmentNo,TRUE);
      TempFileFullName := FileManagement.ServerTempFileName('');
      Attachment.ExportAttachmentToServerFile(TempFileFullName);
      AttachmentFileFullName := FileManagement.CombinePath(
          FileManagement.GetDirectoryName(TempFileFullName),AttachmentTok + '.' + Attachment."File Extension");
      FileManagement.CopyServerFile(TempFileFullName,AttachmentFileFullName,TRUE);
      FileManagement.DeleteServerFile(TempFileFullName);
      EXIT(AttachmentFileFullName);
    END;

    LOCAL PROCEDURE SetDeliveryState@4(VAR InteractLogEntry@1000 : Record 5065;IsSent@1001 : Boolean);
    BEGIN
      IF IsSent THEN
        InteractLogEntry."Delivery Status" := InteractLogEntry."Delivery Status"::" "
      ELSE
        InteractLogEntry."Delivery Status" := InteractLogEntry."Delivery Status"::Error;
      InteractLogEntry.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE ProcessDeliverySorter@10(VAR DeliverySorter@1004 : Record 5074;VAR TempDeliverySorterHtml@1003 : TEMPORARY Record 5074;VAR TempDeliverySorterWord@1002 : TEMPORARY Record 5074;VAR TempDeliverySorterOther@1001 : TEMPORARY Record 5074);
    VAR
      Attachment@1006 : Record 5062;
      WordManagement@1007 : Codeunit 5054;
      ClientTypeManagement@1009 : Codeunit 4;
      Window@1000 : Dialog;
      NoOfAttachments@1005 : Integer;
      I@1008 : Integer;
    BEGIN
      Window.OPEN(
        Text000 +
        '#1############ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\' +
        '#3############ @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Window.UPDATE(1,Text001);
      Window.UPDATE(3,Text002);

      IF DeliverySorter.FIND('-') THEN BEGIN
        NoOfAttachments := DeliverySorter.COUNT;
        REPEAT
          DeliverySorter.TESTFIELD("Correspondence Type");
          IF NOT Attachment.GET(DeliverySorter."Attachment No.") THEN
            ERROR(Text008);
          CASE TRUE OF
            Attachment."File Extension" = 'HTML':
              BEGIN
                TempDeliverySorterHtml := DeliverySorter;
                TempDeliverySorterHtml.INSERT;
              END;
            WordManagement.IsWordDocumentExtension(Attachment."File Extension") AND NOT
            ClientTypeManagement.IsCommonWebClientType:
              IF WordManagement.CanRunWordApp THEN BEGIN
                TempDeliverySorterWord := DeliverySorter;
                TempDeliverySorterWord.INSERT;
              END ELSE BEGIN
                TempDeliverySorterOther := DeliverySorter;
                TempDeliverySorterOther.INSERT;
              END;
            ELSE BEGIN
              TempDeliverySorterOther := DeliverySorter;
              TempDeliverySorterOther.INSERT;
            END;
          END;
          I := I + 1;
          Window.UPDATE(2,ROUND(I / NoOfAttachments * 10000,1));
        UNTIL DeliverySorter.NEXT = 0;
      END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE GetAttachment@46(VAR Attachment@1000 : Record 5062;AttachmentNo@1001 : Integer;CheckExtension@1002 : Boolean);
    BEGIN
      Attachment.GET(AttachmentNo);
      IF CheckExtension THEN
        Attachment.TESTFIELD("File Extension");
      Attachment.CALCFIELDS("Attachment File");
    END;

    LOCAL PROCEDURE PrepareDummyEmailBody@18() : Text;
    VAR
      FileMgt@1000 : Codeunit 419;
      OStream@1003 : OutStream;
      EmailBodyFile@1002 : File;
      EmailBodyFilePath@1001 : Text;
    BEGIN
      EmailBodyFilePath := FileMgt.ServerTempFileName('HTML');
      EmailBodyFile.CREATE(EmailBodyFilePath);
      EmailBodyFile.CREATEOUTSTREAM(OStream);
      OStream.WRITETEXT('<html><body></body></html>');
      EmailBodyFile.CLOSE;
      EXIT(EmailBodyFilePath);
    END;

    LOCAL PROCEDURE GetAttachmentFileDefaultName@11(AttachmentNo@1000 : Integer) : Text;
    VAR
      Attachment@1001 : Record 5062;
    BEGIN
      Attachment.GET(AttachmentNo);
      EXIT(AttachmentTok + '.' + Attachment."File Extension");
    END;

    BEGIN
    END.
  }
}

