OBJECT Codeunit 5777 Whse. Validate Source Line
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="must not be changed when a %1 for this %2 exists: ";ESM="no debe cambiarse cuando existe %1 para este %2. ";FRC="ne peut pas ˆtre modifi‚(e) lorsqu''il existe un(e) %1 pour ce/cette %2 : ";ENC="must not be changed when a %1 for this %2 exists: "';
      Text001@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists.;ESM=El %1 no se puede eliminar porque existe un %2 relacionado.;FRC=Impossible de supprimer le %1 lorsqu''il existe un %2 reli‚.;ENC=The %1 cannot be deleted when a related %2 exists.';
      Text002@1004 : TextConst 'ENU=You cannot post consumption for order no. %1 because a quantity of %2 remains to be picked.;ESM=No puede realizar el registro para el pedido n§ %1 porque permanece una cantidad de %2 para preparar.;FRC=Vous ne pouvez pas reporter la consommation pour la commande nø %1 car il reste une quantit‚ de %2 … pr‚lever.;ENC=You cannot post consumption for order no. %1 because a quantity of %2 remains to be picked.';
      WhseActivLine@1003 : Record 5767;
      TableCaptionValue@1001 : Text[100];

    [External]
    PROCEDURE SalesLineVerifyChange@1(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37);
    VAR
      NewRecRef@1003 : RecordRef;
      OldRecRef@1002 : RecordRef;
    BEGIN
      IF NOT WhseLinesExist(
           DATABASE::"Sales Line",NewSalesLine."Document Type",NewSalesLine."Document No.",NewSalesLine."Line No.",0,
           NewSalesLine.Quantity)
      THEN
        EXIT;

      NewRecRef.GETTABLE(NewSalesLine);
      OldRecRef.GETTABLE(OldSalesLine);
      WITH NewSalesLine DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Drop Shipment"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Purchase Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Purch. Order Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Job No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Ship"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Assemble to Order"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Shipment Date"));
      END;

      OnAfterSalesLineVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE SalesLineDelete@2(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",
           SalesLine."Line No.",0,SalesLine.Quantity)
      THEN
        ERROR(Text001,SalesLine.TABLECAPTION,TableCaptionValue);

      OnAfterSalesLineDelete(SalesLine);
    END;

    [External]
    PROCEDURE ServiceLineVerifyChange@15(VAR NewServiceLine@1000 : Record 5902;VAR OldServiceLine@1001 : Record 5902);
    VAR
      NewRecRef@1002 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      IF NOT WhseLinesExist(
           DATABASE::"Service Line",NewServiceLine."Document Type",NewServiceLine."Document No.",NewServiceLine."Line No.",0,
           NewServiceLine.Quantity)
      THEN
        EXIT;

      NewRecRef.GETTABLE(NewServiceLine);
      OldRecRef.GETTABLE(OldServiceLine);
      WITH NewServiceLine DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
      END;

      OnAfterServiceLineVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE ServiceLineDelete@16(VAR ServiceLine@1000 : Record 5902);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",
           ServiceLine."Line No.",0,ServiceLine.Quantity)
      THEN
        ERROR(Text001,ServiceLine.TABLECAPTION,TableCaptionValue);

      OnAfterServiceLineDelete(ServiceLine);
    END;

    LOCAL PROCEDURE VerifyFieldNotChanged@17(NewRecRef@1000 : RecordRef;OldRecRef@1001 : RecordRef;FieldNumber@1002 : Integer);
    VAR
      NewFieldRef@1004 : FieldRef;
      OldFieldRef@1003 : FieldRef;
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeVerifyFieldNotChanged(NewRecRef,OldRecRef,FieldNumber,IsHandled);
      IF IsHandled THEN
        EXIT;

      NewFieldRef := NewRecRef.FIELD(FieldNumber);
      OldFieldRef := OldRecRef.FIELD(FieldNumber);
      IF FORMAT(OldFieldRef.VALUE) <> FORMAT(NewFieldRef.VALUE) THEN
        NewFieldRef.FIELDERROR(STRSUBSTNO(Text000,TableCaptionValue,NewRecRef.CAPTION));
    END;

    [External]
    PROCEDURE PurchaseLineVerifyChange@3(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39);
    VAR
      NewRecRef@1003 : RecordRef;
      OldRecRef@1002 : RecordRef;
    BEGIN
      IF NOT WhseLinesExist(
           DATABASE::"Purchase Line",NewPurchLine."Document Type",NewPurchLine."Document No.",
           NewPurchLine."Line No.",0,NewPurchLine.Quantity)
      THEN
        EXIT;

      NewRecRef.GETTABLE(NewPurchLine);
      OldRecRef.GETTABLE(OldPurchLine);
      WITH NewPurchLine DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Drop Shipment"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Sales Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Sales Order Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Special Order"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Special Order Sales No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Special Order Sales Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Job No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Receive"));
      END;

      OnAfterPurchaseLineVerifyChange(NewPurchLine,OldPurchLine);
    END;

    [External]
    PROCEDURE PurchaseLineDelete@4(VAR PurchLine@1000 : Record 39);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",0,PurchLine.Quantity)
      THEN
        ERROR(Text001,PurchLine.TABLECAPTION,TableCaptionValue);

      OnAfterPurchaseLineDelete(PurchLine);
    END;

    [External]
    PROCEDURE TransLineVerifyChange@5(VAR NewTransLine@1000 : Record 5741;VAR OldTransLine@1001 : Record 5741);
    BEGIN
      WITH NewTransLine DO BEGIN
        IF WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) THEN BEGIN
          TransLineCommonVerification(NewTransLine,OldTransLine);
          IF "Qty. to Ship" <> OldTransLine."Qty. to Ship" THEN
            FIELDERROR("Qty. to Ship",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
        END;

        IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN BEGIN
          TransLineCommonVerification(NewTransLine,OldTransLine);
          IF "Qty. to Receive" <> OldTransLine."Qty. to Receive" THEN
            FIELDERROR("Qty. to Receive",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
        END;
      END;

      OnAfterTransLineVerifyChange(NewTransLine,OldTransLine);
    END;

    LOCAL PROCEDURE TransLineCommonVerification@19(VAR NewTransLine@1001 : Record 5741;VAR OldTransLine@1000 : Record 5741);
    BEGIN
      WITH NewTransLine DO BEGIN
        IF "Item No." <> OldTransLine."Item No." THEN
          FIELDERROR("Item No.",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

        IF "Variant Code" <> OldTransLine."Variant Code" THEN
          FIELDERROR("Variant Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

        IF "Unit of Measure Code" <> OldTransLine."Unit of Measure Code" THEN
          FIELDERROR("Unit of Measure Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

        IF Quantity <> OldTransLine.Quantity THEN
          FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
      END;
    END;

    [External]
    PROCEDURE TransLineDelete@10(VAR TransLine@1000 : Record 5741);
    BEGIN
      WITH TransLine DO BEGIN
        IF WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) THEN
          ERROR(Text001,TABLECAPTION,TableCaptionValue);
        IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN
          ERROR(Text001,TABLECAPTION,TableCaptionValue);
      END;

      OnAfterTransLineDelete(TransLine);
    END;

    [External]
    PROCEDURE WhseLinesExist@6(SourceType@1000 : Integer;SourceSubType@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer;SourceQty@1007 : Decimal) : Boolean;
    VAR
      WhseRcptLine@1006 : Record 7317;
      WhseShptLine@1005 : Record 7321;
    BEGIN
      IF NOT WhseRcptLine.READPERMISSION THEN
        EXIT;
      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 1))
      THEN BEGIN
        WhseRcptLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,TRUE);
        IF NOT WhseRcptLine.ISEMPTY THEN BEGIN
          TableCaptionValue := WhseRcptLine.TABLECAPTION;
          EXIT(TRUE);
        END;
      END;

      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 0)) OR
         ((SourceType = DATABASE::"Service Line") AND (SourceSubType = 1))
      THEN BEGIN
        WhseShptLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,TRUE);
        IF NOT WhseShptLine.ISEMPTY THEN BEGIN
          TableCaptionValue := WhseShptLine.TABLECAPTION;
          EXIT(TRUE);
        END;
      END;

      WhseActivLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSublineNo,TRUE);
      IF NOT WhseActivLine.ISEMPTY THEN BEGIN
        TableCaptionValue := WhseActivLine.TABLECAPTION;
        EXIT(TRUE);
      END;

      TableCaptionValue := '';
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE ProdComponentVerifyChange@9(VAR NewProdOrderComp@1000 : Record 5407;VAR OldProdOrderComp@1001 : Record 5407);
    VAR
      NewRecRef@1002 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      IF NOT WhseLinesExist(
           DATABASE::"Prod. Order Component",NewProdOrderComp.Status,NewProdOrderComp."Prod. Order No.",
           NewProdOrderComp."Prod. Order Line No.",NewProdOrderComp."Line No.",NewProdOrderComp.Quantity)
      THEN
        EXIT;

      NewRecRef.GETTABLE(NewProdOrderComp);
      OldRecRef.GETTABLE(OldProdOrderComp);
      WITH NewProdOrderComp DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Status));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Prod. Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Prod. Order Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Item No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Expected Quantity"));
      END;

      OnAfterProdComponentVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE ProdComponentDelete@7(VAR ProdOrderComp@1000 : Record 5407);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Prod. Order Component",
           ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",
           ProdOrderComp."Line No.",ProdOrderComp.Quantity)
      THEN
        ERROR(Text001,ProdOrderComp.TABLECAPTION,TableCaptionValue);

      OnAfterProdComponentDelete(ProdOrderComp);
    END;

    [External]
    PROCEDURE ItemLineVerifyChange@11(VAR NewItemJnlLine@1000 : Record 83;VAR OldItemJnlLine@1001 : Record 83);
    VAR
      AssemblyLine@1006 : Record 901;
      ProdOrderComp@1003 : Record 5407;
      Location@1005 : Record 14;
      LinesExist@1002 : Boolean;
      QtyChecked@1004 : Boolean;
      QtyRemainingToBePicked@1007 : Decimal;
    BEGIN
      WITH NewItemJnlLine DO BEGIN
        CASE "Entry Type" OF
          "Entry Type"::"Assembly Consumption":
            BEGIN
              TESTFIELD("Order Type","Order Type"::Assembly);
              IF Location.GET("Location Code") AND Location."Require Pick" AND Location."Require Shipment" THEN
                IF AssemblyLine.GET(AssemblyLine."Document Type"::Order,"Order No.","Order Line No.") AND
                   (Quantity >= 0)
                THEN BEGIN
                  QtyRemainingToBePicked := Quantity - AssemblyLine.CalcQtyPickedNotConsumed;
                  IF QtyRemainingToBePicked > 0 THEN
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := TRUE;
                END;

              LinesExist := FALSE;
            END;
          "Entry Type"::Consumption:
            BEGIN
              TESTFIELD("Order Type","Order Type"::Production);
              IF Location.GET("Location Code") AND Location."Require Pick" AND Location."Require Shipment" THEN
                IF ProdOrderComp.GET(
                     ProdOrderComp.Status::Released,
                     "Order No.","Order Line No.","Prod. Order Comp. Line No.") AND
                   (ProdOrderComp."Flushing Method" = ProdOrderComp."Flushing Method"::Manual) AND
                   (Quantity >= 0)
                THEN BEGIN
                  QtyRemainingToBePicked :=
                    Quantity - CalcNextLevelProdOutput(ProdOrderComp) -
                    ProdOrderComp."Qty. Picked" + ProdOrderComp."Expected Quantity" - ProdOrderComp."Remaining Quantity";
                  IF QtyRemainingToBePicked > 0 THEN
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := TRUE;
                END;

              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Component",3,"Order No.","Order Line No.","Prod. Order Comp. Line No.",Quantity);
            END;
          "Entry Type"::Output:
            BEGIN
              TESTFIELD("Order Type","Order Type"::Production);
              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Line",3,"Order No.","Order Line No.",0,Quantity);
            END;
          ELSE
            LinesExist := FALSE;
        END;

        IF LinesExist THEN BEGIN
          IF ("Item No." <> OldItemJnlLine."Item No.") AND
             (OldItemJnlLine."Item No." <> '')
          THEN
            FIELDERROR("Item No.",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          IF ("Variant Code" <> OldItemJnlLine."Variant Code") AND
             (OldItemJnlLine."Variant Code" <> '')
          THEN
            FIELDERROR("Variant Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          IF ("Location Code" <> OldItemJnlLine."Location Code") AND
             (OldItemJnlLine."Location Code" <> '')
          THEN
            FIELDERROR("Location Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          IF ("Unit of Measure Code" <> OldItemJnlLine."Unit of Measure Code") AND
             (OldItemJnlLine."Unit of Measure Code" <> '')
          THEN
            FIELDERROR("Unit of Measure Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          IF (Quantity <> OldItemJnlLine.Quantity) AND
             (OldItemJnlLine.Quantity <> 0) AND
             NOT QtyChecked
          THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
        END;
      END;

      OnAfterItemLineVerifyChange(NewItemJnlLine,OldItemJnlLine);
    END;

    [External]
    PROCEDURE ProdOrderLineVerifyChange@12(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    VAR
      NewRecRef@1003 : RecordRef;
      OldRecRef@1002 : RecordRef;
    BEGIN
      IF NOT WhseLinesExist(
           DATABASE::"Prod. Order Line",NewProdOrderLine.Status,NewProdOrderLine."Prod. Order No.",
           NewProdOrderLine."Line No.",0,NewProdOrderLine.Quantity)
      THEN
        EXIT;

      NewRecRef.GETTABLE(NewProdOrderLine);
      OldRecRef.GETTABLE(OldProdOrderLine);
      WITH NewProdOrderLine DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Status));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Prod. Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Item No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      END;

      OnAfterProdOrderLineVerifyChange(NewProdOrderLine,OldProdOrderLine);
    END;

    [External]
    PROCEDURE ProdOrderLineDelete@8(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      WITH ProdOrderLine DO
        IF WhseLinesExist(
             DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,Quantity)
        THEN
          ERROR(Text001,TABLECAPTION,TableCaptionValue);

      OnAfterProdOrderLineDelete(ProdOrderLine);
    END;

    [External]
    PROCEDURE AssemblyLineVerifyChange@14(VAR NewAssemblyLine@1000 : Record 901;VAR OldAssemblyLine@1001 : Record 901);
    VAR
      Location@1002 : Record 14;
      NewRecRef@1004 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      IF OldAssemblyLine.Type <> OldAssemblyLine.Type::Item THEN
        EXIT;

      IF NOT WhseLinesExist(
           DATABASE::"Assembly Line",NewAssemblyLine."Document Type",NewAssemblyLine."Document No.",
           NewAssemblyLine."Line No.",0,NewAssemblyLine.Quantity)
      THEN
        EXIT;

      NewRecRef.GETTABLE(NewAssemblyLine);
      OldRecRef.GETTABLE(OldAssemblyLine);
      WITH NewAssemblyLine DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Document Type"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Document No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
        IF Location.GET("Location Code") AND NOT Location."Require Shipment" THEN
          VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity to Consume"));
      END;

      OnAfterAssemblyLineVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE AssemblyLineDelete@13(VAR AssemblyLine@1000 : Record 901);
    BEGIN
      IF AssemblyLine.Type <> AssemblyLine.Type::Item THEN
        EXIT;

      IF WhseLinesExist(
           DATABASE::"Assembly Line",AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.",0,
           AssemblyLine.Quantity)
      THEN
        ERROR(Text001,AssemblyLine.TABLECAPTION,TableCaptionValue);

      OnAfterAssemblyLineDelete(AssemblyLine);
    END;

    [External]
    PROCEDURE CalcNextLevelProdOutput@18(ProdOrderComp@1000 : Record 5407) : Decimal;
    VAR
      Item@1001 : Record 27;
      WhseEntry@1002 : Record 7312;
      ProdOrderLine@1003 : Record 5406;
      OutputBase@1004 : Decimal;
    BEGIN
      Item.GET(ProdOrderComp."Item No.");
      IF Item."Replenishment System" = Item."Replenishment System"::Purchase THEN
        EXIT(0);

      ProdOrderLine.SETRANGE(Status,ProdOrderComp.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderComp."Prod. Order No.");
      ProdOrderLine.SETRANGE("Item No.",ProdOrderComp."Item No.");
      ProdOrderLine.SETRANGE("Planning Level Code",ProdOrderComp."Planning Level Code");
      IF ProdOrderLine.FINDFIRST THEN BEGIN
        WhseEntry.SetSourceFilter(
          DATABASE::"Item Journal Line",5,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",TRUE); // Output Journal
        WhseEntry.SETRANGE("Reference No.",ProdOrderLine."Prod. Order No.");
        WhseEntry.SETRANGE("Item No.",ProdOrderLine."Item No.");
        WhseEntry.CALCSUMS(Quantity);
        OutputBase := WhseEntry.Quantity;
      END;

      EXIT(OutputBase);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineVerifyChange@20(VAR NewRecRef@1001 : RecordRef;VAR OldRecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterServiceLineVerifyChange@29(VAR NewRecRef@1000 : RecordRef;VAR OldRecRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseLineVerifyChange@21(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdComponentVerifyChange@22(VAR NewRecRef@1001 : RecordRef;VAR OldRecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdOrderLineVerifyChange@23(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterItemLineVerifyChange@24(VAR NewItemJnlLine@1000 : Record 83;VAR OldItemJnlLine@1001 : Record 83);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransLineVerifyChange@33(VAR NewTransLine@1000 : Record 5741;VAR OldTransLine@1001 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssemblyLineVerifyChange@37(VAR NewRecRef@1001 : RecordRef;VAR OldRecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineDelete@25(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterServiceLineDelete@26(VAR ServiceLine@1000 : Record 5902);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseLineDelete@27(VAR PurchaseLine@1000 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransLineDelete@34(VAR TransferLine@1000 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdComponentDelete@35(VAR ProdOrderComp@1000 : Record 5407);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdOrderLineDelete@36(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssemblyLineDelete@38(VAR AssemblyLine@1000 : Record 901);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVerifyFieldNotChanged@28(NewRecRef@1002 : RecordRef;OldRecRef@1001 : RecordRef;FieldNumber@1000 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

