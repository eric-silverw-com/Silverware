OBJECT Codeunit 1351 Telemetry Subscribers
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:08:09 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 9802=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProfileChangedTelemetryMsg@1001 : TextConst '@@@="%1=Previous profile id, %2=New profile id";ENU=Profile changed from %1 to %2.';
      ProfileChangedTelemetryCategoryTxt@1002 : TextConst 'ENU=AL User Profile';
      NoSeriesCategoryTxt@1004 : TextConst '@@@={LOCKED};ENU=AL NoSeries';
      NoSeriesEditedTelemetryTxt@1003 : TextConst '@@@={LOCKED};ENU=The number series was changed by the user.';
      PermissionSetCategoryTxt@1005 : TextConst '@@@={LOCKED};ENU=AL PermissionSet';
      PermissionSetLinkAddedTelemetryTxt@1000 : TextConst '@@@={LOCKED};ENU=A Permission Set Link was added between Source Permission Set %1 and Permission Set %2. Total count of Permission Set Links are %3.';
      PermissionSetAddedTelemetryTxt@1006 : TextConst '@@@={LOCKED};ENU=Permission Set %1 was added. Total count of user defined Permission Sets is %2.';
      PermissionSetAssignedToUserTelemetryTxt@1007 : TextConst '@@@={LOCKED};ENU=Permission Set %1 was added to a user.';
      PermissionSetAssignedToUserGroupTelemetryTxt@1008 : TextConst '@@@={LOCKED};ENU=Permission Set %1 was added to a user group %2.';
      EffectivePermsCalculatedTxt@1009 : TextConst '@@@="{LOCKED} %1 = user security ID, %2 = company name, %3 = object type, %4 = object Id";ENU=Effective permissions were calculated for user %1, company %2, object type %3, object ID %4.';
      TenantPermissionsChangedFromEffectivePermissionsPageTxt@1011 : TextConst '@@@="{LOCKED} %1 = permission set id";ENU=Tenant permission set %1 was changed.';
      AnonymizedTagsTxt@1012 : TextConst '@@@="{LOCKED} %1 = text to anonimyze";ENU=<pi>%1</pi>';

    [EventSubscriber(Codeunit,40,OnAfterCompanyOpen,"",Skip,Skip)]
    LOCAL PROCEDURE ScheduleMasterdataTelemetryAfterCompanyOpen@1();
    VAR
      CodeUnitMetadata@1001 : Record 2000000137;
      TelemetryManagement@1000 : Codeunit 1350;
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      CodeUnitMetadata.ID := CODEUNIT::"Generate Master Data Telemetry";
      TelemetryManagement.ScheduleCalEventsForTelemetryAsync(CodeUnitMetadata.RECORDID,CODEUNIT::"Create Telemetry Cal. Events",20);
    END;

    [EventSubscriber(Codeunit,40,OnAfterCompanyOpen,"",Skip,Skip)]
    LOCAL PROCEDURE ScheduleActivityTelemetryAfterCompanyOpen@2();
    VAR
      CodeUnitMetadata@1001 : Record 2000000137;
      TelemetryManagement@1000 : Codeunit 1350;
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      CodeUnitMetadata.ID := CODEUNIT::"Generate Activity Telemetry";
      TelemetryManagement.ScheduleCalEventsForTelemetryAsync(CodeUnitMetadata.RECORDID,CODEUNIT::"Create Telemetry Cal. Events",21);
    END;

    [EventSubscriber(Codeunit,9170,OnProfileChanged,"",Skip,Skip)]
    LOCAL PROCEDURE SendTraceOnProfileChanged@3(PrevProfileID@1000 : Code[30];ProfileID@1001 : Code[30]);
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      SENDTRACETAG(
        '00001O5',ProfileChangedTelemetryCategoryTxt,VERBOSITY::Normal,STRSUBSTNO(ProfileChangedTelemetryMsg,PrevProfileID,ProfileID),
        DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Page,2340,OnAfterNoSeriesModified,"",Skip,Skip)]
    LOCAL PROCEDURE LogNoSeriesModifiedInvoicing@14();
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      SENDTRACETAG('00001PI',NoSeriesCategoryTxt,VERBOSITY::Normal,NoSeriesEditedTelemetryTxt,DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Table,9802,OnAfterInsertEvent,"",Skip,Skip)]
    LOCAL PROCEDURE SendTraceOnPermissionSetLinkAdded@4(VAR Rec@1000 : Record 9802;RunTrigger@1001 : Boolean);
    VAR
      PermissionSetLink@1002 : Record 9802;
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      SENDTRACETAG(
        '0000250',PermissionSetCategoryTxt,VERBOSITY::Normal,
        STRSUBSTNO(PermissionSetLinkAddedTelemetryTxt,Rec."Permission Set ID",Rec."Linked Permission Set ID",PermissionSetLink.COUNT),
        DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Table,2000000165,OnAfterInsertEvent,"",Skip,Skip)]
    LOCAL PROCEDURE SendTraceOnUserDefinedPermissionSetIsAdded@10(VAR Rec@1000 : Record 2000000165;RunTrigger@1001 : Boolean);
    VAR
      TenantPermissionSet@1002 : Record 2000000165;
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      IF NOT ISNULLGUID(Rec."App ID") THEN
        EXIT;

      TenantPermissionSet.SETRANGE("App ID",Rec."App ID");
      SENDTRACETAG(
        '0000251',PermissionSetCategoryTxt,VERBOSITY::Normal,
        STRSUBSTNO(PermissionSetAddedTelemetryTxt,Rec."Role ID",TenantPermissionSet.COUNT),DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Table,2000000053,OnAfterInsertEvent,"",Skip,Skip)]
    LOCAL PROCEDURE SendTraceOnUserDefinedPermissionSetIsAssignedToAUser@7(VAR Rec@1000 : Record 2000000053;RunTrigger@1001 : Boolean);
    VAR
      TenantPermissionSet@1002 : Record 2000000165;
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      IF NOT ISNULLGUID(Rec."App ID") THEN
        EXIT;

      IF NOT TenantPermissionSet.GET(Rec."App ID",Rec."Role ID") THEN
        EXIT;

      SENDTRACETAG(
        '0000252',PermissionSetCategoryTxt,VERBOSITY::Normal,STRSUBSTNO(PermissionSetAssignedToUserTelemetryTxt,Rec."Role ID"),
        DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Table,9003,OnAfterInsertEvent,"",Skip,Skip)]
    LOCAL PROCEDURE SendTraceOnUserDefinedPermissionSetIsAssignedToAUserGroup@16(VAR Rec@1000 : Record 9003;RunTrigger@1001 : Boolean);
    VAR
      TenantPermissionSet@1002 : Record 2000000165;
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      IF NOT ISNULLGUID(Rec."App ID") THEN
        EXIT;

      IF NOT TenantPermissionSet.GET(Rec."App ID",Rec."Role ID") THEN
        EXIT;

      SENDTRACETAG(
        '0000253',PermissionSetCategoryTxt,VERBOSITY::Normal,
        STRSUBSTNO(PermissionSetAssignedToUserGroupTelemetryTxt,Rec."Role ID",Rec."User Group Code"),
        DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Page,9852,OnEffectivePermissionsPopulated,"",Skip,Skip)]
    LOCAL PROCEDURE EffectivePermissionsFetchedInPage@5(CurrUserId@1000 : GUID;CurrCompanyName@1001 : Text[30];CurrObjectType@1002 : Integer;CurrObjectId@1003 : Integer);
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      SENDTRACETAG(
        '000027E',PermissionSetCategoryTxt,VERBOSITY::Normal,
        STRSUBSTNO(EffectivePermsCalculatedTxt,STRSUBSTNO(AnonymizedTagsTxt,CurrUserId),
          STRSUBSTNO(AnonymizedTagsTxt,CurrCompanyName),CurrObjectType,CurrObjectId),
        DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Codeunit,9852,OnTenantPermissionModified,"",Skip,Skip)]
    LOCAL PROCEDURE EffectivePermissionsChangeInPage@11(PermissionSetId@1000 : Code[20]);
    BEGIN
      IF NOT IsSaaS THEN
        EXIT;

      SENDTRACETAG(
        '000027G',PermissionSetCategoryTxt,VERBOSITY::Normal,
        STRSUBSTNO(TenantPermissionsChangedFromEffectivePermissionsPageTxt,PermissionSetId),
        DATACLASSIFICATION::SystemMetadata);
    END;

    LOCAL PROCEDURE IsSaaS@28() : Boolean;
    VAR
      PermissionManager@1000 : Codeunit 9002;
    BEGIN
      EXIT(PermissionManager.SoftwareAsAService);
    END;

    BEGIN
    END.
  }
}

