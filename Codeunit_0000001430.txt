OBJECT Codeunit 1430 Role Center Notification Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EvaluationNotificationIdTxt@1013 : TextConst '@@@={Locked};ENU=cb28c63d-4daf-453a-b41b-a8de9963d563;ESM=cb28c63d-4daf-453a-b41b-a8de9963d563;FRC=cb28c63d-4daf-453a-b41b-a8de9963d563;ENC=cb28c63d-4daf-453a-b41b-a8de9963d563';
      TrialNotificationIdTxt@1012 : TextConst '@@@={Locked};ENU=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ESM=2751b488-ca52-42ef-b6d7-d7b4ba841e80;FRC=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ENC=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      TrialSuspendedNotificationIdTxt@1022 : TextConst '@@@={Locked};ENU=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ESM=2751b488-ca52-42ef-b6d7-d7b4ba841e80;FRC=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ENC=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      PaidWarningNotificationIdTxt@1011 : TextConst '@@@={Locked};ENU=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ESM=2751b488-ca52-42ef-b6d7-d7b4ba841e80;FRC=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ENC=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      PaidSuspendedNotificationIdTxt@1009 : TextConst '@@@={Locked};ENU=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ESM=2751b488-ca52-42ef-b6d7-d7b4ba841e80;FRC=2751b488-ca52-42ef-b6d7-d7b4ba841e80;ENC=2751b488-ca52-42ef-b6d7-d7b4ba841e80';
      SandboxNotificationIdTxt@1015 : TextConst '@@@={Locked};ENU=d82835d9-a005-451a-972b-0d6532de2071;ESM=d82835d9-a005-451a-972b-0d6532de2071;FRC=d82835d9-a005-451a-972b-0d6532de2071;ENC=d82835d9-a005-451a-972b-0d6532de2071';
      ChangeToPremiumExpNotificationIdTxt@1029 : TextConst '@@@={Locked};ENU=58982418-e1d1-4879-bda2-6033ca151b83;ESM=58982418-e1d1-4879-bda2-6033ca151b83;FRC=58982418-e1d1-4879-bda2-6033ca151b83;ENC=58982418-e1d1-4879-bda2-6033ca151b83';
      TrialNotificationDaysSinceStartTxt@1014 : TextConst '@@@={Locked};ENU=1;ESM=1;FRC=1;ENC=1';
      EvaluationNotificationLinkTxt@1007 : TextConst 'ENU=Start trial...;ESM=Iniciar prueba...;FRC=D‚marrer l''‚valuation...;ENC=Start trial...';
      TrialNotificationLinkTxt@1003 : TextConst 'ENU=Buy subscription...;ESM=Comprar suscripci¢n...;FRC=Souscrire … l''abonnement...;ENC=Buy subscription...';
      TrialSuspendedNotificationLinkTxt@1020 : TextConst 'ENU=Subscribe now...;ESM=Suscribirse ahora...;FRC=S''inscrire maintenant...;ENC=Subscribe now...';
      PaidWarningNotificationLinkTxt@1008 : TextConst 'ENU=Renew subscription...;ESM=Renovar suscripci¢n...;FRC=Renouveler l''abonnement...;ENC=Renew subscription...';
      PaidSuspendedNotificationLinkTxt@1005 : TextConst 'ENU=Renew subscription...;ESM=Renovar suscripci¢n...;FRC=Renouveler l''abonnement...;ENC=Renew subscription...';
      EvaluationNotificationMsg@1000 : TextConst '@@@="%1=Trial duration in days";ENU=Want more? Start a free, %1-day trial to unlock advanced features and use your own company data.;ESM=¨Quiere m s? Comience una prueba gratuita de %1 d¡as para desbloquear las funciones avanzadas y utilizar los datos de su propia empresa.;FRC=Et ensuiteÿ? Commencez l''‚valuation gratuite de %1 jours pour d‚verrouiller les fonctions avanc‚es et utiliser les donn‚es de votre compagnie.;ENC=Want more? Start a free, %1-day trial to unlock advanced features and use your own company data.';
      TrialNotificationMsg@1001 : TextConst '@@@="%1=Count of days until trial expires";ENU=Your trial period expires in %1 days. Do you want to get a subscription?;ESM=Su per¡odo de prueba caduca en %1 d¡as. ¨Desea obtener una suscripci¢n?;FRC=Votre p‚riode d''‚valuation expire dans %1ÿjours. Souhaitez-vous souscrire un abonnementÿ?;ENC=Your trial period expires in %1 days. Do you want to get a subscription?';
      TrialSuspendedNotificationMsg@1019 : TextConst '@@@="%1=Count of days until block of access";ENU=Your trial period has expired. Subscribe within %1 days and keep your company data.;ESM=El per¡odo de prueba ha expirado. Puede suscribirse en un plazo de %1 d¡as y conservar los datos de su empresa.;FRC=Votre p‚riode d''‚valuation a expir‚. Abonnez-vous dans les %1ÿjours pour conserver les donn‚es de votre compagnie.;ENC=Your trial period has expired. Subscribe within %1 days and keep your company data.';
      PaidWarningNotificationMsg@1004 : TextConst '@@@="%1=Count of days until block of access";ENU=Your subscription expires in %1 days. Renew soon to keep your work.;ESM=Su suscripci¢n caduca en %1 d¡as. Renueve pronto para conservar su trabajo.;FRC=Votre abonnement expire dans %1ÿjours. Renouvelez rapidement pour pr‚server votre travail.;ENC=Your subscription expires in %1 days. Renew soon to keep your work.';
      PaidSuspendedNotificationMsg@1017 : TextConst '@@@="%1=Count of days until data deletion";ENU=Your subscription has expired. Unless you renew, we will delete your data in %1 days.;ESM=Su suscripci¢n ha vencido. A menos que renueve, se eliminar n los datos en %1 d¡as.;FRC=Votre abonnement a expir‚. Vos donn‚es seront supprim‚es dans %1ÿjours, sauf si vous renouvelez.;ENC=Your subscription has expired. Unless you renew, we will delete your data in %1 days.';
      ChooseCompanyMsg@1002 : TextConst 'ENU=Choose a non-evaluation company to start your trial.;ESM=Seleccione una empresa que no sea de evaluaci¢n para iniciar su per¡odo de prueba.;FRC=Choisissez une compagnie r‚elle pour d‚marrer votre version d''‚valuation.;ENC=Choose a non-evaluation company to start your trial.';
      SandboxNotificationMsg@1006 : TextConst 'ENU=This is a sandbox environment (preview) for test, demo, or development purposes only.;ESM=Este es un entorno de espacio aislado (vista previa) solo con fines de prueba, demostraci¢n o desarrollo.;FRC=Il s''agit d''un environnement Sandbox (aper‡u) uniquement … des fins de test, de d‚monstration ou de d‚veloppement.;ENC=This is a sandbox environment (preview) for test, demo, or development purposes only.';
      SandboxNotificationNameTok@1016 : TextConst 'ENU=Notify user of sandbox environment (preview).;ESM=Notifica al usuario del entorno de espacio aislado (vista previa).;FRC=Avertir l''utilisateur de l''environnement Sandbox (aper‡u).;ENC=Notify user of sandbox environment (preview).';
      DontShowThisAgainMsg@1018 : TextConst 'ENU=Don''t show this again.;ESM=No volver a mostrar esto.;FRC=Ne plus afficher ceci.;ENC=Don''t show this again.';
      SandboxNotificationDescTok@1021 : TextConst 'ENU=Show a notification informing the user that they are working in a sandbox environment (preview).;ESM=Muestra una notificaci¢n para informar al usuario de que est  trabajando en un entorno de espacio aislado (vista previa).;FRC=Afficher une notification informant l''utilisateur qu''il travaille dans un environnement Sandbox (aper‡u).;ENC=Show a notification informing the user that they are working in a sandbox environment (preview).';
      ChangeToPremiumExpNotificationMsg@1036 : TextConst 'ENU=This Role Center contains functionality that may not be visible because of your experience setting or assigned plan. For more information, see Changing Which Features are Displayed;ESM=Esta µrea de tareas contiene funcionalidad que puede no ser visible por su configuraci¢n de experiencia o el plan asignado. Para obtener m s informaci¢n, vea Cambiar qu‚ caracter¡sticas se muestran;FRC=Ce tableau de bord contient des fonctionnalit‚s qui peuvent ne pas ˆtre visibles en raison du paramŠtre Exp‚rience ou du plan qui vous est affect‚. Pour plus d''informations, voir Modification des fonctionnalit‚s affich‚es;ENC=This Role Centre contains functionality that may not be visible because of your experience setting or assigned plan. For more information, see Changing Which Features are Displayed';
      ChangeToPremiumExpURLTxt@1039 : TextConst '@@@=Locked;ENU="https://go.microsoft.com/fwlink/?linkid=873395";ESM="https://go.microsoft.com/fwlink/?linkid=873395";FRC="https://go.microsoft.com/fwlink/?linkid=873395";ENC="https://go.microsoft.com/fwlink/?linkid=873395"';
      ChangeToPremiumExpNotificationDescTok@1028 : TextConst 'ENU=Show a notification suggesting the user to change to Premium experience.;ESM=Mostrar una notificaci¢n para sugerir al usuario que cambie a la experiencia Premium.;FRC=Affichez une notification pour sugg‚rer … l''utilisateur de passer … l''exp‚rience Premium.;ENC=Show a notification suggesting the user to change to Premium experience.';
      ChangeToPremiumExpNotificationNameTok@1046 : TextConst 'ENU=Suggest to change the Experience setting.;ESM=Configuraci¢n de sugerencia de cambio de experiencia.;FRC=Sugg‚rez de modifier le paramŠtre Exp‚rience.;ENC=Suggest to change the Experience setting.';
      NoAccessToCompanyErr@1010 : TextConst '@@@="%1 = Company name";ENU=Cannot start trial company %1 because you do not have access to the company.;ESM=No puede iniciar la empresa de prueba %1 porque no tiene acceso a la empresa.;FRC=Impossible de d‚marrer la compagnie d''‚valuation %1, car vous n''avez pas accŠs … la compagnie.;ENC=Cannot start trial company %1 because you do not have access to the company.';

    LOCAL PROCEDURE CreateAndSendEvaluationNotification@10();
    VAR
      EvaluationNotification@1001 : Notification;
      TrialTotalDays@1000 : Integer;
    BEGIN
      TrialTotalDays := GetTrialTotalDays;
      EvaluationNotification.ID := GetEvaluationNotificationId;
      EvaluationNotification.MESSAGE := STRSUBSTNO(EvaluationNotificationMsg,TrialTotalDays);
      EvaluationNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      EvaluationNotification.ADDACTION(
        EvaluationNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'EvaluationNotificationAction');
      EvaluationNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendTrialNotification@21();
    VAR
      TrialNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      TrialNotification.ID := GetTrialNotificationId;
      TrialNotification.MESSAGE := STRSUBSTNO(TrialNotificationMsg,RemainingDays);
      TrialNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      TrialNotification.ADDACTION(
        TrialNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'TrialNotificationAction');
      TrialNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendTrialSuspendedNotification@70();
    VAR
      TrialSuspendedNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      TrialSuspendedNotification.ID := GetTrialSuspendedNotificationId;
      TrialSuspendedNotification.MESSAGE := STRSUBSTNO(TrialSuspendedNotificationMsg,RemainingDays);
      TrialSuspendedNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      TrialSuspendedNotification.ADDACTION(
        TrialSuspendedNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'TrialSuspendedNotificationAction');
      TrialSuspendedNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendPaidWarningNotification@26();
    VAR
      PaidWarningNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      PaidWarningNotification.ID := GetPaidWarningNotificationId;
      PaidWarningNotification.MESSAGE := STRSUBSTNO(PaidWarningNotificationMsg,RemainingDays);
      PaidWarningNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      PaidWarningNotification.ADDACTION(
        PaidWarningNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'PaidWarningNotificationAction');
      PaidWarningNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendPaidSuspendedNotification@25();
    VAR
      PaidSuspendedNotification@1001 : Notification;
      RemainingDays@1000 : Integer;
    BEGIN
      RemainingDays := GetLicenseRemainingDays;
      PaidSuspendedNotification.ID := GetPaidSuspendedNotificationId;
      PaidSuspendedNotification.MESSAGE := STRSUBSTNO(PaidSuspendedNotificationMsg,RemainingDays);
      PaidSuspendedNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      PaidSuspendedNotification.ADDACTION(
        PaidSuspendedNotificationLinkTxt,CODEUNIT::"Role Center Notification Mgt.",'PaidSuspendedNotificationAction');
      PaidSuspendedNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendSandboxNotification@32();
    VAR
      SandboxNotification@1001 : Notification;
    BEGIN
      SandboxNotification.ID := GetSandboxNotificationId;
      SandboxNotification.MESSAGE := SandboxNotificationMsg;
      SandboxNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      SandboxNotification.ADDACTION(DontShowThisAgainMsg,CODEUNIT::"Role Center Notification Mgt.",'DisableSandboxNotification');
      SandboxNotification.SEND;
    END;

    LOCAL PROCEDURE CreateAndSendChangeToPremiumExpNotification@52();
    VAR
      ChangeToPremiumExpNotification@1001 : Notification;
    BEGIN
      ChangeToPremiumExpNotification.ID := GetChangeToPremiumExpNotificationId;
      ChangeToPremiumExpNotification.MESSAGE := ChangeToPremiumExpNotificationMsg;
      ChangeToPremiumExpNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ChangeToPremiumExpNotification.ADDACTION(
        ChangeToPremiumExpURLTxt,CODEUNIT::"Role Center Notification Mgt.",'ChangeToPremiumExpURL');
      ChangeToPremiumExpNotification.ADDACTION(
        DontShowThisAgainMsg,CODEUNIT::"Role Center Notification Mgt.",'DisableChangeToPremiumExpNotification');
      ChangeToPremiumExpNotification.SEND;
    END;

    [External]
    PROCEDURE HideEvaluationNotificationAfterStartingTrial@13();
    VAR
      TenantLicenseState@1000 : Codeunit 2300;
      EvaluationNotification@1001 : Notification;
    BEGIN
      IF NOT TenantLicenseState.IsTrialMode THEN
        EXIT;
      IF NOT AreNotificationsSupported THEN
        EXIT;
      EvaluationNotification.ID := GetEvaluationNotificationId;
      EvaluationNotification.RECALL;
    END;

    PROCEDURE GetEvaluationNotificationId@8() : GUID;
    VAR
      EvaluationNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(EvaluationNotificationId,EvaluationNotificationIdTxt);
      EXIT(EvaluationNotificationId);
    END;

    PROCEDURE GetTrialNotificationId@19() : GUID;
    VAR
      TrialNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(TrialNotificationId,TrialNotificationIdTxt);
      EXIT(TrialNotificationId);
    END;

    PROCEDURE GetTrialSuspendedNotificationId@63() : GUID;
    VAR
      TrialSuspendedNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(TrialSuspendedNotificationId,TrialSuspendedNotificationIdTxt);
      EXIT(TrialSuspendedNotificationId);
    END;

    PROCEDURE GetPaidWarningNotificationId@31() : GUID;
    VAR
      PaidWarningNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(PaidWarningNotificationId,PaidWarningNotificationIdTxt);
      EXIT(PaidWarningNotificationId);
    END;

    PROCEDURE GetPaidSuspendedNotificationId@28() : GUID;
    VAR
      PaidSuspendedNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(PaidSuspendedNotificationId,PaidSuspendedNotificationIdTxt);
      EXIT(PaidSuspendedNotificationId);
    END;

    PROCEDURE GetSandboxNotificationId@36() : GUID;
    VAR
      SandboxNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(SandboxNotificationId,SandboxNotificationIdTxt);
      EXIT(SandboxNotificationId);
    END;

    PROCEDURE GetChangeToPremiumExpNotificationId@76() : GUID;
    VAR
      ChangeToPremiumExpNotificationId@1000 : GUID;
    BEGIN
      EVALUATE(ChangeToPremiumExpNotificationId,ChangeToPremiumExpNotificationIdTxt);
      EXIT(ChangeToPremiumExpNotificationId);
    END;

    LOCAL PROCEDURE AreNotificationsSupported@22() : Boolean;
    VAR
      PermissionManager@1001 : Codeunit 9002;
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT(FALSE);

      IF IdentityManagement.IsInvAppId THEN
        EXIT(FALSE);

      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF PermissionManager.IsSandboxConfiguration THEN
        EXIT(FALSE);

      IF PermissionManager.IsPreview THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AreSandboxNotificationsSupported@41() : Boolean;
    VAR
      PermissionManager@1001 : Codeunit 9002;
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT(FALSE);

      IF IdentityManagement.IsInvAppId THEN
        EXIT(FALSE);

      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF NOT PermissionManager.IsSandboxConfiguration THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsEvaluationNotificationEnabled@24() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      ClientTypeManagement@1001 : Codeunit 4;
      TenantLicenseState@1002 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsEvaluationMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.IsDeviceClientType THEN
        EXIT(FALSE);

      RoleCenterNotifications.Initialize;

      IF RoleCenterNotifications.GetEvaluationNotificationState =
         RoleCenterNotifications."Evaluation Notification State"::Disabled
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsTrialNotificationEnabled@12() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      ClientTypeManagement@1001 : Codeunit 4;
      TenantLicenseState@1002 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsTrialMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.IsDeviceClientType THEN
        EXIT(FALSE);

      IF RoleCenterNotifications.IsFirstLogon THEN
        EXIT(FALSE);

      IF GetLicenseFullyUsedDays < GetTrialNotificationDaysSinceStart THEN
        EXIT(FALSE);

      EXIT(IsBuyNotificationEnabled);
    END;

    LOCAL PROCEDURE IsTrialSuspendedNotificationEnabled@65() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      ClientTypeManagement@1001 : Codeunit 4;
      TenantLicenseState@1002 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsTrialSuspendedMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF ClientTypeManagement.IsDeviceClientType THEN
        EXIT(FALSE);

      IF RoleCenterNotifications.IsFirstLogon THEN
        EXIT(FALSE);

      EXIT(IsBuyNotificationEnabled);
    END;

    LOCAL PROCEDURE IsPaidWarningNotificationEnabled@35() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      TenantLicenseState@1001 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsPaidWarningMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF RoleCenterNotifications.IsFirstLogon THEN
        EXIT(FALSE);

      EXIT(IsBuyNotificationEnabled);
    END;

    LOCAL PROCEDURE IsPaidSuspendedNotificationEnabled@33() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
      TenantLicenseState@1001 : Codeunit 2300;
    BEGIN
      IF NOT TenantLicenseState.IsPaidSuspendedMode THEN
        EXIT(FALSE);

      IF NOT AreNotificationsSupported THEN
        EXIT(FALSE);

      IF RoleCenterNotifications.IsFirstLogon THEN
        EXIT(FALSE);

      EXIT(IsBuyNotificationEnabled);
    END;

    [External]
    PROCEDURE ShowNotifications@34() : Boolean;
    VAR
      DataMigrationMgt@1006 : Codeunit 1798;
      DataClassificationMgt@1007 : Codeunit 1750;
      ResultEvaluation@1001 : Boolean;
      ResultTrial@1000 : Boolean;
      ResultTrialSuspended@1003 : Boolean;
      ResultPaidWarning@1005 : Boolean;
      ResultPaidSuspended@1004 : Boolean;
      ResultSandbox@1002 : Boolean;
    BEGIN
      OnBeforeShowNotifications;

      ResultEvaluation := ShowEvaluationNotification;
      ResultTrial := ShowTrialNotification;
      ResultTrialSuspended := ShowTrialSuspendedNotification;
      ResultPaidWarning := ShowPaidWarningNotification;
      ResultPaidSuspended := ShowPaidSuspendedNotification;
      ResultSandbox := ShowSandboxNotification;

      DataMigrationMgt.ShowDataMigrationRelatedGlobalNotifications;
      DataClassificationMgt.ShowNotifications;

      COMMIT;
      EXIT(
        ResultEvaluation OR
        ResultTrial OR ResultTrialSuspended OR
        ResultPaidWarning OR ResultPaidSuspended OR
        ResultSandbox);
    END;

    [External]
    PROCEDURE ShowEvaluationNotification@7() : Boolean;
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      IF NOT IsEvaluationNotificationEnabled THEN
        EXIT(FALSE);

      // Verify, that the user has company setup rights
      IF NOT Company.WRITEPERMISSION THEN
        EXIT(FALSE);

      CreateAndSendEvaluationNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowTrialNotification@18() : Boolean;
    BEGIN
      IF NOT IsTrialNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendTrialNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowTrialSuspendedNotification@67() : Boolean;
    BEGIN
      IF NOT IsTrialSuspendedNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendTrialSuspendedNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowPaidWarningNotification@40() : Boolean;
    BEGIN
      IF NOT IsPaidWarningNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendPaidWarningNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowPaidSuspendedNotification@39() : Boolean;
    BEGIN
      IF NOT IsPaidSuspendedNotificationEnabled THEN
        EXIT(FALSE);

      CreateAndSendPaidSuspendedNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowSandboxNotification@16() : Boolean;
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF NOT AreSandboxNotificationsSupported THEN
        EXIT(FALSE);

      IF NOT MyNotifications.IsEnabled(GetSandboxNotificationId) THEN
        EXIT(FALSE);

      CreateAndSendSandboxNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowChangeToPremiumExpNotification@56() : Boolean;
    VAR
      MyNotifications@1000 : Record 1518;
      ApplicationAreaMgmtFacade@1002 : Codeunit 9179;
    BEGIN
      IF ApplicationAreaMgmtFacade.IsPremiumExperienceEnabled THEN
        EXIT(FALSE);

      IF NOT MyNotifications.IsEnabled(GetChangeToPremiumExpNotificationId) THEN
        EXIT(FALSE);

      CreateAndSendChangeToPremiumExpNotification;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE EvaluationNotificationAction@4(EvaluationNotification@1000 : Notification);
    BEGIN
      StartTrial;
    END;

    [External]
    PROCEDURE TrialNotificationAction@2(TrialNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE TrialSuspendedNotificationAction@38(TrialSuspendedNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE PaidWarningNotificationAction@45(PaidWarningNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE PaidSuspendedNotificationAction@42(PaidSuspendedNotification@1001 : Notification);
    BEGIN
      BuySubscription;
    END;

    [External]
    PROCEDURE GetLicenseRemainingDays@11() : Integer;
    VAR
      DateFilterCalc@1002 : Codeunit 358;
      TenantLicenseState@1007 : Codeunit 2300;
      Now@1001 : DateTime;
      EndDate@1006 : DateTime;
      TimeDuration@1003 : Decimal;
      MillisecondsPerDay@1005 : BigInteger;
      RemainingDays@1004 : Integer;
    BEGIN
      Now := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
      TenantLicenseState.GetEndDate(EndDate);
      IF EndDate > Now THEN BEGIN
        TimeDuration := EndDate - Now;
        MillisecondsPerDay := 86400000;
        RemainingDays := ROUND(TimeDuration / MillisecondsPerDay,1,'=');
        EXIT(RemainingDays);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE GetLicenseFullyUsedDays@37() : Integer;
    VAR
      TenantLicenseState@1000 : Codeunit 2300;
      DateFilterCalc@1002 : Codeunit 358;
      StartDate@1006 : DateTime;
      Now@1001 : DateTime;
      TimeDuration@1003 : Decimal;
      MillisecondsPerDay@1005 : BigInteger;
      FullyUsedDays@1004 : Integer;
    BEGIN
      Now := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
      TenantLicenseState.GetStartDate(StartDate);
      IF StartDate <> 0DT THEN
        IF Now > StartDate THEN BEGIN
          TimeDuration := Now - StartDate;
          MillisecondsPerDay := 86400000;
          FullyUsedDays := ROUND(TimeDuration / MillisecondsPerDay,1,'<');
          EXIT(FullyUsedDays);
        END;
      EXIT(0);
    END;

    [External]
    PROCEDURE GetTrialTotalDays@9() : Integer;
    VAR
      TenantLicenseState@1002 : Record 2000000189;
      TenantLicenseStateMgt@1000 : Codeunit 2300;
      TrialTotalDays@1001 : Integer;
    BEGIN
      TrialTotalDays := TenantLicenseStateMgt.GetPeriod(TenantLicenseState.State::Trial);
      EXIT(TrialTotalDays);
    END;

    LOCAL PROCEDURE GetTrialNotificationDaysSinceStart@27() : Integer;
    VAR
      DaysSinceStart@1001 : Integer;
    BEGIN
      EVALUATE(DaysSinceStart,TrialNotificationDaysSinceStartTxt);
      EXIT(DaysSinceStart);
    END;

    LOCAL PROCEDURE StartTrial@43();
    VAR
      AssistedCompanySetup@1001 : Codeunit 1800;
      SessionSetting@1004 : SessionSettings;
      NewCompany@1000 : Text[30];
    BEGIN
      IF NOT GetMyCompany(NewCompany) THEN BEGIN
        MESSAGE(ChooseCompanyMsg);
        CreateAndSendEvaluationNotification;
        EXIT;
      END;

      IF NOT AssistedCompanySetup.HasCurrentUserAccessToCompany(NewCompany) THEN
        ERROR(NoAccessToCompanyErr,NewCompany);

      ClickEvaluationNotification;
      COMMIT;

      DisableEvaluationNotification;

      SessionSetting.INIT;
      SessionSetting.COMPANY(NewCompany);
      SessionSetting.REQUESTSESSIONUPDATE(TRUE)
    END;

    LOCAL PROCEDURE BuySubscription@44();
    BEGIN
      DisableBuyNotification;
      PAGE.RUN(PAGE::"Buy Subscription");
    END;

    LOCAL PROCEDURE ClickEvaluationNotification@1();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetEvaluationNotificationState(RoleCenterNotifications."Evaluation Notification State"::Clicked);
    END;

    PROCEDURE DisableEvaluationNotification@29();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetEvaluationNotificationState(RoleCenterNotifications."Evaluation Notification State"::Disabled);
    END;

    PROCEDURE EnableEvaluationNotification@80();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetEvaluationNotificationState(RoleCenterNotifications."Evaluation Notification State"::Enabled);
    END;

    PROCEDURE IsEvaluationNotificationClicked@30() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      EXIT(RoleCenterNotifications.GetEvaluationNotificationState = RoleCenterNotifications."Evaluation Notification State"::Clicked);
    END;

    PROCEDURE DisableBuyNotification@20();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetBuyNotificationState(RoleCenterNotifications."Buy Notification State"::Disabled);
    END;

    PROCEDURE EnableBuyNotification@79();
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      RoleCenterNotifications.SetBuyNotificationState(RoleCenterNotifications."Buy Notification State"::Enabled);
    END;

    LOCAL PROCEDURE IsBuyNotificationEnabled@17() : Boolean;
    VAR
      RoleCenterNotifications@1000 : Record 1430;
    BEGIN
      EXIT(RoleCenterNotifications.GetBuyNotificationState <> RoleCenterNotifications."Buy Notification State"::Disabled);
    END;

    PROCEDURE DisableSandboxNotification@46(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(GetSandboxNotificationId) THEN
        MyNotifications.InsertDefault(GetSandboxNotificationId,SandboxNotificationNameTok,SandboxNotificationDescTok,FALSE);
    END;

    PROCEDURE DisableChangeToPremiumExpNotification@66(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(GetChangeToPremiumExpNotificationId) THEN
        MyNotifications.InsertDefault(
          GetChangeToPremiumExpNotificationId,ChangeToPremiumExpNotificationNameTok,ChangeToPremiumExpNotificationDescTok,FALSE);
    END;

    PROCEDURE CompanyNotSelectedMessage@14() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE EvaluationNotificationMessage@61() : Text;
    BEGIN
      EXIT(EvaluationNotificationMsg);
    END;

    PROCEDURE TrialNotificationMessage@68() : Text;
    BEGIN
      EXIT(TrialNotificationMsg);
    END;

    PROCEDURE TrialSuspendedNotificationMessage@71() : Text;
    BEGIN
      EXIT(TrialSuspendedNotificationMsg);
    END;

    PROCEDURE PaidWarningNotificationMessage@74() : Text;
    BEGIN
      EXIT(PaidWarningNotificationMsg);
    END;

    PROCEDURE PaidSuspendedNotificationMessage@75() : Text;
    BEGIN
      EXIT(PaidSuspendedNotificationMsg);
    END;

    PROCEDURE SandboxNotificationMessage@15() : Text;
    BEGIN
      EXIT(SandboxNotificationMsg);
    END;

    PROCEDURE ChangeToPremiumExpNotificationMessage@49() : Text;
    BEGIN
      EXIT(ChangeToPremiumExpNotificationMsg);
    END;

    PROCEDURE ChangeToPremiumExpURL@59(Notification@1000 : Notification);
    BEGIN
      HYPERLINK(ChangeToPremiumExpURLTxt);
    END;

    LOCAL PROCEDURE GetMyCompany@62(VAR MyCompany@1000 : Text[30]) : Boolean;
    VAR
      SelectedCompany@1002 : Record 2000000006;
      AllowedCompanies@1001 : Page 9177;
    BEGIN
      SelectedCompany.SETRANGE("Evaluation Company",FALSE);
      SelectedCompany.FINDFIRST;
      IF SelectedCompany.COUNT = 1 THEN BEGIN
        MyCompany := SelectedCompany.Name;
        EXIT(TRUE);
      END;

      AllowedCompanies.Initialize;

      IF SelectedCompany.GET(COMPANYNAME) THEN
        AllowedCompanies.SETRECORD(SelectedCompany);

      AllowedCompanies.LOOKUPMODE(TRUE);

      IF AllowedCompanies.RUNMODAL = ACTION::LookupOK THEN BEGIN
        AllowedCompanies.GETRECORD(SelectedCompany);
        IF SelectedCompany."Evaluation Company" THEN
          EXIT(FALSE);
        MyCompany := SelectedCompany.Name;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE OnInitializingNotificationWithDefaultState@23();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF AreSandboxNotificationsSupported THEN
        MyNotifications.InsertDefault(GetSandboxNotificationId,SandboxNotificationNameTok,SandboxNotificationDescTok,TRUE);
      IF AreNotificationsSupported THEN
        MyNotifications.InsertDefault(
          GetChangeToPremiumExpNotificationId,ChangeToPremiumExpNotificationNameTok,ChangeToPremiumExpNotificationDescTok,TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowNotifications@50();
    BEGIN
    END;

    BEGIN
    END.
  }
}

