OBJECT Codeunit 6086310 Bank Trans. Inbox-Check
{
  OBJECT-PROPERTIES
  {
    Date=02/23/17;
    Time=[ 1:00:00 AM];
    Version List=EMW16.00.10.2.60;
  }
  PROPERTIES
  {
    TableNo=6086331;
    OnRun=BEGIN
            Code(Rec);
          END;

  }
  CODE
  {
    VAR
      BusCountryCodeNotFound@1160040002 : TextConst 'ENU=The %1 %2 cannot be found in %3. Please check the mapping and try again.';
      MissingCountryMapping@1160040003 : TextConst 'ENU=The %1 cannot be empty in %2 for %3 %4.';

    PROCEDURE Code@1160040000(VAR BnkTransInbox@1160040009 : Record 6086331);
    VAR
      Currency@1160040008 : Record 4;
      CountryRegion@1160040007 : Record 9;
      EMSetup@1160040006 : Record 6086300;
      BankCurrMap@1160040005 : Record 6086310;
      BankCountryMap@1160040004 : Record 6086312;
      Expense@1160040003 : Record 6086320;
      EmployeeCard@1160040002 : Record 6086311;
      Transaction@1160040001 : Record 6086330;
      Matching@1160040000 : Codeunit 6086311;
    BEGIN
      WITH BnkTransInbox DO BEGIN
        Transaction.TRANSFERFIELDS(BnkTransInbox,FALSE);
        Transaction."Entry No." := "Entry No.";
        Transaction.VALIDATE("Card No.","Card No.");
        Transaction.VALIDATE("Card Name","Card Name");
        Transaction.VALIDATE("Posting Date","Posting Date");
        Transaction.VALIDATE("Document Date","Document Date");
        IF "Currency Code" <> '' THEN
          IF Currency.GET("Currency Code") THEN
            VALIDATE("Currency Code","Currency Code")
          ELSE BEGIN
            BankCurrMap.GET("Bank Code","Bank Country/Region","Currency Code");
            Transaction.VALIDATE("Currency Code",BankCurrMap."Currency Code (NAV)");
          END;

        Transaction."Currency Exch. Rate" := "Currency Exch. Rate";
        Transaction.VALIDATE(Amount,Amount);
        TESTFIELD("Bank-Currency Amount");
        Transaction."Bank-Currency Amount" := "Bank-Currency Amount";
        Transaction."Business Category ID" := "Business Category ID";
        Transaction."Business No." := "Business No.";
        Transaction."Business Name" := "Business Name";
        Transaction."Business Address" := "Business Address";
        Transaction."Business Address 2" := "Business Address 2";
        Transaction."Business Address 3" := "Business Address 3";

        IF (STRLEN("Business Country/Region") <= MAXSTRLEN(CountryRegion.Code)) AND ("Business Country/Region" <> '') THEN
          IF CountryRegion.GET("Business Country/Region") THEN
            Transaction."Business Country/Region" := "Business Country/Region"
          ELSE BEGIN
            IF NOT BankCountryMap.GET("Bank Code","Bank Country/Region","Business Country/Region") THEN
              ERROR(BusCountryCodeNotFound,FIELDCAPTION("Business Country/Region"),"Business Country/Region",BankCountryMap.TABLENAME);
            IF BankCountryMap."Country/Region Code (NAV)" = '' THEN
              ERROR(MissingCountryMapping,BankCountryMap.FIELDCAPTION("Country/Region Code (NAV)"),BankCountryMap.TABLENAME,
                BankCountryMap.TABLENAME,"Business Country/Region");
            Transaction."Business Country/Region" := BankCountryMap."Country/Region Code (NAV)";
          END;

        Transaction."Business Post Code" := "Business Post Code";

        Transaction."Exclude Entry" := "Exclude Entry";
        Transaction."Transaction ID" := "Transaction ID";

        EmployeeCard.SETRANGE("Card No.","Card No.");
        EmployeeCard.FINDFIRST;
        EmployeeCard.TESTFIELD("Continia User ID");

        Transaction.VALIDATE("Continia User ID",EmployeeCard."Continia User ID");
        Transaction.VALIDATE(Duplicate,Duplicate);
        Transaction."Bank Currency Code" := EmployeeCard.GetAccountCurrencyCode(EmployeeCard."Account Type",EmployeeCard."Account No.");

        IF NOT Transaction.INSERT(TRUE) THEN
          Transaction.MODIFY;
      END;

      Transaction.ApplyMappingRule;

      EMSetup.GET;

      IF NOT BnkTransInbox."Bank Statement Transaction" THEN BEGIN
        IF EMSetup."Post Bank Trans. on Import" THEN
          IF NOT Transaction."Exclude Entry" THEN
            CODEUNIT.RUN(CODEUNIT::"Bank Transaction-Post",Transaction);

        IF EMSetup."Create Expense w. Transaction" THEN
          Transaction.MatchAndCreateExpense;
      END;
    END;

    BEGIN
    END.
  }
}

