OBJECT Page 1808 Data Migration Wizard
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:43 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Data Migration;
    ApplicationArea=#Basic,#Suite;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table1800;
    PageType=NavigatePage;
    UsageCategory=Tasks;
    SourceTableTemporary=Yes;
    ShowFilter=No;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=VAR
                 DataMigrationMgt@1000 : Codeunit 1798;
               BEGIN
                 OnRegisterDataMigrator;
                 IF FINDFIRST THEN;
                 ResetWizardControls;
                 ShowIntroStep;
                 DataMigrationMgt.CheckMigrationInProgress(FALSE);
               END;

    OnQueryClosePage=VAR
                       AssistedSetup@1000 : Record 1803;
                     BEGIN
                       IF CloseAction = ACTION::OK THEN
                         IF AssistedSetup.GetStatus(PAGE::"Data Migration Wizard") = AssistedSetup.Status::"Not Completed" THEN
                           IF NOT CONFIRM(DataImportNotCompletedQst,FALSE) THEN
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 26      ;1   ;Action    ;
                      Name=ActionOpenExtensionManagement;
                      CaptionML=ENU=Open Extension Management;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 2500;
                      Visible=Step = Step::Intro;
                      InFooterBar=Yes;
                      Image=Setup }
      { 21      ;1   ;Action    ;
                      Name=ActionDownloadTemplate;
                      CaptionML=ENU=Download Template;
                      ApplicationArea=#Basic,#Suite;
                      Visible=DownloadTemplateVisible AND (Step = Step::Import);
                      InFooterBar=Yes;
                      Image=Table;
                      OnAction=VAR
                                 Handled@1000 : Boolean;
                               BEGIN
                                 OnDownloadTemplate(Handled);
                                 IF NOT Handled THEN
                                   ERROR('');
                               END;
                                }
      { 18      ;1   ;Action    ;
                      Name=ActionDataMigrationSettings;
                      CaptionML=ENU=Settings;
                      ApplicationArea=#Basic,#Suite;
                      Visible=DataMigrationSettingsVisible AND (Step = Step::Import);
                      InFooterBar=Yes;
                      Image=Setup;
                      OnAction=VAR
                                 Handled@1000 : Boolean;
                               BEGIN
                                 OnOpenSettings(Handled);
                                 IF NOT Handled THEN
                                   ERROR('');
                               END;
                                }
      { 23      ;1   ;Action    ;
                      Name=ActionOpenAdvancedApply;
                      CaptionML=ENU=Advanced;
                      ApplicationArea=#Basic,#Suite;
                      Visible=OpenAdvancedApplyVisible AND (Step = Step::Apply);
                      InFooterBar=Yes;
                      Image=Apply;
                      OnAction=VAR
                                 Handled@1000 : Boolean;
                               BEGIN
                                 OnOpenAdvancedApply(TempDataMigrationEntity,Handled);
                                 CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
                                 IF NOT Handled THEN
                                   ERROR('');
                               END;
                                }
      { 24      ;1   ;Action    ;
                      Name=ActionShowErrors;
                      CaptionML=ENU=Show Errors;
                      ApplicationArea=#Basic,#Suite;
                      Visible=ShowErrorsVisible AND ((Step = Step::Done) OR (Step = Step::ShowPostingGroupDoneStep));
                      InFooterBar=Yes;
                      Image=ErrorLog;
                      OnAction=VAR
                                 Handled@1000 : Boolean;
                               BEGIN
                                 OnShowErrors(Handled);
                                 IF NOT Handled THEN
                                   ERROR('');
                               END;
                                }
      { 22      ;1   ;Separator  }
      { 3       ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackEnabled;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 CASE Step OF
                                   Step::Apply:
                                     TempDataMigrationEntity.DELETEALL;
                                 END;
                                 NextStep(TRUE);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite;
                      Visible=NOT ApplyButtonVisible;
                      Enabled=NextEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextAction;
                               END;
                                }
      { 61      ;1   ;Action    ;
                      Name=ActionApply;
                      CaptionML=ENU=Migrate;
                      ApplicationArea=#Basic,#Suite;
                      Visible=ApplyButtonVisible;
                      Enabled=ApplyButtonEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextAction;
                               END;
                                }
      { 1       ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishEnabled;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=VAR
                                 AssistedSetup@1001 : Record 1803;
                               BEGIN
                                 AssistedSetup.SetStatus(PAGE::"Data Migration Wizard",AssistedSetup.Status::Completed);
                                 CurrPage.CLOSE;
                                 IF ShowOverviewPage THEN
                                   PAGE.RUN(PAGE::"Data Migration Overview");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 97  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=No }

    { 98  ;1   ;Group     ;
                Visible=TopBannerVisible AND DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 99  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=No }

    { 8   ;1   ;Group     ;
                Visible=IntroVisible;
                GroupType=Group }

    { 5   ;2   ;Group     ;
                CaptionML=ENU=Welcome to Data Migration assisted setup guide;
                GroupType=Group;
                InstructionalTextML=ENU=You can import data from other finance solutions and other data sources, provided that the corresponding extension is available to handle the conversion. To see a list of available extensions, choose the Open Extension Management button. }

    { 11  ;2   ;Group     ;
                CaptionML=ENU=Let's go!;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to choose your data source. }

    { 56  ;1   ;Group     ;
                Visible=ChooseSourceVisible;
                GroupType=Group }

    { 6   ;2   ;Group     ;
                CaptionML=ENU=Choose your data source;
                GroupType=Group;
                InstructionalTextML=ENU=Which finance app do you want to migrate data from? }

    { 7   ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                TableRelation="Data Migrator Registration".Description;
                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Data Migrators",Rec) = ACTION::LookupOK THEN BEGIN
                             Text := Description;
                             CLEAR(DataMigrationSettingsVisible);
                             OnHasSettings(DataMigrationSettingsVisible);
                             EXIT;
                           END;
                         END;

                ShowCaption=No }

    { 12  ;1   ;Group     ;
                Visible=ImportVisible;
                GroupType=Group }

    { 10  ;2   ;Group     ;
                CaptionML=ENU=Instructions;
                Visible=Instructions <> '';
                GroupType=Group;
                InstructionalTextML=ENU=To prepare the data for migration, follow these steps: }

    { 15  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Instructions;
                Editable=FALSE;
                MultiLine=Yes;
                ShowCaption=No }

    { 20  ;2   ;Group     ;
                CaptionML=ENU=Settings;
                Visible=DataMigrationSettingsVisible;
                GroupType=Group;
                InstructionalTextML=ENU=You can change the import settings for this data source by choosing Settings in the actions below. }

    { 14  ;1   ;Group     ;
                Visible=ApplyVisible;
                GroupType=Group }

    { 19  ;2   ;Part      ;
                Name=DataMigrationEntities;
                CaptionML=ENU=Data is ready for migration;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page1810;
                PartType=Page }

    { 13  ;2   ;Group     ;
                Visible=ShowPostingOptions;
                GroupType=Group }

    { 57  ;3   ;Group     ;
                GroupType=GridLayout;
                Layout=Columns }

    { 17  ;4   ;Field     ;
                Name=BallancesPostingOption;
                CaptionML=ENU=Opening balances;
                ToolTipML=ENU=Specifies what to do with opening balances. We can post them for you, or you can review balances in journals and post them yourself.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BallancesPostingOption;
                OnValidate=BEGIN
                             SetPosting;
                           END;

                ShowMandatory=TRUE }

    { 60  ;4   ;Group     ;
                Visible=BallancesPostingOption = BallancesPostingOption::"Post balances for me";
                GroupType=Group }

    { 55  ;5   ;Field     ;
                Name=PostingDate;
                CaptionML=ENU=Post to ledger on;
                ToolTipML=ENU=Specifies the date to post the journal on.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PostingDate;
                OnValidate=BEGIN
                             SetPosting;
                           END;
                            }

    { 49  ;1   ;Group     ;
                CaptionML=ENU=POSTING GROUP SETUP;
                Visible=PostingGroupIntroVisible;
                GroupType=Group }

    { 48  ;2   ;Group     ;
                CaptionML=ENU=Welcome to Posting Group Setup;
                GroupType=Group;
                InstructionalTextML=ENU=For posting accounts, you can specify the general ledger accounts that you want to post sales and purchase transactions to. }

    { 47  ;2   ;Group     ;
                CaptionML=ENU=Let's go!;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to create posting accounts for purchasing and sales transactions. }

    { 46  ;1   ;Group     ;
                Visible=FirstAccountSetupVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Select the accounts to use when posting. }

    { 45  ;2   ;Field     ;
                Name=Sales Account;
                CaptionML=ENU=Sales Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SalesAccount;
                TableRelation="G/L Account".No. }

    { 44  ;2   ;Field     ;
                Name=Sales Credit Memo Account;
                CaptionML=ENU=Sales Credit Memo Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SalesCreditMemoAccount;
                TableRelation="G/L Account".No. }

    { 43  ;2   ;Field     ;
                Name=Sales Line Disc. Account;
                CaptionML=ENU=Sales Line Disc. Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SalesLineDiscAccount;
                TableRelation="G/L Account".No. }

    { 42  ;2   ;Field     ;
                Name=Sales Inv. Disc. Account;
                CaptionML=ENU=Sales Inv. Disc. Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SalesInvDiscAccount;
                TableRelation="G/L Account".No. }

    { 41  ;2   ;Field     ;
                Name=.;
                ApplicationArea=#Basic,#Suite;
                Editable=FALSE;
                HideValue=TRUE;
                ShowCaption=No }

    { 40  ;2   ;Field     ;
                Name=Purch. Account;
                CaptionML=ENU=Purch. Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PurchAccount;
                TableRelation="G/L Account".No. }

    { 39  ;2   ;Field     ;
                Name=Purch. Credit Memo Account;
                CaptionML=ENU=Purch. Credit Memo Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PurchCreditMemoAccount;
                TableRelation="G/L Account".No. }

    { 38  ;2   ;Field     ;
                Name=Purch. Line Disc. Account;
                CaptionML=ENU=Purch. Line Disc. Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PurchLineDiscAccount;
                TableRelation="G/L Account".No. }

    { 37  ;2   ;Field     ;
                Name=Purch. Inv. Disc. Account;
                CaptionML=ENU=Purch. Inv. Disc. Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PurchInvDiscAccount;
                TableRelation="G/L Account".No. }

    { 36  ;2   ;Field     ;
                Name=..;
                ApplicationArea=#Basic,#Suite;
                Editable=FALSE;
                HideValue=TRUE;
                ShowCaption=No }

    { 50  ;2   ;Group     ;
                Visible=FirstAccountSetupVisible;
                GroupType=Group;
                InstructionalTextML=ENU=When importing items, the following accounts need to be entered }

    { 35  ;2   ;Field     ;
                Name=COGS Account;
                CaptionML=ENU=COGS Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=COGSAccount;
                TableRelation="G/L Account".No. }

    { 34  ;2   ;Field     ;
                Name=Inventory Adjmt. Account;
                CaptionML=ENU=Inventory Adjmt. Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InventoryAdjmtAccount;
                TableRelation="G/L Account".No. }

    { 1808;2   ;Field     ;
                Name=Inventory Account;
                CaptionML=ENU=Inventory Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InventoryAccount;
                TableRelation="G/L Account".No. }

    { 33  ;1   ;Group     ;
                Visible=SecondAccountSetupVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Select the accounts to use when posting. }

    { 32  ;2   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Customers }

    { 31  ;2   ;Field     ;
                Name=Receivables Account;
                CaptionML=ENU=Receivables Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ReceivablesAccount;
                TableRelation="G/L Account".No. }

    { 30  ;2   ;Field     ;
                Name=Service Charge Acc.;
                CaptionML=ENU=Service Charge Acc.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ServiceChargeAccount;
                TableRelation="G/L Account".No. }

    { 29  ;2   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Vendors }

    { 28  ;2   ;Field     ;
                Name=Payables Account;
                CaptionML=ENU=Payables Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PayablesAccount;
                TableRelation="G/L Account".No. }

    { 27  ;2   ;Field     ;
                Name=Purch. Service Charge Acc.;
                CaptionML=ENU=Purch. Service Charge Acc.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PurchServiceChargeAccount;
                TableRelation="G/L Account".No. }

    { 9   ;1   ;Group     ;
                Visible=DoneVisible;
                GroupType=Group }

    { 16  ;2   ;Group     ;
                CaptionML=ENU=That's it!;
                Visible=NOT ShowErrorsVisible;
                GroupType=Group;
                InstructionalTextML=ENU=You have completed the Data Migration assisted setup guide. }

    { 58  ;2   ;Group     ;
                Visible=ThatsItText <> '';
                GroupType=Group }

    { 59  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ThatsItText;
                Editable=FALSE;
                MultiLine=Yes;
                ShowCaption=No }

    { 62  ;3   ;Group     ;
                Visible=EnableTogglingOverviewPage;
                GroupType=Group }

    { 51  ;4   ;Field     ;
                CaptionML=ENU=View the status when finished;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowOverviewPage;
                ShowCaption=Yes }

    { 53  ;2   ;Group     ;
                CaptionML=ENU=Duplicate contacts?;
                Visible=ShowDuplicateContactsText;
                GroupType=Group;
                InstructionalTextML=ENU=We found some contacts that were duplicated. You can review the list, and decide what to do with them. }

    { 54  ;3   ;Field     ;
                Name=DuplicateContacts;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DuplicateContactsLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              PAGE.RUN(PAGE::"Contact Duplicates");
                            END;

                ShowCaption=No }

    { 25  ;2   ;Group     ;
                CaptionML=ENU=Import completed with errors;
                Visible=ShowErrorsVisible;
                GroupType=Group;
                InstructionalTextML=ENU=There were errors during import of your data. For more details, choose Show Errors in the actions below. }

  }
  CODE
  {
    VAR
      TempDataMigrationEntity@1010 : TEMPORARY Record 1801;
      MediaRepositoryStandard@1040 : Record 9400;
      MediaRepositoryDone@1041 : Record 9400;
      MediaResourcesStandard@1048 : Record 2000000182;
      MediaResourcesDone@1049 : Record 2000000182;
      ClientTypeManagement@1038 : Codeunit 4;
      Step@1012 : 'Intro,ChooseSource,Import,Apply,Done,PostingGroupIntro,AccountSetup1,AccountSetup2,ShowPostingGroupDoneStep';
      BallancesPostingOption@1051 : ' ,Post balances for me,Review balances first';
      BackEnabled@1003 : Boolean;
      NextEnabled@1004 : Boolean;
      ApplyButtonVisible@1053 : Boolean;
      ApplyButtonEnabled@1046 : Boolean;
      FinishEnabled@1005 : Boolean;
      TopBannerVisible@1042 : Boolean;
      IntroVisible@1006 : Boolean;
      ChooseSourceVisible@1000 : Boolean;
      ImportVisible@1007 : Boolean;
      ApplyVisible@1008 : Boolean;
      DoneVisible@1011 : Boolean;
      DataImportNotCompletedQst@1001 : TextConst 'ENU=Data Migration has not been completed.\\Are you sure that you want to exit?';
      DownloadTemplateVisible@1002 : Boolean;
      DataMigrationSettingsVisible@1013 : Boolean;
      OpenAdvancedApplyVisible@1014 : Boolean;
      ShowErrorsVisible@1015 : Boolean;
      PostingGroupIntroVisible@1019 : Boolean;
      FirstAccountSetupVisible@1018 : Boolean;
      SecondAccountSetupVisible@1017 : Boolean;
      AccountSetupVisible@1034 : Boolean;
      ShowPostingOptions@1044 : Boolean;
      ShowDuplicateContactsText@1047 : Boolean;
      Instructions@1009 : Text;
      ThatsItText@1050 : Text;
      TotalNoOfMigrationRecords@1016 : Integer;
      SalesAccount@1033 : Code[20];
      SalesCreditMemoAccount@1032 : Code[20];
      SalesLineDiscAccount@1031 : Code[20];
      SalesInvDiscAccount@1030 : Code[20];
      PurchAccount@1029 : Code[20];
      PurchCreditMemoAccount@1028 : Code[20];
      PurchLineDiscAccount@1027 : Code[20];
      PurchInvDiscAccount@1026 : Code[20];
      COGSAccount@1025 : Code[20];
      InventoryAdjmtAccount@1024 : Code[20];
      InventoryAccount@1035 : Code[20];
      ReceivablesAccount@1023 : Code[20];
      ServiceChargeAccount@1022 : Code[20];
      PayablesAccount@1021 : Code[20];
      PurchServiceChargeAccount@1020 : Code[20];
      PostingDate@1045 : Date;
      DuplicateContactsLbl@1039 : TextConst 'ENU=Review duplicate contacts';
      BallancesPostingErr@1052 : TextConst 'ENU=We need to know what to do with opening balances. You can:\\Let us post opening balances to the general ledger and item ledger for you, on a date you choose\\Review opening balances in journals first, and then post them yourself.';
      MissingAccountingPeriodeErr@1054 : TextConst '@@@="% = Posting Date";ENU=Posting date %1 is not within an open accounting period. To see open periods, go to the Accounting Periods page.';
      EnableTogglingOverviewPage@1036 : Boolean;
      ShowOverviewPage@1037 : Boolean;

    LOCAL PROCEDURE NextAction@15();
    VAR
      Handled@1002 : Boolean;
      ShowBalance@1001 : Boolean;
      HideSelected@1003 : Boolean;
      ListOfAccounts@1000 : ARRAY [11] OF Code[20];
    BEGIN
      CASE Step OF
        Step::ChooseSource:
          BEGIN
            OnGetInstructions(Instructions,Handled);
            IF NOT Handled THEN
              ERROR('');
          END;
        Step::Import:
          BEGIN
            OnShowBalance(ShowBalance);
            OnHideSelected(HideSelected);
            CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
            CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
            OnValidateSettings;
            OnDataImport(Handled);
            IF NOT Handled THEN
              ERROR('');
            OnSelectDataToApply(TempDataMigrationEntity,Handled);
            CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
            TotalNoOfMigrationRecords := GetTotalNoOfMigrationRecords(TempDataMigrationEntity);
            IF NOT Handled THEN
              ERROR('');
          END;
        Step::Apply:
          BEGIN
            IF ShowPostingOptions THEN
              IF BallancesPostingOption = BallancesPostingOption::" " THEN
                ERROR(BallancesPostingErr);
            CurrPage.DataMigrationEntities.PAGE.CopyFromSourceTable(TempDataMigrationEntity);
            OnApplySelectedData(TempDataMigrationEntity,Handled);
            IF NOT Handled THEN
              ERROR('');
          END;
        Step::AccountSetup1:
          BEGIN
            ListOfAccounts[1] := SalesAccount;
            ListOfAccounts[2] := SalesCreditMemoAccount;
            ListOfAccounts[3] := SalesLineDiscAccount;
            ListOfAccounts[4] := SalesInvDiscAccount;
            ListOfAccounts[5] := PurchAccount;
            ListOfAccounts[6] := PurchCreditMemoAccount;
            ListOfAccounts[7] := PurchLineDiscAccount;
            ListOfAccounts[8] := PurchInvDiscAccount;
            ListOfAccounts[9] := COGSAccount;
            ListOfAccounts[10] := InventoryAdjmtAccount;
            ListOfAccounts[11] := InventoryAccount;
            OnGLPostingSetup(ListOfAccounts);
          END;
        Step::AccountSetup2:
          BEGIN
            ListOfAccounts[1] := ReceivablesAccount;
            ListOfAccounts[2] := ServiceChargeAccount;
            ListOfAccounts[3] := PayablesAccount;
            ListOfAccounts[4] := PurchServiceChargeAccount;
            OnCustomerVendorPostingSetup(ListOfAccounts);
          END;
      END;
      NextStep(FALSE);
    END;

    LOCAL PROCEDURE NextStep@3(Backwards@1000 : Boolean);
    BEGIN
      ResetWizardControls;

      IF Backwards THEN
        Step := Step - 1
      ELSE
        Step := Step + 1;

      CASE Step OF
        Step::Intro:
          ShowIntroStep;
        Step::ChooseSource:
          ShowChooseSourceStep;
        Step::Import:
          ShowImportStep;
        Step::Apply:
          ShowApplyStep;
        Step::Done:
          ShowDoneStep;
        Step::PostingGroupIntro:
          ShowPostingGroupIntroStep;
        Step::AccountSetup1:
          ShowFirstAccountStep;
        Step::AccountSetup2:
          ShowSecondAccountStep;
        Step::ShowPostingGroupDoneStep:
          ShowPostingGroupDoneStep;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ShowIntroStep@1();
    BEGIN
      IntroVisible := TRUE;
      BackEnabled := FALSE;
      PostingGroupIntroVisible := FALSE;
    END;

    LOCAL PROCEDURE ShowChooseSourceStep@2();
    BEGIN
      ChooseSourceVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowImportStep@4();
    BEGIN
      ImportVisible := TRUE;
      OnHasTemplate(DownloadTemplateVisible);
      OnHasSettings(DataMigrationSettingsVisible);
    END;

    LOCAL PROCEDURE ShowApplyStep@5();
    BEGIN
      ApplyVisible := TRUE;
      ShowPostingOptions := FALSE;
      NextEnabled := FALSE;
      ApplyButtonVisible := TRUE;
      ApplyButtonEnabled := TotalNoOfMigrationRecords > 0;
      OnHasAdvancedApply(OpenAdvancedApplyVisible);
      OnShowPostingOptions(ShowPostingOptions);
      IF ShowPostingOptions THEN BEGIN
        PostingDate := WORKDATE;
        CurrPage.DataMigrationEntities.PAGE.SetPostingInfromation(
          BallancesPostingOption = BallancesPostingOption::"Post balances for me",PostingDate);
      END;
    END;

    LOCAL PROCEDURE ShowDoneStep@6();
    BEGIN
      DoneVisible := TRUE;
      NextEnabled := FALSE;
      FinishEnabled := TRUE;
      BackEnabled := FALSE;
      OnPostingGroupSetup(AccountSetupVisible);
      IF AccountSetupVisible THEN BEGIN
        TempDataMigrationEntity.RESET;
        TempDataMigrationEntity.SETRANGE("Table ID",15);
        TempDataMigrationEntity.SETRANGE(Selected,TRUE);
        IF TempDataMigrationEntity.FINDFIRST THEN BEGIN
          DoneVisible := FALSE;
          NextEnabled := TRUE;
          FinishEnabled := FALSE;
          NextStep(FALSE);
        END;
      END;
      OnHasErrors(ShowErrorsVisible);
      OnShowDuplicateContactsText(ShowDuplicateContactsText);
      OnShowThatsItMessage(ThatsItText);

      OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
      IF EnableTogglingOverviewPage THEN
        ShowOverviewPage := TRUE;
    END;

    LOCAL PROCEDURE ShowPostingGroupIntroStep@8();
    BEGIN
      DoneVisible := FALSE;
      BackEnabled := FALSE;
      NextEnabled := TRUE;
      PostingGroupIntroVisible := TRUE;
      FirstAccountSetupVisible := FALSE;
      SecondAccountSetupVisible := FALSE;
      FinishEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowFirstAccountStep@9();
    BEGIN
      DoneVisible := FALSE;
      BackEnabled := FALSE;
      NextEnabled := TRUE;
      FirstAccountSetupVisible := TRUE;
      SecondAccountSetupVisible := FALSE;
      PostingGroupIntroVisible := FALSE;
      FinishEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowSecondAccountStep@11();
    BEGIN
      DoneVisible := FALSE;
      BackEnabled := TRUE;
      NextEnabled := TRUE;
      PostingGroupIntroVisible := FALSE;
      FirstAccountSetupVisible := FALSE;
      SecondAccountSetupVisible := TRUE;
      FinishEnabled := FALSE;
    END;

    LOCAL PROCEDURE ResetWizardControls@10();
    BEGIN
      // Buttons
      BackEnabled := TRUE;
      NextEnabled := TRUE;
      ApplyButtonVisible := FALSE;
      ApplyButtonEnabled := FALSE;
      FinishEnabled := FALSE;
      DownloadTemplateVisible := FALSE;
      DataMigrationSettingsVisible := FALSE;
      OpenAdvancedApplyVisible := FALSE;
      ShowErrorsVisible := FALSE;
      PostingGroupIntroVisible := FALSE;
      FirstAccountSetupVisible := FALSE;
      SecondAccountSetupVisible := FALSE;

      // Tabs
      IntroVisible := FALSE;
      ChooseSourceVisible := FALSE;
      ImportVisible := FALSE;
      ApplyVisible := FALSE;
      DoneVisible := FALSE;
    END;

    LOCAL PROCEDURE GetTotalNoOfMigrationRecords@7(VAR DataMigrationEntity@1000 : Record 1801) TotalCount : Integer;
    BEGIN
      IF DataMigrationEntity.FINDSET THEN
        REPEAT
          TotalCount += DataMigrationEntity."No. of Records";
        UNTIL DataMigrationEntity.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType))
      THEN
        IF MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") AND
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        THEN
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    LOCAL PROCEDURE ShowPostingGroupDoneStep@14();
    BEGIN
      DoneVisible := TRUE;
      BackEnabled := FALSE;
      NextEnabled := FALSE;
      OnHasErrors(ShowErrorsVisible);
      FinishEnabled := TRUE;
    END;

    LOCAL PROCEDURE SetPosting@12();
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF BallancesPostingOption = BallancesPostingOption::"Post balances for me" THEN
        IF AccountingPeriod.GetFiscalYearStartDate(PostingDate) = 0D THEN
          ERROR(MissingAccountingPeriodeErr,PostingDate);

      CurrPage.DataMigrationEntities.PAGE.SetPostingInfromation(
        BallancesPostingOption = BallancesPostingOption::"Post balances for me",PostingDate);
    END;

    BEGIN
    END.
  }
}

