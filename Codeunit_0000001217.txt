OBJECT Codeunit 1217 Pre-map Incoming Purch. Doc
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    TableNo=1220;
    OnRun=VAR
            BuyFromVendorNo@1000 : Code[20];
            PayToVendorNo@1001 : Code[20];
            ParentRecNo@1002 : Integer;
            CurrRecNo@1004 : Integer;
          BEGIN
            ParentRecNo := 0;
            FindDistinctRecordNos(TempIntegerHeaderRecords,"Entry No.",DATABASE::"Purchase Header",ParentRecNo);
            IF NOT TempIntegerHeaderRecords.FINDSET THEN
              EXIT;

            REPEAT
              CurrRecNo := TempIntegerHeaderRecords.Number;

              ValidateCompanyInfo("Entry No.",CurrRecNo);
              ValidateCurrency("Entry No.",CurrRecNo);
              SetDocumentType("Entry No.",ParentRecNo,CurrRecNo);

              CorrectHeaderData("Entry No.",CurrRecNo);
              BuyFromVendorNo := FindBuyFromVendor("Entry No.",CurrRecNo);
              PayToVendorNo := FindPayToVendor("Entry No.",CurrRecNo);
              FindInvoiceToApplyTo("Entry No.",CurrRecNo);

              PersistHeaderData("Entry No.",CurrRecNo,BuyFromVendorNo,PayToVendorNo);

              ProcessLines("Entry No.",CurrRecNo,BuyFromVendorNo);
            UNTIL TempIntegerHeaderRecords.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      InvalidCompanyInfoGLNErr@1000 : TextConst '@@@="%1 = GLN (13 digit number)";ENU=The customer''s GLN %1 on the incoming document does not match the GLN in the Company Information window.;ESM=El GLN %1 del cliente en el documento entrante no coincide con el GLN de la ventana Informaci¢n de la empresa.;FRC=Le GLN du client %1 sur le document entrant ne correspond pas … celui figurant dans la fenˆtre Informations sur la compagnie.;ENC=The customer''s GLN %1 on the incoming document does not match the GLN in the Company Information window.';
      InvalidCompanyInfoVATRegNoErr@1001 : TextConst '@@@=%1 VAT Registration Number (format could be AB###### or ###### or AB##-##-###);ENU=The customer''s tax registration number %1 on the incoming document does not match the Tax Registration No. in the Company Information window.;ESM=El RFC/Curp %1 del cliente en el documento entrante no coincide con el RFC/Curp de la ventana Informaci¢n de la empresa.;FRC=Le num‚ro d''inscription TPS/TVH du client %1 sur le document entrant ne correspond pas … celui figurant dans la fenˆtre Informations sur la compagnie.;ENC=The customer''s GST/HST registration number %1 on the incoming document does not match the GST/HST Registration No. in the Company Information window.';
      CurrencyCodeMissingErr@1003 : TextConst 'ENU=The currency code is missing on the incoming document.;ESM=El documento entrante no tiene c¢digo de divisa.;FRC=Le code devise est manquant sur le document entrant.;ENC=The currency code is missing on the incoming document.';
      CurrencyCodeDifferentErr@1004 : TextConst '@@@=%1 currency code (e.g. GBP), %2 the document currency code (e.g. DKK);ENU=The currency code %1 must not be different from the currency code %2 on the incoming document.;ESM=El c¢digo de divisa %1 no debe ser distinto del c¢digo de divisa %2 en el documento entrante.;FRC=Le code devise %1 ne doit pas ˆtre diff‚rent du code devise %2 figurant sur le document entrant.;ENC=The currency code %1 must not be different from the currency code %2 on the incoming document.';
      ItemCurrencyCodeDifferentErr@1005 : TextConst '@@@=%1 Invoice line currency code (e.g. GBP), %2 invoice line no. (e.g. 2), %3 document currency code (e.g. DKK);ENU=The currency code %1 on invoice line no. %2 must not be different from the currency code %3 on the incoming document.;ESM=El c¢digo de divisa %1 de la l¡nea de factura n.§ %2 no debe ser distinto del c¢digo de divisa %3 en el documento entrante.;FRC=Le code devise %1 du num‚ro de ligne facture %2 ne doit pas ˆtre diff‚rent du code devise %3 figurant sur le document entrant.;ENC=The currency code %1 on invoice line no. %2 must not be different from the currency code %3 on the incoming document.';

      BuyFromVendorNotFoundErr@1007 : TextConst
        '@@@=%1 Vendor name (e.g. London Postmaster), %2 Vendor''s GLN (13 digit number), %3 Vendor''s VAT Registration Number',
        'ENU=Cannot find buy-from vendor ''%1'' based on the vendor''s GLN %2 or tax registration number %3 on the incoming document. Make sure that a card for the vendor exists with the corresponding GLN or Tax Registration No.',
        'ESM=No se puede encontrar el proveedor de compra ''%1'' bas ndose en el GLN %2 o el RFC/Curp %3 del proveedor que figura en el documento entrante. Aseg£rese de que existe una tarjeta para el proveedor con el GLN o el RFC/Curp correspondientes.',
        'FRC=Impossible de trouver le fournisseur ®ÿ%1ÿ¯ sur la base du GLN %2 ou du nø identif. intracomm. %3 de fournisseur figurant sur le document entrant. V‚rifiez qu''il existe une fiche fournisseur avec le GLN ou le nø identif. intracomm. correspondant.',
        'ENC=Cannot find buy-from vendor ''%1'' based on the vendor''s GLN %2 or GST/HST registration number %3 on the incoming document. Make sure that a card for the vendor exists with the corresponding GLN or GST/HST Registration No.';

      PayToVendorNotFoundErr@1008 : TextConst
        '@@@=%1 Vendor name (e.g. London Postmaster), %2 Vendor''s GLN (13 digit number), %3 Vendor''s VAT Registration Number',
        'ENU=Cannot find  vendor ''%1'' based on the vendor''s GLN %2 or tax registration number %3 on the incoming document. Make sure that a card for the vendor exists with the corresponding GLN or Tax Registration No.',
        'ESM=No se puede encontrar el proveedor de pago ''%1'' bas ndose en el GLN %2 o el RFC/Curp %3 del proveedor que figura en el documento entrante. Aseg£rese de que existe una tarjeta para el proveedor con el GLN o el RFC/Curp correspondientes.',
        'FRC=Impossible de trouver le fournisseur cr‚ancier ®ÿ%1ÿ¯ sur la base du GLN %2 ou du num‚ro d''inscription TPS/TVH %3 du fournisseur figurant sur le document entrant. V‚rifiez qu''il existe pour le fournisseur une fiche avec le GLN ou le num‚ro d''inscription TPS/TVH correspondant.',
        'ENC=Cannot find  vendor ''%1'' based on the vendor''s GLN %2 or GST/HST registration number %3 on the incoming document. Make sure that a card for the vendor exists with the corresponding GLN or GST/HST Registration No.';

      ItemNotFoundErr@1009 : TextConst
        '@@@=%1 Vendor item name (e.g. Bicycle - may be another language),%2 Vendor''''s number,%3 Vendor''''s item number, %4 item bar code (GTIN)',
        'ENU=Cannot find item ''%1'' based on the vendor %2 item number %3 or GTIN %4 on the incoming document. Make sure that a card for the item exists with the corresponding item cross reference or GTIN.',
        'ESM=No se puede encontrar el art¡culo ''%1'' bas ndose en el n£mero de art¡culo %2 del proveedor %3 o el GTIN %4 en el documento entrante. Aseg£rese de que existe una tarjeta para el art¡culo con la referencia cruzada del art¡culo o el GTIN correspondientes.',
        'FRC=Impossible de trouver l''article ®ÿ%1ÿ¯ sur la base du num‚ro d''article %3 ou du GTIN %4 de fournisseur %2 indiqu‚ sur le document entrant. V‚rifiez qu''il existe pour l''article, une fiche avec la r‚f‚rence externe ou le GTIN correspondant.',
        'ENC=Cannot find item ''%1'' based on the vendor %2 item number %3 or GTIN %4 on the incoming document. Make sure that a card for the item exists with the corresponding item cross reference or GTIN.';
      ItemNotFoundByGTINErr@1021 : TextConst '@@@=%1 Vendor item name (e.g. Bicycle - may be another language),%2 item bar code (GTIN);ENU=Cannot find item ''%1'' based on GTIN %2 on the incoming document. Make sure that a card for the item exists with the corresponding GTIN.;ESM=No se puede encontrar el art¡culo ''%1'' bas ndose en el GTIN %2 den el documento entrante. Aseg£rese de que existe una tarjeta para el art¡culo con el GTIN correspondiente.;FRC=Impossible de trouver l''article ®ÿ%1ÿ¯ sur la base du GTIN %2 indiqu‚ sur le document entrant. V‚rifiez qu''il existe pour l''article, une fiche avec le GTIN correspondant.;ENC=Cannot find item ''%1'' based on GTIN %2 on the incoming document. Make sure that a card for the item exists with the corresponding GTIN.';
      ItemNotFoundByVendorItemNoErr@1022 : TextConst '@@@=%1 Vendor item name (e.g. Bicycle - may be another language),%2 Vendor''''s number,%3 Vendor''''s item number;ENU=Cannot find item ''%1'' based on the vendor %2 item number %3 on the incoming document. Make sure that a card for the item exists with the corresponding item cross reference.;ESM=No se puede encontrar el art¡culo ''%1'' bas ndose en el n£mero de art¡culo %2 del proveedor %3 en el documento entrante. Aseg£rese de que existe una tarjeta para el art¡culo con la referencia cruzada del art¡culo correspondiente.;FRC=Impossible de trouver l''article ®ÿ%1ÿ¯ sur la base du num‚ro d''article %3 du fournisseur %2 indiqu‚ sur le document entrant. V‚rifiez qu''il existe pour l''article, une fiche avec la r‚f‚rence externe correspondante.;ENC=Cannot find item ''%1'' based on the vendor %2 item number %3 on the incoming document. Make sure that a card for the item exists with the corresponding item cross reference.';
      UOMNotFoundErr@1011 : TextConst '@@@=%1 International Standard Code or Code or Description for Unit of Measure;ENU=Cannot find unit of measure %1. Make sure that the unit of measure exists.;ESM=No se encuentra la unidad de medida %1. Aseg£rese de que existe.;FRC=Impossible de trouver l''unit‚ de mesure %1. V‚rifiez que l''unit‚ de mesure existe.;ENC=Cannot find unit of measure %1. Make sure that the unit of measure exists.';
      UOMMissingErr@1010 : TextConst '@@@=%1 document line number (e.g. 2);ENU=Cannot find a unit of measure code on the incoming document line %1.;ESM=No se puede encontrar un c¢digo de unidad de medida en la l¡nea de documento entrante %1.;FRC=Impossible de trouver un code d''unit‚ de mesure sur la ligne de document entrant %1.;ENC=Cannot find a unit of measure code on the incoming document line %1.';

      UOMConflictWithCrossRefErr@1014 : TextConst
        '@@@=%1 imported unit code, %2 document line number (e.g. 2), %3 Item Cross Reference unit code',
        'ENU=Unit of measure %1 on incoming document line %2 does not match unit of measure %3 in the item cross reference.  Make sure that a card for the item with the specified unit of measure exists with the corresponding item cross reference.',
        'ESM=La unidad de medida %1 en la l¡nea del documento entrante %2 no coincide con la unidad de medida %3 en la referencia cruzada de producto. Aseg£rese de que existe una ficha para el producto con la unidad de medida especificada con la referencia cruzada de producto correspondiente.',
        'FRC=L''unit‚ de mesure %1 sur la ligne document entrant %2 ne correspond pas … l''unit‚ de mesure %3 dans la r‚f‚rence externe de l''article. Assurez-vous qu''il existe une fiche pour l''article avec l''unit‚ de mesure sp‚cifi‚e et la r‚f‚rence externe correspondante.',
        'ENC=Unit of measure %1 on incoming document line %2 does not match unit of measure %3 in the item cross reference.  Make sure that a card for the item with the specified unit of measure exists with the corresponding item cross reference.';

      UOMConflictWithItemErr@1015 : TextConst
        '@@@=%1 imported unit code, %2 document line number (e.g. 2), %3 Item unit code',
        'ENU=Unit of measure %1 on incoming document line %2 does not match purchase unit of measure %3 on the item card.  Make sure that a card for the item with the specified unit of measure exists with the corresponding item cross reference.',
        'ESM=La unidad de medida %1 en la l¡nea del documento entrante %2 no coincide con la unidad de medida de compra %3 en la ficha de producto. Aseg£rese de que existe una ficha para el producto con la unidad de medida especificada con la referencia cruzada de producto correspondiente.',
        'FRC=L''unit‚ de mesure %1 sur la ligne document entrant %2 ne correspond pas … l''unit‚ de mesure d''achat %3 dans la fiche article. Assurez-vous qu''il existe une fiche pour l''article avec l''unit‚ de mesure sp‚cifi‚e et la r‚f‚rence externe correspondante.',
        'ENC=Unit of measure %1 on incoming document line %2 does not match purchase unit of measure %3 on the item card.  Make sure that a card for the item with the specified unit of measure exists with the corresponding item cross reference.';

      UOMConflictCrossRefWithItemErr@1028 : TextConst
        '@@@=%1 item cross reference unit code',
        'ENU=Unit of measure %1 in the item cross reference is not in the list of units of measure for the corresponding item. Make sure that a unit of measure of item cross reference is in the list of units of measure for the corresponding item.',
        'ESM=La unidad de medida %1 en la referencia cruzada de producto no est  en la lista de unidades de medida para el producto correspondiente. Aseg£rese de que hay una unidad de medida de referencia cruzada de producto en la lista de unidades de medida para el producto correspondiente.',
        'FRC=L''unit‚ de mesure %1 dans la r‚f‚rence externe de l''article ne figure pas dans la liste des unit‚s de mesure de l''article correspondant. Assurez-vous qu''une unit‚ de mesure de la r‚f‚rence externe de l''article se trouve dans la liste des unit‚s de mesure de l''article correspondant.',
        'ENC=Unit of measure %1 in the item cross reference is not in the list of units of measure for the corresponding item. Make sure that a unit of measure of item cross reference is in the list of units of measure for the corresponding item.';
      NotSpecifiedUnitOfMeasureTxt@1018 : TextConst 'ENU=<NONE>;ESM=<NINGUNO>;FRC=<AUCUN>;ENC=<NONE>';
      MissingCompanyInfoSetupErr@1002 : TextConst 'ENU=You must fill either GLN or Tax Registration No. in the Company Information window.;ESM=Debe rellenar el GLN o el RFC/Curp en la ventana Informaci¢n de la empresa.;FRC=Vous devez renseigner le champ GLN ou Num‚ro d''inscription TPS/TVH dans la fenˆtre Informations sur la compagnie.;ENC=You must fill either GLN or GST/HST Registration No. in the Company Information window.';
      VendorNotFoundByNameAndAddressErr@1013 : TextConst 'ENU=Cannot find vendor based on the vendor''s name ''%1'' and street name ''%2'' on the incoming document. Make sure that a card for the vendor exists with the corresponding name.;ESM=No se puede encontrar el proveedor bas ndose en el nombre del proveedor ''%1'' y en el nombre de calle ''%2'' en el documento entrante. Aseg£rese de que existe una tarjeta para el proveedor con el nombre correspondiente.;FRC=Impossible de trouver le fournisseur sur la base du nom de fournisseur ®ÿ%1ÿ¯ et du nom de rue ®ÿ%2ÿ¯ indiqu‚ sur le document entrant. V‚rifiez qu''il existe pour le fournisseur, une fiche avec le nom correspondant.;ENC=Cannot find vendor based on the vendor''s name ''%1'' and street name ''%2'' on the incoming document. Make sure that a card for the vendor exists with the corresponding name.';
      InvalidCompanyInfoNameErr@1016 : TextConst '@@@="%1 = customer name";ENU=The customer name ''%1'' on the incoming document does not match the name in the Company Information window.;ESM=El nombre ''%1'' del cliente en el documento entrante no coincide con el nombre de la ventana Informaci¢n de la empresa.;FRC=Le nom de client ®ÿ%1ÿ¯ indiqu‚ sur le document entrant ne correspond pas au nom figurant dans la fenˆtre Informations sur la compagnie.;ENC=The customer name ''%1'' on the incoming document does not match the name in the Company Information window.';
      InvalidCompanyInfoAddressErr@1017 : TextConst '@@@="%1 = customer address, street name";ENU=The customer''s address ''%1'' on the incoming document does not match the Address in the Company Information window.;ESM=La direcci¢n ''%1'' del cliente en el documento entrante no coincide con la direcci¢n de la ventana Informaci¢n de la empresa.;FRC=L''adresse de client ®ÿ%1ÿ¯ indiqu‚e sur le document entrant ne correspond pas … celle figurant dans la fenˆtre Informations sur la compagnie.;ENC=The customer''s address ''%1'' on the incoming document does not match the Address in the Company Information window.';
      TempIntegerHeaderRecords@1006 : TEMPORARY Record 2000000026;
      TempIntegerLineRecords@1019 : TEMPORARY Record 2000000026;
      FieldMustHaveAValueErr@1020 : TextConst '@@@=%1 - field caption;ENU=You must specify a value for field ''%1''.;ESM=Debe especificar un valor para el campo ''%1''.;FRC=Vous devez sp‚cifier une valeur pour le champ ®ÿ%1ÿ¯.;ENC=You must specify a value for field ''%1''.';
      DocumentTypeUnknownErr@1023 : TextConst '@@@=%1 - Column Definitions (page caption),%2 - Data Exchange Definition (page caption),%3 - invoice (option caption),%4 - credit memo (option caption),%5 - Constant (field name),%6 - Document Type (field caption),%7 - Purchase Header (table caption);ENU=You must make a new entry in the %1 of the %2 window, and enter ''%3'' or ''%4'' in the %5 field. Then, you must map it to the %6 field in the %7 table.;ESM=Debe crear una nueva entrada en el %1 de la ventana %2 y especificar ''%3'' o ''%4'' en el campo %5. A continuaci¢n, debe asignarlo al campo %6 en la tabla %7.;FRC=Vous devez cr‚er une nouvelle ‚criture dans le %1 de la fenˆtre %2 et entrez ®ÿ%3ÿ¯ ou ®ÿ%4ÿ¯ dans le champ %5. Ensuite, vous devez l''associer au champ %6 de la table %7.;ENC=You must make a new entry in the %1 of the %2 window, and enter ''%3'' or ''%4'' in the %5 field. Then, you must map it to the %6 field in the %7 table.';
      YouMustFirstPostTheRelatedInvoiceErr@1024 : TextConst '@@@=%1 - vendor invoice no.,%2 posted purchase invoice no.;ENU=The incoming document references invoice %1 from the vendor. You must post related purchase invoice %2 before you create a new purchase document from this incoming document.;ESM=El documento entrante hace referencia a la factura %1 del proveedor. Debe registrar la factura de compra relacionada %2 antes de crear un nuevo documento de compra a partir de este documento entrante.;FRC=Le document entrant fait r‚f‚rence … la facture %1 du fournisseur. Vous devez reporter la facture d''achat associ‚e %2 avant de cr‚er un nouveau document d''achat … partir de ce document entrant.;ENC=The incoming document references invoice %1 from the vendor. You must post related purchase invoice %2 before you create a new purchase document from this incoming document.';
      UnableToFindRelatedInvoiceErr@1025 : TextConst '@@@=%1 - vendor invoice no.;ENU=The incoming document references invoice %1 from the vendor, but no purchase invoice exists for %1.;ESM=El documento entrante hace referencia a la factura %1 del proveedor, pero no existe ninguna factura de compra de %1.;FRC=Le document entrant fait r‚f‚rence … la facture %1 du fournisseur, mais il n''existe pas de facture achat pour %1.;ENC=The incoming document references invoice %1 from the vendor, but no purchase invoice exists for %1.';
      UnableToFindTotalAmountErr@1026 : TextConst 'ENU=The incoming document has no total amount excluding Tax.;ESM=El documento entrante no tiene un importe total sin IVA.;FRC=Le document entrant n''inclut pas de montant total hors TVA.;ENC=The incoming document has no total amount excluding Tax.';
      UnableToFindAppropriateAccountErr@1012 : TextConst '@@@=%1 - arbitrary text;ENU=Cannot find an appropriate G/L account for the line with description ''%1''. Choose the Map Text to Account button, and then map the core part of ''%1'' to the relevant G/L account.;ESM=No se encuentra una cuenta para la l¡nea que tiene la descripci¢n "%1". Elija el bot¢n Asignar texto a cuenta y, a continuaci¢n, asigne la parte fundamental de "%1" a la cuenta pertinente.;FRC=Impossible de trouver un Compte du grand livre appropri‚ pour la ligne portant la description ®ÿ%1ÿ¯. S‚lectionnez le bouton Mapper le texte avec le compte, puis mappez la partie essentielle de ®ÿ%1ÿ¯ avec le Compte du grand livre correspondant.;ENC=Cannot find an appropriate G/L account for the line with description ''%1''. Choose the Map Text to Account button, and then map the core part of ''%1'' to the relevant G/L account.';

    LOCAL PROCEDURE ValidateCompanyInfo@15(EntryNo@1006 : Integer;RecordNo@1002 : Integer);
    VAR
      IntermediateDataImport@1000 : Record 1214;
      CompanyInformation@1001 : Record 79;
      DataExch@1003 : Record 1220;
      IncomingDocument@1007 : Record 130;
      IncomingDocumentAttachment@1008 : Record 133;
      GLN@1004 : Text;
      VatRegNo@1005 : Text;
    BEGIN
      // for OCRed invoices, we don't check the buyer's information
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");
      IF IncomingDocument.GetGeneratedFromOCRAttachment(IncomingDocumentAttachment) THEN
        EXIT;

      CompanyInformation.GET;
      WITH IntermediateDataImport DO BEGIN
        IF FindEntry(EntryNo,DATABASE::"Company Information",CompanyInformation.FIELDNO("VAT Registration No."),0,RecordNo) THEN
          VatRegNo := Value;

        SETRANGE("Field ID",CompanyInformation.FIELDNO(GLN));
        IF FINDFIRST THEN
          GLN := Value;

        IF (GLN = '') AND (VatRegNo = '') THEN BEGIN
          ValidateCompanyInfoByNameAndAddress(EntryNo,RecordNo);
          EXIT;
        END;

        IF (CompanyInformation.GLN = '') AND (CompanyInformation."VAT Registration No." = '') THEN
          LogErrorMessage(EntryNo,CompanyInformation,CompanyInformation.FIELDNO(GLN),MissingCompanyInfoSetupErr);

        IF CompanyInformation.GLN <> '' THEN BEGIN
          SETFILTER(Value,STRSUBSTNO('<>%1&<>%2',CompanyInformation.GLN,''''''));
          IF FINDLAST THEN
            LogErrorMessage(EntryNo,CompanyInformation,CompanyInformation.FIELDNO(GLN),
              STRSUBSTNO(InvalidCompanyInfoGLNErr,GLN));
        END;

        IF CompanyInformation."VAT Registration No." <> '' THEN BEGIN
          SETRANGE("Field ID",CompanyInformation.FIELDNO("VAT Registration No."));
          SETFILTER(Value,STRSUBSTNO('<>%1',''''''));

          IF FINDLAST THEN
            IF (ExtractVatRegNo(Value,'') <> ExtractVatRegNo(CompanyInformation."VAT Registration No.",''))
            THEN
              LogErrorMessage(EntryNo,CompanyInformation,CompanyInformation.FIELDNO("VAT Registration No."),
                STRSUBSTNO(InvalidCompanyInfoVATRegNoErr,VatRegNo));
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateCompanyInfoByNameAndAddress@29(EntryNo@1006 : Integer;RecordNo@1002 : Integer);
    VAR
      IntermediateDataImport@1000 : Record 1214;
      CompanyInfo@1001 : Record 79;
      RecordMatchMgt@1011 : Codeunit 1251;
      ImportedAddress@1004 : Text;
      ImportedName@1005 : Text;
      CompanyName@1003 : Text;
      CompanyAddr@1007 : Text;
      NameNearness@1008 : Integer;
      AddressNearness@1009 : Integer;
    BEGIN
      CompanyInfo.GET;
      CompanyName := CompanyInfo.Name;
      CompanyAddr := CompanyInfo.Address;
      WITH IntermediateDataImport DO BEGIN
        IF FindEntry(EntryNo,DATABASE::"Company Information",CompanyInfo.FIELDNO(Name),0,RecordNo) THEN
          ImportedName := Value;

        NameNearness := RecordMatchMgt.CalculateStringNearness(CompanyName,ImportedName,MatchThreshold,NormalizingFactor);

        SETRANGE("Field ID",CompanyInfo.FIELDNO(Address));
        IF FINDFIRST THEN
          ImportedAddress := Value;

        AddressNearness := RecordMatchMgt.CalculateStringNearness(CompanyAddr,ImportedAddress,MatchThreshold,NormalizingFactor);

        IF (ImportedName <> '') AND (NameNearness < RequiredNearness) THEN
          LogErrorMessage(EntryNo,CompanyInfo,CompanyInfo.FIELDNO(Name),STRSUBSTNO(InvalidCompanyInfoNameErr,ImportedName));

        IF (ImportedAddress <> '') AND (AddressNearness < RequiredNearness) THEN
          LogErrorMessage(EntryNo,CompanyInfo,CompanyInfo.FIELDNO(Address),STRSUBSTNO(InvalidCompanyInfoAddressErr,ImportedAddress));
      END;
    END;

    LOCAL PROCEDURE ValidateCurrency@16(EntryNo@1004 : Integer;RecordNo@1008 : Integer);
    VAR
      IntermediateDataImport@1005 : Record 1214;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      GLSetup@1007 : Record 98;
      DocumentCurrency@1002 : Text;
      IsLCY@1006 : Boolean;
    BEGIN
      GLSetup.GET;
      IF GLSetup."LCY Code" = '' THEN
        LogErrorMessage(EntryNo,GLSetup,GLSetup.FIELDNO("LCY Code"),
          STRSUBSTNO(FieldMustHaveAValueErr,GLSetup.FIELDCAPTION("LCY Code")));

      WITH IntermediateDataImport DO BEGIN
        DocumentCurrency := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code"),0,RecordNo);
        IF DocumentCurrency = '' THEN BEGIN
          LogSimpleErrorMessage(EntryNo,CurrencyCodeMissingErr);
          EXIT;
        END;

        IsLCY := DocumentCurrency = GLSetup."LCY Code";
        // If LCY Currency wont be in Currency table
        IF IsLCY THEN BEGIN
          // Update Document Currency
          Value := '';
          MODIFY;
        END;

        // Ensure the currencies all match the same document currency
        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Tax Area Code"));
        SETFILTER(Value,'<>%1',DocumentCurrency);
        IF FINDFIRST THEN
          LogSimpleErrorMessage(EntryNo,STRSUBSTNO(CurrencyCodeDifferentErr,Value,DocumentCurrency));

        // Clear the additional currency values on header
        SETRANGE(Value);
        DELETEALL;

        // check currency on the lines
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Field ID",PurchaseLine.FIELDNO("Currency Code"));
        SETRANGE("Record No.");
        SETRANGE("Parent Record No.",RecordNo);
        SETFILTER(Value,'<>%1',DocumentCurrency);
        IF FINDFIRST THEN
          LogSimpleErrorMessage(EntryNo,STRSUBSTNO(ItemCurrencyCodeDifferentErr,Value,"Record No.",DocumentCurrency));

        // Clear the additional currency values on lines
        SETRANGE(Value);
        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE ProcessLines@24(EntryNo@1000 : Integer;HeaderRecordNo@1003 : Integer;VendorNo@1001 : Code[20]);
    VAR
      DataExch@1002 : Record 1220;
      IncomingDocument@1004 : Record 130;
    BEGIN
      DataExch.GET(EntryNo);
      WITH IncomingDocument DO BEGIN
        GET(DataExch."Incoming Entry No.");
        IF "Document Type" = "Document Type"::Journal THEN
          EXIT;
      END;

      FindDistinctRecordNos(TempIntegerLineRecords,EntryNo,DATABASE::"Purchase Line",HeaderRecordNo);
      IF NOT TempIntegerLineRecords.FINDSET THEN BEGIN
        InsertLineForTotalDocumentAmount(EntryNo,HeaderRecordNo,1,VendorNo);
        EXIT;
      END;

      REPEAT
        ProcessLine(EntryNo,HeaderRecordNo,TempIntegerLineRecords.Number,VendorNo);
      UNTIL TempIntegerLineRecords.NEXT = 0;
    END;

    LOCAL PROCEDURE CorrectHeaderData@33(EntryNo@1001 : Integer;RecordNo@1000 : Integer);
    VAR
      Vendor@1002 : Record 23;
      VendorBankAccount@1004 : Record 288;
      IncomingDocument@1009 : Record 130;
      DataExch@1010 : Record 1220;
      PurchaseHeader@1012 : Record 38;
      GLEntry@1003 : Record 17;
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");
      IF IncomingDocument."OCR Data Corrected" THEN BEGIN
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),RecordNo,
          IncomingDocument."Vendor Name");
        CorrectHeaderField(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("VAT Registration No."),RecordNo,
          IncomingDocument."Vendor VAT Registration No.");
        CorrectHeaderField(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN),RecordNo,
          IncomingDocument."Vendor IBAN");
        CorrectHeaderField(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Account No."),RecordNo,
          IncomingDocument."Vendor Bank Account No.");
        CorrectHeaderField(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Branch No."),RecordNo,
          IncomingDocument."Vendor Bank Branch No.");
        CorrectHeaderField(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("Phone No."),RecordNo,
          IncomingDocument."Vendor Phone No.");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."),RecordNo,
          IncomingDocument."Vendor Invoice No.");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Date"),RecordNo,
          IncomingDocument."Document Date");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Due Date"),RecordNo,
          IncomingDocument."Due Date");
        CorrectCurrencyCode(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code"),RecordNo,
          IncomingDocument."Currency Code");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount),RecordNo,
          IncomingDocument."Amount Excl. VAT");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Amount Including VAT"),RecordNo,
          IncomingDocument."Amount Incl. VAT");
        CorrectHeaderField(EntryNo,DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount"),RecordNo,
          IncomingDocument."VAT Amount");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No."),RecordNo,
          IncomingDocument."Order No.");
      END;
    END;

    LOCAL PROCEDURE CorrectHeaderField@39(EntryNo@1001 : Integer;TableID@1002 : Integer;FieldID@1003 : Integer;RecordNo@1000 : Integer;IncomingDocumentValue@1004 : Variant);
    VAR
      IntermediateDataImport@1005 : Record 1214;
      ExistingValue@1006 : Text;
      CorrectedValue@1007 : Text[250];
    BEGIN
      ExistingValue := IntermediateDataImport.GetEntryValue(EntryNo,TableID,FieldID,0,RecordNo);
      CorrectedValue := COPYSTR(FORMAT(IncomingDocumentValue,0,9),1,MAXSTRLEN(CorrectedValue));
      IF CorrectedValue <> ExistingValue THEN
        IntermediateDataImport.InsertOrUpdateEntry(EntryNo,TableID,FieldID,0,RecordNo,CorrectedValue);
    END;

    LOCAL PROCEDURE CorrectCurrencyCode@26(EntryNo@1001 : Integer;TableID@1002 : Integer;FieldID@1003 : Integer;RecordNo@1000 : Integer;IncomingDocumentValue@1004 : Variant);
    VAR
      IntermediateDataImport@1005 : Record 1214;
      GeneralLedgerSetup@1008 : Record 98;
      ExistingValue@1006 : Text;
      CorrectedValue@1007 : Text[250];
    BEGIN
      ExistingValue := IntermediateDataImport.GetEntryValue(EntryNo,TableID,FieldID,0,RecordNo);
      CorrectedValue := COPYSTR(FORMAT(IncomingDocumentValue,0,9),1,MAXSTRLEN(CorrectedValue));
      GeneralLedgerSetup.GET;
      IF (CorrectedValue <> ExistingValue) AND ((CorrectedValue <> GeneralLedgerSetup."LCY Code") OR (ExistingValue <> '')) THEN
        IntermediateDataImport.InsertOrUpdateEntry(EntryNo,TableID,FieldID,0,RecordNo,CorrectedValue);
    END;

    LOCAL PROCEDURE PersistHeaderData@34(EntryNo@1001 : Integer;RecordNo@1000 : Integer;BuyFromVendorNo@1012 : Code[20];PayToVendorNo@1013 : Code[20]);
    VAR
      IntermediateDataImport@1002 : Record 1214;
      DataExch@1003 : Record 1220;
      IncomingDocument@1004 : Record 130;
      PurchaseHeader@1005 : Record 38;
      VendorBankAccount@1010 : Record 288;
      Vendor@1011 : Record 23;
      GLEntry@1014 : Record 17;
      GeneralLedgerSetup@1016 : Record 98;
      AmountInclVAT@1006 : Decimal;
      AmountExclVAT@1007 : Decimal;
      VATAmount@1015 : Decimal;
      TextValue@1008 : Text[250];
      Date@1009 : Date;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");

        IF PayToVendorNo <> '' THEN
          IncomingDocument.VALIDATE("Vendor No.",PayToVendorNo)
        ELSE
          IncomingDocument.VALIDATE("Vendor No.",BuyFromVendorNo);

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Name",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Name")));

        TextValue := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Amount Including VAT"),0,RecordNo);
        IF TextValue <> '' THEN
          EVALUATE(AmountInclVAT,TextValue,9);
        IncomingDocument.VALIDATE("Amount Incl. VAT",AmountInclVAT);

        TextValue := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount),0,RecordNo);
        IF TextValue <> '' THEN
          EVALUATE(AmountExclVAT,TextValue,9);
        IncomingDocument.VALIDATE("Amount Excl. VAT",AmountExclVAT);

        TextValue := GetEntryValue(EntryNo,DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount"),0,RecordNo);
        IF TextValue <> '' THEN
          EVALUATE(VATAmount,TextValue,9);
        IncomingDocument.VALIDATE("VAT Amount",VATAmount);

        IF GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),0,RecordNo) =
           FORMAT(PurchaseHeader."Document Type"::Invoice,0,9)
        THEN
          EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."),0,RecordNo))
        ELSE
          EVALUATE(
            TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Cr. Memo No."),0,RecordNo));

        IncomingDocument.VALIDATE("Vendor Invoice No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Invoice No.")));

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No."),0,RecordNo));
        IncomingDocument.VALIDATE("Order No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Order No.")));

        EVALUATE(Date,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Date"),0,RecordNo),9);
        IncomingDocument.VALIDATE("Document Date",Date);

        EVALUATE(Date,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Due Date"),0,RecordNo),9);
        IncomingDocument.VALIDATE("Due Date",Date);

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code"),0,RecordNo));
        GeneralLedgerSetup.GET;
        IF (TextValue <> '') OR (IncomingDocument."Currency Code" <> GeneralLedgerSetup."LCY Code") THEN
          IncomingDocument."Currency Code" := COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Currency Code"));

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("VAT Registration No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor VAT Registration No.",
          COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor VAT Registration No.")));

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor IBAN",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor IBAN")));

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Branch No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Bank Branch No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Bank Branch No.")));

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("Phone No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Phone No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Phone No.")));

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Account No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Bank Account No.",
          COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Bank Account No.")));

        IncomingDocument.MODIFY;
      END;
    END;

    LOCAL PROCEDURE FindBuyFromVendor@17(EntryNo@1003 : Integer;RecordNo@1006 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record 1214;
      PurchaseHeader@1001 : Record 38;
      Vendor@1002 : Record 23;
      EmptyVendor@1009 : Record 23;
      IncomingDocument@1011 : Record 130;
      DataExch@1012 : Record 1220;
      GLN@1004 : Text;
      BuyFromName@1005 : Text;
      BuyFromAddress@1008 : Text;
      BuyFromPhoneNo@1013 : Text;
      VatRegNo@1007 : Text;
      VendorId@1014 : Text;
      VendorNo@1010 : Code[20];
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        VendorId := GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO(Id),0,RecordNo);
        VendorNo := FindVendorById(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."),VendorId);
        IF VendorNo <> '' THEN
          EXIT(VendorNo);

        BuyFromPhoneNo := GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("Phone No."),0,RecordNo);

        IF FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),0,RecordNo) THEN
          BuyFromName := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Buy-from Address"));
        IF FINDFIRST THEN
          BuyFromAddress := Value;

        // Lookup GLN
        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Buy-from Vendor No."));
        IF FINDFIRST THEN
          IF Value <> '' THEN BEGIN
            GLN := Value;
            Vendor.SETRANGE(GLN,Value);
            IF Vendor.FINDFIRST THEN BEGIN
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
                PurchaseHeader.FIELDNO("Buy-from Vendor No."),0,RecordNo,Vendor."No.");
              EXIT(Vendor."No.");
            END;
          END;

        Vendor.RESET;
        VatRegNo := '';

        // Lookup VAT Reg No
        SETRANGE("Table ID",DATABASE::Vendor);
        SETRANGE("Field ID",Vendor.FIELDNO("VAT Registration No."));

        IF FINDFIRST THEN BEGIN
          IF (Value = '') AND (GLN = '') THEN BEGIN
            VendorNo := FindVendorByBankAccount(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."));
            IF VendorNo <> '' THEN
              EXIT(VendorNo);
            VendorNo := FindVendorByPhoneNo(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."),BuyFromPhoneNo);
            IF VendorNo <> '' THEN
              EXIT(VendorNo);
            EXIT(FindVendorByNameAndAddress(EntryNo,RecordNo,BuyFromName,BuyFromAddress,
                PurchaseHeader.FIELDNO("Buy-from Vendor No.")));
          END;
          VatRegNo := Value;
          IF Value <> '' THEN BEGIN
            Vendor.SETFILTER("VAT Registration No.",
              STRSUBSTNO('*%1',COPYSTR(Value,STRLEN(Value))));
            IF Vendor.FINDSET THEN
              REPEAT
                IF ExtractVatRegNo(Vendor."VAT Registration No.",Vendor."Country/Region Code") =
                   ExtractVatRegNo(Value,Vendor."Country/Region Code")
                THEN BEGIN
                  InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
                    PurchaseHeader.FIELDNO("Buy-from Vendor No."),0,RecordNo,Vendor."No.");

                  EXIT(Vendor."No.");
                END;
              UNTIL Vendor.NEXT = 0;
          END;
        END;

        IF (VatRegNo = '') AND (GLN = '') THEN BEGIN
          VendorNo := FindVendorByBankAccount(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."));
          IF VendorNo <> '' THEN
            EXIT(VendorNo);
          VendorNo := FindVendorByPhoneNo(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."),BuyFromPhoneNo);
          IF VendorNo <> '' THEN
            EXIT(VendorNo);
          EXIT(FindVendorByNameAndAddress(EntryNo,RecordNo,BuyFromName,BuyFromAddress,
              PurchaseHeader.FIELDNO("Buy-from Vendor No.")));
        END;

        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");
        IF IncomingDocument."Document Type" <> IncomingDocument."Document Type"::Journal THEN
          LogErrorMessage(EntryNo,EmptyVendor,EmptyVendor.FIELDNO(Name),
            STRSUBSTNO(BuyFromVendorNotFoundErr,BuyFromName,GLN,VatRegNo));
        EXIT('');
      END;
    END;

    LOCAL PROCEDURE FindPayToVendor@8(EntryNo@1006 : Integer;RecordNo@1007 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record 1214;
      PurchaseHeader@1001 : Record 38;
      Vendor@1002 : Record 23;
      EmptyVendor@1009 : Record 23;
      IncomingDocument@1010 : Record 130;
      DataExch@1011 : Record 1220;
      GLN@1003 : Text;
      VatRegNo@1004 : Text;
      PayToName@1005 : Text;
      PayToAddress@1008 : Text;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        IF FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Pay-to Name"),0,RecordNo) THEN
          PayToName := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Pay-to Address"));
        IF FINDFIRST THEN
          PayToAddress := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("VAT Registration No."));
        IF FINDFIRST THEN
          VatRegNo := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Pay-to Vendor No."));
        IF FINDFIRST THEN
          GLN := Value;

        IF (VatRegNo = '') AND (GLN = '') THEN BEGIN
          IF PayToName <> '' THEN
            EXIT(FindVendorByNameAndAddress(EntryNo,RecordNo,PayToName,PayToAddress,PurchaseHeader.FIELDNO("Pay-to Vendor No.")));
          EXIT;
        END;

        // Lookup GLN
        IF GLN <> '' THEN BEGIN
          Vendor.SETRANGE(GLN,GLN);
          IF Vendor.FINDFIRST THEN BEGIN
            InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
              PurchaseHeader.FIELDNO("Pay-to Vendor No."),0,RecordNo,Vendor."No.");

            EXIT(Vendor."No.");
          END;
        END;

        Vendor.RESET;

        // Lookup VAT Reg No
        Vendor.SETFILTER("VAT Registration No.",STRSUBSTNO('*%1',COPYSTR(VatRegNo,STRLEN(VatRegNo))));
        IF Vendor.FINDSET THEN
          REPEAT
            IF ExtractVatRegNo(Vendor."VAT Registration No.",Vendor."Country/Region Code") =
               ExtractVatRegNo(VatRegNo,Vendor."Country/Region Code")
            THEN BEGIN
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
                PurchaseHeader.FIELDNO("Pay-to Vendor No."),0,RecordNo,Vendor."No.");

              EXIT(Vendor."No.");
            END;
          UNTIL Vendor.NEXT = 0;

        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");
        IF IncomingDocument."Document Type" <> IncomingDocument."Document Type"::Journal THEN
          LogErrorMessage(EntryNo,EmptyVendor,EmptyVendor.FIELDNO(Name),
            STRSUBSTNO(PayToVendorNotFoundErr,PayToName,GLN,VatRegNo));
        EXIT('');
      END;
    END;

    LOCAL PROCEDURE FindVendorByNameAndAddress@4(EntryNo@1006 : Integer;RecordNo@1007 : Integer;VendorName@1008 : Text;VendorAddress@1003 : Text;FieldID@1009 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record 1214;
      Vendor@1002 : Record 23;
      EmptyVendor@1013 : Record 23;
      IncomingDocument@1005 : Record 130;
      DataExch@1004 : Record 1220;
      RecordMatchMgt@1001 : Codeunit 1251;
      NameNearness@1011 : Integer;
      AddressNearness@1012 : Integer;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        IF Vendor.FINDSET THEN
          REPEAT
            NameNearness := RecordMatchMgt.CalculateStringNearness(VendorName,Vendor.Name,MatchThreshold,NormalizingFactor);
            IF VendorAddress = '' THEN
              AddressNearness := RequiredNearness
            ELSE
              AddressNearness := RecordMatchMgt.CalculateStringNearness(VendorAddress,Vendor.Address,MatchThreshold,NormalizingFactor);
            IF (NameNearness >= RequiredNearness) AND (AddressNearness >= RequiredNearness) THEN BEGIN
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,Vendor."No.");
              EXIT(Vendor."No.");
            END;
          UNTIL Vendor.NEXT = 0;

        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");
        IF IncomingDocument."Document Type" <> IncomingDocument."Document Type"::Journal THEN
          LogErrorMessage(EntryNo,EmptyVendor,EmptyVendor.FIELDNO(Name),
            STRSUBSTNO(VendorNotFoundByNameAndAddressErr,VendorName,VendorAddress));
        EXIT('');
      END;
    END;

    LOCAL PROCEDURE FindVendorByBankAccount@23(EntryNo@1006 : Integer;RecordNo@1007 : Integer;FieldID@1009 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record 1214;
      VendorBankAccount@1002 : Record 288;
      VendorNo@1003 : Code[20];
      VendorIBAN@1004 : Code[50];
      VendorBankBranchNo@1005 : Text[20];
      VendorBankAccountNo@1008 : Text[30];
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        IF FindEntry(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN),0,RecordNo) THEN
          VendorIBAN := COPYSTR(Value,1,MAXSTRLEN(VendorIBAN));

        SETRANGE("Field ID",VendorBankAccount.FIELDNO("Bank Branch No."));
        IF FINDFIRST THEN
          VendorBankBranchNo := COPYSTR(Value,1,MAXSTRLEN(VendorBankBranchNo));

        SETRANGE("Field ID",VendorBankAccount.FIELDNO("Bank Account No."));
        IF FINDFIRST THEN
          VendorBankAccountNo := COPYSTR(Value,1,MAXSTRLEN(VendorBankAccountNo));

        IF VendorIBAN <> '' THEN BEGIN
          VendorBankAccount.SETRANGE(IBAN,VendorIBAN);
          IF VendorBankAccount.FINDFIRST THEN
            VendorNo := VendorBankAccount."Vendor No.";
        END;

        IF (VendorNo = '') AND (VendorBankBranchNo <> '') AND (VendorBankAccountNo <> '') THEN BEGIN
          VendorBankAccount.RESET;
          VendorBankAccount.SETRANGE("Bank Branch No.",VendorBankBranchNo);
          VendorBankAccount.SETRANGE("Bank Account No.",VendorBankAccountNo);
          IF VendorBankAccount.FINDFIRST THEN
            VendorNo := VendorBankAccount."Vendor No.";
        END;

        IF VendorNo <> '' THEN BEGIN
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,VendorNo);
          EXIT(VendorNo);
        END;

        EXIT('');
      END;
    END;

    LOCAL PROCEDURE FindVendorByPhoneNo@35(EntryNo@1006 : Integer;RecordNo@1007 : Integer;FieldID@1009 : Integer;PhoneNo@1001 : Text) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record 1214;
      Vendor@1002 : Record 23;
      RecordMatchMgt@1003 : Codeunit 1251;
      PhoneNoNearness@1010 : Integer;
    BEGIN
      IF PhoneNo = '' THEN
        EXIT('');

      PhoneNo := DELCHR(PhoneNo,'=',DELCHR(PhoneNo,'=','0123456789'));
      WITH IntermediateDataImport DO BEGIN
        IF Vendor.FINDSET THEN
          REPEAT
            PhoneNoNearness := RecordMatchMgt.CalculateStringNearness(PhoneNo,Vendor."Phone No.",MatchThreshold,NormalizingFactor);
            IF PhoneNoNearness >= RequiredNearness THEN BEGIN
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,Vendor."No.");
              EXIT(Vendor."No.");
            END;
          UNTIL Vendor.NEXT = 0;

        EXIT('');
      END;
    END;

    LOCAL PROCEDURE FindVendorById@44(EntryNo@1006 : Integer;RecordNo@1007 : Integer;FieldID@1009 : Integer;VendorIdText@1001 : Text) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record 1214;
      Vendor@1002 : Record 23;
      VendorId@1003 : GUID;
    BEGIN
      IF VendorIdText = '' THEN
        EXIT('');

      IF NOT EVALUATE(VendorId,VendorIdText,9) THEN
        EXIT('');

      Vendor.SETRANGE(Id,VendorId);
      IF NOT Vendor.FINDFIRST THEN
        EXIT('');

      IntermediateDataImport.InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,Vendor."No.");
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindInvoiceToApplyTo@21(EntryNo@1006 : Integer;RecordNo@1007 : Integer);
    VAR
      IntermediateDataImport@1000 : Record 1214;
      PurchaseHeader@1001 : Record 38;
      PurchInvHeader@1003 : Record 122;
      VendorInvoiceNo@1002 : Text;
      AppliesToDocTypeAsInteger@1004 : Integer;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        VendorInvoiceNo := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Applies-to Doc. No."),0,RecordNo);
        IF VendorInvoiceNo = '' THEN
          EXIT;

        // Find a posted purchase invoice that has the specified Vendor Invoice No.
        PurchInvHeader.SETRANGE("Vendor Invoice No.",VendorInvoiceNo);
        IF PurchInvHeader.FINDFIRST THEN BEGIN
          AppliesToDocTypeAsInteger := PurchaseHeader."Applies-to Doc. Type"::Invoice;
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
            PurchaseHeader.FIELDNO("Applies-to Doc. Type"),0,RecordNo,FORMAT(AppliesToDocTypeAsInteger));
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
            PurchaseHeader.FIELDNO("Applies-to Doc. No."),0,RecordNo,PurchInvHeader."No.");
          EXIT;
        END;

        // No posted purchase invoice has the specified Vendor Invoice No.
        // This is an error - the user first needs to post the related invoice before importing this document.
        // If we can find an unposted invoice with this Vendor Invoice No. we will link to it in the error message.
        PurchaseHeader.SETRANGE("Vendor Invoice No.",VendorInvoiceNo);
        IF PurchaseHeader.FINDFIRST THEN BEGIN
          LogErrorMessage(EntryNo,PurchaseHeader,PurchaseHeader.FIELDNO("No."),
            STRSUBSTNO(YouMustFirstPostTheRelatedInvoiceErr,VendorInvoiceNo,PurchaseHeader."No."));
          EXIT;
        END;

        // No purchase invoice (posted or not) has the specified Vendor Invoice No.
        // This is an error - the user needs to create and post the related invoice before importing this document.
        LogErrorMessage(
          EntryNo,PurchInvHeader,PurchInvHeader.FIELDNO("No."),STRSUBSTNO(UnableToFindRelatedInvoiceErr,VendorInvoiceNo));
      END;
    END;

    LOCAL PROCEDURE ProcessLine@18(EntryNo@1002 : Integer;HeaderRecordNo@1005 : Integer;RecordNo@1004 : Integer;VendorNo@1003 : Code[20]);
    VAR
      ImportedUnitCode@1000 : Code[10];
    BEGIN
      // Lines with 0 quantity are "empty/description only" lines
      IF IsDescriptionOnlyLine(EntryNo,HeaderRecordNo,RecordNo) THEN BEGIN
        CleanDescriptionOnlyLine(EntryNo,HeaderRecordNo,RecordNo);
        EXIT;
      END;

      // Lookup Cross Ref, then GTIN/Bar Code, else G/L Account
      IF ResolveUnitOfMeasureFromDataImport(ImportedUnitCode,EntryNo,HeaderRecordNo,RecordNo) THEN
        IF NOT FindItemCrossReferenceForLine(ImportedUnitCode,EntryNo,HeaderRecordNo,RecordNo,VendorNo) THEN
          IF NOT FindItemForLine(ImportedUnitCode,EntryNo,HeaderRecordNo,RecordNo) THEN
            IF NOT FindGLAccountForLine(EntryNo,HeaderRecordNo,RecordNo,VendorNo) THEN
              LogErrorIfItemNotFound(EntryNo,HeaderRecordNo,RecordNo,VendorNo);

      ValidateLineDiscount(EntryNo,HeaderRecordNo,RecordNo);
    END;

    LOCAL PROCEDURE InsertLineForTotalDocumentAmount@22(EntryNo@1002 : Integer;HeaderRecordNo@1005 : Integer;RecordNo@1004 : Integer;VendorNo@1003 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
      PurchaseHeader@1007 : Record 38;
      Vendor@1001 : Record 23;
      IntermediateDataImport@1006 : Record 1214;
      LineDescription@1009 : Text[250];
    BEGIN
      IF NOT Vendor.GET(VendorNo) THEN
        EXIT;

      WITH IntermediateDataImport DO BEGIN
        LineDescription := GetEntryValue(
            EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),0,HeaderRecordNo);
        IF LineDescription = '' THEN
          LineDescription := Vendor.Name;
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",
          PurchaseLine.FIELDNO(Description),HeaderRecordNo,RecordNo,LineDescription);
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",
          PurchaseLine.FIELDNO(Quantity),HeaderRecordNo,RecordNo,'1');
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",
          PurchaseLine.FIELDNO("Direct Unit Cost"),HeaderRecordNo,RecordNo,GetTotalAmountExclVAT(EntryNo,HeaderRecordNo));
        FindGLAccountForLine(EntryNo,HeaderRecordNo,RecordNo,VendorNo);
      END;
    END;

    LOCAL PROCEDURE GetTotalAmountExclVAT@25(EntryNo@1002 : Integer;HeaderRecordNo@1005 : Integer) : Text[250];
    VAR
      PurchaseHeader@1000 : Record 38;
      IntermediateDataImport@1006 : Record 1214;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        IF NOT FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount),0,HeaderRecordNo) THEN BEGIN
          LogSimpleErrorMessage(EntryNo,UnableToFindTotalAmountErr);
          EXIT('');
        END;
        EXIT(Value);
      END;
    END;

    LOCAL PROCEDURE FindItemForLine@5(ImportedUnitCode@1007 : Code[10];EntryNo@1004 : Integer;HeaderNo@1006 : Integer;RecordNo@1005 : Integer) : Boolean;
    VAR
      IntermediateDataImport@1000 : Record 1214;
      PurchaseLine@1001 : Record 39;
      Item@1002 : Record 27;
      GTIN@1003 : Text;
    BEGIN
      IF NOT IntermediateDataImport.FindEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),HeaderNo,RecordNo) THEN
        EXIT(FALSE);

      GTIN := IntermediateDataImport.Value;
      IF GTIN = '' THEN
        EXIT(FALSE);

      Item.SETRANGE(GTIN,GTIN);
      IF NOT Item.FINDFIRST THEN
        EXIT(FALSE);

      IntermediateDataImport.Value := Item."No.";
      IntermediateDataImport.MODIFY;

      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),HeaderNo,RecordNo,FORMAT(PurchaseLine.Type::Item,0,9));

      ResolveUnitOfMeasureFromItem(Item,ImportedUnitCode,EntryNo,HeaderNo,RecordNo);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindItemCrossReferenceForLine@2(ImportedUnitCode@1006 : Code[10];EntryNo@1007 : Integer;HeaderNo@1008 : Integer;RecordNo@1001 : Integer;VendorNo@1000 : Code[20]) : Boolean;
    VAR
      IntermediateDataImport@1002 : Record 1214;
      PurchaseLine@1003 : Record 39;
      ItemCrossReference@1004 : Record 5717;
      Vendor@1005 : Record 23;
    BEGIN
      IF NOT Vendor.GET(VendorNo) THEN
        EXIT(FALSE);

      IF NOT IntermediateDataImport.FindEntry(
           EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Cross-Reference No."),HeaderNo,RecordNo)
      THEN
        EXIT(FALSE);

      ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",VendorNo);
      ItemCrossReference.SETRANGE(
        "Cross-Reference No.",COPYSTR(IntermediateDataImport.Value,1,MAXSTRLEN(ItemCrossReference."Cross-Reference No.")));

      IF NOT FindMatchingItemCrossReference(ItemCrossReference,ImportedUnitCode) THEN
        EXIT(FALSE);

      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),HeaderNo,RecordNo,FORMAT(ItemCrossReference."Item No.",0,9));
      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),HeaderNo,RecordNo,FORMAT(PurchaseLine.Type::Item,0,9));

      ResolveUnitOfMeasureFromItemCrossReference(ItemCrossReference,ImportedUnitCode,EntryNo,HeaderNo,RecordNo);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindMatchingItemCrossReference@46(VAR ItemCrossReference@1000 : Record 5717;ImportedUnitCode@1001 : Code[10]) : Boolean;
    BEGIN
      IF NOT ItemCrossReference.FINDFIRST THEN
        EXIT(FALSE);

      ItemCrossReference.SETRANGE("Unit of Measure",ImportedUnitCode);
      IF ItemCrossReference.FINDSET THEN
        REPEAT
          IF ItemCrossReference.HasValidUnitOfMeasure THEN
            EXIT(TRUE);
        UNTIL ItemCrossReference.NEXT = 0;

      ItemCrossReference.SETRANGE("Unit of Measure",'');
      IF ItemCrossReference.FINDSET THEN
        REPEAT
          IF ItemCrossReference.HasValidUnitOfMeasure THEN
            EXIT(TRUE);
        UNTIL ItemCrossReference.NEXT = 0;

      ItemCrossReference.SETRANGE("Unit of Measure");
      EXIT(ItemCrossReference.FINDFIRST);
    END;

    LOCAL PROCEDURE IsDescriptionOnlyLine@14(EntryNo@1007 : Integer;HeaderRecordNo@1006 : Integer;RecordNo@1005 : Integer) : Boolean;
    VAR
      IntermediateDataImport@1003 : Record 1214;
      PurchaseLine@1001 : Record 39;
      Qty@1002 : Decimal;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        IF NOT FindEntry(EntryNo,DATABASE::"Purchase Line",
             PurchaseLine.FIELDNO(Quantity),HeaderRecordNo,RecordNo)
        THEN
          EXIT(TRUE);

        EVALUATE(Qty,Value,9);
        IF Qty = 0 THEN
          EXIT(TRUE);

        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CleanDescriptionOnlyLine@6(EntryNo@1004 : Integer;HeaderRecordNo@1002 : Integer;RecordNo@1000 : Integer);
    VAR
      IntermediateDataImport@1003 : Record 1214;
      PurchaseLine@1001 : Record 39;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),
          HeaderRecordNo,RecordNo,FORMAT(PurchaseLine.Type::" ",0,9));

        SETRANGE("Data Exch. No.",EntryNo);
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Parent Record No.",HeaderRecordNo);
        SETRANGE("Record No.",RecordNo);
        SETFILTER("Field ID",'<>%1&<>%2&<>%3',
          PurchaseLine.FIELDNO(Type),PurchaseLine.FIELDNO(Description),PurchaseLine.FIELDNO("Description 2"));
        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE LogErrorIfItemNotFound@10(EntryNo@1005 : Integer;HeaderRecordNo@1004 : Integer;RecordNo@1003 : Integer;VendorNo@1001 : Code[20]) : Boolean;
    VAR
      IntermediateDataImport@1000 : Record 1214;
      PurchaseLine@1002 : Record 39;
      Item@1012 : Record 27;
      GTIN@1006 : Text[250];
      ItemName@1007 : Text[250];
      VendorItemNo@1008 : Text[250];
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        GTIN := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),
            HeaderRecordNo,RecordNo);

        VendorItemNo := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Cross-Reference No."),
            HeaderRecordNo,RecordNo);

        ItemName := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Description),
            HeaderRecordNo,RecordNo);

        IF (GTIN <> '') AND (VendorItemNo <> '') THEN BEGIN
          LogErrorMessage(EntryNo,Item,Item.FIELDNO("No."),
            STRSUBSTNO(ItemNotFoundErr,ItemName,VendorNo,VendorItemNo,GTIN));
          EXIT(FALSE);
        END;

        IF GTIN <> '' THEN BEGIN
          LogErrorMessage(EntryNo,Item,Item.FIELDNO("No."),
            STRSUBSTNO(ItemNotFoundByGTINErr,ItemName,GTIN));
          EXIT(FALSE);
        END;

        IF VendorItemNo <> '' THEN BEGIN
          LogErrorMessage(EntryNo,Item,Item.FIELDNO("No."),
            STRSUBSTNO(ItemNotFoundByVendorItemNoErr,ItemName,VendorNo,VendorItemNo));
          EXIT(FALSE);
        END;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindGLAccountForLine@20(EntryNo@1005 : Integer;HeaderRecordNo@1004 : Integer;RecordNo@1003 : Integer;VendorNo@1009 : Code[20]) : Boolean;
    VAR
      IntermediateDataImport@1000 : Record 1214;
      PurchaseLine@1002 : Record 39;
      GLAccountNo@1006 : Code[20];
      LineDescription@1008 : Text[250];
      LineDirectUnitCostTxt@1001 : Text;
      LineDirectUnitCost@1007 : Decimal;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        LineDescription := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Description),HeaderRecordNo,RecordNo);
        LineDirectUnitCostTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Direct Unit Cost"),HeaderRecordNo,RecordNo);
        IF LineDirectUnitCostTxt <> '' THEN
          EVALUATE(LineDirectUnitCost,LineDirectUnitCostTxt,9);
        GLAccountNo := FindAppropriateGLAccount(EntryNo,HeaderRecordNo,LineDescription,LineDirectUnitCost,VendorNo);

        IF GLAccountNo <> '' THEN BEGIN
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),
            HeaderRecordNo,RecordNo,GLAccountNo);
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),
            HeaderRecordNo,RecordNo,FORMAT(PurchaseLine.Type::"G/L Account",0,9));
        END;
      END;
      EXIT(GLAccountNo <> '');
    END;

    LOCAL PROCEDURE InsertOrUpdateUnitOfMeasureCode@58(EntryNo@1002 : Integer;HeaderNo@1003 : Integer;RecordNo@1004 : Integer;UnitCode@1000 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
      IntermediateDataImport@1001 : Record 1214;
    BEGIN
      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Unit of Measure Code"),HeaderNo,RecordNo,UnitCode);
    END;

    LOCAL PROCEDURE ResolveUnitOfMeasureFromItemCrossReference@67(VAR ItemCrossReference@1003 : Record 5717;ImportedUnitCode@1002 : Code[10];EntryNo@1004 : Integer;HeaderNo@1007 : Integer;RecordNo@1000 : Integer) : Boolean;
    VAR
      Item@1001 : Record 27;
      ResolvedUnitCode@1005 : Code[10];
    BEGIN
      ResolvedUnitCode := ItemCrossReference."Unit of Measure";
      IF ResolvedUnitCode = '' THEN BEGIN
        Item.GET(ItemCrossReference."Item No.");
        EXIT(ResolveUnitOfMeasureFromItem(Item,ImportedUnitCode,EntryNo,HeaderNo,RecordNo));
      END;

      IF (ImportedUnitCode <> '') AND (ImportedUnitCode <> ResolvedUnitCode) THEN BEGIN
        LogErrorMessage(EntryNo,ItemCrossReference,ItemCrossReference.FIELDNO("Unit of Measure"),
          STRSUBSTNO(UOMConflictWithCrossRefErr,ImportedUnitCode,RecordNo,UnitCodeToString(ResolvedUnitCode)));
        EXIT(FALSE);
      END;

      IF NOT ItemCrossReference.HasValidUnitOfMeasure THEN BEGIN
        LogErrorMessage(EntryNo,ItemCrossReference,ItemCrossReference.FIELDNO("Unit of Measure"),
          STRSUBSTNO(UOMConflictCrossRefWithItemErr,UnitCodeToString(ResolvedUnitCode)));
        EXIT(FALSE);
      END;

      InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ResolvedUnitCode);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ResolveUnitOfMeasureFromItem@74(VAR Item@1001 : Record 27;ImportedUnitCode@1002 : Code[10];EntryNo@1004 : Integer;HeaderNo@1006 : Integer;RecordNo@1000 : Integer) : Boolean;
    VAR
      ResolvedUnitCode@1003 : Code[10];
    BEGIN
      ResolvedUnitCode := Item."Purch. Unit of Measure";
      IF ResolvedUnitCode = '' THEN
        ResolvedUnitCode := Item."Base Unit of Measure";

      IF (ImportedUnitCode <> '') AND (ImportedUnitCode <> ResolvedUnitCode) THEN BEGIN
        LogErrorMessage(EntryNo,Item,Item.FIELDNO("Base Unit of Measure"),
          STRSUBSTNO(UOMConflictWithItemErr,ImportedUnitCode,RecordNo,UnitCodeToString(ResolvedUnitCode)));
        EXIT(FALSE);
      END;

      InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ResolvedUnitCode);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ResolveUnitOfMeasureFromDataImport@42(VAR ImportedUnitCode@1004 : Code[10];EntryNo@1002 : Integer;HeaderNo@1005 : Integer;RecordNo@1006 : Integer) : Boolean;
    VAR
      PurchaseLine@1007 : Record 39;
      UnitOfMeasure@1000 : Record 204;
      IntermediateDataImport@1001 : Record 1214;
      ImportedUnitString@1003 : Text;
    BEGIN
      IF NOT IntermediateDataImport.FindEntry(
           EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Unit of Measure Code"),HeaderNo,RecordNo)
      THEN BEGIN
        LogSimpleErrorMessage(EntryNo,STRSUBSTNO(UOMMissingErr,RecordNo));
        EXIT(FALSE);
      END;

      ImportedUnitString := IntermediateDataImport.Value;
      IF ImportedUnitString = '' THEN BEGIN
        ImportedUnitCode := '';
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        EXIT(TRUE);
      END;

      UnitOfMeasure.SETRANGE(Code,COPYSTR(ImportedUnitString,1,MAXSTRLEN(UnitOfMeasure.Code)));
      IF UnitOfMeasure.FINDFIRST THEN BEGIN
        ImportedUnitCode := UnitOfMeasure.Code;
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        EXIT(TRUE);
      END;

      UnitOfMeasure.SETRANGE(Code);
      UnitOfMeasure.SETRANGE(
        "International Standard Code",COPYSTR(ImportedUnitString,1,MAXSTRLEN(UnitOfMeasure."International Standard Code")));
      IF UnitOfMeasure.FINDFIRST THEN BEGIN
        ImportedUnitCode := UnitOfMeasure.Code;
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        EXIT(TRUE);
      END;

      UnitOfMeasure.SETRANGE("International Standard Code");
      UnitOfMeasure.SETRANGE(Description,ImportedUnitString);
      IF UnitOfMeasure.FINDFIRST THEN BEGIN
        ImportedUnitCode := UnitOfMeasure.Code;
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        EXIT(TRUE);
      END;

      LogErrorMessage(EntryNo,UnitOfMeasure,UnitOfMeasure.FIELDNO(Code),STRSUBSTNO(UOMNotFoundErr,ImportedUnitString));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UnitCodeToString@99(UnitCode@1000 : Code[10]) : Text;
    BEGIN
      IF UnitCode <> '' THEN
        EXIT(UnitCode);
      EXIT(NotSpecifiedUnitOfMeasureTxt);
    END;

    LOCAL PROCEDURE ValidateLineDiscount@12(EntryNo@1004 : Integer;HeaderRecordNo@1005 : Integer;RecordNo@1000 : Integer);
    VAR
      PurchaseLine@1002 : Record 39;
      IntermediateDataImport@1001 : Record 1214;
      LineDirectUnitCostTxt@1003 : Text;
      LineQuantityTxt@1006 : Text;
      LineAmountTxt@1007 : Text;
      LineDirectUnitCost@1008 : Decimal;
      LineAmount@1009 : Decimal;
      LineQuantity@1010 : Decimal;
      LineDiscountAmount@1011 : Decimal;
    BEGIN
      WITH IntermediateDataImport DO BEGIN
        IF GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Line Discount Amount"),HeaderRecordNo,RecordNo) <> ''
        THEN
          EXIT;

        // if no discount amount has been specified, calculate it based on quantity, direct unit cost and line extension amount
        LineDirectUnitCostTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Direct Unit Cost"),HeaderRecordNo,RecordNo);
        IF LineDirectUnitCostTxt <> '' THEN
          EVALUATE(LineDirectUnitCost,LineDirectUnitCostTxt,9);
        LineQuantityTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Quantity),HeaderRecordNo,RecordNo);
        IF LineQuantityTxt <> '' THEN
          EVALUATE(LineQuantity,LineQuantityTxt,9);
        LineAmountTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Amount),HeaderRecordNo,RecordNo);
        IF LineAmountTxt <> '' THEN
          EVALUATE(LineAmount,LineAmountTxt,9);
        LineDiscountAmount := (LineQuantity * LineDirectUnitCost) - LineAmount;

        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Line Discount Amount"),
          HeaderRecordNo,RecordNo,FORMAT(LineDiscountAmount,0,9));

        MODIFY;
      END;
    END;

    LOCAL PROCEDURE ExtractVatRegNo@1(VatRegNo@1000 : Text;CountryRegionCode@1002 : Text) : Text;
    VAR
      CompanyInformation@1001 : Record 79;
    BEGIN
      IF CountryRegionCode = '' THEN BEGIN
        CompanyInformation.GET;
        CountryRegionCode := CompanyInformation."Country/Region Code";
      END;
      VatRegNo := UPPERCASE(VatRegNo);
      VatRegNo := DELCHR(VatRegNo,'=',DELCHR(VatRegNo,'=','ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'));
      IF STRPOS(VatRegNo,UPPERCASE(CountryRegionCode)) = 1 THEN
        VatRegNo := DELSTR(VatRegNo,1,STRLEN(CountryRegionCode));
      EXIT(VatRegNo);
    END;

    LOCAL PROCEDURE FindDistinctRecordNos@3(VAR TempInteger@1000 : TEMPORARY Record 2000000026;DataExchEntryNo@1003 : Integer;TableID@1001 : Integer;ParentRecNo@1004 : Integer);
    VAR
      IntermediateDataImport@1002 : Record 1214;
      CurrRecNo@1005 : Integer;
    BEGIN
      CurrRecNo := -1;
      CLEAR(TempInteger);
      TempInteger.DELETEALL;

      WITH IntermediateDataImport DO BEGIN
        SETRANGE("Data Exch. No.",DataExchEntryNo);
        SETRANGE("Table ID",TableID);
        SETRANGE("Parent Record No.",ParentRecNo);
        SETCURRENTKEY("Record No.");
        IF NOT FINDSET THEN
          EXIT;

        REPEAT
          IF CurrRecNo <> "Record No." THEN BEGIN
            CurrRecNo := "Record No.";
            CLEAR(TempInteger);
            TempInteger.Number := CurrRecNo;
            TempInteger.INSERT;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE LogErrorMessage@7(EntryNo@1004 : Integer;RelatedRec@1001 : Variant;FieldNo@1002 : Integer;Message@1003 : Text);
    VAR
      ErrorMessage@1000 : Record 700;
      DataExch@1005 : Record 1220;
      IncomingDocument@1006 : Record 130;
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");

      ErrorMessage.SetContext(IncomingDocument);
      ErrorMessage.LogMessage(RelatedRec,FieldNo,ErrorMessage."Message Type"::Error,Message);
    END;

    LOCAL PROCEDURE LogSimpleErrorMessage@19(EntryNo@1004 : Integer;Message@1003 : Text);
    VAR
      ErrorMessage@1000 : Record 700;
      DataExch@1005 : Record 1220;
      IncomingDocument@1006 : Record 130;
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");

      ErrorMessage.SetContext(IncomingDocument);
      ErrorMessage.LogSimpleMessage(ErrorMessage."Message Type"::Error,Message);
    END;

    LOCAL PROCEDURE SetDocumentType@11(EntryNo@1000 : Integer;ParentRecNo@1001 : Integer;CurrRecNo@1002 : Integer);
    VAR
      IntermediateDataImport@1004 : Record 1214;
      PurchaseHeader@1003 : Record 38;
      DataExch@1006 : Record 1220;
      DataExchDef@1007 : Record 1222;
      DocumentType@1005 : Text[250];
    BEGIN
      DataExch.GET(EntryNo);
      DataExchDef.GET(DataExch."Data Exch. Def Code");
      WITH IntermediateDataImport DO BEGIN
        IF NOT FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),ParentRecNo,CurrRecNo) THEN
          LogErrorMessage(EntryNo,DataExchDef,DataExchDef.FIELDNO(Code),
            ConstructDocumenttypeUnknownErr);

        CASE UPPERCASE(Value) OF
          GetDocumentTypeOptionString(PurchaseHeader."Document Type"::Invoice),
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::Invoice):
            DocumentType := FORMAT(PurchaseHeader."Document Type"::Invoice,0,9);
          GetDocumentTypeOptionString(PurchaseHeader."Document Type"::"Credit Memo"),
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::"Credit Memo"),
          'CREDIT NOTE':
            DocumentType := FORMAT(PurchaseHeader."Document Type"::"Credit Memo",0,9);
          ELSE
            LogErrorMessage(EntryNo,DataExchDef,DataExchDef.FIELDNO(Code),
              ConstructDocumenttypeUnknownErr);
        END;
      END;

      IntermediateDataImport.InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
        PurchaseHeader.FIELDNO("Document Type"),ParentRecNo,CurrRecNo,
        DocumentType);
    END;

    PROCEDURE GetDocumentTypeOptionString@37(OptionIndex@1000 : Integer) : Text[250];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseHeaderRecRef@1003 : RecordRef;
      DocumentTypeFieldRef@1002 : FieldRef;
    BEGIN
      PurchaseHeaderRecRef.OPEN(DATABASE::"Purchase Header");
      DocumentTypeFieldRef := PurchaseHeaderRecRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      EXIT(UPPERCASE(SELECTSTR(OptionIndex + 1,DocumentTypeFieldRef.OPTIONSTRING)));
    END;

    PROCEDURE GetDocumentTypeOptionCaption@27(OptionIndex@1000 : Integer) : Text[250];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseHeaderRecRef@1003 : RecordRef;
      DocumentTypeFieldRef@1002 : FieldRef;
    BEGIN
      PurchaseHeaderRecRef.OPEN(DATABASE::"Purchase Header");
      DocumentTypeFieldRef := PurchaseHeaderRecRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      EXIT(UPPERCASE(SELECTSTR(OptionIndex + 1,DocumentTypeFieldRef.OPTIONCAPTION)));
    END;

    PROCEDURE ConstructDocumenttypeUnknownErr@13() : Text;
    VAR
      PurchaseHeader@1002 : Record 38;
      DataExchColumnDef@1003 : Record 1223;
      DataExchColDefPart@1001 : Page 1216;
      DataExchDefCard@1000 : Page 1210;
    BEGIN
      EXIT(STRSUBSTNO(DocumentTypeUnknownErr,
          DataExchColDefPart.CAPTION,
          DataExchDefCard.CAPTION,
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::Invoice),
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::"Credit Memo"),
          DataExchColumnDef.FIELDCAPTION(Constant),
          PurchaseHeader.FIELDCAPTION("Document Type"),
          PurchaseHeader.TABLECAPTION));
    END;

    [External]
    PROCEDURE FindAppropriateGLAccount@28(EntryNo@1003 : Integer;HeaderRecordNo@1006 : Integer;LineDescription@1001 : Text[250];LineDirectUnitCost@1000 : Decimal;VendorNo@1009 : Code[20]) : Code[20];
    VAR
      PurchasesPayablesSetup@1002 : Record 312;
      TextToAccountMapping@1005 : Record 1251;
      PurchaseHeader@1007 : Record 38;
      IntermediateDataImport@1012 : Record 1214;
      DocumentTypeTxt@1013 : Text;
      DocumentType@1004 : Option;
      DefaultGLAccount@1008 : Code[20];
      CountOfResult@1010 : Integer;
    BEGIN
      DocumentTypeTxt := IntermediateDataImport.GetEntryValue(
          EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),0,HeaderRecordNo);
      IF NOT EVALUATE(DocumentType,DocumentTypeTxt) THEN
        EXIT('');

      CountOfResult := TextToAccountMapping.SearchEnteriesInText(TextToAccountMapping,LineDescription,VendorNo);
      IF CountOfResult = 1 THEN
        EXIT(FindCorrectAccountFromMapping(TextToAccountMapping,LineDirectUnitCost,DocumentType));
      IF CountOfResult > 1 THEN BEGIN
        LogErrorMessage(EntryNo,TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
          STRSUBSTNO(UnableToFindAppropriateAccountErr,LineDescription));
        EXIT('');
      END;

      IF VendorNo <> '' THEN BEGIN
        CountOfResult := TextToAccountMapping.SearchEnteriesInText(TextToAccountMapping,LineDescription,'');
        IF CountOfResult = 1 THEN
          EXIT(FindCorrectAccountFromMapping(TextToAccountMapping,LineDirectUnitCost,DocumentType));
        IF CountOfResult > 1 THEN BEGIN
          LogErrorMessage(EntryNo,TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
            STRSUBSTNO(UnableToFindAppropriateAccountErr,LineDescription));
          EXIT('');
        END;
      END;

      // if you don't find any suggestion in Text-to-Account Mapping, then look in the Purchases & Payables table
      PurchasesPayablesSetup.GET;
      CASE DocumentType OF
        PurchaseHeader."Document Type"::Invoice:
          BEGIN
            IF LineDirectUnitCost >= 0 THEN
              DefaultGLAccount := PurchasesPayablesSetup."Debit Acc. for Non-Item Lines"
            ELSE
              DefaultGLAccount := PurchasesPayablesSetup."Credit Acc. for Non-Item Lines";
          END;
        PurchaseHeader."Document Type"::"Credit Memo":
          BEGIN
            IF LineDirectUnitCost >= 0 THEN
              DefaultGLAccount := PurchasesPayablesSetup."Credit Acc. for Non-Item Lines"
            ELSE
              DefaultGLAccount := PurchasesPayablesSetup."Debit Acc. for Non-Item Lines";
          END;
      END;
      IF DefaultGLAccount = '' THEN
        LogErrorMessage(EntryNo,TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
          STRSUBSTNO(UnableToFindAppropriateAccountErr,LineDescription));
      EXIT(DefaultGLAccount)
    END;

    LOCAL PROCEDURE NormalizingFactor@30() : Integer;
    BEGIN
      EXIT(100)
    END;

    LOCAL PROCEDURE MatchThreshold@31() : Integer;
    BEGIN
      EXIT(4)
    END;

    LOCAL PROCEDURE RequiredNearness@32() : Integer;
    BEGIN
      EXIT(95)
    END;

    LOCAL PROCEDURE FindCorrectAccountFromMapping@40(TextToAccountMapping@1002 : Record 1251;LineDirectUnitCost@1000 : Decimal;DocumentType@1003 : Option) : Code[20];
    VAR
      PurchaseHeader@1004 : Record 38;
    BEGIN
      CASE DocumentType OF
        PurchaseHeader."Document Type"::Invoice:
          BEGIN
            IF (LineDirectUnitCost >= 0) AND (TextToAccountMapping."Debit Acc. No." <> '') THEN
              EXIT(TextToAccountMapping."Debit Acc. No.");
            IF (LineDirectUnitCost < 0) AND (TextToAccountMapping."Credit Acc. No." <> '') THEN
              EXIT(TextToAccountMapping."Credit Acc. No.");
          END;
        PurchaseHeader."Document Type"::"Credit Memo":
          BEGIN
            IF (LineDirectUnitCost >= 0) AND (TextToAccountMapping."Credit Acc. No." <> '') THEN
              EXIT(TextToAccountMapping."Credit Acc. No.");
            IF (LineDirectUnitCost < 0) AND (TextToAccountMapping."Debit Acc. No." <> '') THEN
              EXIT(TextToAccountMapping."Debit Acc. No.");
          END;
      END
    END;

    BEGIN
    END.
  }
}

