OBJECT Page 161 Purchase Statistics
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:10:09 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Purchase Statistics;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table38;
    PageType=ListPlus;
    OnOpenPage=BEGIN
                 PurchSetup.GET;
                 AllowInvDisc :=
                   NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   PurchSetup."Allow VAT Difference" AND
                   NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference);
                 CurrPage.EDITABLE := AllowVATDifference OR AllowInvDisc;
                 SetVATSpecification;
               END;

    OnAfterGetRecord=BEGIN
                       CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));
                       IF PrevNo = "No." THEN BEGIN
                         GetVATSpecification;
                         EXIT;
                       END;

                       PrevNo := "No.";
                       FILTERGROUP(2);
                       SETRANGE("No.",PrevNo);
                       FILTERGROUP(0);

                       CalculateTotals;
                     END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification;
                       IF TempVATAmountLine.GetAnyLineModified THEN
                         UpdateVATOnPurchLines;
                       EXIT(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 97  ;2   ;Field     ;
                Name=Amount;
                CaptionML=ENU=Amount;
                ToolTipML=ENU=Specifies the net amount of all the lines in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalPurchLine."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                Editable=FALSE }

    { 93  ;2   ;Field     ;
                Name=InvDiscountAmount;
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the purchase document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalPurchLine."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                OnValidate=BEGIN
                             UpdateInvDiscAmount;
                           END;
                            }

    { 80  ;2   ;Field     ;
                CaptionML=ENU=Total;
                ToolTipML=ENU=Specifies the total amount less any invoice discount amount and excluding tax for the purchase document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount1;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                OnValidate=BEGIN
                             UpdateTotalAmount;
                           END;
                            }

    { 75  ;2   ;Field     ;
                CaptionML=ENU=Tax Amount;
                ToolTipML=ENU=Specifies the total tax amount that has been calculated for all the lines in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=VATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText);
                Editable=FALSE }

    { 76  ;2   ;Field     ;
                CaptionML=ENU=Total Incl. Tax;
                ToolTipML=ENU=Specifies the total amount including Tax that will be posted to the vendor's account for all the lines in the purchase document. This is the amount that you owe the vendor based on this purchase document. If the document is a credit memo, it is the amount that the vendor owes you.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,TRUE);
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                CaptionML=ENU=Purchase ($);
                ToolTipML=ENU=Specifies your total purchases. It is calculated from amounts excluding tax on all completed and open purchase invoices and credit memos.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalPurchLineLCY.Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 95  ;2   ;Field     ;
                Name=Quantity;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the total quantity of G/L account entries, items, and/or resources in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine.Quantity;
                Editable=FALSE }

    { 73  ;2   ;Field     ;
                CaptionML=ENU=Parcels;
                ToolTipML=ENU=Specifies the total number of parcels in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Units per Parcel";
                Editable=FALSE }

    { 91  ;2   ;Field     ;
                CaptionML=ENU=Net Weight;
                ToolTipML=ENU=Specifies the total net weight of the items in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Net Weight";
                Editable=FALSE }

    { 82  ;2   ;Field     ;
                CaptionML=ENU=Gross Weight;
                ToolTipML=ENU=Specifies the total gross weight of the items in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Gross Weight";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                CaptionML=ENU=Volume;
                ToolTipML=ENU=Specifies the total volume of the items in the purchase document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Unit Volume";
                Editable=FALSE }

    { 5   ;1   ;Part      ;
                Name=SubForm;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page576 }

    { 1901061301;1;Group  ;
                CaptionML=ENU=Vendor }

    { 67  ;2   ;Field     ;
                CaptionML=ENU=Balance ($);
                ToolTipML=ENU=Specifies the balance on the vendor's account.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Vend."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Purchase %1 Statistics';
      Text001@1001 : TextConst 'ENU=Amount';
      Text002@1002 : TextConst 'ENU=Total';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because a vendor invoice discount with the code %1 exists.';
      TotalPurchLine@1006 : Record 39;
      TotalPurchLineLCY@1007 : Record 39;
      Vend@1008 : Record 23;
      TempVATAmountLine@1009 : TEMPORARY Record 290;
      PurchSetup@1010 : Record 312;
      PurchPost@1011 : Codeunit 90;
      TotalAmount1@1012 : Decimal;
      TotalAmount2@1013 : Decimal;
      VATAmount@1014 : Decimal;
      VATAmountText@1015 : Text[30];
      PrevNo@1016 : Code[20];
      AllowInvDisc@1017 : Boolean;
      AllowVATDifference@1018 : Boolean;

    LOCAL PROCEDURE UpdateHeaderInfo@5();
    VAR
      CurrExchRate@1000 : Record 330;
      UseDate@1001 : Date;
    BEGIN
      TotalPurchLine."Inv. Discount Amount" := TempVATAmountLine.GetTotalInvDiscAmount;
      TotalAmount1 :=
        TotalPurchLine."Line Amount" - TotalPurchLine."Inv. Discount Amount";
      VATAmount := TempVATAmountLine.GetTotalVATAmount;
      IF "Prices Including VAT" THEN BEGIN
        TotalAmount1 := TempVATAmountLine.GetTotalAmountInclVAT;
        TotalAmount2 := TotalAmount1 - VATAmount;
        TotalPurchLine."Line Amount" := TotalAmount1 + TotalPurchLine."Inv. Discount Amount";
      END ELSE
        TotalAmount2 := TotalAmount1 + VATAmount;

      IF "Prices Including VAT" THEN
        TotalPurchLineLCY.Amount := TotalAmount2
      ELSE
        TotalPurchLineLCY.Amount := TotalAmount1;
      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
           ("Posting Date" = 0D)
        THEN
          UseDate := WORKDATE
        ELSE
          UseDate := "Posting Date";

        TotalPurchLineLCY.Amount :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            UseDate,"Currency Code",TotalPurchLineLCY.Amount,"Currency Factor");
      END;
    END;

    LOCAL PROCEDURE GetVATSpecification@21();
    BEGIN
      CurrPage.SubForm.PAGE.GetTempVATAmountLine(TempVATAmountLine);
      IF TempVATAmountLine.GetAnyLineModified THEN
        UpdateHeaderInfo;
    END;

    LOCAL PROCEDURE SetVATSpecification@11();
    BEGIN
      CurrPage.SubForm.PAGE.SetTempVATAmountLine(TempVATAmountLine);
      CurrPage.SubForm.PAGE.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16();
    VAR
      SaveTotalAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF "Prices Including VAT" THEN BEGIN
        SaveTotalAmount := TotalAmount1;
        UpdateInvDiscAmount;
        TotalAmount1 := SaveTotalAmount;
      END;

      WITH TotalPurchLine DO
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1;
      UpdateInvDiscAmount;
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3();
    VAR
      InvDiscBaseAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      InvDiscBaseAmount := TempVATAmountLine.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
      IF InvDiscBaseAmount = 0 THEN
        ERROR(Text003,TempVATAmountLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      IF TotalPurchLine."Inv. Discount Amount" / InvDiscBaseAmount > 1 THEN
        ERROR(
          Text004,
          TotalPurchLine.FIELDCAPTION("Inv. Discount Amount"),
          TempVATAmountLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      TempVATAmountLine.SetInvoiceDiscountAmount(
        TotalPurchLine."Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
      CurrPage.SubForm.PAGE.SetTempVATAmountLine(TempVATAmountLine);
      UpdateHeaderInfo;

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalPurchLine."Inv. Discount Amount";
      MODIFY;
      UpdateVATOnPurchLines;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      IF "Prices Including VAT" XOR ReverseCaption THEN
        EXIT('2,1,' + FieldCaption);

      EXIT('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnPurchLines@1();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      GetVATSpecification;
      IF TempVATAmountLine.GetAnyLineModified THEN BEGIN
        PurchLine.UpdateVATOnLines(0,Rec,PurchLine,TempVATAmountLine);
        PurchLine.UpdateVATOnLines(1,Rec,PurchLine,TempVATAmountLine);
      END;
      PrevNo := '';
    END;

    LOCAL PROCEDURE VendInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      VendInvDisc@1001 : Record 24;
    BEGIN
      VendInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(VendInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    BEGIN
      IF NOT AllowInvDisc THEN
        ERROR(Text005,"Invoice Disc. Code");
    END;

    LOCAL PROCEDURE CalculateTotals@6();
    VAR
      PurchLine@1001 : Record 39;
      TempPurchLine@1000 : TEMPORARY Record 39;
    BEGIN
      CLEAR(PurchLine);
      CLEAR(TotalPurchLine);
      CLEAR(TotalPurchLineLCY);
      CLEAR(PurchPost);

      PurchPost.GetPurchLines(Rec,TempPurchLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        Rec,TempPurchLine,0,TotalPurchLine,TotalPurchLineLCY,VATAmount,VATAmountText);

      IF "Prices Including VAT" THEN BEGIN
        TotalAmount2 := TotalPurchLine.Amount;
        TotalAmount1 := TotalAmount2 + VATAmount;
        TotalPurchLine."Line Amount" := TotalAmount1 + TotalPurchLine."Inv. Discount Amount";
      END ELSE BEGIN
        TotalAmount1 := TotalPurchLine.Amount;
        TotalAmount2 := TotalPurchLine."Amount Including VAT";
      END;

      IF Vend.GET("Pay-to Vendor No.") THEN
        Vend.CALCFIELDS("Balance (LCY)")
      ELSE
        CLEAR(Vend);

      PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine);
      TempVATAmountLine.MODIFYALL(Modified,FALSE);
      SetVATSpecification;

      OnAfterCalculateTotals(Rec,TotalPurchLine,TotalPurchLineLCY,TempVATAmountLine);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateTotals@13(VAR PurchHeader@1000 : Record 38;VAR TotalPurchLine@1002 : Record 39;VAR TotalPurchLineLCY@1001 : Record 39;VAR TempVATAmountLine@1003 : TEMPORARY Record 290);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnOpenPageOnBeforeSetEditable@7(VAR AllowInvDisc@1000 : Boolean;VAR AllowVATDifference@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

