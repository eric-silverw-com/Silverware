OBJECT Codeunit 1314 Purch. Doc. From Sales Doc.
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:08:08 PM;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreatePurchInvOptionQst@1001 : TextConst 'ENU=All Lines,Selected Lines';
      CreatePurchInvInstructionTxt@1000 : TextConst 'ENU=A purchase invoice will be created. Select which sales invoice lines to use.';
      SelectVentorTxt@1002 : TextConst 'ENU=Select a vendor to buy from.';
      TypeNotSupportedErr@1003 : TextConst '@@@=Line or Document type;ENU=Type %1 is not supported.';
      NoPurchaseOrdersCreatedErr@1004 : TextConst 'ENU=No purchase orders are created.';

    [External]
    PROCEDURE CreatePurchaseInvoice@2(SalesHeader@1000 : Record 36;VAR SelectedSalesLine@1001 : Record 37);
    VAR
      Vendor@1008 : Record 23;
      PurchaseHeader@1007 : Record 38;
      SalesLine@1005 : Record 37;
      OptionNumber@1002 : Integer;
    BEGIN
      OptionNumber := DIALOG.STRMENU(CreatePurchInvOptionQst,1,CreatePurchInvInstructionTxt);

      IF OptionNumber = 0 THEN
        EXIT;

      CASE OptionNumber OF
        0:
          EXIT;
        1:
          BEGIN
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          END;
        2:
          SalesLine.COPY(SelectedSalesLine);
      END;

      IF SelectVendor(Vendor,SalesLine) THEN BEGIN
        CreatePurchaseHeader(PurchaseHeader,SalesHeader,Vendor);
        CopySalesLinesToPurchaseLines(PurchaseHeader,SalesLine);
        PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);
      END;
    END;

    [External]
    PROCEDURE CreatePurchaseOrder@6(SalesHeader@1000 : Record 36);
    VAR
      TempManufacturingUserTemplate@1002 : TEMPORARY Record 5525;
      RequisitionLine@1003 : Record 246;
      PurchaseHeader@1004 : Record 38;
      TempDocumentEntry@1006 : TEMPORARY Record 265;
      MakeSupplyOrdersYesNo@1005 : Codeunit 5521;
      PurchOrderFromSalesOrder@1008 : Page 1328;
      NoFilter@1001 : Text;
    BEGIN
      TempManufacturingUserTemplate.INIT;
      TempManufacturingUserTemplate."User ID" := USERID;
      TempManufacturingUserTemplate."Make Orders" := TempManufacturingUserTemplate."Make Orders"::"The Active Order";
      TempManufacturingUserTemplate."Create Purchase Order" :=
        TempManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders";
      TempManufacturingUserTemplate."Create Production Order" := TempManufacturingUserTemplate."Create Production Order"::" ";
      TempManufacturingUserTemplate."Create Transfer Order" := TempManufacturingUserTemplate."Create Transfer Order"::" ";
      TempManufacturingUserTemplate."Create Assembly Order" := TempManufacturingUserTemplate."Create Assembly Order"::" ";
      TempManufacturingUserTemplate.INSERT;

      PurchOrderFromSalesOrder.LOOKUPMODE(TRUE);
      PurchOrderFromSalesOrder.SetSalesOrderNo(SalesHeader."No.");
      IF PurchOrderFromSalesOrder.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      PurchOrderFromSalesOrder.GETRECORD(RequisitionLine);
      RequisitionLine.SETRANGE("Demand Order No.",SalesHeader."No.");
      RequisitionLine.SETRANGE("Demand Subtype",SalesHeader."Document Type"::Order);
      RequisitionLine.SETRANGE(Level);
      RequisitionLine.SETFILTER(Quantity,'>%1',0);
      IF NOT RequisitionLine.ISEMPTY THEN BEGIN
        MakeSupplyOrdersYesNo.SetManufUserTemplate(TempManufacturingUserTemplate);
        MakeSupplyOrdersYesNo.SetBlockForm;

        MakeSupplyOrdersYesNo.SetCreatedDocumentBuffer(TempDocumentEntry);
        MakeSupplyOrdersYesNo.RUN(RequisitionLine);
      END;

      TempDocumentEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      IF TempDocumentEntry.FINDSET THEN
        REPEAT
          IF PurchaseHeader.GET(TempDocumentEntry."Document Type",TempDocumentEntry."Document No.") THEN
            BuildFilter(NoFilter,PurchaseHeader."No.");
        UNTIL TempDocumentEntry.NEXT = 0;

      IF NoFilter = '' THEN
        ERROR(NoPurchaseOrdersCreatedErr);

      PurchaseHeader.SETFILTER("No.",NoFilter);
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);

      CASE PurchaseHeader.COUNT OF
        0:
          ERROR(NoPurchaseOrdersCreatedErr);
        1:
          PAGE.RUN(PAGE::"Purchase Order",PurchaseHeader);
        ELSE
          PAGE.RUN(PAGE::"Purchase Order List",PurchaseHeader);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@5(VAR PurchaseHeader@1002 : Record 38;SalesHeader@1000 : Record 36;Vendor@1001 : Record 23);
    BEGIN
      PurchaseHeader.INIT;

      IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::Invoice,SalesHeader."Document Type"::Order] THEN
        PurchaseHeader.VALIDATE("Document Type",PurchaseHeader."Document Type"::Invoice)
      ELSE
        ERROR(TypeNotSupportedErr,FORMAT(SalesHeader."Document Type"));

      PurchaseHeader.InitRecord;
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CopySalesLinesToPurchaseLines@7(PurchaseHeader@1001 : Record 38;VAR SalesLine@1002 : Record 37);
    VAR
      PurchaseLine@1000 : Record 39;
      PurchaseLineNo@1003 : Integer;
    BEGIN
      PurchaseLineNo := 0;
      IF SalesLine.FIND('-') THEN
        REPEAT
          CLEAR(PurchaseLine);
          PurchaseLine.INIT;
          PurchaseLine."Document No." := PurchaseHeader."No.";
          PurchaseLine."Document Type" := PurchaseHeader."Document Type";

          PurchaseLineNo := PurchaseLineNo + 10000;
          PurchaseLine."Line No." := PurchaseLineNo;

          CASE SalesLine.Type OF
            SalesLine.Type::" ":
              PurchaseLine.Type := PurchaseLine.Type::" ";
            SalesLine.Type::Item:
              PurchaseLine.Type := PurchaseLine.Type::Item;
            ELSE
              ERROR(TypeNotSupportedErr,FORMAT(SalesLine.Type));
          END;

          PurchaseLine.VALIDATE("No.",SalesLine."No.");
          PurchaseLine.Description := SalesLine.Description;

          IF PurchaseLine."No." <> '' THEN BEGIN
            PurchaseLine.VALIDATE("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
            PurchaseLine.VALIDATE("Pay-to Vendor No.",PurchaseHeader."Pay-to Vendor No.");
            PurchaseLine.VALIDATE(Quantity,SalesLine.Quantity);
            PurchaseLine.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
          END;

          PurchaseLine.INSERT(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectVendor@1(VAR Vendor@1000 : Record 23;VAR SelectedSalesLine@1001 : Record 37) : Boolean;
    VAR
      SalesLine@1005 : Record 37;
      Item@1007 : Record 27;
      VendorList@1003 : Page 27;
      VendorNo@1008 : Code[20];
      DefaultVendorFound@1006 : Boolean;
    BEGIN
      SalesLine.COPY(SelectedSalesLine);

      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      IF SalesLine.FINDSET THEN BEGIN
        Item.GET(SalesLine."No.");
        VendorNo := Item."Vendor No.";
        DefaultVendorFound := (VendorNo <> '');

        WHILE DefaultVendorFound AND (SalesLine.NEXT <> 0) DO BEGIN
          Item.GET(SalesLine."No.");
          DefaultVendorFound := (VendorNo = Item."Vendor No.");
        END;

        IF DefaultVendorFound THEN BEGIN
          Vendor.GET(VendorNo);
          EXIT(TRUE);
        END;
      END;

      VendorList.LOOKUPMODE(TRUE);
      VendorList.CAPTION(SelectVentorTxt);
      IF VendorList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        VendorList.GETRECORD(Vendor);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE BuildFilter@3(VAR InitialFilter@1000 : Text;NewValue@1001 : Text);
    BEGIN
      IF STRPOS(InitialFilter,NewValue) = 0 THEN BEGIN
        IF STRLEN(InitialFilter) > 0 THEN
          InitialFilter += '|';
        InitialFilter += NewValue;
      END;
    END;

    BEGIN
    END.
  }
}

