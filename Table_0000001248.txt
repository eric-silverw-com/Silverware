OBJECT Table 1248 Ledger Entry Matching Buffer
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Ledger Entry Matching Buffer;
               ESM=Mem. inter. conciliaci¢n movimiento;
               FRC=Tampon correspondance ‚criture;
               ENC=Ledger Entry Matching Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Entry No.;
                                                              ESM=N§ mov.;
                                                              FRC=Nø s‚quence;
                                                              ENC=Entry No.] }
    { 2   ;   ;Account Type        ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Account Type;
                                                              ESM=Tipo de cta.;
                                                              FRC=Type de compte;
                                                              ENC=Account Type];
                                                   OptionCaptionML=[ENU=Customer,Vendor,G/L Account,Bank Account;
                                                                    ESM=Cliente,Proveedor,Cuenta,Banco;
                                                                    FRC=Client,Fournisseur,G‚n‚ral,Banque;
                                                                    ENC=Customer,Vendor,G/L Account,Bank Account];
                                                   OptionString=Customer,Vendor,G/L Account,Bank Account }
    { 3   ;   ;Account No.         ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Account No.;
                                                              ESM=N§ cuenta;
                                                              FRC=Nø de compte;
                                                              ENC=Account No.] }
    { 4   ;   ;Bal. Account Type   ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bal. Account Type;
                                                              ESM=Tipo contrapartida;
                                                              FRC=Type compte contrepartie;
                                                              ENC=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                                    ESM=Cuenta,Cliente,Proveedor,Banco,Activo fijo;
                                                                    FRC=G‚n‚ral,Client,Fournisseur,Banque,Immobilisation;
                                                                    ENC=G/L Account,Customer,Vendor,Bank Account,Fixed Asset];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 5   ;   ;Bal. Account No.    ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ESM=Cta. contrapartida;
                                                              FRC=Nø compte contrepartie;
                                                              ENC=Bal. Account No.] }
    { 8   ;   ;Document Type       ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document Type;
                                                              ESM=Tipo documento;
                                                              FRC=Type document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ESM=" ,Pago,Factura,Nota de cr‚dito,Docs. inter‚s,Recordatorio,Reembolso";
                                                                    FRC=" ,Paiement,Facture,Note de cr‚dit,Note de frais financiers,Rappel,Remboursement";
                                                                    ENC=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 9   ;   ;Due Date            ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Due Date;
                                                              ESM=Fecha vencimiento;
                                                              FRC=Date d'‚ch‚ance;
                                                              ENC=Due Date] }
    { 10  ;   ;Posting Date        ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Posting Date;
                                                              ESM=Fecha registro;
                                                              FRC=Date de report;
                                                              ENC=Posting Date] }
    { 11  ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document No.;
                                                              ESM=N§ documento;
                                                              FRC=Nø de document;
                                                              ENC=Document No.] }
    { 12  ;   ;External Document No.;Code35       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=External Document No.;
                                                              ESM=N§ documento externo;
                                                              FRC=Nø doc. externe;
                                                              ENC=External Document No.] }
    { 20  ;   ;Remaining Amount    ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ESM=Importe pendiente;
                                                              FRC=Solde ouvert;
                                                              ENC=Remaining Amount] }
    { 21  ;   ;Remaining Amt. Incl. Discount;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Amt. Incl. Discount;
                                                              ESM=Importe pendiente incl. descuento;
                                                              FRC=Montant ouvert escompte incl.;
                                                              ENC=Remaining Amt. Incl. Discount] }
    { 22  ;   ;Pmt. Discount Due Date;Date        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Pmt. Discount Due Date;
                                                              ESM=Fecha vencimiento dto. P.P.;
                                                              FRC=Date d'‚ch‚ance d'escompte de paiement;
                                                              ENC=Pmt. Discount Due Date] }
  }
  KEYS
  {
    {    ;Entry No.,Account Type                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE InsertFromCustomerLedgerEntry@1(CustLedgerEntry@1000 : Record 21;UseLCYAmounts@1001 : Boolean;VAR UsePaymentDiscounts@1002 : Boolean);
    BEGIN
      CLEAR(Rec);
      "Entry No." := CustLedgerEntry."Entry No.";
      "Account Type" := "Account Type"::Customer;
      "Account No." := CustLedgerEntry."Customer No.";
      "Due Date" := CustLedgerEntry."Due Date";
      "Posting Date" := CustLedgerEntry."Posting Date";
      "Document No." := CustLedgerEntry."Document No.";
      "External Document No." := CustLedgerEntry."External Document No.";

      IF UseLCYAmounts THEN
        "Remaining Amount" := CustLedgerEntry."Remaining Amt. (LCY)"
      ELSE
        "Remaining Amount" := CustLedgerEntry."Remaining Amount";

      "Pmt. Discount Due Date" := GetCustomerLedgerEntryDiscountDueDate(CustLedgerEntry);

      "Remaining Amt. Incl. Discount" := "Remaining Amount";
      IF "Pmt. Discount Due Date" > 0D THEN BEGIN
        IF UseLCYAmounts THEN
          "Remaining Amt. Incl. Discount" -=
            ROUND(CustLedgerEntry."Remaining Pmt. Disc. Possible" / CustLedgerEntry."Adjusted Currency Factor")
        ELSE
          "Remaining Amt. Incl. Discount" -= CustLedgerEntry."Remaining Pmt. Disc. Possible";
        UsePaymentDiscounts := TRUE;
      END;

      INSERT(TRUE);
    END;

    [External]
    PROCEDURE InsertFromVendorLedgerEntry@4(VendorLedgerEntry@1000 : Record 25;UseLCYAmounts@1001 : Boolean;VAR UsePaymentDiscounts@1002 : Boolean);
    BEGIN
      CLEAR(Rec);
      "Entry No." := VendorLedgerEntry."Entry No.";
      "Account Type" := "Account Type"::Vendor;
      "Account No." := VendorLedgerEntry."Vendor No.";
      "Due Date" := VendorLedgerEntry."Due Date";
      "Posting Date" := VendorLedgerEntry."Posting Date";
      "Document No." := VendorLedgerEntry."Document No.";
      "External Document No." := VendorLedgerEntry."External Document No.";

      IF UseLCYAmounts THEN
        "Remaining Amount" := VendorLedgerEntry."Remaining Amt. (LCY)"
      ELSE
        "Remaining Amount" := VendorLedgerEntry."Remaining Amount";

      "Pmt. Discount Due Date" := GetVendorLedgerEntryDiscountDueDate(VendorLedgerEntry);

      "Remaining Amt. Incl. Discount" := "Remaining Amount";
      IF "Pmt. Discount Due Date" > 0D THEN BEGIN
        IF UseLCYAmounts THEN
          "Remaining Amt. Incl. Discount" -=
            ROUND(VendorLedgerEntry."Remaining Pmt. Disc. Possible" / VendorLedgerEntry."Adjusted Currency Factor")
        ELSE
          "Remaining Amt. Incl. Discount" -= VendorLedgerEntry."Remaining Pmt. Disc. Possible";
        UsePaymentDiscounts := TRUE;
      END;

      INSERT(TRUE);
    END;

    [External]
    PROCEDURE InsertFromBankAccLedgerEntry@5(BankAccountLedgerEntry@1000 : Record 271);
    BEGIN
      CLEAR(Rec);
      "Entry No." := BankAccountLedgerEntry."Entry No.";
      "Account Type" := "Account Type"::"Bank Account";
      "Account No." := BankAccountLedgerEntry."Bank Account No.";
      "Bal. Account Type" := BankAccountLedgerEntry."Bal. Account Type";
      "Bal. Account No." := BankAccountLedgerEntry."Bal. Account No.";
      "Posting Date" := BankAccountLedgerEntry."Posting Date";
      "Document Type" := BankAccountLedgerEntry."Document Type";
      "Document No." := BankAccountLedgerEntry."Document No.";
      "External Document No." := BankAccountLedgerEntry."External Document No.";
      "Remaining Amount" := BankAccountLedgerEntry."Remaining Amount";
      "Remaining Amt. Incl. Discount" := "Remaining Amount";

      INSERT(TRUE);
    END;

    [External]
    PROCEDURE GetApplicableRemainingAmount@6(BankAccReconciliationLine@1000 : Record 274;UsePaymentDiscounts@1001 : Boolean) : Decimal;
    BEGIN
      IF NOT UsePaymentDiscounts THEN
        EXIT("Remaining Amount");

      IF BankAccReconciliationLine."Transaction Date" > "Pmt. Discount Due Date" THEN
        EXIT("Remaining Amount");

      EXIT("Remaining Amt. Incl. Discount");
    END;

    [External]
    PROCEDURE GetNoOfLedgerEntriesWithinRange@9(MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal;TransactionDate@1002 : Date;UsePaymentDiscounts@1004 : Boolean) : Integer;
    BEGIN
      EXIT(GetNoOfLedgerEntriesInAmountRange(MinAmount,MaxAmount,TransactionDate,'>=%1&<=%2',UsePaymentDiscounts));
    END;

    [External]
    PROCEDURE GetNoOfLedgerEntriesOutsideRange@10(MinAmount@1002 : Decimal;MaxAmount@1001 : Decimal;TransactionDate@1000 : Date;UsePaymentDiscounts@1003 : Boolean) : Integer;
    BEGIN
      EXIT(GetNoOfLedgerEntriesInAmountRange(MinAmount,MaxAmount,TransactionDate,'<%1|>%2',UsePaymentDiscounts));
    END;

    LOCAL PROCEDURE GetNoOfLedgerEntriesInAmountRange@23(MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal;TransactionDate@1002 : Date;RangeFilter@1004 : Text;UsePaymentDiscounts@1005 : Boolean) : Integer;
    VAR
      NoOfEntreis@1003 : Integer;
    BEGIN
      SETFILTER("Remaining Amount",RangeFilter,MinAmount,MaxAmount);
      SETFILTER("Pmt. Discount Due Date",'<%1',TransactionDate);
      NoOfEntreis := COUNT;

      SETRANGE("Remaining Amount");

      IF UsePaymentDiscounts THEN BEGIN
        SETFILTER("Remaining Amt. Incl. Discount",RangeFilter,MinAmount,MaxAmount);
        SETFILTER("Pmt. Discount Due Date",'>=%1',TransactionDate);
        NoOfEntreis += COUNT;
        SETRANGE("Remaining Amt. Incl. Discount");
      END;

      SETRANGE("Pmt. Discount Due Date");

      EXIT(NoOfEntreis);
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntryDiscountDueDate@2(CustLedgerEntry@1000 : Record 21) : Date;
    BEGIN
      IF CustLedgerEntry."Remaining Pmt. Disc. Possible" = 0 THEN
        EXIT(0D);

      IF CustLedgerEntry."Pmt. Disc. Tolerance Date" >= CustLedgerEntry."Pmt. Discount Date" THEN
        EXIT(CustLedgerEntry."Pmt. Disc. Tolerance Date");

      EXIT(CustLedgerEntry."Pmt. Discount Date");
    END;

    LOCAL PROCEDURE GetVendorLedgerEntryDiscountDueDate@3(VendorLedgerEntry@1000 : Record 25) : Date;
    BEGIN
      IF VendorLedgerEntry."Remaining Pmt. Disc. Possible" = 0 THEN
        EXIT(0D);

      IF VendorLedgerEntry."Pmt. Disc. Tolerance Date" >= VendorLedgerEntry."Pmt. Discount Date" THEN
        EXIT(VendorLedgerEntry."Pmt. Disc. Tolerance Date");

      EXIT(VendorLedgerEntry."Pmt. Discount Date");
    END;

    BEGIN
    END.
  }
}

