OBJECT Codeunit 2200 Azure Key Vault Management
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NavAzureKeyVaultClient@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureKeyVaultClient, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureKeyVaultClient.MachineLearningCredentialsHelper";
      AzureKeyVaultSecretProvider@1001 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Encryption.IAzureKeyVaultSecretProvider";

      ApplicationSecretsTxt@1002 : TextConst
        '@@@={Locked}',
        'ENU=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService,MSWalletSignUpUrl,MSWalletMerchantAPI,MSWalletMerchantAPIResource,QBVisibleForInv,MailerResourceId,machinelearning,background-ml-enabled,extmgmt-marketplace-disable,opaycardoriginatorfornav,opaycardprivatekey,opaycardmerchantid,opaycarddisplayid,SmtpSetup',
        'ESM=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService,MSWalletSignUpUrl,MSWalletMerchantAPI,MSWalletMerchantAPIResource,QBVisibleForInv,MailerResourceId,machinelearning,background-ml-enabled,extmgmt-marketplace-disable,opaycardoriginatorfornav,opaycardprivatekey,opaycardmerchantid,opaycarddisplayid,SmtpSetup',
        'FRC=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService,MSWalletSignUpUrl,MSWalletMerchantAPI,MSWalletMerchantAPIResource,QBVisibleForInv,MailerResourceId,machinelearning,background-ml-enabled,extmgmt-marketplace-disable,opaycardoriginatorfornav,opaycardprivatekey,opaycardmerchantid,opaycarddisplayid,SmtpSetup',
        'ENC=ml-forecast,qbo-consumerkey,qbo-consumersecret,amcname,amcpassword,YodleeCobrandName,YodleeCobrandPassword,YodleeServiceUri,YodleeFastlinkUrl,ExchangeAuthMethod,NpsApiUrl,NpsCacheLifeTime,NpsTimeBetweenRequests,webhooksadapteruri,webhooksadapterclientid,webhooksadapterclientsecret,webhooksadapterresourceuri,webhooksadapterauthority,c2graphclientid,c2graphsecret,c2graphresource,c2graphauthority,xeroimportapp-key,xeroimportapp-secret,qbo-businesscenter-consumerkey,qbo-businesscenter-consumersecret,walletpaymentrequesturl,qbo-datamigration-consumerkey,qbo-datamigration-consumersecret,govtalk-vendorid,MSWalletAADAppID,MSWalletAADAppKey,MSWalletAADIdentityService,MSWalletSignUpUrl,MSWalletMerchantAPI,MSWalletMerchantAPIResource,QBVisibleForInv,MailerResourceId,machinelearning,background-ml-enabled,extmgmt-marketplace-disable,opaycardoriginatorfornav,opaycardprivatekey,opaycardmerchantid,opaycarddisplayid,SmtpSetup';
      ImageAnalysisSecretTxt@1008 : TextConst '@@@={Locked};ENU=cognitive-vision-params;ESM=cognitive-vision-params;FRC=cognitive-vision-params;ENC=cognitive-vision-params';
      SecretNotFoundErr@1003 : TextConst '@@@="%1 = Secret Name. %2 = Available secrets.";ENU=%1 is not an application secret. Choose one of the following secrets: %2.;ESM=%1 no es un secreto de aplicaci¢n. Elija uno de los secretos siguientes: %2.;FRC=%1 n''est pas un secret d''application. S‚lectionnez l''un des secrets suivantsÿ: %2.;ENC=%1 is not an application secret. Choose one of the following secrets: %2.';
      AzureForecastApiUriTxt@1005 : TextConst '@@@={Locked};ENU=AzureForecastApiUri;ESM=AzureForecastApiUri;FRC=AzureForecastApiUri;ENC=AzureForecastApiUri';
      AzureForecastApiKeyTxt@1006 : TextConst '@@@={Locked};ENU=AzureForecastApiKey;ESM=AzureForecastApiKey;FRC=AzureForecastApiKey;ENC=AzureForecastApiKey';
      AzureForecastLimitTypeTxt@1004 : TextConst 'ENU=AzureForecastLimitType;ESM=AzureForecastLimitType;FRC=AzureForecastLimitType;ENC=AzureForecastLimitType';
      AzureForecastLimitTxt@1007 : TextConst '@@@={Locked};ENU=AzureForecastLimit;ESM=AzureForecastLimit;FRC=AzureForecastLimit;ENC=AzureForecastLimit';
      MissingImageAnalysisSecretErr@1011 : TextConst 'ENU=There is a missing configuration value on our end. Try again later.;ESM=Le falta un valor de configuraci¢n. Vuelva a intentarlo m s tarde.;FRC=Il manque une valeur de configuration de notre c“t‚. R‚essayez plus tard.;ENC=There is a missing configuration value on our end. Try again later.';
      CachedSecretsDictionary@1010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      AzureMachineLearingApiUriTxt@1014 : TextConst '@@@={Locked};ENU=AzureMachineLearningApiUri;ESM=AzureMachineLearningApiUri;FRC=AzureMachineLearningApiUri;ENC=AzureMachineLearningApiUri';
      AzureMachineLearningApiKeyTxt@1013 : TextConst '@@@={Locked};ENU=AzureMachineLearningApiKey;ESM=AzureMachineLearningApiKey;FRC=AzureMachineLearningApiKey;ENC=AzureMachineLearningApiKey';
      AzureMachineLearningLimitTypeTxt@1012 : TextConst 'ENU=AzureMachineLearningLimitType;ESM=AzureMachineLearningLimitType;FRC=AzureMachineLearningLimitType;ENC=AzureMachineLearningLimitType';
      AzureMachineLearningLimitTxt@1009 : TextConst '@@@={Locked};ENU=AzureMachineLearningLimit;ESM=AzureMachineLearningLimit;FRC=AzureMachineLearningLimit;ENC=AzureMachineLearningLimit';
      LimitTypeOption@1015 : 'Year,Month,Day,Hour';
      SMTPSetupTxt@1016 : TextConst '@@@={Locked};ENU=SmtpSetup;ESM=SmtpSetup;FRC=SmtpSetup;ENC=SmtpSetup';

    [TryFunction]
    PROCEDURE GetMLForecastCredentials@2(VAR ApiUri@1000 : Text[250];VAR ApiKey@1001 : Text[200];VAR LimitType@1005 : Option;VAR Limit@1002 : Decimal);
    VAR
      LimitAsText@1004 : Text;
      LimitTypeAsText@1003 : Text;
    BEGIN
      IF KeyValuePairInBuffer(AzureForecastApiUriTxt,ApiUri) AND
         KeyValuePairInBuffer(AzureForecastApiKeyTxt,ApiKey) AND
         KeyValuePairInBuffer(AzureForecastLimitTypeTxt,LimitTypeAsText) AND
         KeyValuePairInBuffer(AzureForecastLimitTxt,LimitAsText)
      THEN BEGIN
        EVALUATE(Limit,LimitAsText);
        EVALUATE(LimitType,LimitTypeAsText);
        EXIT;
      END;

      GetMLCredentials(NavAzureKeyVaultClient.GetMLForecastSecretName,ApiUri,ApiKey,LimitType,Limit);

      StoreKeyValuePairInBuffer(AzureForecastApiUriTxt,ApiUri);
      StoreKeyValuePairInBuffer(AzureForecastApiKeyTxt,ApiKey);
      StoreKeyValuePairInBuffer(AzureForecastLimitTxt,FORMAT(Limit));
      StoreKeyValuePairInBuffer(AzureForecastLimitTypeTxt,FORMAT(LimitType));
    END;

    [TryFunction]
    PROCEDURE GetMachineLearningCredentials@10(VAR ApiUri@1003 : Text[250];VAR ApiKey@1002 : Text[200];VAR LimitType@1001 : Option;VAR Limit@1000 : Decimal);
    VAR
      LimitAsText@1005 : Text;
      LimitTypeAsText@1004 : Text;
    BEGIN
      IF KeyValuePairInBuffer(AzureMachineLearingApiUriTxt,ApiUri) AND
         KeyValuePairInBuffer(AzureMachineLearningApiKeyTxt,ApiKey) AND
         KeyValuePairInBuffer(AzureMachineLearningLimitTypeTxt,LimitTypeAsText) AND
         KeyValuePairInBuffer(AzureMachineLearningLimitTxt,LimitAsText)
      THEN BEGIN
        EVALUATE(Limit,LimitAsText);
        EVALUATE(LimitType,LimitTypeAsText);
        EXIT;
      END;

      GetMLCredentials(NavAzureKeyVaultClient.GetMachineLearningSecretName,ApiUri,ApiKey,LimitType,Limit);

      StoreKeyValuePairInBuffer(AzureMachineLearingApiUriTxt,ApiUri);
      StoreKeyValuePairInBuffer(AzureMachineLearningApiKeyTxt,ApiKey);
      StoreKeyValuePairInBuffer(AzureMachineLearningLimitTxt,FORMAT(Limit));
      StoreKeyValuePairInBuffer(AzureMachineLearningLimitTypeTxt,FORMAT(LimitType));
    END;

    LOCAL PROCEDURE GetMLCredentials@11(SecretName@1004 : Text;VAR ApiUri@1003 : Text[250];VAR ApiKey@1002 : Text[200];VAR LimitType@1001 : Option;VAR Limit@1000 : Decimal);
    VAR
      ResultArray@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      NavAzureKeyVaultClient := NavAzureKeyVaultClient.MachineLearningCredentialsHelper;
      NavAzureKeyVaultClient.SetAzureKeyVaultProvider(AzureKeyVaultSecretProvider);
      ResultArray := NavAzureKeyVaultClient.GetMLCredentials(SecretName);
      ApiKey := FORMAT(ResultArray.GetValue(0));
      ApiUri := FORMAT(ResultArray.GetValue(1));
      IF NOT ISNULL(ResultArray.GetValue(2)) THEN
        EVALUATE(Limit,FORMAT(ResultArray.GetValue(2)));
      IF NOT ISNULL(ResultArray.GetValue(3)) THEN
        LimitType := GetLimitTypeOptionFromText(FORMAT(ResultArray.GetValue(3)));
    END;

    LOCAL PROCEDURE GetLimitTypeOptionFromText@14(LimitTypeTxt@1000 : Text) : Integer;
    BEGIN
      CASE LimitTypeTxt OF
        'Year':
          EXIT(LimitTypeOption::Year);
        'Month':
          EXIT(LimitTypeOption::Month);
        'Day':
          EXIT(LimitTypeOption::Day);
        'Hour':
          EXIT(LimitTypeOption::Hour);
      END;
    END;

    [TryFunction]
    PROCEDURE GetImageAnalysisCredentials@8(VAR ApiKey@1000 : Text;VAR ApiUri@1001 : Text;VAR LimitType@1006 : Option;VAR LimitValue@1002 : Integer);
    VAR
      JSONManagement@1005 : Codeunit 5459;
      ImageAnalysisParameter@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ImageAnalysisParametersText@1003 : Text;
      LimitTypeTxt@1008 : Text;
      LimitValueTxt@1007 : Text;
    BEGIN
      GetAzureKeyVaultSecret(ImageAnalysisParametersText,ImageAnalysisSecretTxt);
      JSONManagement.InitializeCollection(ImageAnalysisParametersText);
      IF JSONManagement.GetCollectionCount = 0 THEN
        EXIT;
      JSONManagement.GetJObjectFromCollectionByIndex(
        ImageAnalysisParameter,
        GetTenantBasedIdInRange(JSONManagement.GetCollectionCount) - 1);
      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'key',ApiKey);
      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'endpoint',ApiUri);

      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'limittype',LimitTypeTxt);
      IF LimitTypeTxt = '' THEN
        ERROR(MissingImageAnalysisSecretErr);

      LimitType := GetLimitTypeOptionFromText(LimitTypeTxt);

      JSONManagement.GetStringPropertyValueFromJObjectByName(ImageAnalysisParameter,'limitvalue',LimitValueTxt);
      IF LimitValueTxt = '' THEN
        ERROR(MissingImageAnalysisSecretErr);
      EVALUATE(LimitValue,LimitValueTxt);
    END;

    PROCEDURE GetSMTPCredentials@12(VAR SMTPMailSetup@1000 : Record 409);
    VAR
      JSONManagement@1008 : Codeunit 5459;
      SMTPServerParameter@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      SMTPServerParameters@1007 : Text;
      VaultAuthentication@1002 : Text;
      VaultUserID@1003 : Text[250];
      VaultSMTPServerPort@1004 : Text;
      VaultSecureConnection@1005 : Text;
      VaultPasswordKey@1006 : Text;
    BEGIN
      GetAzureKeyVaultSecret(SMTPServerParameters,SMTPSetupTxt);
      JSONManagement.InitializeCollection(SMTPServerParameters);
      IF JSONManagement.GetCollectionCount = 0 THEN
        EXIT;
      JSONManagement.GetJObjectFromCollectionByIndex(
        SMTPServerParameter,
        GetTenantBasedIdInRange(JSONManagement.GetCollectionCount) - 1);
      JSONManagement.GetStringPropertyValueFromJObjectByName(SMTPServerParameter,'Server',SMTPMailSetup."SMTP Server");
      JSONManagement.GetStringPropertyValueFromJObjectByName(SMTPServerParameter,'ServerPort',VaultSMTPServerPort);
      IF VaultSMTPServerPort <> '' THEN
        EVALUATE(SMTPMailSetup."SMTP Server Port",VaultSMTPServerPort);
      JSONManagement.GetStringPropertyValueFromJObjectByName(SMTPServerParameter,'Authentication',VaultAuthentication);
      IF VaultAuthentication <> '' THEN
        EVALUATE(SMTPMailSetup.Authentication,VaultAuthentication);
      JSONManagement.GetStringPropertyValueFromJObjectByName(SMTPServerParameter,'User',VaultUserID);
      SMTPMailSetup.VALIDATE("User ID",VaultUserID);
      JSONManagement.GetStringPropertyValueFromJObjectByName(SMTPServerParameter,'Password',VaultPasswordKey);
      SMTPMailSetup.SetPassword(VaultPasswordKey);
      JSONManagement.GetStringPropertyValueFromJObjectByName(SMTPServerParameter,'SecureConnection',VaultSecureConnection);
      IF VaultSecureConnection <> '' THEN
        EVALUATE(SMTPMailSetup."Secure Connection",VaultSecureConnection);
    END;

    [TryFunction]
    PROCEDURE GetAzureKeyVaultSecret@1(VAR Secret@1001 : Text;SecretName@1000 : Text);
    VAR
      TypeHelper@1002 : Codeunit 10;
    BEGIN
      IF TypeHelper.GetOptionNo(SecretName,GetAllowedSecrets) = -1 THEN
        IF NOT (STRPOS(SecretName,'isv-') = 1) THEN
          ERROR(SecretNotFoundErr,SecretName,GetAllowedSecrets);

      IF KeyValuePairInBuffer(SecretName,Secret) THEN
        EXIT;

      NavAzureKeyVaultClient := NavAzureKeyVaultClient.MachineLearningCredentialsHelper;
      NavAzureKeyVaultClient.SetAzureKeyVaultProvider(AzureKeyVaultSecretProvider);
      Secret := NavAzureKeyVaultClient.GetAzureKeyVaultSecret(SecretName);

      StoreKeyValuePairInBuffer(SecretName,Secret);
    END;

    PROCEDURE SetAzureKeyVaultSecretProvider@5(NewAzureKeyVaultSecretProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Encryption.IAzureKeyVaultSecretProvider");
    BEGIN
      ClearBufferAndDotNetKeyvaultObjects;
      AzureKeyVaultSecretProvider := NewAzureKeyVaultSecretProvider;
    END;

    PROCEDURE IsEnable@3() : Boolean;
    BEGIN
      NavAzureKeyVaultClient := NavAzureKeyVaultClient.MachineLearningCredentialsHelper;
      EXIT(NavAzureKeyVaultClient.Enable);
    END;

    LOCAL PROCEDURE KeyValuePairInBuffer@6(Key@1001 : Text;VAR Value@1000 : Text) : Boolean;
    VAR
      ValueFound@1002 : Boolean;
      ValueToReturn@1003 : Text;
    BEGIN
      InitBuffer;

      ValueFound := CachedSecretsDictionary.TryGetValue(Key,ValueToReturn);
      Value := ValueToReturn;
      EXIT(ValueFound);
    END;

    LOCAL PROCEDURE StoreKeyValuePairInBuffer@7(Key@1001 : Text;Value@1000 : Text);
    BEGIN
      InitBuffer;

      CachedSecretsDictionary.Add(Key,Value);
    END;

    LOCAL PROCEDURE ClearBufferAndDotNetKeyvaultObjects@4();
    BEGIN
      CLEAR(NavAzureKeyVaultClient);
      CLEAR(AzureKeyVaultSecretProvider);

      InitBuffer;

      CachedSecretsDictionary.Clear;
    END;

    LOCAL PROCEDURE GetTenantBasedIdInRange@17(MaxNumber@1000 : Integer) : Integer;
    VAR
      TenantIdString@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      TenantIdString := TENANTID;
      RANDOMIZE(TenantIdString.GetHashCode);
      EXIT(RANDOM(MaxNumber));
    END;

    LOCAL PROCEDURE GetAllowedSecrets@9() : Text;
    BEGIN
      EXIT(ApplicationSecretsTxt + ',' + ImageAnalysisSecretTxt + ',isv-*');
    END;

    LOCAL PROCEDURE InitBuffer@16();
    BEGIN
      IF ISNULL(CachedSecretsDictionary) THEN
        CachedSecretsDictionary := CachedSecretsDictionary.Dictionary;
    END;

    BEGIN
    END.
  }
}

