OBJECT Codeunit 10097 Export EFT (IAT)
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVNA13.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BankAccount@1020044 : Record 270;
      CompanyInformation@1020043 : Record 79;
      Vendor@1020042 : Record 23;
      VendorBankAccount@1020041 : Record 288;
      Customer@1020040 : Record 18;
      CustomerBankAccount@1020039 : Record 287;
      TempEraseFileNameValueBuffer@1020063 : TEMPORARY Record 823;
      FileManagement@1020038 : Codeunit 419;
      ExportEFTACH@1020015 : Codeunit 10094;
      ExportPaymentsACH@1020014 : Codeunit 10090;
      RecordLength@1020032 : Integer;
      BlockingFactor@1020031 : Integer;
      BlockCount@1020030 : Integer;
      FileHashTotal@1020023 : Decimal;
      BatchHashTotal@1020022 : Decimal;
      ZipFileName@1020060 : Text;
      FileName@1020021 : Text;
      FileDate@1020018 : Date;
      FileTime@1020017 : Time;
      DummyModifierValues@1020016 : ARRAY [26] OF Code[1];
      DestinationAcctType@1020013 : Text[1];
      DestinationAcctNo@1020012 : Code[20];
      DestinationName@1020011 : Text[50];
      DestinationFederalIDNo@1020010 : Text[30];
      DestinationAddress@1020009 : Text[250];
      DestinationCity@1020008 : Text[30];
      DestinationCountryCode@1020007 : Code[10];
      DestinationCounty@1020006 : Text[30];
      DestinationPostCode@1020005 : Code[20];
      DestinationBankName@1020004 : Text[50];
      DestinationBankTransitNo@1020003 : Text[20];
      DestinationBankAcctNo@1020002 : Text[30];
      DestinationBankCountryCode@1020001 : Code[10];
      DestinationBankCurrencyCode@1020000 : Code[10];
      IsNotValidErr@1020061 : TextConst '@@@=Field Value is not valid;ENU=The specified transit number is not valid.;ESM=El n£mero de tr nsito especificado no es v lido.;FRC=Le num‚ro de transit sp‚cifi‚ n''est pas valide.;ENC=The specified transit number is not valid.';
      AlreadyExistsErr@1020059 : TextConst 'ENU=The file already exists. Check the "Last E-Pay Export File Name" field in the bank account.;ESM=El archivo ya existe. Compruebe el campo Nomb. arch. exp. £lt. pago electr. en la ficha de cuenta bancaria.;FRC=Le fichier existe d‚j…. V‚rifiez le champ Nom du dernier fichier d''exportation du paiement ‚lectronique sur la fiche compte bancaire.;ENC=The file already exists. Check the "Last CPA Export File Name" field in the bank account.';
      VendorBankAccErr@1020054 : TextConst 'ENU=The vendor has no bank account setup for electronic payments.;ESM=El proveedor no tiene una cuenta bancaria configurada para pagos electr¢nicos.;FRC=Le fournisseur n''a pas de compte bancaire configur‚ pour les paiements ‚lectroniques.;ENC=The vendor has no bank account setup for electronic payments.';
      VendorMoreThanOneBankAccErr@1020053 : TextConst 'ENU=The vendor has more than one bank account setup for electronic payments.;ESM=El proveedor tiene m s de una cuenta configurada para pagos electr¢nicos.;FRC=Le fournisseur possŠde plusieurs configurations de compte bancaire pour les paiements ‚lectroniques.;ENC=The vendor has more than one bank account setup for electronic payments.';
      CustomerBankAccErr@1020052 : TextConst 'ENU=The customer has no bank account setup for electronic payments.;ESM=El cliente no tiene una cuenta bancaria configurada para pagos electr¢nicos.;FRC=Le client n''a pas de compte bancaire configur‚ pour les paiements ‚lectroniques.;ENC=The customer has no bank account setup for electronic payments.';
      CustomerMoreThanOneBankAccErr@1020051 : TextConst 'ENU=The customer has more than one bank account setup for electronic payments.;ESM=El cliente tiene m s de una cuenta configurada para pagos electr¢nicos.;FRC=Le client a plusieurs comptes bancaires configur‚s pour les paiements ‚lectroniques.;ENC=The customer has more than one bank account setup for electronic payments.';
      ReferErr@1020046 : TextConst 'ENU=Either Account type or balance account type must refer to either a vendor or a customer for an electronic payment.;ESM=El campo Tipo de cuenta o el campo Tipo de cuenta de contrapartida deben hacer referencia a un proveedor o a un cliente para un pago electr¢nico.;FRC=Le Type de compte ou le Type compte de solde doit se rapporter … un fournisseur ou un client pour un paiement ‚lectronique.;ENC=Either Account type or balance account type must refer to either a vendor or a customer for an electronic payment.';
      IsBlockedErr@1020045 : TextConst 'ENU=Account type is blocked for processing.;ESM=El pago electr¢nico no es posible para este tipo de cuenta.;FRC=Le paiement ‚lectronique n''est pas possible pour ce type de compte.;ENC=Account type is blocked for processing.';
      PrivacyBlockedErr@1234567 : TextConst 'ENU=Account type is blocked for privacy.;ESM=El tipo de cuenta est  bloqueado por motivos de privacidad.;FRC=Le type de compte est bloqu‚ … des fins de confidentialit‚.;ENC=Account type is blocked for privacy.';
      ZipDownloadTxt@1020064 : TextConst 'ENU=AllReports.zip;ESM=AllReports.zip;FRC=AllReports.zip;ENC=AllReports.zip';
      PathLengthErr@1020065 : TextConst '@@@=%1: a file name, generated by the system;ENU=The file name is too long and cannot be used.;ESM=El nombre del archivo es demasiado largo y no puede usarse.;FRC=Le nom de fichier est trop long et ne peut pas ˆtre utilis‚.;ENC=The file name is too long and cannot be used.';

    PROCEDURE StartExportFile@6(BankAccountNo@1030063 : Code[20];ReferenceCode@1030064 : Code[10];DataExchEntryNo@1020001 : Integer;VAR EFTValues@1020003 : Codeunit 10340);
    VAR
      ACHUSHeader@1020002 : Record 10300;
      ExportEFTACH@1020000 : Codeunit 10094;
      i@1030066 : Integer;
    BEGIN
      ExportEFTACH.BuildIDModifier(DummyModifierValues);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      WITH BankAccount DO BEGIN
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::US);
        TESTFIELD("Transit No.");
        IF NOT ExportPaymentsACH.CheckDigit("Transit No.") THEN
          ERROR(IsNotValidErr);
        TESTFIELD("Last E-Pay Export File Name");
        TESTFIELD(Blocked,FALSE);
        FileName := FileManagement.ServerTempFileName('');

        IF "Last ACH File ID Modifier" = '' THEN
          "Last ACH File ID Modifier" := 'A'
        ELSE BEGIN
          i := 1;
          WHILE (i < ARRAYLEN(DummyModifierValues)) AND
                ("Last ACH File ID Modifier" <> DummyModifierValues[i])
          DO
            i := i + 1;
          IF i = ARRAYLEN(DummyModifierValues) THEN
            i := 1
          ELSE
            i := i + 1;
          "Last ACH File ID Modifier" := DummyModifierValues[i];
        END;
        MODIFY;

        IF EXISTS(FileName) THEN
          ERROR(AlreadyExistsErr);

        FileDate := TODAY;
        FileTime := TIME;
        EFTValues.SetNoOfRec(0);
        FileHashTotal := 0;
        EFTValues.SetFileHashTotal(FileHashTotal);
        EFTValues.SetTotalFileDebit(0);
        EFTValues.SetTotalFileCredit(0);
        EFTValues.SetFileEntryAddendaCount(0);
        EFTValues.SetBatchCount(0);
        EFTValues.SetBatchNo(0);
        BlockingFactor := 10;
        RecordLength := 94;

        ACHUSHeader.GET(DataExchEntryNo);
        ACHUSHeader."File Record Type" := 1;
        ACHUSHeader."Priority Code" := 1;
        ACHUSHeader."Transit Routing Number" := "Transit No.";
        ACHUSHeader."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
        ACHUSHeader."File Creation Date" := FileDate;
        ACHUSHeader."File Creation Time" := FileTime;
        ACHUSHeader."File ID Modifier" := "Last ACH File ID Modifier";
        ACHUSHeader."Record Size" := RecordLength;
        ACHUSHeader."Blocking Factor" := BlockingFactor;
        ACHUSHeader."Format Code" := 1;
        ACHUSHeader."Bank Name" := Name;
        ACHUSHeader."Bank Account Number" := "No.";
        ACHUSHeader."Company Name" := CompanyInformation.Name;
        ACHUSHeader.Reference := ReferenceCode;
        ACHUSHeader.MODIFY;
        EFTValues.SetNoOfRec := EFTValues.GetNoOfRec + 1;
      END;
    END;

    PROCEDURE StartExportBatch@7(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record 10811;SettleDate@1030068 : Date;DataExchEntryNo@1020001 : Integer;VAR EFTValues@1020003 : Codeunit 10340);
    VAR
      GLSetup@1030069 : Record 98;
      ACHUSHeader@1020002 : Record 10300;
    BEGIN
      GetRecipientData(TempEFTExportWorkset);

      EFTValues.SetBatchNo(EFTValues.GetBatchNo + 1);
      BatchHashTotal := 0;
      EFTValues.SetBatchHashTotal(BatchHashTotal);
      EFTValues.SetTotalBatchDebit(0);
      EFTValues.SetTotalBatchCredit(0);
      EFTValues.SetEntryAddendaCount(0);
      EFTValues.SetTraceNo(0);

      ACHUSHeader.GET(DataExchEntryNo);
      ACHUSHeader."Batch Record Type" := 5;
      ACHUSHeader."Service Class Code" := '';
      // This is to maintain black value if no selection made on the Payment Journal otherwise the value is used.
      IF TempEFTExportWorkset."Foreign Exchange Indicator" = 0 THEN
        ACHUSHeader."Foreign Exchange Indicator" := ''
      ELSE
        ACHUSHeader."Foreign Exchange Indicator" := FORMAT(TempEFTExportWorkset."Foreign Exchange Indicator");

      IF TempEFTExportWorkset."Foreign Exchange Ref.Indicator" = 0 THEN
        ACHUSHeader."Foreign Exchange Ref Indicator" := ''
      ELSE
        ACHUSHeader."Foreign Exchange Ref Indicator" := FORMAT(TempEFTExportWorkset."Foreign Exchange Ref.Indicator");

      ACHUSHeader."Foreign Exchange Reference" := TempEFTExportWorkset."Foreign Exchange Reference";
      ACHUSHeader."Destination Country Code" := DestinationCountryCode;
      ACHUSHeader."Federal ID No." := CompanyInformation."Federal ID No.";
      ACHUSHeader."Standard Class Code" := 'IAT';
      ACHUSHeader."Company Entry Description" := TempEFTExportWorkset."Source Code";
      IF BankAccount."Currency Code" = '' THEN BEGIN
        GLSetup.GET;
        ACHUSHeader."Currency Type" := GLSetup."LCY Code";
      END ELSE
        ACHUSHeader."Currency Type" := BankAccount."Currency Code";
      IF DestinationBankCurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        ACHUSHeader."Destination Currency Code" := GLSetup."LCY Code";
      END ELSE
        ACHUSHeader."Destination Currency Code" := DestinationBankCurrencyCode;
      ACHUSHeader."Effective Date" := SettleDate;
      ACHUSHeader."Transit Routing Number" := BankAccount."Transit No.";
      ACHUSHeader."Batch Number" := EFTValues.GetBatchNo;
      ACHUSHeader.MODIFY;

      EFTValues.SetNoOfRec := EFTValues.GetNoOfRec + 1;
    END;

    PROCEDURE ExportElectronicPayment@17(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record 10811;PaymentAmount@1030072 : Decimal;DataExchEntryNo@1020003 : Integer;DataExchLineDefCode@1020004 : Code[20];VAR EFTValues@1020005 : Codeunit 10340) : Code[30];
    VAR
      ACHUSDetail@1020001 : Record 10301;
      EntryDetailSeqNo@1030076 : Text[7];
      DemandCredit@1030084 : Boolean;
      IATEntryTraceNo@1020002 : Text[50];
    BEGIN
      GetRecipientData(TempEFTExportWorkset);

      IF PaymentAmount = 0 THEN
        EXIT('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);

      IF EFTValues.GetParentBoolean THEN
        EFTValues.SetTraceNo(EFTValues.GetTraceNo + 1);

      EntryDetailSeqNo := '';

      // Detail lines
      ACHUSDetail.GET(DataExchEntryNo,DataExchLineDefCode);
      ACHUSDetail."Record Type" := 6;
      IF DemandCredit THEN
        ACHUSDetail."Transaction Code" := 22
      ELSE
        ACHUSDetail."Transaction Code" := 27;
      ACHUSDetail."Destination Transit Number" := DestinationBankTransitNo;
      IF TempEFTExportWorkset."Transaction Type Code" = 0 THEN
        ACHUSDetail."Transaction Type Code" := ''
      ELSE
        ACHUSDetail."Transaction Type Code" := FORMAT(TempEFTExportWorkset."Transaction Type Code");
      ACHUSDetail."Payment Amount" := PaymentAmount;
      ACHUSDetail."Payee Transit Routing Number" := BankAccount."Transit No.";
      ACHUSDetail."Payee Bank Account Number" := DELCHR(DestinationBankAcctNo,'=',' ');
      // This is to maintain black value if no selection made on the Payment Journal otherwise the value is used.
      IF TempEFTExportWorkset."Gateway Operator OFAC Scr.Inc" = 0 THEN
        ACHUSDetail."Gateway Operator OFAC Scr.Inc" := ''
      ELSE
        ACHUSDetail."Gateway Operator OFAC Scr.Inc" := FORMAT(TempEFTExportWorkset."Gateway Operator OFAC Scr.Inc");
      IF TempEFTExportWorkset."Secondary OFAC Scr.Indicator" = 0 THEN
        ACHUSDetail."Secondary OFAC Scr.Indicator" := ''
      ELSE
        ACHUSDetail."Secondary OFAC Scr.Indicator" := FORMAT(TempEFTExportWorkset."Secondary OFAC Scr.Indicator");
      ACHUSDetail."IAT Entry Trace Number" := ExportEFTACH.GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");

      IATEntryTraceNo := ExportEFTACH.GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
        IF DemandCredit THEN
          EFTValues.SetTotalBatchCredit(EFTValues.GetTotalBatchCredit + PaymentAmount)
        ELSE
          EFTValues.SetTotalBatchDebit(EFTValues.GetTotalBatchDebit + PaymentAmount);
        IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(DestinationBankTransitNo,1,8)));
        EFTValues.SetBatchHashTotal(BatchHashTotal);
      END;

      // Addenda Record 1
      ACHUSDetail."Addenda Record Type" := 7;
      ACHUSDetail."Payee Name" := DestinationName;
      ACHUSDetail."Payment Amount" := TempEFTExportWorkset."Amount (LCY)";
      // EntryDetailSeqNo := COPYSTR(IATEntryTraceNo,STRLEN(IATEntryTraceNo) - 6,STRLEN(IATEntryTraceNo));
      EntryDetailSeqNo := COPYSTR(IATEntryTraceNo,STRLEN(IATEntryTraceNo) - 6,7);
      ACHUSDetail."Entry Detail Sequence No" := EntryDetailSeqNo;

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      // Addenda Record 2
      ACHUSDetail."Company Name" := CompanyInformation.Name;
      ACHUSDetail."Company Address" := CompanyInformation.Address + ' ' + CompanyInformation."Address 2";

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      // Addenda Record 3
      ACHUSDetail."Company City County" := CompanyInformation.City + '*' + CompanyInformation.County + '\';
      ACHUSDetail."Cmpy CntryRegionCode PostCode" := CompanyInformation."Country/Region Code" + '*' +
        CompanyInformation."Post Code" + '\';

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      // Addenda Record 4
      ACHUSDetail."Bank Name" := BankAccount.Name;
      // This is to maintain black value if no selection made on the Payment Journal otherwise the value is used.
      IF TempEFTExportWorkset."Origin. DFI ID Qualifier" = 0 THEN
        ACHUSDetail."Origin. DFI ID Qualifier" := ''
      ELSE
        ACHUSDetail."Origin. DFI ID Qualifier" := FORMAT(TempEFTExportWorkset."Origin. DFI ID Qualifier");
      ACHUSDetail."Bank Transit Routing Number" := PADSTR(BankAccount."Transit No.",8);
      ACHUSDetail."Bank CountryRegion Code" := BankAccount."Country/Region Code";
      ACHUSDetail."Origin Bank Branch" := BankAccount."Country/Region Code";

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      // Addenda Record 5
      ACHUSDetail."Destination Bank" := DestinationBankName;
      // This is to maintain black value if no selection made on the Payment Journal otherwise the value is used.
      IF TempEFTExportWorkset."Receiv. DFI ID Qualifier" = 0 THEN
        ACHUSDetail."Receiv. DFI ID Qualifier" := ''
      ELSE
        ACHUSDetail."Receiv. DFI ID Qualifier" := FORMAT(TempEFTExportWorkset."Receiv. DFI ID Qualifier");
      ACHUSDetail."Destination Transit Number" := DestinationBankTransitNo;
      ACHUSDetail."Destination Bank Country Code" := DestinationBankCountryCode;
      ACHUSDetail."Destination Bank Branch" := DestinationBankCountryCode;

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      // Addenda Record 6
      ACHUSDetail."Destination Federal ID No." := DestinationFederalIDNo;
      ACHUSDetail."Destination Address" := DestinationAddress;

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      // Addenda Record 7
      ACHUSDetail."Destination City County Code" := DestinationCity + '*' + DestinationCounty + '\';
      ACHUSDetail."Destination CntryCode PostCode" := DestinationCountryCode + '*' + DestinationPostCode + '\';
      ACHUSDetail.MODIFY;

      IF EFTValues.GetParentBoolean THEN BEGIN
        EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      END;

      EXIT(GenerateFullTraceNoCode(EFTValues.GetTraceNo,EFTValues));
    END;

    PROCEDURE EndExportBatch@9(DataExchEntryNo@1020001 : Integer;VAR EFTValues@1020002 : Codeunit 10340);
    VAR
      ACHUSFooter@1020000 : Record 10302;
    BEGIN
      ACHUSFooter.GET(DataExchEntryNo);
      ACHUSFooter."Batch Record Type" := 8;
      ACHUSFooter."Service Class Code" := '';
      ACHUSFooter."Entry Addenda Count" := EFTValues.GetEntryAddendaCount;
      ACHUSFooter."Batch Hash Total" := EFTValues.GetBatchHashTotal;
      ACHUSFooter."Total Batch Credit Amount" := EFTValues.GetTotalBatchCredit;
      ACHUSFooter."Total Batch Debit Amount" := EFTValues.GetTotalBatchDebit;
      ACHUSFooter."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSFooter."Transit Routing Number" := BankAccount."Transit No.";
      ACHUSFooter."Batch Number" := EFTValues.GetBatchNo;
      ACHUSFooter.MODIFY;

      EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
      EFTValues.SetBatchCount(EFTValues.GetBatchCount + 1);
      IncrementHashTotal(FileHashTotal,EFTValues.GetBatchHashTotal);
      EFTValues.SetFileHashTotal(FileHashTotal);
      EFTValues.SetTotalFileDebit(EFTValues.GetTotalFileDebit + EFTValues.GetTotalBatchDebit);
      EFTValues.SetTotalFileCredit(EFTValues.GetTotalFileCredit + EFTValues.GetTotalBatchCredit);
      EFTValues.SetFileEntryAddendaCount(EFTValues.GetFileEntryAddendaCount + EFTValues.GetEntryAddendaCount);
    END;

    PROCEDURE EndExportFile@1030087(DataExchEntryNo@1020001 : Integer;VAR EFTValues@1020002 : Codeunit 10340);
    VAR
      ACHUSFooter@1020000 : Record 10302;
    BEGIN
      BlockCount := (EFTValues.GetNoOfRec + 1) DIV BlockingFactor;
      IF (EFTValues.GetNoOfRec + 1) MOD BlockingFactor <> 0 THEN
        BlockCount := BlockCount + 1;

      ACHUSFooter.GET(DataExchEntryNo);
      ACHUSFooter."Batch Count" := EFTValues.GetBatchCount;
      ACHUSFooter."Block Count" := BlockCount;
      ACHUSFooter."Entry Addenda Count" := EFTValues.GetFileEntryAddendaCount;
      ACHUSFooter."File Hash Total" := EFTValues.GetFileHashTotal;
      ACHUSFooter."Total File Debit Amount" := EFTValues.GetTotalFileDebit;
      ACHUSFooter."Total File Credit Amount" := EFTValues.GetTotalFileCredit;
      ACHUSFooter.MODIFY;

      EFTValues.SetNoOfRec := (EFTValues.GetNoOfRec + 1);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@1030089(TraceNo@1030090 : Integer;VAR EFTValues@1020000 : Codeunit 10340) : Code[30];
    VAR
      TraceCode@1030091 : Text[250];
    BEGIN
      TraceCode := '';
      TraceCode := FORMAT(FileDate,0,'<Year><Month,2><Day,2>') + BankAccount."Last ACH File ID Modifier" +
        FORMAT(EFTValues.GetBatchNo) + FORMAT(ExportEFTACH.GenerateTraceNoCode(TraceNo,BankAccount."Transit No."));
      EXIT(TraceCode);
    END;

    LOCAL PROCEDURE IncrementHashTotal@1030132(VAR HashTotal@1030133 : Decimal;HashIncrement@1030134 : Decimal);
    VAR
      SubTotal@1030135 : Decimal;
    BEGIN
      SubTotal := HashTotal + HashIncrement;
      IF SubTotal < 10000000000.0 THEN
        HashTotal := SubTotal
      ELSE
        HashTotal := SubTotal - 10000000000.0;
    END;

    LOCAL PROCEDURE MakeHash@1030136(InputString@1030137 : Text[30]) : Decimal;
    VAR
      HashAmt@1030138 : Decimal;
    BEGIN
      InputString := DELCHR(InputString,'=','.,- ');
      IF EVALUATE(HashAmt,InputString) THEN
        EXIT(HashAmt);

      EXIT(0);
    END;

    PROCEDURE DownloadWebclientZip@1020000(VAR TempNameValueBuffer@1020000 : TEMPORARY Record 823);
    BEGIN
      // Download the .zip file containing the reports if one was generated (usually from being on the web client)
      IF (ZipFileName <> '') AND TempNameValueBuffer.FINDSET THEN
        // If there's a single file, download it directly instead of the zip file
        IF TempNameValueBuffer.COUNT = 1 THEN
          FileManagement.DownloadHandler(TempNameValueBuffer.Value,'','','',TempNameValueBuffer.Name)
        ELSE BEGIN
          REPEAT
            FileManagement.AddFileToZipArchive(TempNameValueBuffer.Value,TempNameValueBuffer.Name);
            TempEraseFileNameValueBuffer.AddNewEntry(TempNameValueBuffer.Value,'');
          UNTIL TempNameValueBuffer.NEXT = 0;
          FileManagement.CloseZipArchive;
          FileManagement.DownloadHandler(ZipFileName,'','','',ZipDownloadTxt);
        END;

      CleanupTempFiles;
    END;

    PROCEDURE AddFileToClientZip@82(TempFileName@1000 : Text;ClientFileName@1001 : Text;VAR TempNameValueBuffer@1020000 : TEMPORARY Record 823);
    BEGIN
      IF STRLEN(TempFileName) > 250 THEN
        ERROR(PathLengthErr);

      IF STRLEN(ClientFileName) > 250 THEN
        ERROR(PathLengthErr);

      // Ensure we have a zip file object
      IF ZipFileName = '' THEN
        ZipFileName := FileManagement.CreateZipArchiveObject;

      TempNameValueBuffer.AddNewEntry(COPYSTR(ClientFileName,1,250),COPYSTR(TempFileName,1,250));
    END;

    LOCAL PROCEDURE CleanupTempFiles@1020001();
    VAR
      DeleteError@1000 : Boolean;
    BEGIN
      // Sometimes file handles are kept by .NET - we try to delete what we can.
      IF TempEraseFileNameValueBuffer.FINDSET THEN
        REPEAT
          IF NOT TryDeleteFile(TempEraseFileNameValueBuffer.Name) THEN
            DeleteError := TRUE;
        UNTIL TempEraseFileNameValueBuffer.NEXT = 0;

      IF DeleteError THEN
        ERROR('');
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDeleteFile@1020002(FileName@1000 : Text);
    BEGIN
      FileManagement.DeleteServerFile(FileName);
    END;

    PROCEDURE GetRecipientData@1020004(VAR TempEFTExportWorkset@1020001 : TEMPORARY Record 10811);
    BEGIN
      WITH TempEFTExportWorkset DO BEGIN
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          DestinationAcctType := 'V';
          DestinationAcctNo := "Account No.";
        END ELSE
          IF "Account Type" = "Account Type"::Customer THEN BEGIN
            DestinationAcctType := 'C';
            DestinationAcctNo := "Account No.";
          END ELSE
            IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN BEGIN
              DestinationAcctType := 'V';
              DestinationAcctNo := "Bal. Account No.";
            END ELSE
              IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                DestinationAcctType := 'C';
                DestinationAcctNo := "Bal. Account No.";
              END ELSE
                ERROR(ReferErr);

        IF DestinationAcctType = 'V' THEN BEGIN
          Vendor.GET(DestinationAcctNo);
          Vendor.TESTFIELD(Blocked,Vendor.Blocked::" ");
          Vendor.TESTFIELD("Privacy Blocked",FALSE);
          DestinationName := Vendor.Name;
          DestinationFederalIDNo := Vendor."Federal ID No.";
          DestinationAddress := Vendor.Address + ' ' + Vendor."Address 2";
          DestinationCity := Vendor.City;
          DestinationCountryCode := Vendor."Country/Region Code";
          DestinationCounty := Vendor.County;
          DestinationPostCode := Vendor."Post Code";

          VendorBankAccount.SETRANGE("Vendor No.",DestinationAcctNo);
          VendorBankAccount.SETRANGE("Use for Electronic Payments",TRUE);
          VendorBankAccount.FINDFIRST;

          IF VendorBankAccount.COUNT < 1 THEN
            ERROR(VendorBankAccErr);
          IF VendorBankAccount.COUNT > 1 THEN
            ERROR(VendorMoreThanOneBankAccErr);

          IF NOT ExportPaymentsACH.CheckDigit(VendorBankAccount."Transit No.") THEN
            ERROR(IsNotValidErr);

          VendorBankAccount.TESTFIELD("Bank Account No.");
          DestinationBankName := VendorBankAccount.Name;
          DestinationBankTransitNo := VendorBankAccount."Transit No.";
          DestinationBankAcctNo := VendorBankAccount."Bank Account No.";
          DestinationBankCurrencyCode := VendorBankAccount."Currency Code";
          DestinationBankCountryCode := VendorBankAccount."Country/Region Code";
        END ELSE
          IF DestinationAcctType = 'C' THEN BEGIN
            Customer.GET(DestinationAcctNo);
            IF Customer."Privacy Blocked" THEN
              ERROR(PrivacyBlockedErr);
            IF Customer.Blocked IN [Customer.Blocked::All] THEN
              ERROR(IsBlockedErr);

            DestinationName := Customer.Name;
            DestinationFederalIDNo := ' ';
            DestinationAddress := Customer.Address + ' ' + Customer."Address 2";
            DestinationCity := Customer.City;
            DestinationCountryCode := Customer."Country/Region Code";
            DestinationCounty := Customer.County;
            DestinationPostCode := Customer."Post Code";

            CustomerBankAccount.SETRANGE("Customer No.",DestinationAcctNo);
            CustomerBankAccount.SETRANGE("Use for Electronic Payments",TRUE);
            CustomerBankAccount.FINDFIRST;

            IF CustomerBankAccount.COUNT < 1 THEN
              ERROR(CustomerBankAccErr);
            IF CustomerBankAccount.COUNT > 1 THEN
              ERROR(CustomerMoreThanOneBankAccErr);

            IF NOT ExportPaymentsACH.CheckDigit(CustomerBankAccount."Transit No.") THEN
              ERROR(IsNotValidErr);
            CustomerBankAccount.TESTFIELD("Bank Account No.");
            DestinationBankName := CustomerBankAccount.Name;
            DestinationBankTransitNo := CustomerBankAccount."Transit No.";
            DestinationBankAcctNo := CustomerBankAccount."Bank Account No.";
            DestinationBankCurrencyCode := CustomerBankAccount."Currency Code";
            DestinationBankCountryCode := CustomerBankAccount."Country/Region Code";
          END;
      END;
    END;

    BEGIN
    END.
  }
}

