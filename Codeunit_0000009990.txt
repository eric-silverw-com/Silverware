OBJECT Codeunit 9990 Code Coverage Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Timer@1000 : DotNet "'Microsoft.Dynamics.Nav.Timer, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Timer" WITHEVENTS;
      BackupErr@1001 : TextConst 'ENU=Code Coverage Backup encountered an error: %1.;ESM=La copia de seguridad de cobertura de c¢digo encontr¢ un error: %1.;FRC=La sauvegarde du code couverture a rencontr‚ une erreurÿ: %1.;ENC=Code Coverage Backup encountered an error: %1.';
      FormatStringTxt@1002 : TextConst 'ENU=<Day,2>_<Month,2>_<Year>_<Hours24,2>_<Minutes,2>.;ESM=<D¡a,2>_<Mes,2>_<A¤o>_<Horas24,2>_<Minutos,2>.;FRC=<Jour,2>_<Mois,2>_<Ann‚e>_<Heures24,2>_<Minutes,2>.;ENC=<Day,2>_<Month,2>_<Year>_<Hours24,2>_<Minutes,2>.';
      BackupFilePath@1007 : Text[1024];
      SummaryFilePath@1008 : Text[1024];
      BackupPathFormatTxt@1003 : TextConst 'ENU=CodeCoverageBackup_%1.txt;ESM=CodeCoverageBackup_%1.txt;FRC=CodeCoverageBackup_%1.txt;ENC=CodeCoverageBackup_%1.txt';
      SummaryPathFormatTxt@1004 : TextConst 'ENU=CodeCoverageSummary_%1.xml;ESM=CodeCoverageSummary_%1.xml;FRC=CodeCoverageSummary_%1.xml;ENC=CodeCoverageSummary_%1.xml';

      StartCoverageCleanupQst@1011 : TextConst
        '@@@="%1 = Total number of objects; %2 = Number of modified objects."',
        'ENU=The Code Coverage Result Set contains lines that correspond to %1 objects, of which %2 are marked as modified. If you continue, code coverage lines that correspond to %3 objects will be deleted.\\This action cannot be undone.\\Are you sure that you want to continue?',
        'ESM=El conjunto de resultados de cobertura de c¢digo contiene l¡neas que corresponden a %1 objetos, de los cuales %2 est n marcados como modificados. Si contin£a, las l¡neas de cobertura de c¢digo correspondientes a %3 objetos se eliminar n.\\Esta acci¢n no se puede deshacer.\\¨Est  seguro de que quiere continuar?',
        'FRC=Les r‚sultats du code couverture contiennent des lignes correspondant … %1 objets dont %2 sont marqu‚s comme modifi‚s. Si vous continuez, les lignes de code couverture correspondant aux objets %3 seront supprim‚es.\\Cette action ne peut pas ˆtre annul‚e.\\Òtes-vous s–r de vouloir continuerÿ?',
        'ENC=The Code Coverage Result Set contains lines that correspond to %1 objects, of which %2 are marked as modified. If you continue, code coverage lines that correspond to %3 objects will be deleted.\\This action cannot be undone.\\Are you sure that you want to continue?';
      AllAreModifiedMsg@1010 : TextConst 'ENU=All objects that correspond to the code coverage line result set are marked as modified.\There are no lines to remove.;ESM=Todos los objetos correspondientes al conjunto de resultados de l¡nea de cobertura de c¢digo est n marcados como modificados.\No hay l¡neas para quitar.;FRC=Tous les objets correspondant aux r‚sultats des lignes de code couverture sont marqu‚s comme modifi‚s.\Il n''y a aucune ligne … supprimer.;ENC=All objects that correspond to the code coverage line result set are marked as modified.\There are no lines to remove.';

      NoneAreModifiedMsg@1009 : TextConst
        'ENU=None of the objects that correspond to the lines in the code coverage result set are marked as modified in Object Designer. No lines will be removed. You must mark the objects that correspond to the lines that you want to keep in the code coverage result set.',
        'ESM=Ninguno de los objetos correspondientes a las l¡neas en el conjunto de resultados de cobertura de c¢digo est n marcados como modificados en el Dise¤ador de objetos. No se quitar  ninguna l¡nea. Debe marcar los objetos correspondientes a las l¡neas que quiere conservar en el conjunto de resultados de cobertura de c¢digo.',
        'FRC=Aucun objet correspondant aux lignes des r‚sultats du code couverture n''est marqu‚ comme modifi‚ dans le g‚n‚rateur d''objets. Aucune ligne ne sera supprim‚e. Vous devez marquer les objets correspondant aux lignes … conserver dans les r‚sultats du code couverture.',
        'ENC=None of the objects that correspond to the lines in the code coverage result set are marked as modified in Object Designer. No lines will be removed. You must mark the objects that correspond to the lines that you want to keep in the code coverage result set.';
      ApplicationBaseline@1014 : Integer;
      IsRunning@1005 : Boolean;
      CodeCovNotRunningErr@1006 : TextConst 'ENU=Code coverage is not running.;ESM=La cobertura de c¢digo no est  funcionando.;FRC=Le code couverture n''est pas en cours d''ex‚cution.;ENC=Code coverage is not running.';
      CodeCovAlreadyRunningErr@1012 : TextConst 'ENU=Code coverage is already running.;ESM=La cobertura de c¢digo ya est  funcionando.;FRC=Le code couverture est d‚j… en cours d''ex‚cution.;ENC=Code coverage is already running.';
      StartedByApp@1013 : Boolean;
      CannotNestAppCovErr@1015 : TextConst 'ENU=Cannot nest multiple calls to StartApplicationCoverage.;ESM=No se pueden anidar varias llamadas en StartApplicationCoverage.;FRC=Impossible d''imbriquer plusieurs appels dans StartApplicationCoverage.;ENC=Cannot nest multiple calls to StartApplicationCoverage.';
      MultiSession@1016 : Boolean;

    [External]
    PROCEDURE Start@7(MultiSessionValue@1000 : Boolean);
    BEGIN
      MultiSession := MultiSessionValue;
      IF IsRunning THEN
        ERROR(CodeCovAlreadyRunningErr);
      CODECOVERAGELOG(TRUE,MultiSession);
      IsRunning := TRUE;
    END;

    [External]
    PROCEDURE Stop@8();
    BEGIN
      IF NOT IsRunning THEN
        ERROR(CodeCovNotRunningErr);
      CODECOVERAGELOG(FALSE,MultiSession);
      IsRunning := FALSE;
    END;

    [External]
    PROCEDURE Refresh@1();
    BEGIN
      CODECOVERAGEREFRESH;
    END;

    [External]
    PROCEDURE Clear@9();
    VAR
      CodeCoverage@1000 : Record 2000000049;
    BEGIN
      CodeCoverage.DELETEALL;
    END;

    [External]
    PROCEDURE Import@5();
    BEGIN
      CODECOVERAGELOAD;
    END;

    PROCEDURE Include@4(VAR Object@1000 : Record 2000000001);
    BEGIN
      CODECOVERAGEINCLUDE(Object);
    END;

    [External]
    PROCEDURE Running@22() : Boolean;
    BEGIN
      EXIT(IsRunning);
    END;

    [External]
    PROCEDURE StartApplicationCoverage@25();
    BEGIN
      IF IsRunning AND StartedByApp THEN
        ERROR(CannotNestAppCovErr);

      IF NOT IsRunning THEN BEGIN
        StartedByApp := TRUE;
        Start(FALSE);
      END;

      // Establish baseline
      ApplicationBaseline := 0;
      ApplicationBaseline := ApplicationHits;
    END;

    [External]
    PROCEDURE StopApplicationCoverage@26();
    BEGIN
      IF StartedByApp THEN
        Stop;
      StartedByApp := FALSE;
    END;

    [External]
    PROCEDURE ApplicationHits@21() NoOFLines : Integer;
    VAR
      CodeCoverage@1000 : Record 2000000049;
    BEGIN
      Refresh;
      CodeCoverage.SETRANGE("Line Type",CodeCoverage."Line Type"::Code);
      CodeCoverage.SETFILTER("No. of Hits",'>%1',0);
      // excluding Code Coverage range 9900..9999 from calculation
      CodeCoverage.SETFILTER("Object ID",'..9989|10000..129999|150000..');
      IF CodeCoverage.FINDSET THEN
        REPEAT
          NoOFLines += CodeCoverage."No. of Hits";
        UNTIL CodeCoverage.NEXT = 0;

      // Subtract baseline to produce delta
      NoOFLines -= ApplicationBaseline;
    END;

    [External]
    PROCEDURE GetNoOfHitsCoverageForObject@23(ObjectType@1000 : Option;ObjectID@1001 : Integer;CodeLine@1002 : Text) NoOfHits : Integer;
    VAR
      CodeCoverage@1003 : Record 2000000049;
    BEGIN
      Refresh;
      WITH CodeCoverage DO BEGIN
        SETRANGE("Line Type","Line Type"::Code);
        SETRANGE("Object Type",ObjectType);
        SETRANGE("Object ID",ObjectID);
        SETFILTER("No. of Hits",'>%1',0);
        SETFILTER(Line,'@*' + CodeLine + '*');
        IF FINDSET THEN
          REPEAT
            NoOfHits += "No. of Hits";
          UNTIL NEXT = 0;
        EXIT(NoOfHits);
      END;
    END;

    [External]
    PROCEDURE CoveragePercent@13(NoCodeLines@1000 : Integer;NoCodeLinesHit@1001 : Integer) : Decimal;
    BEGIN
      IF NoCodeLines > 0 THEN
        EXIT(NoCodeLinesHit / NoCodeLines);

      EXIT(1.0)
    END;

    PROCEDURE ObjectCoverage@6(VAR CodeCoverage@1000 : Record 2000000049;VAR NoCodeLines@1002 : Integer;VAR NoCodeLinesHit@1003 : Integer) : Decimal;
    VAR
      CodeCoverage2@1001 : Record 2000000049;
    BEGIN
      NoCodeLines := 0;
      NoCodeLinesHit := 0;

      CodeCoverage2.SETPOSITION(CodeCoverage.GETPOSITION);
      CodeCoverage2.SETRANGE("Object Type",CodeCoverage."Object Type");
      CodeCoverage2.SETRANGE("Object ID",CodeCoverage."Object ID");

      REPEAT
        IF CodeCoverage2."Line Type" = CodeCoverage2."Line Type"::Code THEN BEGIN
          NoCodeLines += 1;
          IF CodeCoverage2."No. of Hits" > 0 THEN
            NoCodeLinesHit += 1;
        END
      UNTIL (CodeCoverage2.NEXT = 0) OR
              (CodeCoverage2."Line Type" = CodeCoverage2."Line Type"::Object);

      EXIT(CoveragePercent(NoCodeLines,NoCodeLinesHit))
    END;

    PROCEDURE ObjectsCoverage@18(VAR CodeCoverage@1000 : Record 2000000049;VAR NoCodeLines@1002 : Integer;VAR NoCodeLinesHit@1003 : Integer) : Decimal;
    VAR
      CodeCoverage2@1001 : Record 2000000049;
    BEGIN
      NoCodeLines := 0;
      NoCodeLinesHit := 0;

      CodeCoverage2.COPYFILTERS(CodeCoverage);
      CodeCoverage2.SETFILTER("Line Type",'Code');
      REPEAT
        NoCodeLines += 1;
        IF CodeCoverage2."No. of Hits" > 0 THEN
          NoCodeLinesHit += 1;
      UNTIL CodeCoverage2.NEXT = 0;

      EXIT(CoveragePercent(NoCodeLines,NoCodeLinesHit))
    END;

    PROCEDURE FunctionCoverage@11(VAR CodeCoverage@1000 : Record 2000000049;VAR NoCodeLines@1002 : Integer;VAR NoCodeLinesHit@1003 : Integer) : Decimal;
    VAR
      CodeCoverage2@1001 : Record 2000000049;
    BEGIN
      NoCodeLines := 0;
      NoCodeLinesHit := 0;

      CodeCoverage2.SETPOSITION(CodeCoverage.GETPOSITION);
      CodeCoverage2.SETRANGE("Object Type",CodeCoverage."Object Type");
      CodeCoverage2.SETRANGE("Object ID",CodeCoverage."Object ID");

      REPEAT
        IF CodeCoverage2."Line Type" = CodeCoverage2."Line Type"::Code THEN BEGIN
          NoCodeLines += 1;
          IF CodeCoverage2."No. of Hits" > 0 THEN
            NoCodeLinesHit += 1;
        END
      UNTIL (CodeCoverage2.NEXT = 0) OR
              (CodeCoverage2."Line Type" = CodeCoverage2."Line Type"::Object) OR
              (CodeCoverage2."Line Type" = CodeCoverage2."Line Type"::"Trigger/Function");

      EXIT(CoveragePercent(NoCodeLines,NoCodeLinesHit))
    END;

    PROCEDURE CreateBackupFile@10(BackupPath@1000 : Text);
    VAR
      BackupStream@1002 : OutStream;
      BackupFile@1001 : File;
    BEGIN
      Refresh;

      BackupFile.CREATE(BackupPath);
      BackupFile.CREATEOUTSTREAM(BackupStream);
      XMLPORT.EXPORT(XMLPORT::"Code Coverage Detailed",BackupStream);
      BackupFile.CLOSE;
    END;

    PROCEDURE CreateSummaryFile@2(SummaryPath@1002 : Text);
    VAR
      SummaryStream@1001 : OutStream;
      SummaryFile@1000 : File;
    BEGIN
      Refresh;

      SummaryFile.CREATE(SummaryPath);
      SummaryFile.CREATEOUTSTREAM(SummaryStream);
      XMLPORT.EXPORT(XMLPORT::"Code Coverage Summary",SummaryStream);
      SummaryFile.CLOSE;
    END;

    PROCEDURE StartAutomaticBackup@12(TimeInterval@1002 : Integer;BackupPath@1001 : Text[1024];SummaryPath@1000 : Text[1024]);
    VAR
      Object@1003 : Record 2000000001;
    BEGIN
      Include(Object); // Load all objects
      Start(FALSE); // Start code coverage

      // Setup Timer and File Paths
      IF ISNULL(Timer) THEN
        Timer := Timer.Timer;
      UpdateAutomaticBackupSettings(TimeInterval,BackupPath,SummaryPath);
    END;

    [External]
    PROCEDURE UpdateAutomaticBackupSettings@3(TimeInterval@1000 : Integer;BackupPath@1001 : Text[1024];SummaryPath@1002 : Text[1024]);
    BEGIN
      IF NOT ISNULL(Timer) THEN BEGIN
        Timer.Stop;
        Timer.Interval := TimeInterval * 60000;
        BackupFilePath := BackupPath;
        SummaryFilePath := SummaryPath;
        Timer.Start;
      END;
    END;

    PROCEDURE CleanupCodeCoverage@17();
    VAR
      TempObject@1001 : TEMPORARY Record 2000000001;
      ModifiedMarkCount@1002 : Integer;
    BEGIN
      DetermineModifiedObjects(TempObject,ModifiedMarkCount);
      IF NOT TakeAction(TempObject.COUNT,ModifiedMarkCount) THEN
        EXIT;
      RemoveModifiedObjectLines(TempObject);
    END;

    LOCAL PROCEDURE DetermineModifiedObjects@16(VAR TempObject@1001 : TEMPORARY Record 2000000001;VAR ModifiedMarkCount@1002 : Integer);
    VAR
      CodeCoverage@1003 : Record 2000000049;
      Window@1000 : Dialog;
      i@1004 : Integer;
      N@1005 : Integer;
    BEGIN
      TempObject.DELETEALL;
      ModifiedMarkCount := 0;
      IF CodeCoverage.FINDSET THEN BEGIN
        Window.OPEN('Analyzing @1@@@@@@@@@@@@@@@@@@');
        N := CodeCoverage.COUNT;
        WITH TempObject DO
          REPEAT
            i += 1;
            IF i MOD 100 = 0 THEN
              Window.UPDATE(1,ROUND(i / N * 10000,1));
            Type := CodeCoverage."Object Type";
            "Company Name" := '';
            ID := CodeCoverage."Object ID";
            IF INSERT THEN
              CheckModified(TempObject,ModifiedMarkCount);
          UNTIL CodeCoverage.NEXT = 0;

        Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE CheckModified@19(TempObject@1004 : TEMPORARY Record 2000000001;VAR ModifiedMarkCount@1005 : Integer);
    BEGIN
      IF ObjectModified(TempObject) THEN
        ModifiedMarkCount += 1;
    END;

    LOCAL PROCEDURE ObjectModified@20(TempObject@1007 : Record 2000000001) : Boolean;
    VAR
      Object@1025 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(TempObject.Type,COMPANYNAME,TempObject.ID) THEN
        Object.GET(TempObject.Type,'',TempObject.ID);
      EXIT(Object.Modified);
    END;

    LOCAL PROCEDURE RemoveModifiedObjectLines@15(VAR TempObject@1000 : TEMPORARY Record 2000000001);
    VAR
      CodeCoverage@1001 : Record 2000000049;
      Window@1002 : Dialog;
      i@1003 : Integer;
      N@1004 : Integer;
    BEGIN
      TempObject.FINDSET;
      Window.OPEN('Deleting @1@@@@@@@@@@@@@@@@@@');
      N := TempObject.COUNT;
      REPEAT
        i += 1;
        IF i MOD 100 = 0 THEN
          Window.UPDATE(1,ROUND(i / N * 10000,1));
        IF NOT ObjectModified(TempObject) THEN BEGIN
          CodeCoverage.SETRANGE("Object Type",TempObject.Type);
          CodeCoverage.SETRANGE("Object ID",TempObject.ID);
          CodeCoverage.DELETEALL;
        END;
      UNTIL TempObject.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE TakeAction@14(ObjCount@1009 : Integer;ModifiedMarkCount@1000 : Integer) : Boolean;
    BEGIN
      IF ObjCount = 0 THEN
        EXIT(FALSE);
      IF ModifiedMarkCount = 0 THEN BEGIN
        MESSAGE(NoneAreModifiedMsg);
        EXIT(FALSE);
      END;
      IF ObjCount = ModifiedMarkCount THEN BEGIN
        MESSAGE(AllAreModifiedMsg);
        EXIT(FALSE);
      END;
      EXIT(CONFIRM(StartCoverageCleanupQst,FALSE,ObjCount,ModifiedMarkCount,ObjCount - ModifiedMarkCount));
    END;

    EVENT Timer@1000::Elapsed@12(sender@1001 : Variant;e@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
      CreateBackupFile(BackupFilePath + STRSUBSTNO(BackupPathFormatTxt,FORMAT(CURRENTDATETIME,0,FormatStringTxt)));
      CreateSummaryFile(SummaryFilePath + STRSUBSTNO(SummaryPathFormatTxt,FORMAT(CURRENTDATETIME,0,FormatStringTxt)));
    END;

    EVENT Timer@1000::ExceptionOccurred@13(sender@1001 : Variant;e@1000 : DotNet "'Microsoft.Dynamics.Nav.Timer, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.ExceptionOccurredEventArgs");
    BEGIN
      ERROR(BackupErr,e.Exception.Message);
    END;

    BEGIN
    END.
  }
}

