OBJECT Report 7052 Suggest Sales Price on Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Sales Price on Wksh.;
               ESM=Sugerir precio venta en hoja;
               FRC=Sugg‚rer un prix de vente sur la feuille de travail;
               ENC=Suggest Sales Price on Wksh.];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CASE ToSalesType OF
                    ToSalesType::Customer:
                      BEGIN
                        ToCust."No." := ToSalesCode;
                        IF ToCust."No." <> '' THEN
                          ToCust.FIND
                        ELSE BEGIN
                          IF NOT ToCust.FIND THEN
                            ToCust.INIT;
                          ToSalesCode := ToCust."No.";
                        END;
                      END;
                    ToSalesType::"Customer Price Group":
                      BEGIN
                        ToCustPriceGr.Code := ToSalesCode;
                        IF ToCustPriceGr.Code <> '' THEN
                          ToCustPriceGr.FIND
                        ELSE BEGIN
                          IF NOT ToCustPriceGr.FIND THEN
                            ToCustPriceGr.INIT;
                          ToSalesCode := ToCustPriceGr.Code;
                        END;
                      END;
                    ToSalesType::Campaign:
                      BEGIN
                        ToCampaign."No." := ToSalesCode;
                        IF ToCampaign."No." <> '' THEN
                          ToCampaign.FIND
                        ELSE BEGIN
                          IF NOT ToCampaign.FIND THEN
                            ToCampaign.INIT;
                          ToSalesCode := ToCampaign."No.";
                        END;
                        ToStartDate := ToCampaign."Starting Date";
                        ToEndDate := ToCampaign."Ending Date";
                      END;
                  END;

                  ReplaceUnitOfMeasure := ToUnitOfMeasure.Code <> '';
                  ReplaceCurrency := ToCurrency.Code <> '';
                  ReplaceStartingDate := ToStartDate <> 0D;
                  ReplaceEndingDate := ToEndDate <> 0D;

                  IF ReplaceUnitOfMeasure AND (ToUnitOfMeasure.Code <> '') THEN
                    ToUnitOfMeasure.FIND;

                  RoundingMethod.SETRANGE(Code,RoundingMethod.Code);
                END;

  }
  DATASET
  {
    { 7331;    ;DataItem;                    ;
               DataItemTable=Table7002;
               DataItemTableView=SORTING(Item No.);
               OnPreDataItem=BEGIN
                               Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Item."No." <> "Item No." THEN BEGIN
                                    Item.GET("Item No.");
                                    Window.UPDATE(1,"Item No.");
                                  END;

                                  ReplaceSalesCode := NOT (("Sales Type" = ToSalesType) AND ("Sales Code" = ToSalesCode));

                                  IF (ToSalesCode = '') AND (ToSalesType <> ToSalesType::"All Customers") THEN
                                    ERROR(Text002,"Sales Type");

                                  CLEAR(SalesPriceWksh);

                                  SalesPriceWksh.VALIDATE("Sales Type",ToSalesType);
                                  IF NOT ReplaceSalesCode THEN
                                    SalesPriceWksh.VALIDATE("Sales Code","Sales Code")
                                  ELSE
                                    SalesPriceWksh.VALIDATE("Sales Code",ToSalesCode);

                                  SalesPriceWksh.VALIDATE("Item No.","Item No.");
                                  SalesPriceWksh."New Unit Price" := "Unit Price";
                                  SalesPriceWksh."Minimum Quantity" := "Minimum Quantity";

                                  IF NOT ReplaceUnitOfMeasure THEN
                                    SalesPriceWksh."Unit of Measure Code" := "Unit of Measure Code"
                                  ELSE BEGIN
                                    SalesPriceWksh."Unit of Measure Code" := ToUnitOfMeasure.Code;
                                    IF NOT (SalesPriceWksh."Unit of Measure Code" IN ['',Item."Base Unit of Measure"]) THEN
                                      IF NOT ItemUnitOfMeasure.GET("Item No.",SalesPriceWksh."Unit of Measure Code") THEN
                                        CurrReport.SKIP;
                                    SalesPriceWksh."New Unit Price" :=
                                      SalesPriceWksh."New Unit Price" *
                                      UOMMgt.GetQtyPerUnitOfMeasure(Item,SalesPriceWksh."Unit of Measure Code") /
                                      UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                  END;
                                  SalesPriceWksh.VALIDATE("Unit of Measure Code");
                                  SalesPriceWksh.VALIDATE("Variant Code","Variant Code");

                                  IF NOT ReplaceCurrency THEN
                                    SalesPriceWksh."Currency Code" := "Currency Code"
                                  ELSE
                                    SalesPriceWksh."Currency Code" := ToCurrency.Code;

                                  IF NOT ReplaceStartingDate THEN BEGIN
                                    IF NOT ReplaceEndingDate THEN
                                      SalesPriceWksh.VALIDATE("Starting Date","Starting Date")
                                  END ELSE
                                    SalesPriceWksh.VALIDATE("Starting Date",ToStartDate);

                                  IF NOT ReplaceEndingDate THEN BEGIN
                                    IF NOT ReplaceStartingDate THEN
                                      SalesPriceWksh.VALIDATE("Ending Date","Ending Date")
                                  END ELSE
                                    SalesPriceWksh.VALIDATE("Ending Date",ToEndDate);

                                  IF "Currency Code" <> SalesPriceWksh."Currency Code" THEN BEGIN
                                    IF "Currency Code" <> '' THEN BEGIN
                                      FromCurrency.GET("Currency Code");
                                      FromCurrency.TESTFIELD(Code);
                                      SalesPriceWksh."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtFCYToLCY(
                                          WORKDATE,"Currency Code",SalesPriceWksh."New Unit Price",
                                          CurrExchRate.ExchangeRate(
                                            WORKDATE,"Currency Code"));
                                    END;
                                    IF SalesPriceWksh."Currency Code" <> '' THEN
                                      SalesPriceWksh."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                          WORKDATE,SalesPriceWksh."Currency Code",
                                          SalesPriceWksh."New Unit Price",CurrExchRate.ExchangeRate(
                                            WORKDATE,SalesPriceWksh."Currency Code"));
                                  END;

                                  IF SalesPriceWksh."Currency Code" = '' THEN
                                    Currency2.InitRoundingPrecision
                                  ELSE BEGIN
                                    Currency2.GET(SalesPriceWksh."Currency Code");
                                    Currency2.TESTFIELD("Unit-Amount Rounding Precision");
                                  END;
                                  SalesPriceWksh."New Unit Price" :=
                                    ROUND(SalesPriceWksh."New Unit Price",Currency2."Unit-Amount Rounding Precision");

                                  IF SalesPriceWksh."New Unit Price" > PriceLowerLimit THEN
                                    SalesPriceWksh."New Unit Price" := SalesPriceWksh."New Unit Price" * UnitPriceFactor;
                                  IF RoundingMethod.Code <> '' THEN BEGIN
                                    RoundingMethod."Minimum Amount" := SalesPriceWksh."New Unit Price";
                                    IF RoundingMethod.FIND('=<') THEN BEGIN
                                      SalesPriceWksh."New Unit Price" :=
                                        SalesPriceWksh."New Unit Price" + RoundingMethod."Amount Added Before";
                                      IF RoundingMethod.Precision > 0 THEN
                                        SalesPriceWksh."New Unit Price" :=
                                          ROUND(
                                            SalesPriceWksh."New Unit Price",
                                            RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                      SalesPriceWksh."New Unit Price" := SalesPriceWksh."New Unit Price" +
                                        RoundingMethod."Amount Added After";
                                    END;
                                  END;

                                  SalesPriceWksh."Price Includes VAT" := "Price Includes VAT";
                                  SalesPriceWksh."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
                                  SalesPriceWksh."Allow Invoice Disc." := "Allow Invoice Disc.";
                                  SalesPriceWksh."Allow Line Disc." := "Allow Line Disc.";
                                  SalesPriceWksh.CalcCurrentPrice(PriceAlreadyExists);

                                  OnBeforeModifyOrInsertSalesPriceWksh(SalesPriceWksh);

                                  IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
                                    SalesPriceWksh2 := SalesPriceWksh;
                                    IF SalesPriceWksh2.FIND('=') THEN
                                      SalesPriceWksh.MODIFY(TRUE)
                                    ELSE
                                      SalesPriceWksh.INSERT(TRUE);
                                  END;
                                END;

               ReqFilterFields=Sales Type,Sales Code,Item No.,Currency Code,Starting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               ToEndDateCtrlEnable := TRUE;
               ToStartDateCtrlEnable := TRUE;
               SalesCodeCtrlEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF UnitPriceFactor = 0 THEN BEGIN
                     UnitPriceFactor := 1;
                     ToCustPriceGr.Code := '';
                     ToUnitOfMeasure.Code := '';
                     ToCurrency.Code := '';
                   END;

                   SalesCodeCtrlEnable := TRUE;
                   IF ToSalesType = ToSalesType::"All Customers" THEN
                     SalesCodeCtrlEnable := FALSE;

                   SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                   ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                   ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 21  ;2   ;Group     ;
                  CaptionML=[ENU=Copy to Sales Price Worksheet...;
                             ESM=Copiar a Hoja precio venta...;
                             FRC=Copier vers feuille prix de vente...;
                             ENC=Copy to Sales Price Worksheet...] }

      { 8   ;3   ;Field     ;
                  Name=SalesType;
                  CaptionML=[ENU=Sales Type;
                             ESM=Tipo venta;
                             FRC=Type de vente;
                             ENC=Sales Type];
                  ToolTipML=[ENU=Specifies the sales type that the sales price agreement will be copied to. To see the existing sales types, click the field.;
                             ESM=Especifica el tipo de venta al que se copiar  el acuerdo de precios de venta. Para ver los tipos de ventas existentes, haga clic en el campo.;
                             FRC=Sp‚cifie le type vente sur lequel sera copi‚ l'entente de prix de vente. Pour visualiser les types vente existants, cliquez sur le champ.;
                             ENC=Specifies the sales type that the sales price agreement will be copied to. To see the existing sales types, click the field.];
                  OptionCaptionML=[ENU=Customer,Customer Price Group,All Customers,Campaign;
                                   ESM=Cliente,Grupo precio cliente,Todos clientes,Campa¤a;
                                   FRC=Client,Groupe de prix du client,Tous les clients,Promotion;
                                   ENC=Customer,Customer Price Group,All Customers,Campaign];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToSalesType;
                  OnValidate=BEGIN
                               SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                               ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                               ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;

                               ToSalesCode := '';
                               ToStartDate := 0D;
                               ToEndDate := 0D;
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=SalesCodeCtrl;
                  CaptionML=[ENU=Sales Code;
                             ESM=C¢digo ventas;
                             FRC=Code de vente;
                             ENC=Sales Code];
                  ToolTipML=[ENU=Specifies the code for the sales type that the sales prices will be copied to. To see the existing sales codes, click the field.;
                             ESM=Especifica el c¢digo del tipo de venta al que se copiar n los precios de venta. Para ver los c¢digos de ventas existentes, haga clic en el campo.;
                             FRC=Sp‚cifie le code du type vente sur lequel seront copi‚s les prix de vente. Pour visualiser les codes vente existants, cliquez sur le champ.;
                             ENC=Specifies the code for the sales type that the sales prices will be copied to. To see the existing sales codes, click the field.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToSalesCode;
                  Enabled=SalesCodeCtrlEnable;
                  OnValidate=VAR
                               Customer@1001 : Record 18;
                               CustomerPriceGroup@1003 : Record 6;
                               Campaign@1002 : Record 5071;
                             BEGIN
                               IF ToSalesType = ToSalesType::"All Customers" THEN
                                 EXIT;

                               CASE ToSalesType OF
                                 ToSalesType::Customer:
                                   Customer.GET(ToSalesCode);
                                 ToSalesType::"Customer Price Group":
                                   CustomerPriceGroup.GET(ToSalesCode);
                                 ToSalesType::Campaign:
                                   BEGIN
                                     Campaign.GET(ToSalesCode);
                                     ToStartDate := Campaign."Starting Date";
                                     ToEndDate := Campaign."Ending Date";
                                   END;
                               END;
                             END;

                  OnLookup=VAR
                             CustList@1003 : Page 22;
                             CustPriceGrList@1002 : Page 7;
                             CampaignList@1004 : Page 5087;
                           BEGIN
                             CASE ToSalesType OF
                               ToSalesType::Customer:
                                 BEGIN
                                   CustList.LOOKUPMODE := TRUE;
                                   CustList.SETRECORD(ToCust);
                                   IF CustList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CustList.GETRECORD(ToCust);
                                     ToSalesCode := ToCust."No.";
                                   END;
                                 END;
                               ToSalesType::"Customer Price Group":
                                 BEGIN
                                   CustPriceGrList.LOOKUPMODE := TRUE;
                                   CustPriceGrList.SETRECORD(ToCustPriceGr);
                                   IF CustPriceGrList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CustPriceGrList.GETRECORD(ToCustPriceGr);
                                     ToSalesCode := ToCustPriceGr.Code;
                                   END;
                                 END;
                               ToSalesType::Campaign:
                                 BEGIN
                                   CampaignList.LOOKUPMODE := TRUE;
                                   CampaignList.SETRECORD(ToCampaign);
                                   IF CampaignList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CampaignList.GETRECORD(ToCampaign);
                                     ToSalesCode := ToCampaign."No.";
                                     ToStartDate := ToCampaign."Starting Date";
                                     ToEndDate := ToCampaign."Ending Date";
                                   END;
                                 END;
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=UnitOfMeasureCode;
                  CaptionML=[ENU=Unit of Measure Code;
                             ESM=C¢d. unidad medida;
                             FRC=Code unit‚ de mesure;
                             ENC=Unit of Measure Code];
                  ToolTipML=[ENU=Specifies the unit of measure that the item is shown in.;
                             ESM=Especifica la unidad de medida en la que se mostrar  el producto.;
                             FRC=Sp‚cifie l'unit‚ de mesure d'affichage de l'article.;
                             ENC=Specifies the unit of measure that the item is shown in.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToUnitOfMeasure.Code;
                  TableRelation="Unit of Measure";
                  OnValidate=BEGIN
                               IF ToUnitOfMeasure.Code <> '' THEN
                                 ToUnitOfMeasure.FIND;
                             END;
                              }

      { 2   ;3   ;Field     ;
                  Name=CurrencyCode;
                  CaptionML=[ENU=Currency Code;
                             ESM=C¢d. divisa;
                             FRC=Code devise;
                             ENC=Currency Code];
                  ToolTipML=[ENU=Specifies the code for the currency that amounts are shown in.;
                             ESM=Especifica el c¢digo de la divisa en la que se muestran los importes.;
                             FRC=Sp‚cifie le code pour la devise utilis‚e pour l'affichage des montants.;
                             ENC=Specifies the code for the currency that amounts are shown in.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToCurrency.Code;
                  TableRelation=Currency;
                  OnValidate=BEGIN
                               IF ToCurrency.Code <> '' THEN
                                 ToCurrency.FIND;
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=ToStartDateCtrl;
                  CaptionML=[ENU=Starting Date;
                             ESM=Fecha inicial;
                             FRC=Date d‚but;
                             ENC=Starting Date];
                  ToolTipML=[ENU=Specifies the date when the price changes will take effect.;
                             ESM=Especifica la fecha en la que tendr n efecto los cambios de precio.;
                             FRC=Sp‚cifie la date d'entr‚e en vigueur des nouveaux prix.;
                             ENC=Specifies the date when the price changes will take effect.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToStartDate;
                  Enabled=ToStartDateCtrlEnable }

      { 10  ;3   ;Field     ;
                  Name=ToEndDateCtrl;
                  CaptionML=[ENU=Ending Date;
                             ESM=Fecha final;
                             FRC=Date fin;
                             ENC=Ending Date];
                  ToolTipML=[ENU=Specifies the date to which the price changes are valid.;
                             ESM=Especifica la fecha hasta la que son v lidos los cambios de precios.;
                             FRC=Sp‚cifie la date limite de validit‚ des modifications de prix.;
                             ENC=Specifies the date to which the price changes are valid.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToEndDate;
                  Enabled=ToEndDateCtrlEnable }

      { 4   ;2   ;Field     ;
                  Name=OnlyPricesAbove;
                  CaptionML=[ENU=Only Prices Above;
                             ESM=S¢lo precios superiores a;
                             FRC=Les prix ci-dessus uniquement;
                             ENC=Only Prices Above];
                  ToolTipML=[ENU=Specifies the code for the sales type that the sales prices will be copied to. To see the existing sales codes, click the field.;
                             ESM=Especifica el c¢digo del tipo de venta al que se copiar n los precios de venta. Para ver los c¢digos de ventas existentes, haga clic en el campo.;
                             FRC=Sp‚cifie le code du type vente sur lequel seront copi‚s les prix de vente. Pour visualiser les codes vente existants, cliquez sur le champ.;
                             ENC=Specifies the code for the sales type that the sales prices will be copied to. To see the existing sales codes, click the field.];
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=2:5;
                  SourceExpr=PriceLowerLimit }

      { 5   ;2   ;Field     ;
                  Name=AdjustmentFactor;
                  CaptionML=[ENU=Adjustment Factor;
                             ESM=Factor ajuste;
                             FRC=Facteur d'ajustement;
                             ENC=Adjustment Factor];
                  ToolTipML=[ENU=Specifies an adjustment factor to multiply the sales price that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.;
                             ESM=Especifica el factor de ajuste para multiplicar el precio de venta que desea que se sugiera. Si indica un factor de ajuste, puede aumentar o disminuir los importes que se sugieren.;
                             FRC=Sp‚cifie un facteur appliqu‚ pour multiplier le prix de vente que vous souhaitez proposer. En saisissant un facteur appliqu‚, vous pouvez augmenter ou r‚duire les montants propos‚s.;
                             ENC=Specifies an adjustment factor to multiply the sales price that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.];
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=UnitPriceFactor;
                  MinValue=0 }

      { 6   ;2   ;Field     ;
                  Name=RoundingMethodCtrl;
                  CaptionML=[ENU=Rounding Method;
                             ESM=M‚todo redondeo;
                             FRC=M‚thode d'arrondissement;
                             ENC=Rounding Method];
                  ToolTipML=[ENU=Specifies a code for the rounding method that you want applied to prices.;
                             ESM=Especifica un c¢digo para el m‚todo de redondeo que desea aplicar a los precios.;
                             FRC=Sp‚cifie un code pour le mode d'arrondissement que vous souhaitez appliquer aux prix.;
                             ENC=Specifies a code for the rounding method that you want applied to prices.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 7   ;2   ;Field     ;
                  Name=CreateNewPrices;
                  CaptionML=[ENU=Create New Prices;
                             ESM=Crear tarifa nueva;
                             FRC=Cr‚er de nouveaux prix;
                             ENC=Create New Prices];
                  ToolTipML=[ENU=Specifies if you want the batch job to create new price suggestions (for example, a new combination of currency, sales code and time). Don't insert a check mark if you only want to adjust existing sales prices.;
                             ESM=Especifica si desea que el proceso proponga nuevas tarifas (por ejemplo, una nueva combinaci¢n de divisa, c¢digo de venta y hora). Si solo desea ajustar los precios de venta existentes, no lo active.;
                             FRC=Sp‚cifie si vous souhaitez que le traitement en lot cr‚e des propositions de nouveaux prix (par exemple, une nouvelle combinaison de devise, code vente et date). Ne cochez pas cette case si vous souhaitez seulement modifier les prix de vente existants.;
                             ENC=Specifies if you want the batch job to create new price suggestions (for example, a new combination of currency, sales code and time). Don't insert a check mark if you only want to adjust existing sales prices.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreateNewPrices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Processing items  #1##########;ESM=Procesando prods. #1##########;FRC=Traitement des articles    #1##########;ENC=Processing items  #1##########';
      SalesPriceWksh2@1037 : Record 7023;
      SalesPriceWksh@1005 : Record 7023;
      ToCust@1036 : Record 18;
      ToCustPriceGr@1035 : Record 6;
      ToCampaign@1020 : Record 5071;
      ToUnitOfMeasure@1006 : Record 204;
      ItemUnitOfMeasure@1007 : Record 5404;
      ToCurrency@1008 : Record 4;
      FromCurrency@1009 : Record 4;
      Currency2@1010 : Record 4;
      CurrExchRate@1011 : Record 330;
      RoundingMethod@1012 : Record 42;
      Item@1003 : Record 27;
      UOMMgt@1014 : Codeunit 5402;
      Window@1015 : Dialog;
      PriceAlreadyExists@1016 : Boolean;
      CreateNewPrices@1017 : Boolean;
      UnitPriceFactor@1018 : Decimal;
      PriceLowerLimit@1019 : Decimal;
      ToSalesType@1033 : 'Customer,Customer Price Group,All Customers,Campaign';
      ToSalesCode@1032 : Code[20];
      ToStartDate@1031 : Date;
      ToEndDate@1030 : Date;
      ReplaceSalesCode@1022 : Boolean;
      ReplaceUnitOfMeasure@1023 : Boolean;
      ReplaceCurrency@1024 : Boolean;
      ReplaceStartingDate@1025 : Boolean;
      ReplaceEndingDate@1002 : Boolean;
      Text002@1004 : TextConst 'ENU=Sales Code must be specified when copying from %1 to All Customers.;ESM=Se debe especificar C¢d. venta al copiar desde %1 a Todos clientes.;FRC=Le code vente doit ˆtre sp‚cifi‚ lors de la copie de %1 vers tous les clients.;ENC=Sales Code must be specified when copying from %1 to All Customers.';
      SalesCodeCtrlEnable@19004995 : Boolean INDATASET;
      ToStartDateCtrlEnable@19060085 : Boolean INDATASET;
      ToEndDateCtrlEnable@19023823 : Boolean INDATASET;

    PROCEDURE InitializeRequest@3(NewToSalesType@1005 : 'Customer,Customer Price Group,Campaign,All CUstomers';NewToSalesCode@1004 : Code[20];NewToStartDate@1002 : Date;NewToEndDate@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewCreateNewPrices@1006 : Boolean);
    BEGIN
      ToSalesType := NewToSalesType;
      ToSalesCode := NewToSalesCode;
      ToStartDate := NewToStartDate;
      ToEndDate := NewToEndDate;
      ToCurrency.Code := NewToCurrCode;
      ToUnitOfMeasure.Code := NewToUOMCode;
      CreateNewPrices := NewCreateNewPrices;
    END;

    PROCEDURE InitializeRequest2@1(NewToSalesType@1005 : 'Customer,Customer Price Group,Campaign,All CUstomers';NewToSalesCode@1004 : Code[20];NewToStartDate@1002 : Date;NewToEndDate@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewCreateNewPrices@1006 : Boolean;NewPriceLowerLimit@1007 : Decimal;NewUnitPriceFactor@1008 : Decimal;NewRoundingMethodCode@1009 : Code[10]);
    BEGIN
      InitializeRequest(NewToSalesType,NewToSalesCode,NewToStartDate,NewToEndDate,NewToCurrCode,NewToUOMCode,NewCreateNewPrices);
      PriceLowerLimit := NewPriceLowerLimit;
      UnitPriceFactor := NewUnitPriceFactor;
      RoundingMethod.Code := NewRoundingMethodCode;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifyOrInsertSalesPriceWksh@2(VAR SalesPriceWorksheet@1000 : Record 7023);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

