OBJECT Codeunit 6085577 Document Importer
{
  OBJECT-PROPERTIES
  {
    Date=10/01/18;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.4.50.08;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CODC.IsCompanyActive(TRUE);
            CODC.GetNewDocuments;
            ImportDocuments;
          END;

  }
  CODE
  {
    VAR
      CODC@1000 : Codeunit 6085617;
      DocModMgt@1160040004 : Codeunit 6085613;
      XmlLib@1000000020 : Codeunit 6085573;
      DialogMgt@1160040007 : Codeunit 6085633;
      Window@161024014 : Dialog;
      Text001@6085580 : TextConst 'ENU=Importing Files\Document Category #1######################\Status            @2@@@@@@@@@@@@@@@@@@@@@@';
      Text002@161024016 : TextConst 'ENU=No files imported.';
      Text003@161024012 : TextConst 'ENU=%1 documents have been moved to other companies.';
      Text004@161024015 : TextConst 'ENU=%1 files have been imported.';
      Text005@1160040001 : TextConst 'ENU=Custom imports have been run for the following document categories: %1';
      Text006@1160040002 : TextConst 'ENU=1 file has been imported.';
      Text007@1160040005 : TextConst 'ENU=Merging files from same E-mail';
      MovedFiles@1160040006 : Integer;
      Text008@1160040000 : TextConst 'ENU=Importing File...';
      MovedFilesToUIC@1160040003 : Integer;

    PROCEDURE ImportDocument@1160040002(DocCatCode@1160040003 : Code[20];Path@1160040002 : Text[1024];Filename@1160040001 : Text[100]) DocNo : Code[20];
    VAR
      Document@1160040005 : Record 6085590;
      MessageText@1160040000 : Text[1024];
      Status@1160040004 : 'File Imported,File Already Imported,Do Not Import';
    BEGIN
      Window.OPEN(Text008);

      Status := ImportDocument2(DocCatCode,Path,Filename,DocNo);

      IF Status = Status::"File Imported" THEN BEGIN
        Document.GET(DocNo);
        ProcessDocument(Document,FALSE);
      END;

      MessageText := STRSUBSTNO(Text006);

      IF MovedFiles > 0 THEN
        MessageText := MessageText + '\\' + STRSUBSTNO(Text003,MovedFiles);

      Window.CLOSE;

      MESSAGE(MessageText);
    END;

    PROCEDURE ImportDocuments@1000000000();
    VAR
      DCSetup@1160040001 : Record 6085573;
      DocCat@161024016 : Record 6085575;
      Document@161024020 : Record 6085590;
      TempDoc@1160040006 : TEMPORARY Record 6085756;
      CaptureMgt@1160040003 : Codeunit 6085576;
      FileSysMgt@1160040000 : Codeunit 6085584;
      DocNo@161024021 : Code[20];
      FileName@161024015 : Text[50];
      FileArray@1160040008 : ARRAY [10000] OF Text[1024];
      Path@1000000004 : Text[1024];
      DestPath@161024019 : Text[1024];
      MessageText@1160040004 : Text[1024];
      CustomMsg@1160040005 : Text[1024];
      CustomMsgTmp@1160040010 : Text[1024];
      FileCount@6085573 : Integer;
      i@1160040009 : Integer;
      Count@161024013 : Integer;
      ImportedFiles@161024012 : Integer;
      RecordCountOK@1160040007 : Integer;
      Status@1160040002 : 'File Imported,File Already Imported,Do Not Import';
    BEGIN
      DCSetup.GET;
      DCSetup.TESTFIELD("Archive File Path");
      DCSetup.IsUICSetupConsistent(TRUE);

      Document.LOCKTABLE;

      IF GUIALLOWED THEN
        DialogMgt.OpenWindow(Text001);

      DocModMgt.SetHideWindow(TRUE);

      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN
        REPEAT
          IF GUIALLOWED THEN
            IF DocCat.Description <> '' THEN
              DialogMgt.UpdateWindow(1,DocCat.Description)
            ELSE
              DialogMgt.UpdateWindow(1,DocCat.Code);

          DocCat.UpdateCounters;

          IF DocCat."Codeunit ID: Import Files" IN [0,CODEUNIT::"Document Importer"] THEN BEGIN
            IF DocCat."Archive E-mails on Document" THEN
              DCSetup.TESTFIELD("Archive File Path");

            Path := DocCat.GetCategoryPath(2);
            IF FileSysMgt.DirectoryExists(Path) THEN BEGIN
              FileCount := FileSysMgt.GetFilesInDir2(Path,'*.tiff',FileArray);

              FOR i := 1 TO FileCount DO BEGIN
                IF GUIALLOWED THEN
                  DialogMgt.UpdateWindowDec(2,CalcProgress(FileCount,i));

                FileName := DELCHR(COPYSTR(FileArray[i],STRLEN(Path)+2),'=','.tiff');
                Status := ImportDocument2(DocCat.Code,Path,FileName,DocNo);
                Document.GET(DocNo);

                IF Status = Status::"File Imported" THEN BEGIN
                  IF NOT IsMergeEmail(TempDoc,Document) THEN
                    ProcessDocument(Document,FALSE);

                  ImportedFiles += 1;
                END;
              END;
            END;
          END ELSE BEGIN
            DialogMgt.SetDCDocImport(TRUE);
            CODEUNIT.RUN(DocCat."Codeunit ID: Import Files");
            DialogMgt.SetDCDocImport(FALSE);
            DialogMgt.GetRecordCount(RecordCountOK);
            ImportedFiles += RecordCountOK;

            CustomMsgTmp := DialogMgt.GetCustomMsg;
            IF CustomMsgTmp <> '' THEN
              IF CustomMsg = '' THEN
                CustomMsg := CustomMsgTmp
              ELSE
                CustomMsg := CustomMsg + '\\' + CustomMsgTmp;
          END;
        UNTIL DocCat.NEXT = 0;

      IF GUIALLOWED THEN
        DialogMgt.CloseWindow;

      MergeAndProcessEmail(TempDoc);

      IF GUIALLOWED THEN BEGIN
        IF ImportedFiles > 0 THEN BEGIN
          IF ImportedFiles > 1 THEN
            MessageText := STRSUBSTNO(Text004,ImportedFiles)
          ELSE
            MessageText := STRSUBSTNO(Text006);
        END ELSE
          MessageText := Text002;

        IF MovedFiles > 0 THEN
          MessageText := MessageText + '\\' + STRSUBSTNO(Text003,MovedFiles);

        IF CustomMsg <> '' THEN
          MessageText := MessageText + '\\' + CustomMsg;

        MESSAGE(MessageText);
      END;
    END;

    LOCAL PROCEDURE ImportDocument2@1160040001(DocCatCode@1160040003 : Code[20];Path@1160040002 : Text[1024];Filename@1160040001 : Text[100];VAR DocNo@1160040000 : Code[20]) : Integer;
    VAR
      Document@1160040004 : Record 6085590;
      DocCat@1160040006 : Record 6085575;
      FileSysMgt@1160040005 : Codeunit 6085584;
      Status@1160040007 : 'File Imported,File Already Imported,Do Not Import';
    BEGIN
      DocCat.GET(DocCatCode);

      Status := ImportDocumentData(DocCat.Code,Path,Filename,DocNo);
      Document.GET(DocNo);

      IF Status IN [Status::"File Imported",Status::"File Already Imported"] THEN BEGIN
        Document.SetTiffFile(Path + '\' + Filename + '.tiff');
        Document.SetPdfFile(Path + '\' + Filename + '.pdf');

        IF FILE.EXISTS(Path + '\' + Filename + '.eml') THEN
          IF DocCat."Archive E-mails on Document" THEN
            IF NOT FILE.EXISTS(Document.GetEMailServerFileName) THEN
              Document.SetEmailFile(Path + '\' + Filename + '.eml');

        COMMIT; // Make sure that the document is committed before we delete any files.

        FileSysMgt.DeleteFile(Path + '\' + Filename + '.eml',TRUE);
        FileSysMgt.DeleteFile(Path + '\' + Filename + '.tiff',FALSE);
        FileSysMgt.DeleteFile(Path + '\' + Filename + '.pdf',FALSE);
        FileSysMgt.DeleteFile(Path + '\' + Filename + '.xml',FALSE);

        IF COPYSTR(Filename,1,3) = 'CO-' THEN
          CODC.UpdateDocument(DocCat,COPYSTR(Filename,4));
      END;

      EXIT(Status);
    END;

    LOCAL PROCEDURE ImportDocumentData@1000000001(DocCatCode@1000000003 : Code[20];Path@1000000000 : Text[1024];Filename@1000000001 : Text[100];VAR DocNo@1000000018 : Code[20]) : Integer;
    VAR
      DocCat@1160040000 : Record 6085575;
      Document@1000000002 : Record 6085590;
      Page@1000000012 : Record 6085591;
      TempWord@1000000022 : TEMPORARY Record 6085592;
      Word@1000000013 : Record 6085592;
      DateParserMgt@1160040002 : Codeunit 6085586;
      CryptographyMgt@1160040003 : Codeunit 6085599;
      XmlDoc@1000000004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlFile@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      EmailNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PagesNodeList@1000000005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      PageNode@1000000007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLText@1000 : Text;
      OCRProcessedDateTimeUTC@1160040005 : Text[250];
      i@1000000009 : Integer;
      Status@1160040004 : 'File Imported,File Already Imported,Do Not Import';
    BEGIN
      Document.SETCURRENTKEY(Filename);
      Document.SETRANGE(Filename,Filename);
      IF Document.FINDFIRST THEN BEGIN
        DocNo := Document."No.";
        EXIT(Status::"File Already Imported");
      END;

      XmlDoc := XmlDoc.XmlDocument;
      XMLText := XmlFile.ReadAllText(Path + '\' + Filename + '.xml');
      XmlDoc.LoadXml(XMLText);

      PagesNodeList := XmlDoc.DocumentElement.SelectSingleNode('Pages').SelectNodes('Page');
      FOR i := 0 TO PagesNodeList.Count - 1 DO BEGIN
        PageNode := PagesNodeList.Item(i);

        LoadWordsToTempTable(i+1,Word.Type::Text,PageNode.SelectSingleNode('Words').SelectNodes('Word'),TempWord);
        LoadWordsToTempTable(i+1,Word.Type::Barcode,PageNode.SelectSingleNode('Barcodes').SelectNodes('Barcode'),TempWord);
      END;

      DocCat.GET(DocCatCode);

      DocNo := '';

      Document.INIT;
      Document."No." := '';
      Document.INSERT(TRUE);
      Document."Document Category Code" := DocCat.Code;
      Document.Filename := Filename;
      OCRProcessedDateTimeUTC := XmlLib.GetNodeText(XmlDoc.DocumentElement,'OCRProcessedDateTimeUTC');
      IF OCRProcessedDateTimeUTC <> '' THEN BEGIN
        DateParserMgt.ParseUTC(OCRProcessedDateTimeUTC);
        Document."OCR Process Completed" := DateParserMgt.GetDatetime;
      END;
      Document."PDF File Hash" := CryptographyMgt.GetFileSHA1Hash(STRSUBSTNO('%1\%2.pdf',Path,Filename));
      EmailNode := XmlDoc.DocumentElement.SelectSingleNode('Email');
      IF NOT ISNULL(EmailNode) THEN BEGIN
        Document."From E-Mail Address" := COPYSTR(XmlLib.GetNodeText(EmailNode,'FromAddress'),1,
          MAXSTRLEN(Document."From E-Mail Address"));
        Document."From E-Mail Name" := COPYSTR(XmlLib.GetNodeText(EmailNode,'FromName'),1,MAXSTRLEN(Document."From E-Mail Name"));
        Document."To E-Mail Address" := COPYSTR(XmlLib.GetNodeText(EmailNode,'ToAddress'),1,MAXSTRLEN(Document."To E-Mail Address"));
        Document."To E-Mail Name" := COPYSTR(XmlLib.GetNodeText(EmailNode,'ToName'),1,MAXSTRLEN(Document."To E-Mail Name"));
        DateParserMgt.ParseUTC(XmlLib.GetNodeText(EmailNode,'Date'));
        Document."E-Mail Date" :=  DateParserMgt.GetDatetime;
        Document."E-Mail Inbox Subfolder" :=
          COPYSTR(XmlLib.GetNodeText(EmailNode,'InboxSubfolder'),1,MAXSTRLEN(Document."E-Mail Inbox Subfolder"));
        Document."E-Mail Subject" := COPYSTR(XmlLib.GetNodeText(EmailNode,'Subject'),1,MAXSTRLEN(Document."E-Mail Subject"));
        IF DocCat."Archive E-mails on Document" THEN
          Document."E-Mail GUID" := XmlLib.GetNodeGuid(EmailNode,'Guid');
      END;
      Document.MODIFY(TRUE);

      FOR i := 0 TO PagesNodeList.Count - 1 DO BEGIN
        PageNode := PagesNodeList.Item(i);
        Page.INIT;
        Page."Document No." := Document."No.";
        Page."Page No." := i + 1;
        Page."Original Filename" := COPYSTR(XmlLib.GetNodeText(PageNode,'OriginalFilename'),1,MAXSTRLEN(Page."Original Filename"));
        Page.Height := XmlLib.Text2Int(XmlLib.GetNodeText(PageNode,'Height'));
        Page.Width := XmlLib.Text2Int(XmlLib.GetNodeText(PageNode,'Width'));

        CASE XmlLib.GetNodeText(PageNode,'TiffColorMode') OF
          'BlackWhite':
            Page."TIFF Image Color Mode" := Page."TIFF Image Color Mode"::"Black & White";
          'Gray':
            Page."TIFF Image Color Mode" := Page."TIFF Image Color Mode"::Gray;
          'Color':
            Page."TIFF Image Color Mode" := Page."TIFF Image Color Mode"::Color;
        END;
        Page."TIFF Image Resolution" := XmlLib.Text2Int(XmlLib.GetNodeText(PageNode,'TiffResolution'));

        Page.INSERT(TRUE);

        TempWord.RESET;
        TempWord.SETRANGE("Page No.",Page."Page No.");
        IF TempWord.FINDSET THEN
          REPEAT
            Word.TRANSFERFIELDS(TempWord);
            Word."Document No." := Document."No.";
            Word."Page No." := Page."Page No.";
            Word."Entry No." := 0;
            Word.INSERT(TRUE);

            IF Word.Bottom > Page."Bottom Word Pos." THEN
              Page."Bottom Word Pos." := Word.Bottom;
          UNTIL TempWord.NEXT = 0;

        Page.MODIFY;
      END;

      CLEAR(XmlDoc);

      DocNo := Document."No.";
      EXIT(Status::"File Imported");
    END;

    LOCAL PROCEDURE LoadWordsToTempTable@1000000005(PageNo@1000000001 : Integer;Type@1000000005 : Integer;NodeList@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";VAR TempWord@1000000002 : Record 6085592);
    VAR
      Node@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1000000004 : Integer;
    BEGIN
      FOR i := 0 TO NodeList.Count - 1 DO BEGIN
        Node := NodeList.Item(i);

        TempWord.INIT;
        TempWord."Page No." := PageNo;
        TempWord."Entry No." := TempWord."Entry No." + 1;
        TempWord.Type := Type;
        TempWord.Word := COPYSTR(XmlLib.GetNodeText(Node,'Text'),1,MAXSTRLEN(TempWord.Word));
        TempWord."Barcode Type" := XmlLib.GetNodeText(Node,'Type');
        TempWord.Top := XmlLib.Text2Int(XmlLib.GetNodeText(Node,'Top'));
        TempWord.Left := XmlLib.Text2Int(XmlLib.GetNodeText(Node,'Left'));
        TempWord.Bottom := XmlLib.Text2Int(XmlLib.GetNodeText(Node,'Bottom'));
        TempWord.Right := XmlLib.Text2Int(XmlLib.GetNodeText(Node,'Right'));
        TempWord.INSERT;
      END;
    END;

    LOCAL PROCEDURE CalcProgress@161024017(VAR TotalCount@161024012 : Integer;VAR Index@161024013 : Integer) : Integer;
    BEGIN
      EXIT(ROUND(Index / TotalCount * 10000,1,'>'));
    END;

    LOCAL PROCEDURE ProcessDocument@1160040007(Document@1160040001 : Record 6085590;SkipAutoSplit@1160040005 : Boolean);
    VAR
      DocCat@1160040002 : Record 6085575;
      Document2@1160040000 : Record 6085590;
      Page@1160040003 : Record 6085591;
      AutoSplitPage@1160040009 : TEMPORARY Record 6085766;
      DocMoveToComp@1160040006 : Codeunit 6085758;
      CaptureEngine@1160040004 : Codeunit 6085575;
      TargetCompany@1160040007 : Text[250];
    BEGIN
      IF NOT SkipAutoSplit THEN
        DocModMgt.AutoSplitDocument(Document,AutoSplitPage);

      DocCat.GET(Document."Document Category Code");

      IF DocCat."Auto Move to Company" THEN BEGIN
        TargetCompany := DocMoveToComp.IdentifyTargetCompany(Document,DocCat);
        CASE TargetCompany OF
          COMPANYNAME:
            ; // leave the document in the current company
          '':
            BEGIN
              DocMoveToComp.MoveDocToUICDoc(Document);
              MovedFilesToUIC := MovedFilesToUIC + 1;
            END;
          ELSE
            BEGIN
              DocMoveToComp.MoveDocument(Document,TargetCompany);
              MovedFiles := MovedFiles + 1;
            END;
        END;

        IF AutoSplitPage.FINDSET THEN
          REPEAT
            Document2.GET(AutoSplitPage."Document No.");

            TargetCompany := DocMoveToComp.IdentifyTargetCompany(Document2,DocCat);
            CASE TargetCompany OF
              COMPANYNAME:
                ; // leave the document in the current company
              '':
                BEGIN
                  DocMoveToComp.MoveDocToUICDoc(Document2);
                  MovedFilesToUIC := MovedFilesToUIC + 1;
                END;
              ELSE
                BEGIN
                  DocMoveToComp.MoveDocument(Document2,TargetCompany);
                  MovedFiles := MovedFiles + 1;
                END;
            END;
          UNTIL AutoSplitPage.NEXT = 0;
      END;

      IF DocCat."Process New Files Automatic" THEN BEGIN
        IF Document.FIND('=') THEN BEGIN
          CaptureEngine.SetHideWindow(TRUE);
          CaptureEngine.CaptureDocument(Document);
        END;

        IF AutoSplitPage.FINDSET THEN
          REPEAT
            IF Document2.GET(AutoSplitPage."Document No.") THEN
              CaptureEngine.CaptureDocument(Document2);
          UNTIL AutoSplitPage.NEXT = 0;
      END;

      COMMIT;

      IF DocCat."Register Documents Automatic." THEN BEGIN
        IF Document.FIND('=') THEN BEGIN
          Document."Batch Register" := TRUE;
          Document.RegisterHideErrors;
        END;

        IF AutoSplitPage.FINDSET THEN
          REPEAT
            IF Document2.GET(AutoSplitPage."Document No.") THEN BEGIN
              Document2."Batch Register" := TRUE;
              Document2.RegisterHideErrors;
            END;
          UNTIL AutoSplitPage.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE MergeAndProcessEmail@1160040013(VAR TempDoc@1160040000 : TEMPORARY Record 6085756);
    VAR
      Document@1160040001 : Record 6085590;
      DocModMgt@1160040003 : Codeunit 6085613;
      PrevEmailGUID@1160040004 : GUID;
      EmptyGUID@1160040002 : GUID;
    BEGIN
      IF TempDoc.ISEMPTY THEN
        EXIT;

      IF GUIALLOWED THEN
        Window.OPEN(Text007);

      IF TempDoc.FINDSET THEN
        REPEAT
          IF Document.GET(TempDoc."No.") THEN
            DocModMgt.MergeEmail(Document);

          ProcessDocument(Document,TRUE);
        UNTIL TempDoc.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE IsMergeEmail@1160040014(VAR TempDoc@1160040001 : TEMPORARY Record 6085756;VAR Document@1160040002 : Record 6085590) : Boolean;
    VAR
      IsEmpty@1160040004 : Boolean;
      EntryNo@1160040005 : Integer;
      EmptyGUID@1160040000 : GUID;
    BEGIN
      IF Document."E-Mail GUID" = EmptyGUID THEN
        EXIT;

      TempDoc.SETRANGE("E-Mail GUID",Document."E-Mail GUID");
      IsEmpty := TempDoc.ISEMPTY;
      TempDoc.RESET;
      IF NOT IsEmpty THEN
        EXIT(TRUE);

      IF NOT DocModMgt.IsMergeEmail(Document) THEN
        EXIT(FALSE);

      IF TempDoc.FINDLAST THEN
        EntryNo := TempDoc."Entry No." + 1
      ELSE
        EntryNo := 1;

      TempDoc.INIT;
      TempDoc."Entry No." := EntryNo;
      TempDoc."No." := Document."No.";
      TempDoc."E-Mail GUID" := Document."E-Mail GUID";
      TempDoc.INSERT;

      EXIT(TRUE);
    END;

    PROCEDURE GetDocInfo@1160040000(Filename@1160040004 : Text[1024];VAR FromEMailAddr@1160040003 : Text[200];VAR EMailSubject@1160040002 : Text[200];VAR EMailDate@1160040001 : DateTime;VAR OCRProcessed@1160040000 : DateTime);
    VAR
      DateParserMgt@1160040005 : Codeunit 6085586;
      XmlDoc@1160040007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      EmailNode@1160040006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OCRProcessedDateTimeUTC@1000 : Text[30];
    BEGIN
      IF NOT FILE.EXISTS(Filename) THEN
        EXIT;

      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.Load(Filename);

      OCRProcessedDateTimeUTC := XmlLib.GetNodeText(XmlDoc.DocumentElement,'OCRProcessedDateTimeUTC');
      IF OCRProcessedDateTimeUTC <> '' THEN BEGIN
        DateParserMgt.ParseUTC(OCRProcessedDateTimeUTC);
        OCRProcessed := DateParserMgt.GetDatetime;
      END;

      EmailNode := XmlDoc.DocumentElement.SelectSingleNode('Email');
      IF NOT ISNULL(EmailNode) THEN BEGIN
        FromEMailAddr := COPYSTR(XmlLib.GetNodeText(EmailNode,'FromAddress'),1,MAXSTRLEN(FromEMailAddr));

        DateParserMgt.ParseUTC(XmlLib.GetNodeText(EmailNode,'Date'));
        EMailDate :=  DateParserMgt.GetDatetime;

        EMailSubject := COPYSTR(XmlLib.GetNodeText(EmailNode,'Subject'),1,MAXSTRLEN(EMailSubject));
      END;
    END;

    BEGIN
    END.
  }
}

