OBJECT Page 5827 Item Statistics
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item Statistics;
               ESM=Estad¡sticas producto;
               FRC=Statistiques article;
               ENC=Item Statistics];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=ItemName;
    PageType=Card;
    OnOpenPage=VAR
                 MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next';
               BEGIN
                 GLSetup.GET;

                 WITH Item DO BEGIN
                   IF "No." <> '' THEN
                     ItemFilter := "No.";
                   IF GETFILTER("Date Filter") <> '' THEN
                     DateFilter := GETFILTER("Date Filter");
                   IF GETFILTER("Variant Filter") <> '' THEN
                     VariantFilter := GETFILTER("Variant Filter");
                   IF GETFILTER("Location Filter") <> '' THEN
                     LocationFilter := GETFILTER("Location Filter");
                 END;

                 IF ColumnDimCode = '' THEN
                   ColumnDimCode := Text002;

                 ItemBuffer."Column Option" := DimCodeToOption(ColumnDimCode);
                 PeriodInitialized := DateFilter <> '';
                 FindPeriod('');
                 ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   WITH ItemBuffer DO BEGIN
                     IF "Line Option" = "Line Option"::"Profit Calculation" THEN
                       IntegerLine.SETRANGE(Number,1,5)
                     ELSE
                       IF "Line Option" = "Line Option"::"Cost Specification" THEN
                         IntegerLine.SETRANGE(Number,1,9);

                     EXIT(FindRec("Line Option",Rec,Which));
                   END;
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=[ENU=&Show Matrix;
                                 ESM=&Mostrar matriz;
                                 FRC=&Afficher matrice;
                                 ENC=&Show Matrix];
                      ToolTipML=[ENU=View the data overview according to the selected filters and options.;
                                 ESM=Permite ver un resumen de la informaci¢n en funci¢n de los filtros y las opciones seleccionados.;
                                 FRC=Affichez l'aper‡u des donn‚es en fonction des filtres et options s‚lectionn‚s.;
                                 ENC=View the data overview according to the selected filters and options.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1158 : Page 9223;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 MatrixForm.Load(MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,
                                   RoundingFactor,PerUnit,IncludeExpected,ItemBuffer,Item,PeriodType,AmountType,
                                   ColumnDimCode,DateFilter,ItemFilter,LocationFilter,VariantFilter);
                                 MatrixForm.SETTABLEVIEW(Rec);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 1170    ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 ESM=Conjunto anterior;
                                 FRC=Jeu pr‚c‚dent;
                                 ENC=Previous Set];
                      ToolTipML=[ENU=Go to the previous set of data.;
                                 ESM=Va al conjunto de datos anterior.;
                                 FRC=Allez … l'ensemble de donn‚es pr‚c‚dent.;
                                 ENC=Go to the previous set of data.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previous);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 ESM=Conjunto siguiente;
                                 FRC=Jeu suivant;
                                 ENC=Next Set];
                      ToolTipML=[ENU=Go to the next set of data.;
                                 ESM=Va al siguiente conjunto de datos.;
                                 FRC=Allez … l'ensemble de donn‚es suivant.;
                                 ENC=Go to the next set of data.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESM=General;
                           FRC=G‚n‚ral;
                           ENC=General] }

    { 7   ;2   ;Field     ;
                Name=ShowAsLines;
                CaptionML=[ENU=Show as Lines;
                           ESM=Muestra como l¡neas;
                           FRC=Afficher lignes;
                           ENC=Show as Lines];
                ToolTipML=[ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           ESM=Especifica los valores que desea mostrar como l¡neas en la ventana. Esto le permite ver la misma ventana de la matriz desde distintas perspectivas, especialmente cuando usa el campo Muestra como l¡neas y el campo Muestra como columnas.;
                           FRC=Sp‚cifie les valeurs … afficher en tant que lignes dans la fenˆtre. Cela vous permet d'afficher la mˆme fenˆtre de matrice de diff‚rentes fa‡ons, en particulier si vous utilisez … la fois le champ Afficher lignes et le champ Afficher colonnes.;
                           ENC=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.];
                OptionCaptionML=[ENU=Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period<Undefined>;
                                 ESM=C lculo benef.,Especif. costo,Especif. cargo prod. comp.,Especif. cargo prod. ventas,Periodo<Sin definir>;
                                 FRC=Calcul marge,Composante co–t,Composante frais annexes achat,Composante frais annexes vente,P‚riode <ind‚finie>;
                                 ENC=Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period<Undefined>];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ItemBuffer."Line Option";
                OnValidate=BEGIN
                             ItemBufferLineOptionOnAfterVal;
                           END;
                            }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           ESM=Muestra como columnas;
                           FRC=Afficher colonnes;
                           ENC=Show as Columns];
                ToolTipML=[ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           ESM=Especifica los valores que desea mostrar como columnas en la ventana. Esto le permite ver la misma ventana de la matriz desde distintas perspectivas, especialmente cuando use el campo Muestra como l¡neas y el campo Muestra como columnas.;
                           FRC=Sp‚cifie les valeurs … afficher en tant que colonnes dans la fenˆtre. Cela vous permet d'afficher la mˆme fenˆtre de matrice de diff‚rentes fa‡ons, en particulier si vous utilisez … la fois le champ Afficher lignes et le champ Afficher colonnes.;
                           ENC=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.];
                ApplicationArea=#Suite;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             ValidateColumnDimCode;
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                           MATRIX_SetWanted@1003 : 'Initial,Previous,Same,Next';
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           IF NewCode = ColumnDimCode THEN BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);

                             EXIT(FALSE);
                           END;
                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ESM=Filtro fecha;
                           FRC=Filtre date;
                           ENC=Date Filter];
                ToolTipML=[ENU=Specifies the dates that will be used to filter the amounts in the window.;
                           ESM=Especifica las fechas que se usar n para filtrar los importes en la ventana.;
                           FRC=Indique les dates qui sont utilis‚es pour filtrer les montants dans la fenˆtre.;
                           ENC=Specifies the dates that will be used to filter the amounts in the window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             ItemBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           ESM=Filtro producto;
                           FRC=Filtre article;
                           ENC=Item Filter];
                ToolTipML=[ENU=Specifies a filter to specify the items that will be shown in the window.;
                           ESM=Especifica un filtro para especificar los productos que se mostrar n en la ventana.;
                           FRC=Sp‚cifie un filtre pour sp‚cifier les articles … afficher dans la fenˆtre.;
                           ENC=Specifies a filter to specify the items that will be shown in the window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Item@1002 : Record 27;
                           ItemList@1003 : Page 31;
                         BEGIN
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := TRUE;
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           ESM=Filtro almac‚n;
                           FRC=Filtre emplacement;
                           ENC=Location Filter];
                ToolTipML=[ENU=Specifies the locations that statistics are shown for.;
                           ESM=Especifica las ubicaciones cuyas estad¡sticas se muestran.;
                           FRC=Sp‚cifie les emplacements pour lesquels les statistiques sont affich‚es.;
                           ENC=Specifies the locations that statistics are shown for.];
                ApplicationArea=#Location;
                SourceExpr=LocationFilter;
                OnLookup=VAR
                           Location@1002 : Record 14;
                           Locations@1003 : Page 15;
                         BEGIN
                           Locations.SETTABLEVIEW(Location);
                           Locations.LOOKUPMODE := TRUE;
                           IF Locations.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Locations.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Variant Filter;
                           ESM=Filtro variante;
                           FRC=Filtre variante;
                           ENC=Variant Filter];
                ToolTipML=[ENU=Specifies a filter to specify the variants that will be shown in the window.;
                           ESM=Especifica un filtro para indicar las variantes que se mostrar n en la ventana.;
                           FRC=Sp‚cifie un filtre pour sp‚cifier les variantes … afficher dans la fenˆtre.;
                           ENC=Specifies a filter to specify the variants that will be shown in the window.];
                ApplicationArea=#Planning;
                SourceExpr=VariantFilter;
                OnLookup=VAR
                           ItemVariant@1002 : Record 5401;
                           ItemVariants@1003 : Page 5401;
                         BEGIN
                           ItemVariant.SETRANGE("Item No.",Item."No.");
                           ItemVariants.SETTABLEVIEW(ItemVariant);
                           ItemVariants.LOOKUPMODE := TRUE;
                           IF ItemVariants.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemVariants.GETRECORD(ItemVariant);
                             Text := ItemVariant.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           ESM=Opciones;
                           FRC=Options;
                           ENC=Options] }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           ESM=Factor redondeo;
                           FRC=Facteur d'arrondissement;
                           ENC=Rounding Factor];
                ToolTipML=[ENU=Specifies the factor that is used to round the amounts.;
                           ESM=Especifica el factor que se usa para redondear los importes.;
                           FRC=Sp‚cifie le facteur qui est utilis‚ pour arrondir les montants.;
                           ENC=Specifies the factor that is used to round the amounts.];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 ESM=No,1,1000,1000000;
                                 FRC=Aucun,1,1000,1000000;
                                 ENC=None,1,1000,1000000];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=RoundingFactor }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Calculate per Unit;
                           ESM=Calcular por unidad;
                           FRC=Calculer par unit‚;
                           ENC=Calculate per Unit];
                ToolTipML=[ENU=Specifies that item statistics will be calculated per unit.;
                           ESM=Especifica que las estad¡sticas del producto se calcular n por unidad.;
                           FRC=Sp‚cifie que les statistiques article seront calcul‚es par unit‚.;
                           ENC=Specifies that item statistics will be calculated per unit.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PerUnit }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Include Expected;
                           ESM=Incluir esperados;
                           FRC=Inclusion pr‚vue;
                           ENC=Include Expected];
                ToolTipML=[ENU=Specifies whether to include costs that have not yet been invoiced in the item statistics. When goods have been received but not yet invoiced, the costs of those receipts are expected costs.;
                           ESM=Especifica si se deben incluir los costos que todav¡a no se hayan facturado en las estad¡sticas del producto. Cuando los bienes se han recibido, pero todav¡a no se han facturado, los costos de dichas recepciones son los costos esperados.;
                           FRC=Sp‚cifie s'il faut inclure ou non les frais qui n'ont pas encore ‚t‚ factur‚s dans les statistiques article. Si des marchandises ont ‚t‚ r‚ceptionn‚es mais non encore factur‚es, les co–ts de ces r‚ceptions sont les co–ts pr‚vus.;
                           ENC=Specifies whether to include costs that have not yet been invoiced in the item statistics. When goods have been received but not yet invoiced, the costs of those receipts are expected costs.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IncludeExpected }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           ESM=Opciones matriz;
                           FRC=Options de matrice;
                           ENC=Matrix Options] }

    { 1167;2   ;Field     ;
                Name=ViewBy;
                CaptionML=[ENU=View by;
                           ESM=Ver por;
                           FRC=Afficher par;
                           ENC=View by];
                ToolTipML=[ENU=Specifies by which period amounts are displayed.;
                           ESM=Especifica para qu‚ periodos se muestran los importes.;
                           FRC=Indique selon quelle p‚riodicit‚ les montants sont affich‚s.;
                           ENC=Specifies by which period amounts are displayed.];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 ESM=D¡a,Semana,Mes,Trimestre,A¤o,Periodo contable;
                                 FRC=Jour,Semaine,Mois,Trimestre,Ann‚e,P‚riode comptable;
                                 ENC=Day,Week,Month,Quarter,Year,Accounting Period];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;
                            }

    { 1168;2   ;Field     ;
                CaptionML=[ENU=View as;
                           ESM=Ver como;
                           FRC=Afficher en tant que;
                           ENC=View as];
                ToolTipML=[ENU=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.;
                           ESM=Especifica c¢mo se muestran los importes. Cambio neto: indica el cambio neto del saldo del periodo seleccionado. Saldo a la fecha: muestra el saldo en el £ltimo d¡a del periodo seleccionado.;
                           FRC=Sp‚cifie la maniŠre dont les montants sont affich‚s. Solde p‚riodeÿ: le solde pour la p‚riode s‚lectionn‚e. Solde auÿ: le solde au dernier jour de la p‚riode s‚lectionn‚e.;
                           ENC=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.];
                OptionCaptionML=[ENU=Net Change,Balance at Date;
                                 ESM=Saldo periodo,Saldo a la fecha;
                                 FRC=Variation nette,Solde en date du;
                                 ENC=Net Change,Balance at Date];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AmountType;
                OnValidate=VAR
                             MATRIX_Step@1000 : 'First,Previous,Next';
                           BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
                           END;
                            }

    { 1169;2   ;Field     ;
                CaptionML=[ENU=Column Set;
                           ESM=Conjunto de columnas;
                           FRC=Jeu de colonnes;
                           ENC=Column Set];
                ToolTipML=[ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                           ESM=Especifica el rango de valores que se muestran en la ventana de la matriz, por ejemplo, el periodo total. Para modificar el contenido de este campo, elija la opci¢n Conjunto siguiente o Conjunto anterior.;
                           FRC=Sp‚cifie la plage de valeurs affich‚e dans la fenˆtre de matrice (par exemple, total de la p‚riode). Pour modifier le contenu de ce champ, choisissez Jeu pr‚c‚dent ou Jeu suivant.;
                           ENC=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      GLSetup@1003 : Record 98;
      Item@1002 : Record 27;
      ItemBuffer@1001 : Record 5821;
      IntegerLine@1000 : Record 2000000026;
      MATRIX_MatrixRecords@1159 : ARRAY [32] OF Record 367;
      MATRIX_CaptionSet@1160 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1161 : Text;
      MATRIX_PrimKeyFirstCaptionInCu@1165 : Text;
      ColumnDimCode@1020 : Text[30];
      ItemName@1006 : Text[250];
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      RoundingFactor@1009 : 'None,1,1000,1000000';
      AmountType@1010 : 'Net Change,Balance at Date';
      DateFilter@1011 : Text;
      InternalDateFilter@1012 : Text;
      ItemFilter@1013 : Text;
      VariantFilter@1014 : Text;
      LocationFilter@1015 : Text;
      PeriodInitialized@1018 : Boolean;
      PerUnit@1021 : Boolean;
      IncludeExpected@1027 : Boolean;
      Text002@1025 : TextConst 'ENU=Period;ESM=Periodo;FRC=P‚riode;ENC=Period';
      Text003@1007 : TextConst 'ENU=%1 is not a valid column definition.;ESM=%1 no es una def. de columna v lida.;FRC=%1 n''est pas une d‚finition de colonne correcte.;ENC=%1 is not a valid column definition.';
      MATRIX_CurrentNoOfColumns@1028 : Integer;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1175(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next');
    VAR
      MATRIX_PeriodRecords@1004 : ARRAY [32] OF Record 2000000007;
      Location@1003 : Record 14;
      MatrixMgt@1002 : Codeunit 9200;
      RecRef@1001 : RecordRef;
      i@1005 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);

      CASE ColumnDimCode OF
        Text002:
          BEGIN
            MatrixMgt.GeneratePeriodMatrixData(MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),FALSE,
              PeriodType,DateFilter,MATRIX_PrimKeyFirstCaptionInCu,
              MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            FOR i := 1 TO ARRAYLEN(MATRIX_CaptionSet) DO BEGIN
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            END;
          END;
        Location.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Location);
            RecRef.SETTABLE(Location);
            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
          END;
      END;
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      Location@1002 : Record 14;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        Text002:
          EXIT(4);
        Location.TABLECAPTION:
          EXIT(5);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period,Location';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      ItemCharge@1003 : Record 5800;
      Location@1004 : Record 14;
      Period@1005 : Record 2000000007;
      PeriodFormMgt@1006 : Codeunit 359;
      Found@1007 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Profit Calculation",
        DimOption::"Cost Specification":
          BEGIN
            IF EVALUATE(IntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := IntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(IntegerLine,DimCodeBuf);
          END;
        DimOption::"Purch. Item Charge Spec.",
        DimOption::"Sales Item Charge Spec.":
          BEGIN
            ItemCharge."No." := DimCodeBuf.Code;
            Found := ItemCharge.FIND(Which);
            IF Found THEN
              CopyAddChargesToBuf(ItemCharge,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::Location:
          BEGIN
            Location.Code := DimCodeBuf.Code;
            IF LocationFilter <> '' THEN
              Location.SETFILTER(Code,LocationFilter);
            Found := Location.FIND(Which);
            IF Found THEN
              CopyLocationToBuf(Location,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH ItemBuffer DO
        CASE "Line Option" OF
          "Line Option"::"Profit Calculation":
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION("Sales (LCY)"),0,FALSE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("COGS (LCY)"),0,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("Non-Invtbl. Costs (LCY)"),0,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Profit (LCY)"),0,FALSE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Profit %"),0,FALSE,TheDimCodeBuf);
            END;
          "Line Option"::"Cost Specification":
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION("Inventoriable Costs"),0,TRUE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Direct Cost (LCY)"),1,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("Revaluation (LCY)"),1,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Rounding (LCY)"),1,FALSE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Indirect Cost (LCY)"),1,FALSE,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Variance (LCY)"),1,FALSE,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Inventoriable Costs, Total"),0,TRUE,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION("COGS (LCY)"),0,TRUE,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Inventory (LCY)"),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    LOCAL PROCEDURE CopyAddChargesToBuf@3(VAR TheItemCharge@1000 : Record 5800;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheItemCharge."No.";
        Name := COPYSTR(
            STRSUBSTNO('%1 %2',TheItemCharge."No.",TheItemCharge.Description),1,50);
      END;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@4(VAR TheLocation@1000 : Record 14;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheLocation.Code;
        Name := TheLocation.Name;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        "Period End" := ThePeriod."Period End";
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;

      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);

      WITH ItemBuffer DO
        IF AmountType = AmountType::"Net Change" THEN BEGIN
          SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
          IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
            SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
        END ELSE
          SETRANGE("Date Filter",0D,Calendar."Period End");

      InternalDateFilter := ItemBuffer.GETFILTER("Date Filter");
    END;

    LOCAL PROCEDURE GetDimSelection@13(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      Location@1001 : Record 14;
      DimSelection@1002 : Page 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,Location.TABLECAPTION,Location.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text002,Text002);

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);

      EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(Location.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text002)) AND
         (ColumnDimCode <> '')
      THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;

      WITH ItemBuffer DO BEGIN
        "Column Option" := DimCodeToOption(ColumnDimCode);
        InternalDateFilter := GETFILTER("Date Filter");
        IF ("Line Option" <> "Line Option"::Period)
           AND ("Column Option" <> "Column Option"::Period)
        THEN BEGIN
          DateFilter := InternalDateFilter;
          IF STRPOS(DateFilter,'&') > 1 THEN
            DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
        END ELSE
          PeriodInitialized := FALSE;
      END;
    END;

    [External]
    PROCEDURE SetItem@11(VAR NewItem@1000 : Record 27);
    BEGIN
      Item.GET(NewItem."No.");
      Item.COPYFILTERS(NewItem);
    END;

    LOCAL PROCEDURE ItemBufferLineOptionOnAfterVal@19059500();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    VAR
      MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      Item."No." := ItemFilter;
      Item.Description := '';

      IF STRLEN(ItemFilter) <= 30 THEN
        IF Item.GET(ItemFilter) THEN
          ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
      ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      // IF ColumnDimOption = ColumnDimOption::Period THEN
      IF ItemBuffer."Column Option" = ItemBuffer."Column Option"::Period THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    BEGIN
    END.
  }
}

