OBJECT Table 409 SMTP Mail Setup
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    CaptionML=[ENU=SMTP Mail Setup;
               ESM=Configuraci¢n correo SMTP;
               FRC=Configuration de courrier SMTP;
               ENC=SMTP Mail Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ESM=Clave primaria;
                                                              FRC=Cl‚ primaire;
                                                              ENC=Primary Key] }
    { 2   ;   ;SMTP Server         ;Text250       ;CaptionML=[ENU=SMTP Server;
                                                              ESM=Servidor SMTP;
                                                              FRC=Serveur SMTP;
                                                              ENC=SMTP Server] }
    { 3   ;   ;Authentication      ;Option        ;OnValidate=BEGIN
                                                                IF Authentication <> Authentication::Basic THEN BEGIN
                                                                  "User ID" := '';
                                                                  SetPassword('');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Authentication;
                                                              ESM=Autenticaci¢n;
                                                              FRC=Authentification;
                                                              ENC=Authentication];
                                                   OptionCaptionML=[ENU=Anonymous,NTLM,Basic;
                                                                    ESM=An¢nima,NTLM,B sica;
                                                                    FRC=Anonyme,NTLM,De base;
                                                                    ENC=Anonymous,NTLM,Basic];
                                                   OptionString=Anonymous,NTLM,Basic }
    { 4   ;   ;User ID             ;Text250       ;OnValidate=BEGIN
                                                                "User ID" := DELCHR("User ID",'<>',' ');
                                                                IF "User ID" = '' THEN
                                                                  EXIT;
                                                                TESTFIELD(Authentication,Authentication::Basic);
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ESM=Id. usuario;
                                                              FRC=Code utilisateur;
                                                              ENC=User ID] }
    { 6   ;   ;SMTP Server Port    ;Integer       ;InitValue=25;
                                                   CaptionML=[ENU=SMTP Server Port;
                                                              ESM=Puerto servidor SMTP;
                                                              FRC=Port du serveur SMTP;
                                                              ENC=SMTP Server Port] }
    { 7   ;   ;Secure Connection   ;Boolean       ;InitValue=No;
                                                   CaptionML=[ENU=Secure Connection;
                                                              ESM=Conexi¢n segura;
                                                              FRC=S‚curiser la connexion;
                                                              ENC=Secure Connection] }
    { 8   ;   ;Password Key        ;GUID          ;CaptionML=[ENU=Password Key;
                                                              ESM=Clave de contrase¤a;
                                                              FRC=Cl‚ mot de passe;
                                                              ENC=Password Key] }
    { 9   ;   ;Send As             ;Text250       ;CaptionML=[ENU=Send As;
                                                              ESM=Enviar como;
                                                              FRC=Envoyer en tant que;
                                                              ENC=Send As] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE GetSetup@41() : Boolean;
    VAR
      AzureKeyVaultManagement@1000 : Codeunit 2200;
    BEGIN
      IF NOT GET THEN BEGIN
        IF NOT WRITEPERMISSION THEN BEGIN
          AzureKeyVaultManagement.GetSMTPCredentials(Rec);
          EXIT("SMTP Server" <> '');
        END;
        INIT;
        INSERT;
      END;

      IF "SMTP Server" = '' THEN
        AzureKeyVaultManagement.GetSMTPCredentials(Rec);

      EXIT("SMTP Server" <> '');
    END;

    [External]
    PROCEDURE SetPassword@1(NewPassword@1000 : Text);
    VAR
      ServicePassword@1001 : Record 1261;
    BEGIN
      IF ISNULLGUID("Password Key") OR NOT ServicePassword.GET("Password Key") THEN BEGIN
        ServicePassword.SavePassword(NewPassword);
        ServicePassword.INSERT(TRUE);
        "Password Key" := ServicePassword.Key;
      END ELSE BEGIN
        ServicePassword.SavePassword(NewPassword);
        ServicePassword.MODIFY;
      END;
    END;

    [External]
    PROCEDURE GetPassword@3() : Text;
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      IF NOT ISNULLGUID("Password Key") THEN
        IF ServicePassword.GET("Password Key") THEN
          EXIT(ServicePassword.GetPassword);
      EXIT('');
    END;

    [External]
    PROCEDURE HasPassword@2() : Boolean;
    BEGIN
      EXIT(GetPassword <> '');
    END;

    PROCEDURE RemovePassword@4();
    VAR
      ServicePassword@1020 : Record 1261;
    BEGIN
      IF NOT ISNULLGUID("Password Key") THEN BEGIN
        IF ServicePassword.GET("Password Key") THEN
          ServicePassword.DELETE(TRUE);

        CLEAR("Password Key");
      END;
    END;

    PROCEDURE GetSender@5() : Text[250];
    BEGIN
      IF "Send As" = '' THEN
        "Send As" := "User ID";

      EXIT("Send As");
    END;

    PROCEDURE GetConnectionString@6() : Text[250];
    BEGIN
      IF GetSender = "User ID" THEN
        EXIT("User ID");

      EXIT(COPYSTR(STRSUBSTNO('%1\%2',"User ID","Send As"),1,MAXSTRLEN("User ID")));
    END;

    PROCEDURE SplitUserIdAndSendAs@7(ConnectionString@1001 : Text[250]);
    VAR
      MailManagement@1000 : Codeunit 9520;
      AtLocation@1002 : Integer;
      SlashLocation@1003 : Integer;
    BEGIN
      IF (ConnectionString = '') OR MailManagement.CheckValidEmailAddress(ConnectionString) THEN BEGIN
        "User ID" := ConnectionString;
        "Send As" := ConnectionString;
        EXIT;
      END;

      AtLocation := STRPOS(ConnectionString,'@');

      IF AtLocation > 0 THEN BEGIN
        SlashLocation := STRPOS(ConnectionString,'\');
        IF SlashLocation > AtLocation THEN BEGIN
          "User ID" := COPYSTR(ConnectionString,1,SlashLocation - 1);
          "Send As" := COPYSTR(ConnectionString,SlashLocation + 1);
          IF MailManagement.CheckValidEmailAddress("User ID") AND MailManagement.CheckValidEmailAddress("Send As") THEN
            EXIT;
        END;
      END;

      "User ID" := ConnectionString;
      "Send As" := ConnectionString;
    END;

    BEGIN
    END.
  }
}

