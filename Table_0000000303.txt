OBJECT Table 303 Finance Charge Memo Line
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FinChrgMemoHeader@1000 : Record 302;
             BEGIN
               FinChrgMemoHeader.GET("Finance Charge Memo No.");
               IF Type = Type::"Customer Ledger Entry" THEN
                 TESTFIELD("Attached to Line No.",0);
               "Attached to Line No." := 0;
             END;

    OnModify=BEGIN
               TESTFIELD("System-Created Entry",FALSE);
             END;

    OnDelete=BEGIN
               FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
               FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
               FinChrgMemoLine.DELETEALL;
             END;

    CaptionML=[ENU=Finance Charge Memo Line;
               ESM=L°n. doc. interÇs;
               FRC=Ligne note de frais financiers;
               ENC=Finance Charge Memo Line];
  }
  FIELDS
  {
    { 1   ;   ;Finance Charge Memo No.;Code20     ;TableRelation="Finance Charge Memo Header";
                                                   CaptionML=[ENU=Finance Charge Memo No.;
                                                              ESM=Nß documento interÇs;
                                                              FRC=N¯ note de frais financiers;
                                                              ENC=Finance Charge Memo No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESM=Nß l°nea;
                                                              FRC=N¯ ligne;
                                                              ENC=Line No.];
                                                   NotBlank=Yes }
    { 3   ;   ;Attached to Line No.;Integer       ;TableRelation="Finance Charge Memo Line"."Line No." WHERE (Finance Charge Memo No.=FIELD(Finance Charge Memo No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ESM=Nß l°nea texto adicional;
                                                              FRC=ReliÇ Ö la ligne nß;
                                                              ENC=Attached to Line No.];
                                                   Editable=No }
    { 4   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  FinChrgMemoLine := Rec;
                                                                  INIT;
                                                                  Type := FinChrgMemoLine.Type;
                                                                  GetFinChrgMemoHeader;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Customer Ledger Entry";
                                                                    ESM=" ,Cuenta,Mov. cliente";
                                                                    FRC=" ,Compte GL,êcriture client";
                                                                    ENC=" ,G/L Account,Customer Ledger Entry"];
                                                   OptionString=[ ,G/L Account,Customer Ledger Entry] }
    { 5   ;   ;Entry No.           ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Attached to Line No.",0);
                                                                GetFinChrgMemoHeader;
                                                                CustLedgEntry.GET("Entry No.");
                                                                CASE FinChrgTerms."Interest Calculation" OF
                                                                  FinChrgTerms."Interest Calculation"::"Open Entries":
                                                                    CustLedgEntry.TESTFIELD(Open,TRUE);
                                                                  FinChrgTerms."Interest Calculation"::"Closed Entries":
                                                                    CustLedgEntry.TESTFIELD(Open,FALSE);
                                                                END;
                                                                CustLedgEntry.TESTFIELD("Customer No.",FinChrgMemoHeader."Customer No.");
                                                                CustLedgEntry.TESTFIELD("On Hold",'');
                                                                IF CustLedgEntry."Currency Code" <> FinChrgMemoHeader."Currency Code" THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FinChrgMemoHeader.FIELDCAPTION("Currency Code"),
                                                                    FinChrgMemoHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);
                                                                "Posting Date" := CustLedgEntry."Posting Date";
                                                                "Document Date" := CustLedgEntry."Document Date";
                                                                "Due Date" := CustLedgEntry."Due Date";
                                                                "Document Type" := CustLedgEntry."Document Type";
                                                                "Document No." := CustLedgEntry."Document No.";
                                                                Description := CustLedgEntry.Description;
                                                                CustLedgEntry.SETFILTER("Date Filter",'..%1',FinChrgMemoHeader."Document Date");
                                                                CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                                                "Original Amount" := CustLedgEntry.Amount;
                                                                "Remaining Amount" := CustLedgEntry."Remaining Amount";
                                                                CalcFinChrg;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF CustLedgEntry.GET("Entry No.") THEN;
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Entry No.;
                                                              ESM=Nß mov.;
                                                              FRC=N¯ Çcriture;
                                                              ENC=Entry No.];
                                                   BlankZero=Yes }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESM=Fecha registro;
                                                              FRC=Date de report;
                                                              ENC=Posting Date];
                                                   Editable=No }
    { 8   ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ESM=Fecha emisi¢n documento;
                                                              FRC=Date document;
                                                              ENC=Document Date];
                                                   Editable=No }
    { 9   ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESM=Fecha vencimiento;
                                                              FRC=Date d'ÇchÇance;
                                                              ENC=Due Date];
                                                   Editable=No }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ESM=Tipo documento;
                                                              FRC=Type de document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ESM=" ,Pago,Factura,Nota crÇdito,Docs. interÇs,Recordatorio,Reembolso";
                                                                    FRC=" ,Paiement,Facture,Note de crÇdit,Note de frais financiers,Rappel,Remboursement";
                                                                    ENC=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 11  ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                "Entry No." := 0;
                                                                IF "Document No." <> '' THEN BEGIN
                                                                  SetCustLedgEntryView;
                                                                  IF "Document Type" <> 0 THEN
                                                                    CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    VALIDATE("Entry No.",CustLedgEntry."Entry No.")
                                                                  ELSE
                                                                    ERROR(Text004,FORMAT(Type),FIELDCAPTION("Document No."),"Document No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupDocNo;
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ESM=Nß documento;
                                                              FRC=N¯ de document;
                                                              ENC=Document No.] }
    { 12  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 13  ;   ;Original Amount     ;Decimal       ;CaptionML=[ENU=Original Amount;
                                                              ESM=Importe inicial;
                                                              FRC=Montant initial;
                                                              ENC=Original Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 14  ;   ;Remaining Amount    ;Decimal       ;CaptionML=[ENU=Remaining Amount;
                                                              ESM=Importe pendiente;
                                                              FRC=Solde ouvert;
                                                              ENC=Remaining Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 15  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "No." <> '' THEN
                                                                  CASE Type OF
                                                                    Type::" ":
                                                                      BEGIN
                                                                        StdTxt.GET("No.");
                                                                        Description := StdTxt.Description;
                                                                      END;
                                                                    Type::"Customer Ledger Entry":
                                                                      BEGIN
                                                                        FinChrgMemoLine.Type := FinChrgMemoLine.Type::" ";
                                                                        FinChrgMemoLine2.Type := FinChrgMemoLine2.Type::"G/L Account";
                                                                        ERROR(
                                                                          Text001,
                                                                          FIELDCAPTION(Type),FinChrgMemoLine.Type,FinChrgMemoLine2.Type);
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        IF NOT "System-Created Entry" THEN
                                                                          GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
                                                                        Description := GLAcc.Name;
                                                                        GetFinChrgMemoHeader;
                                                                        "Tax Group Code" := GLAcc."Tax Group Code";
                                                                        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
                                                                        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESM=Nß;
                                                              FRC=N¯;
                                                              ENC=No.] }
    { 16  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF Type = Type::" " THEN BEGIN
                                                                  FinChrgMemoLine.Type := Type::"G/L Account";
                                                                  FinChrgMemoLine2.Type := Type::"Customer Ledger Entry";
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),FinChrgMemoLine.Type,FinChrgMemoLine2.Type);
                                                                END;
                                                                IF Type = Type::"Customer Ledger Entry" THEN
                                                                  TESTFIELD("Attached to Line No.",0);
                                                                GetFinChrgMemoHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" :=
                                                                      ROUND(Amount * "VAT %" / 100,Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          FinChrgMemoHeader."Tax Area Code","Tax Group Code",FinChrgMemoHeader."Tax Liable",
                                                                          FinChrgMemoHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  4:
                                                                    BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESM=Importe;
                                                              FRC=Montant;
                                                              ENC=Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 17  ;   ;Interest Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Entry No.");
                                                                CalcFinChrg;
                                                              END;

                                                   CaptionML=[ENU=Interest Rate;
                                                              ESM=Tipo interÇs;
                                                              FRC=Taux d'intÇràt;
                                                              ENC=Interest Rate];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 18  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESM=Grupo registro prod. gen.;
                                                              FRC=Groupe de report de produit;
                                                              ENC=Gen. Prod. Posting Group] }
    { 19  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=Tax %;
                                                              ESM=% IVA;
                                                              FRC=% TVA;
                                                              ENC=Tax %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ESM=Tipo c†lculo IVA;
                                                              FRC=Type de calcul taxe;
                                                              ENC=Tax Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge Tax,Full VAT,Sales Tax;
                                                                    ESM=Normal,Reversi¢n,Total,Impto. venta;
                                                                    FRC=TVA normale,Frais renversÇs TVA,TVA compläte,Taxe de vente;
                                                                    ENC=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 21  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ESM=Importe IVA;
                                                              FRC=Montant de TVA;
                                                              ENC=Tax Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 22  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ESM=C¢d. grupo impuesto;
                                                              FRC=Code groupe fiscal;
                                                              ENC=Tax Group Code] }
    { 23  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GetFinChrgMemoHeader;
                                                                VATPostingSetup.GET(FinChrgMemoHeader."VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      TESTFIELD("No.",VATPostingSetup.GetSalesAccount(FALSE));
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          FinChrgMemoHeader."Tax Area Code","Tax Group Code",FinChrgMemoHeader."Tax Liable",
                                                                          FinChrgMemoHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Tax Prod. Posting Group;
                                                              ESM=Grupo registro IVA prod.;
                                                              FRC=Groupe de report de produit taxe;
                                                              ENC=Tax Prod. Posting Group] }
    { 24  ;   ;VAT Identifier      ;Code20        ;CaptionML=[ENU=Tax Identifier;
                                                              ESM=Identific. IVA;
                                                              FRC=Identificateur de TVA;
                                                              ENC=Tax Identifier];
                                                   Editable=No }
    { 25  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ESM=Tipo l°nea;
                                                              FRC=Type ligne;
                                                              ENC=Line Type];
                                                   OptionCaptionML=[ENU=Finance Charge Memo Line,Beginning Text,Ending Text,Rounding;
                                                                    ESM=L°n. doc. interÇs,Texto inicial,Texto final,Redondeo;
                                                                    FRC=Ligne note de frais financiers,Texte dÇbut,Texte fin,Arrondissement;
                                                                    ENC=Finance Charge Memo Line,Beginning Text,Ending Text,Rounding];
                                                   OptionString=Finance Charge Memo Line,Beginning Text,Ending Text,Rounding }
    { 26  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=Tax Clause Code;
                                                              ESM=C¢digo de cl†usula de IVA;
                                                              FRC=Code clause TVA;
                                                              ENC=Tax Clause Code] }
    { 30  ;   ;Detailed Interest Rates Entry;Boolean;
                                                   CaptionML=[ENU=Detailed Interest Rates Entry;
                                                              ESM=Movimiento detallado de los tipos de interÇs;
                                                              FRC=Saisie des taux d'intÇràt dÇtaillÇs;
                                                              ENC=Detailed Interest Rates Entry] }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ESM=Asiento autom†tico;
                                                              FRC=êcriture crÇÇe par systäme;
                                                              ENC=System-Created Entry];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Finance Charge Memo No.,Line No.        ;SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Finance Charge Memo No.,Type,Detailed Interest Rates Entry;
                                                   SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Finance Charge Memo No.,Detailed Interest Rates Entry;
                                                   SumIndexFields=Amount,VAT Amount,Remaining Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 on the %2 and the %3 must be the same.;ESM=El/la %1 en el/la %2 y en el/la %3 deben ser igual.;FRC=Le %1 sur le %2 et le %3 doivent àtre les màmes.;ENC=The %1 on the %2 and the %3 must be the same.';
      Text001@1001 : TextConst 'ENU=%1 must be %2 or %3.;ESM=%1 debe ser %2 o %3.;FRC=%1 doit àtre %2 ou %3.;ENC=%1 must be %2 or %3.';
      Text002@1002 : TextConst 'ENU=Document;ESM=Documento;FRC=Document;ENC=Document';
      CustLedgEntry2@1003 : Record 21;
      FinChrgTerms@1004 : Record 5;
      FinChrgMemoHeader@1005 : Record 302;
      FinChrgMemoLine@1006 : Record 303;
      FinChrgMemoLine2@1007 : Record 303;
      ReminderEntry@1009 : Record 300;
      CustLedgEntry@1010 : Record 21;
      Currency@1012 : Record 4;
      VATPostingSetup@1013 : Record 325;
      CustPostingGr@1014 : Record 92;
      GLAcc@1015 : Record 15;
      StdTxt@1016 : Record 7;
      GenProdPostingGrp@1017 : Record 251;
      AutoFormatManagement@1023 : Codeunit 45;
      SalesTaxCalculate@1018 : Codeunit 398;
      InterestCalcDate@1019 : Date;
      DocTypeText@1021 : Text[30];
      CalcInterest@1022 : Boolean;
      Text004@1011 : TextConst 'ENU=There is no open %1 with %2 %3.;ESM=No hay %1 abiertos con el %2 %3.;FRC=Il n''y a pas de %1 ouvert avec %2 %3.;ENC=There is no open %1 with %2 %3.';
      ClosedatDate@1025 : Date;
      NotEnoughSpaceToInsertErr@1020 : TextConst 'ENU=There is not enough space to insert lines with additional interest rates.;ESM=No hay espacio suficiente para insertar l°neas con tipos de interÇs adicionales.;FRC=Espace insuffisant pour insÇrer des lignes avec des taux d''intÇràt supplÇmentaires.;ENC=There is not enough space to insert lines with additional interest rates.';
      InvalidInterestRateDateErr@1008 : TextConst '@@@=%1 - date;ENU=Create interest rate with start date prior to %1.;ESM=Permite crear tipo interÇs con fecha de inicio anterior a %1.;FRC=CrÇez un taux d''intÇràt avec une date de dÇbut antÇrieure Ö %1.;ENC=Create interest rate with start date prior to %1.';
      Checking@1028 : Boolean;
      NrOfDays@1027 : Integer;
      NrOfLinesToInsert@1026 : Integer;
      NrOfLines@1024 : Integer;

    LOCAL PROCEDURE CalcFinChrg@6();
    VAR
      FinanceChargeInterestRate@1012 : Record 572;
      ExtraFinChrgMemoLine@1011 : Record 303;
      BaseAmount@1010 : Decimal;
      UseDueDate@1009 : Date;
      UseCalcDate@1008 : Date;
      UseInterestRate@1004 : Decimal;
      CumAmount@1002 : Decimal;
      InsertedLines@1001 : Boolean;
    BEGIN
      OnBeforeCalcFinCharge(Rec);

      GetFinChrgMemoHeader;
      Amount := 0;
      "VAT Amount" := 0;
      "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
      "Gen. Prod. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      "Interest Rate" := 0;
      FinChrgMemoLine := Rec;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      FinChrgMemoLine.SETRANGE("Detailed Interest Rates Entry",TRUE);
      FinChrgMemoLine.SETRANGE("Entry No.","Entry No.");
      FinChrgMemoLine.DELETEALL;
      CustLedgEntry.GET("Entry No.");
      IF CustLedgEntry."On Hold" <> '' THEN
        EXIT;

      CalcFinanceChargeInterestRate(FinanceChargeInterestRate,UseDueDate,UseInterestRate,UseCalcDate);

      CASE FinChrgTerms."Interest Calculation Method" OF
        FinChrgTerms."Interest Calculation Method"::"Average Daily Balance":
          BEGIN
            IF NrOfLinesToInsert = 0 THEN
              FinChrgTerms.TESTFIELD("Interest Period (Days)")
            ELSE
              FinanceChargeInterestRate.TESTFIELD("Interest Period (Days)");
            ReminderEntry.SETCURRENTKEY("Customer Entry No.");
            ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::"Finance Charge Memo");
            InterestCalcDate := CustLedgEntry."Due Date";
            IF ReminderEntry.FINDLAST THEN
              InterestCalcDate := ReminderEntry."Document Date";
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
            ReminderEntry.SETRANGE("Interest Posted",TRUE);
            IF ReminderEntry.FINDLAST THEN
              IF ReminderEntry."Document Date" > InterestCalcDate THEN
                InterestCalcDate := ReminderEntry."Document Date";
            CalcInterest := FALSE;
            IF CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" THEN
              IF NrOfLines = 0 THEN
                CumulateDetailedEntries(Amount,UseDueDate,UseCalcDate,
                  UseInterestRate,FinChrgTerms."Interest Period (Days)",BaseAmount)
              ELSE
                CumulateDetailedEntries(Amount,UseDueDate,UseCalcDate,
                  UseInterestRate,FinanceChargeInterestRate."Interest Period (Days)",BaseAmount);
            NrOfDays := UseCalcDate - UseDueDate;

            IF (NrOfLinesToInsert > 0) AND
               (FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance")
            THEN
              InsertedLines :=
                CreateMulitplyInterestRateEntries(
                  ExtraFinChrgMemoLine,FinanceChargeInterestRate,UseDueDate,UseCalcDate,UseInterestRate,BaseAmount,CumAmount);
          END;
        FinChrgTerms."Interest Calculation Method"::"Balance Due":
          IF CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" THEN BEGIN
            Amount := "Remaining Amount" * "Interest Rate" / 100;
            BaseAmount := "Remaining Amount";
          END;
      END;

      IF InsertedLines THEN
        BuildMultiDescription(FinChrgTerms."Line Description",UseDueDate,NrOfDays);
      BuildDescription(Description,UseInterestRate,UseDueDate,NrOfDays,BaseAmount);

      IF Amount <> 0 THEN BEGIN
        CustPostingGr.GET(FinChrgMemoHeader."Customer Posting Group");
        GLAcc.GET(CustPostingGr.GetInterestAccount);
        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
      END;

      OnAfterCalcFinCharge(Rec);
    END;

    [External]
    PROCEDURE CheckAttachedLines@5() : Boolean;
    VAR
      FinChrgMemoLine@1000 : Record 303;
    BEGIN
      IF "Line No." <> 0 THEN BEGIN
        FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
        FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
        EXIT(NOT FinChrgMemoLine.ISEMPTY);
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE UpdateAttachedLines@8();
    VAR
      FinChrgMemoLine@1000 : Record 303;
    BEGIN
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
      FinChrgMemoLine.DELETEALL;
    END;

    LOCAL PROCEDURE SetCustLedgEntryView@9();
    BEGIN
      GetFinChrgMemoHeader;
      CASE FinChrgTerms."Interest Calculation" OF
        FinChrgTerms."Interest Calculation"::"Open Entries":
          BEGIN
            CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
            CustLedgEntry.SETRANGE("Customer No.",FinChrgMemoHeader."Customer No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
          END;
        FinChrgTerms."Interest Calculation"::"Closed Entries",
        FinChrgTerms."Interest Calculation"::"All Entries":
          BEGIN
            CustLedgEntry.SETCURRENTKEY("Customer No.");
            CustLedgEntry.SETRANGE("Customer No.",FinChrgMemoHeader."Customer No.");
          END;
      END;
    END;

    LOCAL PROCEDURE LookupCustLedgEntry@12();
    BEGIN
      GetFinChrgMemoHeader;
      CASE FinChrgTerms."Interest Calculation" OF
        FinChrgTerms."Interest Calculation"::"Open Entries":
          IF PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK THEN
            VALIDATE("Entry No.",CustLedgEntry."Entry No.");
        FinChrgTerms."Interest Calculation"::"Closed Entries",
        FinChrgTerms."Interest Calculation"::"All Entries":
          IF PAGE.RUNMODAL(PAGE::"Customer Ledger Entries",CustLedgEntry) = ACTION::LookupOK THEN
            VALIDATE("Entry No.",CustLedgEntry."Entry No.");
      END;
    END;

    LOCAL PROCEDURE GetFinChrgMemoHeader@2();
    BEGIN
      IF "Finance Charge Memo No." <> FinChrgMemoHeader."No." THEN BEGIN
        FinChrgMemoHeader.GET("Finance Charge Memo No.");
        ProcessFinChrgMemoHeader;
      END;
    END;

    [External]
    PROCEDURE SetFinChrgMemoHeader@4(VAR NewFinChrgMemoHeader@1000 : Record 302);
    BEGIN
      FinChrgMemoHeader := NewFinChrgMemoHeader;
      ProcessFinChrgMemoHeader;
    END;

    LOCAL PROCEDURE ProcessFinChrgMemoHeader@1();
    BEGIN
      FinChrgMemoHeader.TESTFIELD("Customer No.");
      FinChrgMemoHeader.TESTFIELD("Document Date");
      FinChrgMemoHeader.TESTFIELD("Customer Posting Group");
      FinChrgMemoHeader.TESTFIELD("Fin. Charge Terms Code");
      FinChrgTerms.GET(FinChrgMemoHeader."Fin. Charge Terms Code");
      IF FinChrgMemoHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(FinChrgMemoHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    [External]
    PROCEDURE GetCurrencyCode@10() : Code[10];
    VAR
      FinChrgMemoHeader@1000 : Record 302;
    BEGIN
      IF "Finance Charge Memo No." = FinChrgMemoHeader."No." THEN
        EXIT(FinChrgMemoHeader."Currency Code");

      IF FinChrgMemoHeader.GET("Finance Charge Memo No.") THEN
        EXIT(FinChrgMemoHeader."Currency Code");

      EXIT('');
    END;

    [External]
    PROCEDURE CalcClosedatDate@3() ClosedatDate : Date;
    BEGIN
      IF CustLedgEntry2.GET(CustLedgEntry."Closed by Entry No.") THEN
        IF CustLedgEntry2."Document Date" > CustLedgEntry."Closed at Date" THEN
          ClosedatDate := CustLedgEntry2."Document Date"
        ELSE
          ClosedatDate := CustLedgEntry."Closed at Date";
      CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
      CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
      IF CustLedgEntry2.FIND('-') THEN
        REPEAT
          IF CustLedgEntry2."Document Date" > CustLedgEntry."Closed at Date" THEN
            ClosedatDate := CustLedgEntry2."Document Date"
          ELSE
            ClosedatDate := CustLedgEntry."Closed at Date";
        UNTIL CustLedgEntry2.NEXT = 0;
    END;

    PROCEDURE SetCheckingMode@18(DoChecking@1000 : Boolean);
    BEGIN
      Checking := DoChecking;
    END;

    LOCAL PROCEDURE BuildDescription@15(VAR Descr@1003 : Text;InterestRate@1002 : Decimal;DueDate@1001 : Date;NrOfDays@1000 : Integer;BaseAmount@1004 : Decimal);
    BEGIN
      DocTypeText := DELCHR(FORMAT("Document Type"),'<');
      IF DocTypeText = '' THEN
        DocTypeText := Text002;
      IF FinChrgTerms."Line Description" = '' THEN
        Descr := COPYSTR(CustLedgEntry.Description,1,MAXSTRLEN(Description))
      ELSE
        Descr :=
          COPYSTR(
            STRSUBSTNO(
              FinChrgTerms."Line Description",
              CustLedgEntry.Description,
              DocTypeText,
              "Document No.",
              InterestRate,
              FORMAT("Original Amount",0,AutoFormatManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              FORMAT(BaseAmount,0,AutoFormatManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              DueDate,
              FinChrgMemoHeader."Currency Code",
              NrOfDays),
            1,
            MAXSTRLEN(Description));
    END;

    LOCAL PROCEDURE BuildMultiDescription@16(VAR Descr@1002 : Text;DueDate@1001 : Date;NrOfDays@1000 : Integer);
    BEGIN
      DocTypeText := DELCHR(FORMAT("Document Type"),'<');
      IF DocTypeText = '' THEN
        DocTypeText := Text002;
      IF FinChrgTerms.Description = '' THEN
        Descr := COPYSTR(CustLedgEntry.Description,1,MAXSTRLEN(Description))
      ELSE
        Descr :=
          COPYSTR(
            STRSUBSTNO(
              FinChrgTerms."Detailed Lines Description",
              CustLedgEntry.Description,
              DocTypeText,
              "Document No.",
              FORMAT("Original Amount",0,AutoFormatManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              FORMAT("Remaining Amount",0,AutoFormatManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              DueDate,
              FinChrgMemoHeader."Currency Code",
              NrOfDays),
            1,
            MAXSTRLEN(Description));
    END;

    LOCAL PROCEDURE CumulateDetailedEntries@7(VAR CumAmount@1007 : Decimal;UseDueDate@1006 : Date;UseCalcDate@1005 : Date;UseInterestRate@1004 : Decimal;UseInterestPeriod@1003 : Integer;VAR BaseAmount@1002 : Decimal);
    VAR
      DetailedCustLedgEntry@1009 : Record 379;
      IssuedReminderHeader@1008 : Record 297;
      InterestStartDate@1001 : Date;
      LineFee@1000 : Decimal;
    BEGIN
      CalcInterest := TRUE;
      IF CustLedgEntry."Calculate Interest" THEN BEGIN
        ClosedatDate := CalcClosedatDate;
        IF ClosedatDate <= CALCDATE(FinChrgTerms."Grace Period","Due Date") THEN
          CalcInterest := FALSE;
      END;
      DetailedCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
      DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DetailedCustLedgEntry.SETFILTER("Entry Type",'%1|%2|%3|%4|%5',
        DetailedCustLedgEntry."Entry Type"::"Initial Entry",
        DetailedCustLedgEntry."Entry Type"::Application,
        DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)");
      DetailedCustLedgEntry.SETRANGE("Posting Date",0D,FinChrgMemoHeader."Document Date");
      CumAmount := 0;
      IF DetailedCustLedgEntry.FINDSET THEN
        REPEAT
          IF DetailedCustLedgEntry."Entry Type" = DetailedCustLedgEntry."Entry Type"::"Initial Entry" THEN
            InterestStartDate := UseDueDate
          ELSE
            IF UseDueDate < DetailedCustLedgEntry."Posting Date" THEN
              InterestStartDate := DetailedCustLedgEntry."Posting Date";
          IF InterestCalcDate > InterestStartDate THEN
            InterestStartDate := InterestCalcDate;
          IF InterestStartDate < UseCalcDate THEN
            CumAmount := CumAmount + (DetailedCustLedgEntry.Amount * (UseCalcDate - InterestStartDate));
        UNTIL DetailedCustLedgEntry.NEXT = 0;

      IF NOT FinChrgTerms."Add. Line Fee in Interest" THEN
        IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Reminder THEN
          IF IssuedReminderHeader.GET(CustLedgEntry."Document No.") THEN BEGIN
            IssuedReminderHeader.CALCFIELDS("Add. Fee per Line");
            LineFee := IssuedReminderHeader."Add. Fee per Line" + IssuedReminderHeader.CalculateLineFeeVATAmount;
            CumAmount := CumAmount - LineFee * (FinChrgMemoHeader."Document Date" - InterestStartDate);
            IF CumAmount < 0 THEN
              CumAmount := 0;
          END;

      BaseAmount := CumAmount / UseInterestPeriod;
      IF CalcInterest THEN
        CumAmount := ROUND(CumAmount / UseInterestPeriod * UseInterestRate / 100,Currency."Amount Rounding Precision")
      ELSE
        CumAmount := 0;
    END;

    PROCEDURE LookupDocNo@14();
    BEGIN
      IF Type <> Type::"Customer Ledger Entry" THEN
        EXIT;
      SetCustLedgEntryView;
      IF "Document Type" <> 0 THEN
        CustLedgEntry.SETRANGE("Document Type","Document Type");
      IF "Document No." <> '' THEN
        CustLedgEntry.SETRANGE("Document No.","Document No.");
      IF CustLedgEntry.FINDFIRST THEN;
      CustLedgEntry.SETRANGE("Document Type");
      CustLedgEntry.SETRANGE("Document No.");
      LookupCustLedgEntry;
    END;

    LOCAL PROCEDURE CalcFinanceChargeInterestRate@17(VAR FinanceChargeInterestRate@1003 : Record 572;VAR UseDueDate@1000 : Date;VAR UseInterestRate@1001 : Decimal;VAR UseCalcDate@1002 : Date);
    VAR
      LastRateFound@1004 : Boolean;
    BEGIN
      UseDueDate := CustLedgEntry."Due Date";
      UseInterestRate := FinChrgTerms."Interest Rate";
      UseCalcDate := 0D;
      NrOfLinesToInsert := 0;

      FinanceChargeInterestRate.INIT;
      FinanceChargeInterestRate.SETRANGE("Fin. Charge Terms Code",FinChrgMemoHeader."Fin. Charge Terms Code");
      FinanceChargeInterestRate."Fin. Charge Terms Code" := FinChrgMemoHeader."Fin. Charge Terms Code";
      IF FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance" THEN
        FinanceChargeInterestRate."Start Date" := CALCDATE('<+1D>',CustLedgEntry."Due Date")
      ELSE
        FinanceChargeInterestRate."Start Date" := FinChrgMemoHeader."Document Date";
      NrOfLinesToInsert := 0;
      NrOfLines := 0;
      LastRateFound := FALSE;
      IF FinanceChargeInterestRate.FIND('=<') THEN BEGIN
        UseInterestRate := FinanceChargeInterestRate."Interest Rate";
        IF FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance" THEN
          REPEAT
            IF FinanceChargeInterestRate."Start Date" <= FinChrgMemoHeader."Document Date" THEN BEGIN
              NrOfLines := NrOfLines + 1;
              UseInterestRate := FinanceChargeInterestRate."Interest Rate";
              IF CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" THEN
                NrOfLinesToInsert := NrOfLinesToInsert + 1
            END ELSE
              LastRateFound := TRUE;
          UNTIL LastRateFound OR (FinanceChargeInterestRate.NEXT = 0);
        IF UseCalcDate = 0D THEN BEGIN
          FinanceChargeInterestRate.NEXT(-1);
          UseCalcDate := FinanceChargeInterestRate."Start Date";
        END;
      END ELSE
        IF FinanceChargeInterestRate.COUNT > 0 THEN
          ERROR(InvalidInterestRateDateErr,FinanceChargeInterestRate."Start Date");
      IF (UseCalcDate = 0D) OR (UseCalcDate < FinChrgMemoHeader."Document Date") THEN
        UseCalcDate := FinChrgMemoHeader."Document Date";

      "Interest Rate" := UseInterestRate;
    END;

    LOCAL PROCEDURE CreateMulitplyInterestRateEntries@19(VAR ExtraFinChrgMemoLine@1000 : Record 303;VAR FinanceChargeInterestRate@1003 : Record 572;VAR UseDueDate@1006 : Date;VAR UseCalcDate@1005 : Date;VAR UseInterestRate@1004 : Decimal;VAR BaseAmount@1009 : Decimal;VAR CumAmount@1010 : Decimal) InsertedLines : Boolean;
    VAR
      LineSpacing@1001 : Integer;
      NextLineNo@1002 : Integer;
      CurrInterestRateStartDate@1007 : Date;
      UseInterestPeriod@1008 : Integer;
    BEGIN
      NrOfDays := 0;
      ExtraFinChrgMemoLine.RESET;
      ExtraFinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      ExtraFinChrgMemoLine := Rec;
      IF ExtraFinChrgMemoLine.FIND('>') THEN BEGIN
        LineSpacing :=
          (ExtraFinChrgMemoLine."Line No." - "Line No.") DIV (1 + NrOfLinesToInsert);
        IF LineSpacing = 0 THEN
          ERROR(NotEnoughSpaceToInsertErr);
      END ELSE
        LineSpacing := 10000;
      NextLineNo := "Line No." + LineSpacing;
      FinanceChargeInterestRate.INIT;
      FinanceChargeInterestRate.SETRANGE("Fin. Charge Terms Code",FinChrgMemoHeader."Fin. Charge Terms Code");
      FinanceChargeInterestRate."Fin. Charge Terms Code" := FinChrgMemoHeader."Fin. Charge Terms Code";
      FinanceChargeInterestRate."Start Date" := CALCDATE('<+1D>',CustLedgEntry."Due Date");
      IF FinanceChargeInterestRate.FIND('=<') THEN BEGIN
        REPEAT
          CalcInterest := FALSE;
          FinanceChargeInterestRate.TESTFIELD("Interest Period (Days)");
          UseDueDate := CALCDATE('<-1D>',FinanceChargeInterestRate."Start Date");
          CurrInterestRateStartDate := FinanceChargeInterestRate."Start Date";
          UseInterestRate := FinanceChargeInterestRate."Interest Rate";
          UseInterestPeriod := FinanceChargeInterestRate."Interest Period (Days)";
          IF FinanceChargeInterestRate.NEXT <> 0 THEN BEGIN
            IF FinanceChargeInterestRate."Start Date" <= FinChrgMemoHeader."Document Date" THEN
              UseCalcDate := CALCDATE('<-1D>',FinanceChargeInterestRate."Start Date")
            ELSE
              UseCalcDate := FinChrgMemoHeader."Document Date";
          END ELSE
            UseCalcDate := FinChrgMemoHeader."Document Date";
          IF (CustLedgEntry."Closed at Date" <> 0D) AND (UseCalcDate > CustLedgEntry."Closed at Date") THEN
            UseCalcDate := CustLedgEntry."Closed at Date";
          ExtraFinChrgMemoLine := Rec;
          ExtraFinChrgMemoLine."Line No." := NextLineNo;
          ExtraFinChrgMemoLine."Due Date" := CALCDATE('<+1D>',InterestCalcDate);
          IF CurrInterestRateStartDate > ExtraFinChrgMemoLine."Due Date" THEN
            ExtraFinChrgMemoLine."Due Date" := CurrInterestRateStartDate;
          ExtraFinChrgMemoLine."Interest Rate" := UseInterestRate;
          IF InterestCalcDate < UseCalcDate THEN BEGIN
            CumulateDetailedEntries(ExtraFinChrgMemoLine.Amount,UseDueDate,UseCalcDate,
              UseInterestRate,UseInterestPeriod,BaseAmount);
            IF ExtraFinChrgMemoLine.Amount <> 0 THEN BEGIN
              NrOfDays := NrOfDays + (UseCalcDate - UseDueDate);
              BuildDescription(ExtraFinChrgMemoLine.Description,UseInterestRate,UseDueDate,UseCalcDate - UseDueDate,BaseAmount);
              CumAmount := CumAmount + ExtraFinChrgMemoLine.Amount;
              ExtraFinChrgMemoLine."Detailed Interest Rates Entry" := TRUE;
              IF NOT Checking THEN
                ExtraFinChrgMemoLine.INSERT;
              InsertedLines := TRUE;
              NextLineNo := ExtraFinChrgMemoLine."Line No." + LineSpacing;
            END;
          END;
          NrOfLinesToInsert := NrOfLinesToInsert - 1;
        UNTIL NrOfLinesToInsert = 0;
        VALIDATE(Amount,CumAmount);
      END;
    END;

    [Integration]
    PROCEDURE OnAfterCalcFinCharge@13(VAR FinanceChargeMemoLine@1000 : Record 303);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeCalcFinCharge@11(VAR FinanceChargeMemoLine@1000 : Record 303);
    BEGIN
    END;

    BEGIN
    END.
  }
}

