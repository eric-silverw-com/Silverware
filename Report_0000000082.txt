OBJECT Report 82 Export Budget to Excel
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:48 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Budget to Excel;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Export Budget to Excel",'',ColumnDim,Text000);
                END;

  }
  DATASET
  {
    { 3459;    ;DataItem;                    ;
               DataItemTable=Table96;
               DataItemTableView=SORTING(Budget Name,G/L Account No.,Business Unit Code,Global Dimension 1 Code,Global Dimension 2 Code,Budget Dimension 1 Code,Budget Dimension 2 Code,Budget Dimension 3 Code,Budget Dimension 4 Code,Date);
               OnPreDataItem=VAR
                               BusUnit@1000 : Record 220;
                               DimensionValue@1001 : Record 349;
                             BEGIN
                               IF GETRANGEMIN("Budget Name") <> GETRANGEMAX("Budget Name") THEN
                                 ERROR(Text001);

                               IF (StartDate = 0D) OR
                                  (NoOfPeriods = 0) OR
                                  (FORMAT(PeriodLength) = '')
                               THEN
                                 ERROR(Text002);

                               SelectedDim.RESET;
                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Export Budget to Excel");
                               i := 0;
                               IF BusUnit.FINDFIRST THEN BEGIN
                                 i := i + 1;
                                 BusUnitDimIndex := i;
                                 BusUnitDimCode := COPYSTR(UPPERCASE(BusUnit.TABLECAPTION),1,MAXSTRLEN(ColumnDimCode[1]));
                                 ColumnDimCode[BusUnitDimIndex] := BusUnitDimCode;
                               END;
                               IF SelectedDim.FIND('-') THEN
                                 REPEAT
                                   DimensionValue.SETRANGE("Dimension Code",SelectedDim."Dimension Code");
                                   IF NOT DimensionValue.ISEMPTY THEN BEGIN
                                     i := i + 1;
                                     IF i > ARRAYLEN(ColumnDimCode) THEN
                                       ERROR(Text003,ARRAYLEN(ColumnDimCode));
                                     ColumnDimCode[i] := SelectedDim."Dimension Code";
                                   END;
                                 UNTIL (SelectedDim.NEXT = 0) OR (i = 8);
                               NoOfDimensions := i;

                               FOR i := 1 TO NoOfPeriods DO BEGIN
                                 IF i = 1 THEN
                                   TempPeriod."Period Start" := StartDate
                                 ELSE
                                   TempPeriod."Period Start" := CALCDATE(PeriodLength,TempPeriod."Period Start");
                                 TempPeriod."Period End" := CALCDATE(PeriodLength,TempPeriod."Period Start");
                                 TempPeriod."Period End" := CALCDATE('<-1D>',TempPeriod."Period End");
                                 TempPeriod."Period No." := i;
                                 TempPeriod.INSERT;
                               END;

                               SETRANGE(Date,StartDate,TempPeriod."Period End");
                               TempBudgetBuf2.DELETEALL;
                               ExcelBuf.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(TempBudgetBuf1);
                                  TempBudgetBuf1."G/L Account No." := "G/L Account No.";
                                  TempBudgetBuf1."Dimension Value Code 1" := GetDimValueCode(ColumnDimCode[1]);
                                  TempBudgetBuf1."Dimension Value Code 2" := GetDimValueCode(ColumnDimCode[2]);
                                  TempBudgetBuf1."Dimension Value Code 3" := GetDimValueCode(ColumnDimCode[3]);
                                  TempBudgetBuf1."Dimension Value Code 4" := GetDimValueCode(ColumnDimCode[4]);
                                  TempBudgetBuf1."Dimension Value Code 5" := GetDimValueCode(ColumnDimCode[5]);
                                  TempBudgetBuf1."Dimension Value Code 6" := GetDimValueCode(ColumnDimCode[6]);
                                  TempBudgetBuf1."Dimension Value Code 7" := GetDimValueCode(ColumnDimCode[7]);
                                  TempBudgetBuf1."Dimension Value Code 8" := GetDimValueCode(ColumnDimCode[8]);
                                  TempBudgetBuf1.Date := CalcPeriodStart(Date);
                                  TempBudgetBuf1.Amount := Amount;

                                  TempBudgetBuf2 := TempBudgetBuf1;
                                  IF TempBudgetBuf2.FIND THEN BEGIN
                                    TempBudgetBuf2.Amount :=
                                      TempBudgetBuf2.Amount + TempBudgetBuf1.Amount;
                                    TempBudgetBuf2.MODIFY;
                                  END ELSE
                                    TempBudgetBuf2.INSERT;
                                END;

               OnPostDataItem=VAR
                                DimValue@1004 : Record 349;
                                BusUnit@1007 : Record 220;
                                Window@1000 : Dialog;
                                RecNo@1001 : Integer;
                                TotalRecNo@1002 : Integer;
                                Continue@1003 : Boolean;
                                LastBudgetRowNo@1005 : Integer;
                                DimensionRange@1006 : ARRAY [2,8] OF Integer;
                              BEGIN
                                Window.OPEN(
                                  Text005 +
                                  '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
                                Window.UPDATE(1,0);
                                TotalRecNo := GLAcc.COUNT;
                                RecNo := 0;

                                RowNo := 1;
                                EnterCell(RowNo,1,Text006,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
                                EnterCell(RowNo,2,'',FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
                                EnterFilterInCell(GETFILTER("Budget Name"),FIELDCAPTION("Budget Name"));

                                GLSetup.GET;
                                EnterFilterInCell(GETFILTER("Business Unit Code"),FIELDCAPTION("Business Unit Code"));
                                EnterDimFilter(GLSetup."Global Dimension 1 Code",GETFILTER("Global Dimension 1 Code"));
                                EnterDimFilter(GLSetup."Global Dimension 2 Code",GETFILTER("Global Dimension 2 Code"));
                                GLBudgetName.GET(GETFILTER("Budget Name"));
                                EnterDimFilter(GLBudgetName."Budget Dimension 1 Code",GETFILTER("Budget Dimension 1 Code"));
                                EnterDimFilter(GLBudgetName."Budget Dimension 2 Code",GETFILTER("Budget Dimension 2 Code"));
                                EnterDimFilter(GLBudgetName."Budget Dimension 3 Code",GETFILTER("Budget Dimension 3 Code"));
                                EnterDimFilter(GLBudgetName."Budget Dimension 4 Code",GETFILTER("Budget Dimension 4 Code"));
                                OnAfterEnterDimFilter("G/L Budget Entry",ExcelBuf,RowNo);

                                RowNo := RowNo + 2;
                                HeaderRowNo := RowNo;
                                EnterCell(HeaderRowNo,1,FIELDCAPTION("G/L Account No."),FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
                                EnterCell(HeaderRowNo,2,GLAcc.FIELDCAPTION(Name),FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
                                i := 0;
                                ColNo := 2;
                                Continue := TRUE;
                                WHILE Continue DO BEGIN
                                  i := i + 1;
                                  IF i > 8 THEN
                                    Continue := FALSE
                                  ELSE
                                    IF ColumnDimCode[i] = '' THEN
                                      Continue := FALSE;
                                  IF Continue THEN BEGIN
                                    ColNo := ColNo + 1;
                                    IF i = BusUnitDimIndex THEN
                                      EnterCell(HeaderRowNo,ColNo,BusUnit.TABLECAPTION,FALSE,TRUE,'',ExcelBuf."Cell Type"::Text)
                                    ELSE BEGIN
                                      Dim.GET(ColumnDimCode[i]);
                                      EnterCell(HeaderRowNo,ColNo,Dim."Code Caption",FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
                                    END;
                                  END;
                                END;
                                IF TempPeriod.FIND('-') THEN
                                  REPEAT
                                    ColNo := ColNo + 1;
                                    EnterCell(HeaderRowNo,ColNo,FORMAT(TempPeriod."Period Start"),FALSE,TRUE,'',ExcelBuf."Cell Type"::Date);
                                  UNTIL TempPeriod.NEXT = 0;

                                COPYFILTER("G/L Account No.",GLAcc."No.");
                                OnAfterCopyFilterGLAccount(GLAcc);
                                IF GLAcc.FIND('-') THEN
                                  REPEAT
                                    RecNo := RecNo + 1;
                                    Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                    RowNo := RowNo + 1;
                                    EnterCell(
                                      RowNo,2,COPYSTR(COPYSTR(PADSTR(' ',100),1,2 * GLAcc.Indentation + 1) + GLAcc.Name,2),
                                      GLAcc."Account Type" <> GLAcc."Account Type"::Posting,FALSE,'',ExcelBuf."Cell Type"::Text);
                                    EnterCell(
                                      RowNo,1,GLAcc."No.",GLAcc."Account Type" <> GLAcc."Account Type"::Posting,FALSE,'',ExcelBuf."Cell Type"::Text);
                                    IF (GLAcc.Totaling = '') OR (NOT IncludeTotalingFormulas) THEN BEGIN
                                      TempBudgetBuf2.SETRANGE("G/L Account No.",GLAcc."No.");
                                      IF TempBudgetBuf2.FIND('-') THEN BEGIN
                                        TempBudgetBuf1 := TempBudgetBuf2;
                                        EnterDimValues;
                                        IF TempPeriod.FIND('-') THEN;
                                        REPEAT
                                          IF IsDimDifferent(TempBudgetBuf1,TempBudgetBuf2) THEN BEGIN
                                            RowNo := RowNo + 1;
                                            EnterCell(
                                              RowNo,1,GLAcc."No.",GLAcc."Account Type" <> GLAcc."Account Type"::Posting,FALSE,'',ExcelBuf."Cell Type"::Text);
                                            EnterDimValues;
                                            TempBudgetBuf1 := TempBudgetBuf2;
                                          END;
                                          TempPeriod.GET(0,TempBudgetBuf2.Date);
                                          EnterCell(
                                            RowNo,NoOfDimensions + 2 + TempPeriod."Period No.",
                                            MatrixMgt.FormatValue(TempBudgetBuf2.Amount,RoundingFactor,FALSE),
                                            GLAcc."Account Type" <> GLAcc."Account Type"::Posting,
                                            FALSE,'',ExcelBuf."Cell Type"::Number);
                                          TempPeriod.NEXT;
                                        UNTIL TempBudgetBuf2.NEXT = 0;
                                      END ELSE BEGIN
                                        CLEAR(TempBudgetBuf2);
                                        EnterDimValues;
                                      END;
                                    END ELSE
                                      IF TempPeriod.FIND('-') THEN BEGIN
                                        REPEAT
                                          EnterFormula(
                                            RowNo,
                                            NoOfDimensions + 2 + TempPeriod."Period No.",
                                            GLAcc.Totaling,
                                            GLAcc."Account Type" <> GLAcc."Account Type"::Posting,
                                            FALSE,
                                            '#,##0.00');
                                        UNTIL TempPeriod.NEXT = 0;
                                      END;
                                  UNTIL GLAcc.NEXT = 0;
                                IF IncludeTotalingFormulas THEN
                                  HasFormulaError := ExcelBuf.ExportBudgetFilterToFormula(ExcelBuf);
                                Window.CLOSE;
                                LastBudgetRowNo := RowNo;

                                EnterRangeOfValues(DimensionRange,BusUnit,DimValue);
                                IF HasFormulaError THEN
                                  IF NOT CONFIRM(STRSUBSTNO(Text007,ExcelBuf.GetExcelReference(7))) THEN
                                    CurrReport.BREAK;

                                ExcelBuf.CreateBook(ServerFileName,ExcelBuf.GetExcelReference(10));
                                ExcelBuf.SetCurrent(HeaderRowNo + 1,1);
                                ExcelBuf.StartRange;
                                ExcelBuf.SetCurrent(LastBudgetRowNo,1);
                                ExcelBuf.EndRange;
                                ExcelBuf.CreateRange(ExcelBuf.GetExcelReference(8));
                                IF TempPeriod.FIND('-') THEN BEGIN
                                  REPEAT
                                    ExcelBuf.SetCurrent(HeaderRowNo + 1,NoOfDimensions + 2 + TempPeriod."Period No.");
                                    ExcelBuf.StartRange;
                                    ExcelBuf.SetCurrent(LastBudgetRowNo,NoOfDimensions + 2 + TempPeriod."Period No.");
                                    ExcelBuf.EndRange;
                                    ExcelBuf.CreateRange(ExcelBuf.GetExcelReference(9) + '_' + FORMAT(TempPeriod."Period No."));
                                  UNTIL TempPeriod.NEXT = 0;
                                END;

                                FOR i := 1 TO NoOfDimensions DO BEGIN
                                  ExcelBuf.SetCurrent(HeaderRowNo + 1,i + 2);
                                  ExcelBuf.StartRange;
                                  ExcelBuf.SetCurrent(LastBudgetRowNo,i + 2);
                                  ExcelBuf.EndRange;
                                  ExcelBuf.CreateRange('NAV_DIM' + FORMAT(i));
                                  ExcelBuf.SetCurrent(DimensionRange[1,i],1);
                                  ExcelBuf.StartRange;
                                  ExcelBuf.SetCurrent(DimensionRange[2,i],1);
                                  ExcelBuf.EndRange;
                                  ExcelBuf.CreateValidationRule('NAV_DIM' + FORMAT(i));
                                END;

                                ExcelBuf.WriteSheet(
                                  PADSTR(STRSUBSTNO('%1 %2',GLBudgetName.Name,GLBudgetName.Description),30),
                                  COMPANYNAME,
                                  USERID);

                                ExcelBuf.CloseBook;
                                IF NOT TestMode THEN BEGIN
                                  ExcelBuf.SetFriendlyFilename(STRSUBSTNO('%1-%2',GLBudgetName.Name,GLBudgetName.Description));
                                  ExcelBuf.OpenExcel;
                                END;
                              END;

               ReqFilterFields=Budget Name,Business Unit Code,G/L Account No.,Global Dimension 1 Code,Global Dimension 2 Code,Budget Dimension 1 Code,Budget Dimension 2 Code,Budget Dimension 3 Code,Budget Dimension 4 Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   ColumnDim := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Export Budget to Excel",'');
                   IF StartDate = 0D THEN
                     StartDate := CALCDATE('<-CY+1D>',WORKDATE);
                   IF (FORMAT(PeriodLength) = '') OR (FORMAT(PeriodLength) = '0D') THEN
                     EVALUATE(PeriodLength,'<1M>');
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=StartDate;
                  CaptionML=ENU=Start Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=StartDate }

      { 5   ;2   ;Field     ;
                  Name=NoOfPeriods;
                  CaptionML=ENU=No. of Periods;
                  ToolTipML=ENU=Specifies how many accounting periods to include.;
                  ApplicationArea=#Suite;
                  SourceExpr=NoOfPeriods }

      { 3   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  ApplicationArea=#Suite;
                  SourceExpr=PeriodLength }

      { 7   ;2   ;Field     ;
                  Name=ColumnDimensions;
                  CaptionML=ENU=Column Dimensions;
                  ToolTipML=ENU=Specifies dimensions that apply to the columns.;
                  ApplicationArea=#Dimensions;
                  SourceExpr=ColumnDim;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Export Budget to Excel",ColumnDim);
                               END;
                                }

      { 10  ;2   ;Field     ;
                  Name=IncludeTotalingFormulas;
                  CaptionML=ENU=Include Totaling Formulas;
                  ToolTipML=ENU=Specifies if you want sum formulas to be created in Excel based on the totaling fields used in the Chart of Accounts window and for dimension values.;
                  ApplicationArea=#Dimensions;
                  SourceExpr=IncludeTotalingFormulas }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Column Dimensions';
      Text001@1001 : TextConst 'ENU=You can only export one budget at a time.';
      Text002@1002 : TextConst 'ENU=You must specify a Start Date, No. of Periods, and a Period Length.';
      Text003@1003 : TextConst 'ENU=You can only select a maximum of %1 column dimensions.';
      Text005@1004 : TextConst 'ENU=Analyzing Data...\\';
      Text006@1005 : TextConst 'ENU=Export Filters';
      Text007@1006 : TextConst 'ENU=Some filters cannot be converted into Excel formulas. You will have to check %1 errors in the Excel worksheet. Do you want to create the Excel worksheet?';
      TempPeriod@1007 : TEMPORARY Record 2000000007;
      SelectedDim@1009 : Record 369;
      TempBudgetBuf1@1010 : TEMPORARY Record 371;
      TempBudgetBuf2@1011 : TEMPORARY Record 371;
      DimSetEntry@1012 : Record 480;
      GLSetup@1013 : Record 98;
      Dim@1014 : Record 348;
      GLBudgetName@1015 : Record 95;
      ExcelBuf@1016 : TEMPORARY Record 370;
      GLAcc@1017 : Record 15;
      DimSelectionBuf@1018 : Record 368;
      MatrixMgt@1033 : Codeunit 9200;
      StartDate@1019 : Date;
      PeriodLength@1020 : DateFormula;
      NoOfPeriods@1021 : Integer;
      NoOfDimensions@1022 : Integer;
      i@1023 : Integer;
      RowNo@1024 : Integer;
      ColNo@1025 : Integer;
      ServerFileName@1034 : Text;
      ColumnDim@1026 : Text[250];
      ColumnDimCode@1027 : ARRAY [8] OF Code[20];
      HasFormulaError@1028 : Boolean;
      IncludeTotalingFormulas@1029 : Boolean;
      RoundingFactor@1032 : 'None,1,1000,1000000';
      HeaderRowNo@1030 : Integer;
      BusUnitDimIndex@1008 : Integer;
      BusUnitDimCode@1031 : Code[20];
      TestMode@1035 : Boolean;

    LOCAL PROCEDURE CalcPeriodStart@1(EntryDate@1000 : Date) : Date;
    BEGIN
      TempPeriod."Period Start" := EntryDate;
      TempPeriod.FIND('=<');
      EXIT(TempPeriod."Period Start");
    END;

    LOCAL PROCEDURE GetDimValueCode@2(DimCode@1000 : Code[20]) : Code[20];
    BEGIN
      IF DimCode = '' THEN
        EXIT('');
      IF DimCode = BusUnitDimCode THEN
        EXIT("G/L Budget Entry"."Business Unit Code");
      DimSetEntry.SETRANGE("Dimension Set ID","G/L Budget Entry"."Dimension Set ID");
      DimSetEntry.SETRANGE("Dimension Code",DimCode);
      IF DimSetEntry.FINDFIRST THEN
        EXIT(DimSetEntry."Dimension Value Code");
      EXIT('');
    END;

    LOCAL PROCEDURE EnterCell@3(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;UnderLine@1004 : Boolean;NumberFormat@1005 : Text[30];CellType@1006 : Option);
    BEGIN
      ExcelBuf.INIT;
      ExcelBuf.VALIDATE("Row No.",RowNo);
      ExcelBuf.VALIDATE("Column No.",ColumnNo);
      ExcelBuf."Cell Value as Text" := CellValue;
      ExcelBuf.Formula := '';
      ExcelBuf.Bold := Bold;
      ExcelBuf.Underline := UnderLine;
      ExcelBuf.NumberFormat := NumberFormat;
      ExcelBuf."Cell Type" := CellType;
      ExcelBuf.INSERT;
    END;

    LOCAL PROCEDURE EnterFilterInCell@5(Filter@1000 : Text;FieldName@1001 : Text[100]);
    BEGIN
      IF Filter <> '' THEN BEGIN
        RowNo := RowNo + 1;
        EnterCell(RowNo,1,FieldName,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
        EnterCell(RowNo,2,COPYSTR(Filter,1,250),FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      END;
    END;

    LOCAL PROCEDURE EnterDimValue@7(ColDimIndex@1000 : Integer;DimValueCode@1001 : Code[20]);
    VAR
      DimFilter@1002 : Text;
    BEGIN
      IF ColumnDimCode[ColDimIndex] <> '' THEN BEGIN
        ColNo := ColNo + 1;
        IF (DimValueCode = '') AND (ColDimIndex > BusUnitDimIndex) THEN BEGIN
          DimFilter := GetGLBudgetEntryDimFilter(ColumnDimCode[ColDimIndex]);
          IF GetDimValueCount(ColumnDimCode[ColDimIndex],DimFilter) = 1 THEN
            DimValueCode := COPYSTR(DimFilter,1,MAXSTRLEN(DimValueCode));
        END;
        EnterCell(RowNo,ColNo,DimValueCode,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
      END;
    END;

    LOCAL PROCEDURE EnterDimValues@6();
    BEGIN
      ColNo := 2;
      EnterDimValue(1,TempBudgetBuf2."Dimension Value Code 1");
      EnterDimValue(2,TempBudgetBuf2."Dimension Value Code 2");
      EnterDimValue(3,TempBudgetBuf2."Dimension Value Code 3");
      EnterDimValue(4,TempBudgetBuf2."Dimension Value Code 4");
      EnterDimValue(5,TempBudgetBuf2."Dimension Value Code 5");
      EnterDimValue(6,TempBudgetBuf2."Dimension Value Code 6");
      EnterDimValue(7,TempBudgetBuf2."Dimension Value Code 7");
      EnterDimValue(8,TempBudgetBuf2."Dimension Value Code 8");
    END;

    LOCAL PROCEDURE EnterFormula@8(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1005 : Boolean;UnderLine@1006 : Boolean;NumberFormat@1003 : Text[30]);
    BEGIN
      ExcelBuf.INIT;
      ExcelBuf.VALIDATE("Row No.",RowNo);
      ExcelBuf.VALIDATE("Column No.",ColumnNo);
      ExcelBuf."Cell Value as Text" := '';
      ExcelBuf.Formula := CellValue; // is converted to formula later.
      ExcelBuf.Bold := Bold;
      ExcelBuf.Underline := UnderLine;
      ExcelBuf.NumberFormat := NumberFormat;
      ExcelBuf.INSERT;
    END;

    LOCAL PROCEDURE EnterDimFilter@14(DimCode@1000 : Code[20];DimFilter@1001 : Text);
    BEGIN
      IF DimCode <> '' THEN BEGIN
        Dim.GET(DimCode);
        EnterFilterInCell(DimFilter,Dim."Code Caption");
      END;
    END;

    [External]
    PROCEDURE SetParameters@4(NewStartDate@1001 : Date;NewNoOfPeriods@1002 : Integer;NewPeriodLength@1003 : DateFormula;NewRoundingFactor@1000 : 'None,1,1000,1000000');
    BEGIN
      StartDate := NewStartDate;
      NoOfPeriods := NewNoOfPeriods;
      PeriodLength := NewPeriodLength;
      RoundingFactor := NewRoundingFactor;
    END;

    [External]
    PROCEDURE SetFileNameSilent@9(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    [External]
    PROCEDURE SetTestMode@10(NewTestMode@1000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
    END;

    LOCAL PROCEDURE IsDimDifferent@11(BudgetBuf1@1000 : Record 371;BudgetBuf2@1001 : Record 371) : Boolean;
    BEGIN
      EXIT(
        (BudgetBuf1."Dimension Value Code 1" <> BudgetBuf2."Dimension Value Code 1") OR
        (BudgetBuf1."Dimension Value Code 2" <> BudgetBuf2."Dimension Value Code 2") OR
        (BudgetBuf1."Dimension Value Code 3" <> BudgetBuf2."Dimension Value Code 3") OR
        (BudgetBuf1."Dimension Value Code 4" <> BudgetBuf2."Dimension Value Code 4") OR
        (BudgetBuf1."Dimension Value Code 5" <> BudgetBuf2."Dimension Value Code 5") OR
        (BudgetBuf1."Dimension Value Code 6" <> BudgetBuf2."Dimension Value Code 6") OR
        (BudgetBuf1."Dimension Value Code 7" <> BudgetBuf2."Dimension Value Code 7") OR
        (BudgetBuf1."Dimension Value Code 8" <> BudgetBuf2."Dimension Value Code 8"));
    END;

    LOCAL PROCEDURE GetGLBudgetEntryDimFilter@12(DimensionCode@1000 : Code[20]) : Text;
    BEGIN
      IF DimensionCode = '' THEN
        EXIT;

      CASE DimensionCode OF
        GLSetup."Global Dimension 1 Code":
          EXIT("G/L Budget Entry".GETFILTER("Global Dimension 1 Code"));
        GLSetup."Global Dimension 2 Code":
          EXIT("G/L Budget Entry".GETFILTER("Global Dimension 2 Code"));
        GLBudgetName."Budget Dimension 1 Code":
          EXIT("G/L Budget Entry".GETFILTER("Budget Dimension 1 Code"));
        GLBudgetName."Budget Dimension 2 Code":
          EXIT("G/L Budget Entry".GETFILTER("Budget Dimension 2 Code"));
        GLBudgetName."Budget Dimension 3 Code":
          EXIT("G/L Budget Entry".GETFILTER("Budget Dimension 3 Code"));
        GLBudgetName."Budget Dimension 4 Code":
          EXIT("G/L Budget Entry".GETFILTER("Budget Dimension 4 Code"));
      END;
    END;

    LOCAL PROCEDURE GetDimValueCount@15(DimCode@1001 : Code[20];DimFilter@1002 : Text) : Integer;
    VAR
      DimValue@1000 : Record 349;
    BEGIN
      DimValue.SETRANGE("Dimension Code",DimCode);
      DimValue.SETFILTER("Dimension Value Type",'%1|%2',
        DimValue."Dimension Value Type"::Standard,DimValue."Dimension Value Type"::"Begin-Total");
      DimValue.SETFILTER(Code,DimFilter);
      EXIT(DimValue.COUNT);
    END;

    LOCAL PROCEDURE EnterRangeOfValues@16(VAR DimensionRange@1002 : ARRAY [2,8] OF Integer;VAR BusUnit@1000 : Record 220;VAR DimValue@1001 : Record 349);
    VAR
      RecRef@1004 : RecordRef;
      DimFilter@1003 : Text;
    BEGIN
      RowNo := RowNo + 200; // Move way below the budget
      FOR i := 1 TO NoOfDimensions DO
        IF i = BusUnitDimIndex THEN BEGIN
          RecRef.GETTABLE(BusUnit);
          EnterRange(BusUnit,DimensionRange,BusUnit.FIELDNO(Code));
        END ELSE BEGIN
          DimValue.SETRANGE("Dimension Code",ColumnDimCode[i]);
          DimValue.SETFILTER("Dimension Value Type",'%1|%2',
            DimValue."Dimension Value Type"::Standard,DimValue."Dimension Value Type"::"Begin-Total");
          DimFilter := GetGLBudgetEntryDimFilter(ColumnDimCode[i]);
          DimValue.SETRANGE(Code);
          IF DimFilter <> '' THEN
            DimValue.SETFILTER(Code,DimFilter);
          EnterRange(DimValue,DimensionRange,DimValue.FIELDNO(Code));
        END;
    END;

    LOCAL PROCEDURE EnterRange@18(RecVariant@1002 : Variant;VAR DimensionRange@1001 : ARRAY [2,8] OF Integer;FieldID@1000 : Integer);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecRef.GETTABLE(RecVariant);
      IF RecRef.FINDSET THEN BEGIN
        DimensionRange[1,i] := RowNo;
        REPEAT
          FieldRef := RecRef.FIELD(FieldID);
          EnterCell(RowNo,1,FORMAT(FieldRef.VALUE),FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
          RowNo := RowNo + 1;
        UNTIL RecRef.NEXT = 0;
        DimensionRange[2,i] := RowNo - 1;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterEnterDimFilter@13(VAR GLBudgetEntry@1000 : Record 96;VAR ExcelBuffer@1001 : Record 370;VAR RowNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFilterGLAccount@17(VAR GLAccount@1000 : Record 15);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

