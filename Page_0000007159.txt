OBJECT Page 7159 Invt. Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:11:38 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Invt. Analysis by Dimensions;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=CurrentItemAnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 CurrentAnalysisArea := CurrentAnalysisArea::Inventory;

                 GLSetup.GET;

                 ItemAnalysisMgt.AnalysisViewSelection(
                   CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                   Dim1Filter,Dim2Filter,Dim3Filter);

                 IF (NewItemAnalysisCode <> '') AND (NewItemAnalysisCode <> CurrentItemAnalysisViewCode) THEN BEGIN
                   CurrentItemAnalysisViewCode := NewItemAnalysisCode;
                   ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                   ItemAnalysisMgt.SetItemAnalysisView(
                     CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                     Dim1Filter,Dim2Filter,Dim3Filter);
                 END;

                 ItemAnalysisMgt.SetLineAndColDim(
                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                 UpdateFilterFields;

                 FindPeriod('');
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 58      ;1   ;ActionGroup;
                      CaptionML=ENU=&Actions;
                      Image=Action }
      { 59      ;2   ;Action    ;
                      Name=ReverseLinesAndColumns;
                      CaptionML=ENU=Reverse Lines and Columns;
                      ToolTipML=ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                      ApplicationArea=#Dimensions;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ItemAnalysisMgt.ValidateLineDimCode(
                                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 ItemAnalysisMgt.ValidateColumnDimCode(
                                   ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                               END;
                                }
      { 56      ;2   ;Action    ;
                      Name=ExportToExcel;
                      CaptionML=ENU=Export to Excel;
                      ToolTipML=ENU=Export the information in the analysis report to Excel.;
                      ApplicationArea=#Dimensions;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ItemAnalysisViewEntry@1000 : Record 7154;
                                 ItemAnalysisViewToExcel@1001 : Codeunit 7152;
                               BEGIN
                                 ItemAnalysisViewToExcel.SetCommonFilters(
                                   CurrentAnalysisArea,CurrentItemAnalysisViewCode,
                                   ItemAnalysisViewEntry,DateFilter,ItemFilter,Dim1Filter,Dim2Filter,Dim3Filter,LocationFilter);
                                 ItemAnalysisViewEntry.FINDFIRST;
                                 ItemAnalysisViewToExcel.ExportData(
                                   ItemAnalysisViewEntry,ShowColumnName,DateFilter,ItemFilter,BudgetFilter,
                                   Dim1Filter,Dim2Filter,Dim3Filter,ShowActualBudget,LocationFilter,ShowOppositeSign);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the actual analysis report according to the selected filters and options.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1129 : Page 9209;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 MatrixForm.Load(MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,
                                   LineDimOption,ColumnDimOption,RoundingFactor,DateFilter,
                                   ValueType,ItemAnalysisView,CurrentItemAnalysisViewCode,
                                   ItemFilter,LocationFilter,BudgetFilter,Dim1Filter,Dim2Filter,Dim3Filter,ShowOppositeSign);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 1141    ;1   ;Action    ;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                               END;
                                }
      { 1143    ;1   ;Action    ;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 5   ;2   ;Field     ;
                CaptionML=ENU=Analysis View Code;
                ToolTipML=ENU=Specifies the code for the analysis view that the filter belongs to.;
                ApplicationArea=#Dimensions;
                SourceExpr=CurrentItemAnalysisViewCode;
                OnValidate=BEGIN
                             ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                             ItemAnalysisMgt.SetItemAnalysisView(
                               CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                               Dim1Filter,Dim2Filter,Dim3Filter);
                             ItemAnalysisMgt.SetLineAndColDim(
                               ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                             UpdateFilterFields;
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=BEGIN
                           ItemAnalysisMgt.LookupItemAnalysisView(
                             CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                             Dim1Filter,Dim2Filter,Dim3Filter);
                           ItemAnalysisMgt.SetLineAndColDim(
                             ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                           UpdateFilterFields;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Dimensions;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ItemAnalysisMgt.ValidateColumnDimCode(
                                 ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateLineDimCode(
                               ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(LineDimCode,ItemAnalysisView);
                           IF NewCode <> LineDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Dimensions;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ItemAnalysisMgt.ValidateLineDimCode(
                                 ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateColumnDimCode(
                               ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);

                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(ColumnDimCode,ItemAnalysisView);
                           IF NewCode <> ColumnDimCode THEN BEGIN
                             Text := NewCode;
                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 47  ;2   ;Field     ;
                CaptionML=ENU=Show Value As;
                ToolTipML=ENU=Specifies how data is shown in the analysis view.;
                OptionCaptionML=ENU=Sales Amount,Inventory Value,Quantity;
                ApplicationArea=#Dimensions;
                SourceExpr=ValueType }

    { 1907524401;1;Group  ;
                CaptionML=ENU=Filters }

    { 36  ;2   ;Field     ;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Dimensions;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             TextManagement@1000 : Codeunit 41;
                           BEGIN
                             TextManagement.MakeDateFilter(DateFilter);
                             ItemStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;

                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=ENU=Item Filter;
                ToolTipML=ENU=Specifies a filter to specify the items for which values will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Item Filter",ItemFilter);
                             IF ColumnDimOption = ColumnDimOption::Item THEN
                               MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           ItemList@1002 : Page 31;
                         BEGIN
                           ItemList.LOOKUPMODE(TRUE);
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := ItemList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=ENU=Location Filter;
                ToolTipML=ENU=Specifies the filter through which you want to analyze inventory entries.;
                ApplicationArea=#Dimensions;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Location Filter",LocationFilter);
                             IF ColumnDimOption = ColumnDimOption::Location THEN
                               MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           LocationList@1002 : Page 15;
                         BEGIN
                           LocationList.LOOKUPMODE(TRUE);
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := LocationList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 17  ;2   ;Field     ;
                CaptionML=ENU=Budget Filter;
                ToolTipML=ENU=Specifies the budget that information in the matrix is shown for.;
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetFilter;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Budget Filter",BudgetFilter);
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           ItemBudgetName@1000 : Record 7132;
                         BEGIN
                           ItemBudgetName.FILTERGROUP := 2;
                           ItemBudgetName.SETRANGE("Analysis Area",CurrentAnalysisArea);
                           ItemBudgetName.FILTERGROUP := 0;
                           IF PAGE.RUNMODAL(0,ItemBudgetName) = ACTION::LookupOK THEN BEGIN
                             Text := ItemBudgetName.Name;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=ENU=Dimension 1 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 1 for which entries will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=Dim1Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(1,ItemAnalysisView);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Dimension 1 Filter",Dim1Filter);
                             IF ColumnDimOption = ColumnDimOption::"Dimension 1" THEN
                               MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=ENU=Dimension 2 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 2 for which entries will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=Dim2Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(2,ItemAnalysisView);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Dimension 2 Filter",Dim2Filter);
                             IF ColumnDimOption = ColumnDimOption::"Dimension 2" THEN
                               MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=ENU=Dimension 3 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 3 for which entries will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=Dim3Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(3,ItemAnalysisView);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Dimension 3 Filter",Dim3Filter);
                             IF ColumnDimOption = ColumnDimOption::"Dimension 3" THEN
                               MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=ENU=Options }

    { 32  ;2   ;Field     ;
                CaptionML=ENU=Show;
                ToolTipML=ENU=Specifies if the selected value is shown in the window.;
                OptionCaptionML=ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                ApplicationArea=#Dimensions;
                SourceExpr=ShowActualBudget }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#Dimensions;
                SourceExpr=RoundingFactor }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Show Column Name;
                ToolTipML=ENU=Specifies that the names of columns are shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Same);
                           END;
                            }

    { 50  ;2   ;Field     ;
                CaptionML=ENU=Show Opposite Sign;
                ToolTipML=ENU=Specifies whether to show debits as negative amounts (with minus signs) and credits as positive amounts in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes }

    { 1906098301;1;Group  ;
                CaptionML=ENU=Matrix Options }

    { 1138;2   ;Field     ;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Dimensions;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             IF ColumnDimOption = ColumnDimOption::Period THEN
                               MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                           END;
                            }

    { 1140;2   ;Field     ;
                CaptionML=ENU=Column Set;
                ToolTipML=ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                ApplicationArea=#Dimensions;
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecords@1130 : ARRAY [32] OF Record 367;
      GLSetup@1024 : Record 98;
      ItemAnalysisView@1023 : Record 7152;
      ItemStatisticsBuffer@1011 : Record 5821;
      ItemAnalysisMgt@1002 : Codeunit 7153;
      MATRIX_CaptionSet@1131 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1132 : Text;
      FirstColumn@1018 : Text;
      LastColumn@1022 : Text;
      MATRIX_PrimKeyFirstCaption@1136 : Text;
      MATRIX_CurrentNoOfColumns@1137 : Integer;
      MATRIX_Step@1017 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      CurrentAnalysisArea@1001 : 'Sales,Purchase,Inventory';
      CurrentItemAnalysisViewCode@1016 : Code[10];
      ItemFilter@1003 : Code[250];
      LocationFilter@1021 : Code[250];
      BudgetFilter@1026 : Code[250];
      ValueType@1004 : 'Sales Amount,Inventory Value,Sales Quantity';
      ShowActualBudget@1027 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      RoundingFactor@1005 : 'None,1,1000,1000000';
      LineDimOption@1007 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      ColumnDimOption@1006 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      Dim1Filter@1012 : Code[250];
      Dim2Filter@1010 : Code[250];
      Dim3Filter@1009 : Code[250];
      LineDimCode@1020 : Text[30];
      ColumnDimCode@1019 : Text[30];
      DateFilter@1013 : Text[30];
      InternalDateFilter@1014 : Text[30];
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1029 : Boolean;
      ShowOppositeSign@1030 : Boolean;
      Text100@1000 : TextConst 'ENU=Period';
      NewItemAnalysisCode@1028 : Code[10];
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1145(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    VAR
      MATRIX_PeriodRecords@1008 : ARRAY [32] OF Record 2000000007;
      Location@1006 : Record 14;
      Item@1004 : Record 27;
      Customer@1003 : Record 18;
      Vendor@1002 : Record 23;
      MatrixMgt@1001 : Codeunit 9200;
      RecRef@1005 : RecordRef;
      i@1007 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);
      FirstColumn := '';
      LastColumn := '';
      MATRIX_CurrentNoOfColumns := ARRAYLEN(MATRIX_CaptionSet);

      CASE ColumnDimCode OF
        Text100: // Period
          BEGIN
            MatrixMgt.GeneratePeriodMatrixData(MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),ShowColumnName,
              PeriodType,DateFilter,MATRIX_PrimKeyFirstCaption,
              MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            FOR i := 1 TO ARRAYLEN(MATRIX_CaptionSet) DO BEGIN
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            END;
            FirstColumn := FORMAT(MATRIX_PeriodRecords[1]."Period Start");
            LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrentNoOfColumns]."Period End");
          END;
        Location.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            Location.SETFILTER(Code,LocationFilter);
            RecRef.GETTABLE(Location);
            RecRef.SETTABLE(Location);
            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted::Same,ARRAYLEN(MATRIX_CaptionSet),2,
                MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        Item.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            Item.SETFILTER("No.",ItemFilter);
            RecRef.GETTABLE(Item);
            RecRef.SETTABLE(Item);

            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted::Same,ARRAYLEN(MATRIX_CaptionSet),3,
                MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        Customer.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Customer);
            RecRef.SETTABLE(Customer);
            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted::Same,ARRAYLEN(MATRIX_CaptionSet),2,
                MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        Vendor.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Vendor);
            RecRef.SETTABLE(Vendor);
            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted::Same,ARRAYLEN(MATRIX_CaptionSet),2,
                MATRIX_PrimKeyFirstCaption,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        ItemAnalysisView."Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemAnalysisView."Dimension 1 Code",
            Dim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaption,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemAnalysisView."Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemAnalysisView."Dimension 2 Code",
            Dim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaption,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemAnalysisView."Dimension 3 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemAnalysisView."Dimension 3 Code",
            Dim3Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaption,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[3]);
    VAR
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      PeriodFormMgt.FindPeriodOnMatrixPage(
        DateFilter,InternalDateFilter,SearchText,PeriodType,
        (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period));
    END;

    LOCAL PROCEDURE UpdateFilterFields@4();
    VAR
      ItemAnalysisViewFilter@1000 : Record 7153;
    BEGIN
      ItemFilter := ItemAnalysisView."Item Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';

      Dim1FilterEnable := ItemAnalysisView."Dimension 1 Code" <> '';
      Dim2FilterEnable := ItemAnalysisView."Dimension 2 Code" <> '';
      Dim3FilterEnable := ItemAnalysisView."Dimension 3 Code" <> '';

      IF Dim1FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 1 Code")
        THEN
          Dim1Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 2 Code")
        THEN
          Dim2Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 3 Code")
        THEN
          Dim3Filter := ItemAnalysisViewFilter."Dimension Value Filter";
    END;

    [External]
    PROCEDURE SetCurrentAnalysisViewCode@1(NewAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewItemAnalysisCode := NewAnalysisViewCode;
    END;

    BEGIN
    END.
  }
}

