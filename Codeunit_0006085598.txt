OBJECT Codeunit 6085598 SmtpMail Management
{
  OBJECT-PROPERTIES
  {
    Date=07/26/17;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.4.50.01;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=r;
    OnRun=BEGIN
            PromptAndSendEmail;
          END;

  }
  CODE
  {
    VAR
      SMTPErr@1160040001 : TextConst 'ENU=An unknown error occured while sending e-mails.\\Please check the SMTP settings.';
      SMTPServerReturnErr@1160040000 : TextConst 'ENU=An error occured while sending e-mails.\\The SMTP server returned the following error:\\';
      SmtpMailSetup@1001 : Record 409;
      SmtpMail@1000 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=4.50.0.0, Culture=neutral, PublicKeyToken=005df25b46c40152'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.SmtpMail";
      BodyIsHtml@1160040002 : 'Yes,No';
      HtmlStartAdded@1160040003 : Boolean;
      HtmlEndAdded@1160040004 : Boolean;
      SMTPSetupMissingErr@1002 : TextConst 'ENU=You must specify ''%1'' in ''%2''.';
      EMailAddressInvalidErr@1160040005 : TextConst 'ENU=''%1'' is not a valid e-mail address.';
      TestMailTitleTxt@1004 : TextConst 'ENU=Continia Document Capture - SMTP Test Email Message';
      TestMailBodyTxt@1003 : TextConst 'ENU=This message has been generated by user ''%1'' from Microsoft Dynamics NAV for test purposes.<br/><br/><u>Email was sent using the following settings</u><br/>SMTP Server: %2<br/>SMTP Port: %3<br/>Authentication: %4<br>Using Secure Connection: %5';
      TestMailSuccessMsg@1005 : TextConst 'ENU=Test e-mail has been sent to ''%1'' based on your current SMTP settings.\\Please check your e-mail for messages to make sure that the email was delivered successfully.';

    PROCEDURE IsValidEmail@1160040007(EmailAddress@1160040001 : Text[1024]) : Boolean;
    VAR
      RegExMgt@1160040000 : Codeunit 6085585;
    BEGIN
      IF EmailAddress = '' THEN
        EXIT(FALSE);

      EXIT(UPPERCASE(EmailAddress) = UPPERCASE(RegExMgt.MatchValue(EmailAddress,'\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b',FALSE)));
    END;

    PROCEDURE AddAttachment@161024013(Filename@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.AddAttachment(Filename);
    END;

    PROCEDURE AddTo@161024015(DisplayName@161024012 : Text[1024];EmailAddress@161024013 : Text[1024]);
    BEGIN
      CreateVars;

      IF NOT IsValidEmail(EmailAddress) THEN
        ERROR(EMailAddressInvalidErr,EmailAddress);

      SmtpMail.AddTo(DisplayName,EmailAddress);
    END;

    PROCEDURE AddBcc@161024014(DisplayName@161024012 : Text[1024];EmailAddress@161024013 : Text[1024]);
    BEGIN
      CreateVars;

      IF NOT IsValidEmail(EmailAddress) THEN
        ERROR(EMailAddressInvalidErr,EmailAddress);

      SmtpMail.AddBcc(DisplayName,EmailAddress);
    END;

    PROCEDURE AddCC@161024016(DisplayName@161024012 : Text[1024];EmailAddress@161024013 : Text[1024]);
    BEGIN
      CreateVars;

      IF NOT IsValidEmail(EmailAddress) THEN
        ERROR(EMailAddressInvalidErr,EmailAddress);

      SmtpMail.AddCC(DisplayName,EmailAddress);
    END;

    PROCEDURE AppendToBody@161024019(Text@161024012 : Text[1024];NormalParagraph@1160040000 : Boolean);
    BEGIN
      CreateVars;

      AddHtmlStart;

      IF NormalParagraph THEN
        Text := '<p class=normal>' + Text + '</p>';

      SmtpMail.AppendToBody(Text);
    END;

    PROCEDURE AppendLineBreakToBody@1160040002();
    BEGIN
      CreateVars;

      AddHtmlStart;

      SmtpMail.AppendToBody('<br />');
    END;

    PROCEDURE Send@161024021() : Boolean;
    VAR
      DCSetup@1160040002 : Record 6085573;
      ServerAddr@1160040001 : Text[250];
      ServerPort@1160040000 : Integer;
    BEGIN
      CreateVars;

      GetSmtpMailSetup(TRUE);

      AddHtmlEnd;

      IF SmtpMail.ServerAddress = '' THEN BEGIN
        SmtpMailSetup.TESTFIELD("SMTP Server");
        SetServerAddress := SmtpMailSetup."SMTP Server";
        SetServerPort := SmtpMailSetup."SMTP Server Port";
        IF (SmtpMail.FromName = '') OR (SmtpMail.FromAddress = '') THEN BEGIN
          SetFromName := GetSenderName;
          SetFromAddress := GetSenderEmail;
        END;
      END;

      IF SmtpMail.SmtpAuthMethod = '' THEN BEGIN
        CASE SmtpMailSetup.Authentication OF
          SmtpMailSetup.Authentication::Anonymous:
            SetSmtpAuthMethod := 'NONE';
          SmtpMailSetup.Authentication::NTLM:
            SetSmtpAuthMethod := 'NTLM';
          SmtpMailSetup.Authentication::Basic:
            BEGIN
              SetSmtpAuthMethod := 'LOGIN';
              SmtpMailSetup.TESTFIELD("User ID");
              SmtpMailSetup.TESTFIELD("Password Key");
              SetUsername := SmtpMailSetup."User ID";
              SetPassword := SmtpMailSetup.GetPassword;
            END;
        END;
        SetStartTLS := SmtpMailSetup."Secure Connection";
      END;

      SmtpMail.BodyIsHtml := BodyIsHtml = BodyIsHtml::Yes;

      EXIT(SmtpMail.Send);
    END;

    PROCEDURE SaveLastError@161024022(Filename@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.SaveLastError(Filename);
    END;

    PROCEDURE SetSubject@161024030(Subject@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.Subject := Subject;
    END;

    PROCEDURE SetBody@161024018(Body@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      IF NOT HtmlStartAdded THEN
        AddHtmlStart;

      SmtpMail.Body := Body;
    END;

    PROCEDURE SetBodyFromBigStringMgnt@161024024(VAR BigStringMgnt@161024012 : Codeunit 6085587);
    VAR
      BigString@161024013 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=4.50.0.0, Culture=neutral, PublicKeyToken=005df25b46c40152'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.BigString";
    BEGIN
      CreateVars;

      BigStringMgnt.GetBigString(BigString);
      SmtpMail.SetBodyFromBigString(BigString);
    END;

    PROCEDURE SetBodyIsHtml@161024020(BodyIsHtml@161024012 : Boolean);
    BEGIN
      IF BodyIsHtml THEN
        BodyIsHtml := BodyIsHtml::Yes
      ELSE
        BodyIsHtml := BodyIsHtml::No;
    END;

    PROCEDURE SetFromAddress@161024023(Address@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.FromAddress := Address;
    END;

    PROCEDURE SetFromName@161024025(Name@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.FromName := Name;
    END;

    PROCEDURE SetUsername@161024031(Username@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.Username := Username;
    END;

    PROCEDURE SetPassword@161024026(Password@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.Password := Password;
    END;

    PROCEDURE SetServerAddress@161024027(Address@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.ServerAddress := Address;
    END;

    PROCEDURE SetServerPort@161024028(Port@161024012 : Integer);
    BEGIN
      CreateVars;

      SmtpMail.ServerPort := Port;
    END;

    PROCEDURE SetSmtpAuthMethod@161024029(AuthMethod@161024012 : Text[1024]);
    BEGIN
      CreateVars;

      SmtpMail.SmtpAuthMethod := AuthMethod;
    END;

    PROCEDURE SetStartTLS@161024032(StartTLS@161024012 : Boolean);
    BEGIN
      CreateVars;

      SmtpMail.StartTLS := StartTLS;
    END;

    PROCEDURE GetSmtpMailSetup@1(ShowError@1000 : Boolean) : Text[1024];
    BEGIN
      IF SmtpMailSetup.GET THEN
        IF SmtpMailSetup."SMTP Server" <> '' THEN
          EXIT;

      IF ShowError THEN
        ERROR(STRSUBSTNO(SMTPSetupMissingErr,SmtpMailSetup.FIELDCAPTION("SMTP Server"),SmtpMailSetup.TABLECAPTION))
      ELSE
        EXIT(STRSUBSTNO(SMTPSetupMissingErr,SmtpMailSetup.FIELDCAPTION("SMTP Server"),SmtpMailSetup.TABLECAPTION));
    END;

    PROCEDURE GetLastError@161024017() : Text[1024];
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT(COPYSTR(SmtpMail.LastErrorMessage,1,1000))
      ELSE
        EXIT(SmtpMail.LastErrorMessage);
    END;

    PROCEDURE DisplayLastError@1160040013() XMLError : Text[1024];
    VAR
      XmlLibrary@1160040002 : Codeunit 6085573;
      FileSysMgt@1160040005 : Codeunit 6085584;
      Filename@1160040001 : Text[1024];
      XmlDoc@1160040004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Filename := FileSysMgt.GetTempFilename('\ErrorTempFile','.xml');
      SaveLastError(Filename);

      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.Load(Filename);
      RootNode := XmlDoc.DocumentElement;
      XMLError := XmlLibrary.GetNodeText(RootNode,'//error');

      FileSysMgt.DeleteFile(Filename,TRUE);

      IF XMLError <> '' THEN
        ERROR(SMTPServerReturnErr + XMLError)
      ELSE
        ERROR(SMTPErr);
    END;

    LOCAL PROCEDURE GetDCSetup@1160040006(VAR DCSetup@1160040000 : Record 6085573) : Boolean;
    BEGIN
      EXIT(DCSetup.GET AND (DCSetup."Document Nos." <> ''))
    END;

    LOCAL PROCEDURE GetSenderName@1160040004() : Text[50];
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      IF GetDCSetup(DCSetup) THEN BEGIN
        DCSetup.TESTFIELD("Sender Name");
        EXIT(DCSetup."Sender Name")
      END ELSE
        EXIT(GetExpenseTextValue(141)); // 141 = Sender Name
    END;

    LOCAL PROCEDURE GetSenderEmail@1160040005() : Text[80];
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      IF GetDCSetup(DCSetup) THEN BEGIN
        DCSetup.TESTFIELD("Sender E-mail");
        EXIT(DCSetup."Sender E-mail");
      END ELSE
        EXIT(GetExpenseTextValue(140)); // 140 = Sender E-mail
    END;

    LOCAL PROCEDURE GetExpenseTextValue@1160040014(_FieldNo@1160040002 : Integer) : Text[80];
    VAR
      RecRef@1160040000 : RecordRef;
      FieldRef@1160040001 : FieldRef;
    BEGIN
      IF NOT GetExpenseSetup(RecRef) THEN
        EXIT;

      FieldRef := RecRef.FIELD(_FieldNo);
      FieldRef.TESTFIELD;
      RecRef.CLOSE;
      EXIT(FieldRef.VALUE);
    END;

    LOCAL PROCEDURE GetExpenseBoolValue@1160040030(_FieldNo@1160040002 : Integer) : Boolean;
    VAR
      RecRef@1160040001 : RecordRef;
      FieldRef@1160040000 : FieldRef;
    BEGIN
      IF NOT GetExpenseSetup(RecRef) THEN
        EXIT;

      FieldRef := RecRef.FIELD(_FieldNo);
      RecRef.CLOSE;
      EXIT(FieldRef.VALUE);
    END;

    LOCAL PROCEDURE GetExpenseSetup@1160040008(VAR RecRef@1160040000 : RecordRef) : Boolean;
    VAR
      AllObj@1160040001 : Record 2000000038;
    BEGIN
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
      AllObj.SETRANGE("Object ID",6086300);

      IF AllObj.ISEMPTY THEN
        EXIT(FALSE);

      RecRef.OPEN(6086300);
      EXIT(RecRef.FINDFIRST)
    END;

    LOCAL PROCEDURE CreateVars@161024012();
    BEGIN
      IF ISNULL(SmtpMail) THEN
        SmtpMail := SmtpMail.SmtpMail;
    END;

    PROCEDURE AddHtmlStart@1160040000();
    BEGIN
      IF BodyIsHtml = BodyIsHtml::No THEN
        EXIT;

      IF HtmlStartAdded THEN
        EXIT;

      CreateVars;

      SmtpMail.AppendToBody('<html>');
      SmtpMail.AppendToBody('  <head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=us-ascii">');
      SmtpMail.AppendToBody('    <style>');
      SmtpMail.AppendToBody('      p.normal {margin:0cm;margin-bottom:.0001pt;font-size:11.0pt;font-family:"Calibri",sans-serif;}');
      SmtpMail.AppendToBody('      a:link {color:#0563C1; text-decoration:underline;}');
      SmtpMail.AppendToBody('      a:visited {color:#954F72; text-decoration:underline;}');
      SmtpMail.AppendToBody('    </style>');
      SmtpMail.AppendToBody('  </head>');
      SmtpMail.AppendToBody('<body>');

      HtmlStartAdded := TRUE;
    END;

    PROCEDURE AddHtmlEnd@1160040001();
    BEGIN
      IF BodyIsHtml = BodyIsHtml::No THEN
        EXIT;

      IF HtmlEndAdded THEN
        EXIT;

      SmtpMail.AppendToBody('</body>');
      SmtpMail.AppendToBody('</html>');

      HtmlEndAdded := TRUE;
    END;

    LOCAL PROCEDURE SendTestMail@5(EmailAddress@1002 : Text);
    BEGIN
      AddTo('',EmailAddress);
      SetSubject(TestMailTitleTxt);
      SetBody(STRSUBSTNO(TestMailBodyTxt,USERID,SmtpMailSetup."SMTP Server",SmtpMailSetup."SMTP Server Port",
        SmtpMailSetup.Authentication,SmtpMailSetup."Secure Connection"));
      Send;
      MESSAGE(TestMailSuccessMsg,EmailAddress);
    END;

    LOCAL PROCEDURE PromptAndSendEmail@13();
    VAR
      EMailAddrInput@1001 : Page 6086068;
      ContiniaUser@1002 : Record 6086001;
      Address@1000 : Text;
    BEGIN
      GetSmtpMailSetup(TRUE);

      IF ContiniaUser.GET(USERID) THEN
        EMailAddrInput.SetEmailAddress(ContiniaUser."E-Mail");

      IF EMailAddrInput.RUNMODAL = ACTION::OK THEN BEGIN
        Address := EMailAddrInput.GetEmailAddress;
        IF Address = '' THEN
          EXIT;
        SendTestMail(Address);
      END;
    END;

    BEGIN
    END.
  }
}

