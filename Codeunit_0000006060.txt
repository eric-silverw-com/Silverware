OBJECT Codeunit 6060 Hybrid Deployment
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:08:37 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 6060=rimd,
                TableData 2000000146=rimd,
                TableData 2000000173=rimd,
                TableData 2000000199=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SourceProduct@1001 : Text;
      FailedCreatingIRErr@1011 : TextConst 'ENU=Failed to create your integration runtime.';
      FailedDisableReplicationErr@1010 : TextConst 'ENU=Failed to disable replication.';
      FailedEnableReplicationErr@1009 : TextConst 'ENU=Failed to enable your replication.\\Make sure your integration runtime is successfully connected and try again.';
      FailedGettingErrorsErr@1000 : TextConst 'ENU=Failed to retrieve the replication run errors.';
      FailedGettingIRKeyErr@1008 : TextConst 'ENU=Failed to get your integration runtime key. Please try again.';
      FailedRegeneratingIRKeyErr@1005 : TextConst 'ENU=Failed to regenerate your integration runtime key. Please try again.';
      FailedRunReplicationErr@1004 : TextConst 'ENU=Failed to trigger replication. Please try again.';
      FailedSetRepScheduleErr@1013 : TextConst 'ENU=Failed to set the replication schedule. Please try again.';
      CompletedTxt@1003 : TextConst '@@@={Locked};ENU=Completed';
      FailedTxt@1002 : TextConst '@@@={Locked};ENU=Failed';

    PROCEDURE Initialize@10(SourceProductId@1000 : Text);
    BEGIN
      SourceProduct := SourceProductId;
      OnInitialize(SourceProductId);
    END;

    PROCEDURE CreateIntegrationRuntime@4(VAR RuntimeName@1001 : Text;VAR PrimaryKey@1002 : Text);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      InstanceId@1000 : Text;
      JsonOutput@1004 : Text;
    BEGIN
      IF NOT TryCreateIntegrationRuntime(InstanceId) THEN
        ERROR(FailedCreatingIRErr);

      IF RetryGetStatus(InstanceId,JsonOutput) = FailedTxt THEN
        ERROR(FailedCreatingIRErr);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('Name',RuntimeName);
      JSONManagement.GetStringPropertyValueByName('PrimaryKey',PrimaryKey);
    END;

    PROCEDURE DisableReplication@6();
    VAR
      InstanceId@1000 : Text;
      Output@1001 : Text;
    BEGIN
      IF NOT TryDisableReplication(InstanceId) THEN
        ERROR(FailedDisableReplicationErr);

      IF RetryGetStatus(InstanceId,Output) = FailedTxt THEN
        ERROR(FailedDisableReplicationErr);

      EnableIntelligentCloud(FALSE);
    END;

    PROCEDURE EnableReplication@5(OnPremConnectionString@1001 : Text;DatabaseConfiguration@1000 : Text;IntegrationRuntimeName@1002 : Text);
    VAR
      PermissionManager@1008 : Codeunit 9002;
      NotificationUrl@1003 : Text;
      SubscriptionId@1004 : Text[150];
      ClientState@1005 : Text[50];
      InstanceId@1006 : Text;
      Output@1007 : Text;
    BEGIN
      OnBeforeEnableReplication(SourceProduct,NotificationUrl,SubscriptionId,ClientState);

      IF NOT TryEnableReplication(
           InstanceId,OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId)
      THEN
        ERROR(FailedEnableReplicationErr);

      IF RetryGetStatus(InstanceId,Output) = FailedTxt THEN
        ERROR(FailedEnableReplicationErr);

      EnableIntelligentCloud(TRUE);
      PermissionManager.ResetUsersToIntelligentCloudUserGroup;
    END;

    PROCEDURE GetIntegrationRuntimeKeys@2(VAR PrimaryKey@1000 : Text;VAR SecondaryKey@1001 : Text);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1004 : Text;
    BEGIN
      IF NOT TryGetIntegrationRuntimeKeys(InstanceId) THEN
        ERROR(FailedGettingIRKeyErr);

      IF RetryGetStatus(InstanceId,JsonOutput) = FailedTxt THEN
        ERROR(FailedGettingIRKeyErr);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('PrimaryKey',PrimaryKey);
      JSONManagement.GetStringPropertyValueByName('SecondaryKey',SecondaryKey);
    END;

    PROCEDURE GetReplicationRunErrors@3(RunId@1000 : Text;VAR Errors@1001 : Text);
    VAR
      JSONManagement@1004 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1003 : Text;
    BEGIN
      IF NOT TryGetReplicationRunErrors(InstanceId,RunId) THEN
        ERROR(FailedGettingErrorsErr);

      IF RetryGetStatus(InstanceId,JsonOutput) = FailedTxt THEN
        ERROR(FailedGettingErrorsErr);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('Errors',Errors);
      JSONManagement.InitializeObject(Errors);
      JSONManagement.GetArrayPropertyValueAsStringByName('$values',Errors);
      JSONManagement.InitializeCollection(Errors);
      IF JSONManagement.GetCollectionCount = 1 THEN
        JSONManagement.GetObjectFromCollectionByIndex(Errors,0)
    END;

    PROCEDURE GetRequestStatus@11(RequestTrackingId@1000 : Text;VAR JsonOutput@1001 : Text) Status : Text;
    BEGIN
      OnGetRequestStatus(RequestTrackingId,JsonOutput,Status);
    END;

    PROCEDURE RegenerateIntegrationRuntimeKeys@25(VAR PrimaryKey@1000 : Text;VAR SecondaryKey@1001 : Text);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      InstanceId@1002 : Text;
      JsonOutput@1004 : Text;
    BEGIN
      IF NOT TryRegenerateIntegrationRuntimeKeys(InstanceId) THEN
        ERROR(FailedRegeneratingIRKeyErr);

      IF RetryGetStatus(InstanceId,JsonOutput) = FailedTxt THEN
        ERROR(FailedRegeneratingIRKeyErr);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('PrimaryKey',PrimaryKey);
      JSONManagement.GetStringPropertyValueByName('SecondaryKey',SecondaryKey);
    END;

    PROCEDURE ResetCloudData@33();
    VAR
      IntelligentCloudStatus@1000 : Record 2000000173;
    BEGIN
      IntelligentCloudStatus.MODIFYALL("Synced Version",0);
      COMMIT;
    END;

    PROCEDURE RunReplication@31(VAR RunId@1000 : Text);
    VAR
      JSONManagement@1002 : Codeunit 5459;
      InstanceId@1003 : Text;
      JsonOutput@1001 : Text;
    BEGIN
      IF NOT TryRunReplication(InstanceId) THEN
        ERROR(FailedRunReplicationErr);

      IF RetryGetStatus(InstanceId,JsonOutput) = FailedTxt THEN
        ERROR(FailedRunReplicationErr);

      JSONManagement.InitializeObject(JsonOutput);
      JSONManagement.GetStringPropertyValueByName('RunId',RunId);
    END;

    PROCEDURE SetReplicationSchedule@9(ReplicationFrequency@1000 : Text;DaysToRun@1001 : Text;TimeToRun@1002 : Time;Activate@1003 : Boolean);
    VAR
      InstanceId@1004 : Text;
      Output@1005 : Text;
    BEGIN
      IF NOT TrySetReplicationSchedule(InstanceId,ReplicationFrequency,DaysToRun,TimeToRun,Activate) THEN
        ERROR(FailedSetRepScheduleErr);

      IF RetryGetStatus(InstanceId,Output) = FailedTxt THEN
        ERROR(FailedSetRepScheduleErr);
    END;

    [EventSubscriber(Codeunit,2,OnCompanyInitialize)]
    LOCAL PROCEDURE HandleCompanyInit@7();
    VAR
      HybridDeploymentSetup@1000 : Record 6060;
    BEGIN
      IF NOT HybridDeploymentSetup.ISEMPTY THEN
        EXIT;

      HybridDeploymentSetup.INIT;
      HybridDeploymentSetup.INSERT;
    END;

    LOCAL PROCEDURE EnableIntelligentCloud@38(Enabled@1000 : Boolean);
    VAR
      IntelligentCloud@1001 : Record 2000000146;
    BEGIN
      IF NOT IntelligentCloud.GET THEN BEGIN
        IntelligentCloud.INIT;
        IntelligentCloud.Enabled := Enabled;
        IntelligentCloud.INSERT;
      END ELSE BEGIN
        IntelligentCloud.Enabled := Enabled;
        IntelligentCloud.MODIFY;
      END;
    END;

    LOCAL PROCEDURE RetryGetStatus@30(InstanceId@1000 : Text;VAR JsonOutput@1002 : Text) Status : Text;
    BEGIN
      IF InstanceId = '' THEN
        EXIT;

      REPEAT
        SLEEP(1000);
        Status := GetRequestStatus(InstanceId,JsonOutput);
      UNTIL ((Status = CompletedTxt) OR (Status = FailedTxt));
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateIntegrationRuntime@20(VAR InstanceId@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDisableReplication@19(VAR InstanceId@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEnableReplication@8(ProductId@1004 : Text;VAR NotificationUrl@1003 : Text;VAR SubscriptionId@1002 : Text[150];VAR ClientState@1001 : Text[50]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnEnableReplication@23(OnPremiseConnectionString@1002 : Text;DatabaseType@1001 : Text;IntegrationRuntimeName@1000 : Text;NotificationUrl@1003 : Text;ClientState@1004 : Text;SubscriptionId@1005 : Text;VAR InstanceId@1006 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetIntegrationRuntimeKeys@18(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetReplicationRunErrors@24(VAR InstanceId@1000 : Text;RunId@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetRequestStatus@16(InstanceId@1000 : Text;VAR JsonOutput@1001 : Text;VAR Status@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitialize@15(SourceProductId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRegenerateIntegrationRuntimeKeys@34(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunReplication@32(VAR InstanceId@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSetReplicationSchedule@13(ReplicationFrequency@1002 : Text;DaysToRun@1001 : Text;TimeToRun@1000 : Time;Activate@1003 : Boolean;VAR InstanceId@1004 : Text);
    BEGIN
    END;

    [TryFunction]
    LOCAL PROCEDURE TryCreateIntegrationRuntime@29(VAR InstanceId@1000 : Text);
    BEGIN
      OnCreateIntegrationRuntime(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDisableReplication@28(VAR InstanceId@1000 : Text);
    BEGIN
      OnDisableReplication(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryEnableReplication@27(VAR InstanceId@1000 : Text;OnPremConnectionString@1001 : Text;DatabaseConfiguration@1002 : Text;IntegrationRuntimeName@1003 : Text;NotificationUrl@1004 : Text;ClientState@1005 : Text;SubscriptionId@1006 : Text);
    BEGIN
      OnEnableReplication(
        OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId,InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetIntegrationRuntimeKeys@26(VAR InstanceId@1000 : Text);
    BEGIN
      OnGetIntegrationRuntimeKeys(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetReplicationRunErrors@21(VAR InstanceId@1001 : Text;RunId@1000 : Text);
    BEGIN
      OnGetReplicationRunErrors(InstanceId,RunId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRegenerateIntegrationRuntimeKeys@36(VAR InstanceId@1000 : Text);
    BEGIN
      OnRegenerateIntegrationRuntimeKeys(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRunReplication@22(VAR InstanceId@1000 : Text);
    BEGIN
      OnRunReplication(InstanceId);
    END;

    [TryFunction]
    LOCAL PROCEDURE TrySetReplicationSchedule@17(VAR InstanceId@1000 : Text;ReplicationFrequency@1003 : Text;DaysToRun@1002 : Text;TimeToRun@1001 : Time;Activate@1004 : Boolean);
    BEGIN
      OnSetReplicationSchedule(ReplicationFrequency,DaysToRun,TimeToRun,Activate,InstanceId);
    END;

    BEGIN
    END.
  }
}

