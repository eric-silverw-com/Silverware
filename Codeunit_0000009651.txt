OBJECT Codeunit 9651 Document Report Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotImplementedErr@1002 : TextConst 'ENU=This option is not available.;ESM=Esta opci¢n no est  disponible.;FRC=Cette option n''est pas disponible.;ENC=This option is not available.';
      TemplateValidationQst@1000 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?;ESM=El dise¤o de Word no cumple con el dise¤o del informe actual (por ejemplo, faltan campos o el id. de informe no es v lido).\Se detectaron los siguientes errores durante la validaci¢n del dise¤o:\%1\¨Desea continuar?;FRC=La pr‚sentation Word n''est pas compatible avec la conception actuelle du rapport (par exemple, champs absents ou code rapport incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation du documentÿ:\%1\\Voulez-vous continuer?;ENC=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?';

      TemplateValidationErr@1003 : TextConst
        'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.',
        'ESM=El dise¤o de Word no cumple con el dise¤o del informe actual (por ejemplo, faltan campos o el id. de informe no es v lido).\Se detectaron los siguientes errores durante la validaci¢n del documento:\%1\Debe actualizar el dise¤o para que coincida con el dise¤o del informe actual.',
        'FRC=La pr‚sentation Word n''est pas compatible avec la conception actuelle du rapport (par exemple, champs absents ou code rapport incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation du documentÿ:\%1\Vous devez mettre … jour la pr‚sentation pour qu''elle corresponde … la conception actuelle du rapport.',
        'ENC=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.';
      AbortWithValidationErr@1001 : TextConst 'ENU=The Word layout action has been canceled because of validation errors.;ESM=La acci¢n de dise¤o de Word se ha cancelado por errores de validaci¢n.;FRC=L''action pr‚sentation Word a ‚t‚ annul‚e en raison d''erreurs de validation.;ENC=The Word layout action has been cancelled because of validation errors.';
      TemplateValidationUpdateQst@1004 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to run an automatic update?;ESM=El dise¤o de Word no cumple con el dise¤o del informe actual (por ejemplo, faltan campos o el id. de informe no es v lido).\Se detectaron los siguientes errores durante la validaci¢n del dise¤o:\%1\¨Desea ejecutar una actualizaci¢n autom tica?;FRC=La pr‚sentation Word n''est pas compatible avec la conception actuelle du rapport (par exemple, champs absents ou code rapport incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation de la pr‚sentationÿ:\%1\Voulez-vous ex‚cuter une mise … jour automatique?;ENC=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to run an automatic update?';

      TemplateAfterUpdateValidationErr@1006 : TextConst
        'ENU=The automatic update could not resolve all the conflicts in the current Word layout. For example, the layout uses fields that are missing in the report design or the report ID is wrong.\The following errors were detected:\%1\You must manually update the layout to match the current report design.',
        'ESM=La actualizaci¢n autom tica no pudo resolver todos los conflictos del dise¤o de Word actual. Por ejemplo, el dise¤o usa campos que faltan en el dise¤o de informe o el id. de informe es incorrecto.\Se detectaron los siguientes errores:\%1\Debe actualizar manualmente el dise¤o para que corresponda con el dise¤o del informe actual.',
        'FRC=La mise … jour automatique n''a pas pu r‚soudre tous les conflits dans la pr‚sentation Word actuelle. Par exemple, la pr‚sentation utilise des champs qui n''apparaissent pas dans la conception du rapport ou le code du rapport est incorrect.\Les erreurs suivantes ont ‚t‚ d‚tect‚esÿ:\%1\Vous devez mettre … jour manuellement la pr‚sentation pour qu''elle corresponde … la conception actuelle du rapport.',
        'ENC=The automatic update could not resolve all the conflicts in the current Word layout. For example, the layout uses fields that are missing in the report design or the report ID is wrong.\The following errors were detected:\%1\You must manually update the layout to match the current report design.';
      UpgradeMessageMsg@1005 : TextConst 'ENU=The report upgrade process returned the following log messages:\%1.;ESM=El proceso de actualizaci¢n de informe ha devuelto los siguientes mensajes de registro:\%1;FRC=Le processus de mise … jour du rapport a renvoy‚ les messages de journal suivantsÿ:\%1.;ENC=The report upgrade process returned the following log messages:\%1.';
      NoReportLayoutUpgradeRequiredMsg@1007 : TextConst 'ENU=The layout upgrade process completed without detecting any required changes in the current application.;ESM=El proceso de actualizaci¢n de dise¤o se complet¢ sin detectar cambios requeridos en la aplicaci¢n actual.;FRC=Le processus de mise … jour de pr‚sentation s''est d‚roul‚ sans d‚tecter aucune modification n‚cessaire au niveau de l''application actuelle.;ENC=The layout upgrade process completed without detecting any required changes in the current application.';
      CompanyInformationPicErr@1011 : TextConst 'ENU=The document contains elements that cannot be converted to PDF. This may be caused by missing image data in the document.;ESM=En el documento se incluyen elementos que no se pueden convertir en PDF. Esto puede deberse a que faltan datos de imagen en el documento.;FRC=Ce document contient des ‚l‚ments impossibles … convertir en PDF. Cela peut ˆtre d– … l''absence de certaines donn‚es d''image dans le document.;ENC=The document contains elements that cannot be converted to PDF. This may be caused by missing image data in the document.';
      UnexpectedHexCharacterRegexErr@1013 : TextConst '@@@={LOCKED};ENU=hexadecimal value 0x[0-9a-fA-F]*, is an invalid character;ESM=hexadecimal value 0x[0-9a-fA-F]*, is an invalid character;FRC=hexadecimal value 0x[0-9a-fA-F]*, is an invalid character;ENC=hexadecimal value 0x[0-9a-fA-F]*, is an invalid character';
      UnexpectedCharInDataErr@1015 : TextConst 'ENU=Cannot create the document because it includes garbled text. Make sure the text is readable and then try again.;ESM=No se puede crear el documento porque incluye texto incomprensible. Aseg£rese de que el texto sea legible y vuelva a intentarlo.;FRC=Impossible de cr‚er le document car il inclut du texte tronqu‚. Assurez-vous que le texte est lisible et r‚essayez.;ENC=Cannot create the document because it includes garbled text. Make sure the text is readable and then try again.';
      FileTypeWordTxt@1008 : TextConst '@@@={Locked};ENU=docx;ESM=docx;FRC=docx;ENC=docx';
      FileTypePdfTxt@1009 : TextConst '@@@={Locked};ENU=pdf;ESM=pdf;FRC=pdf;ENC=pdf';
      FileTypeHtmlTxt@1010 : TextConst '@@@={Locked};ENU=html;ESM=html;FRC=html;ENC=html';
      NoOutputErr@1014 : TextConst 'ENU=No data exists for the specified report filters.;ESM=No existen datos para los filtros del informe especificado.;FRC=Il n''existe aucune donn‚e pour les filtres de rapport sp‚cifi‚s.;ENC=No data exists for the specified report filters.';
      ClientTypeManagement@1012 : Codeunit 4;

    PROCEDURE MergeWordLayout@5(ReportID@1000 : Integer;ReportAction@1007 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print,SaveAsHtml';InStrXmlData@1002 : InStream;FileName@1001 : Text);
    VAR
      ReportLayoutSelection@1011 : Record 9651;
      CustomReportLayout@1003 : Record 9650;
      InTempBlob@1010 : Record 99008535;
      OutTempBlob@1009 : Record 99008535;
      FileMgt@1008 : Codeunit 419;
      TypeHelper@1004 : Codeunit 10;
      InStrWordDoc@1006 : InStream;
      OutStrWordDoc@1005 : OutStream;
      CustomLayoutCode@1012 : Code[20];
      CurrentFileType@1013 : Text;
      PrinterName@1016 : Text;
      VerifyXmlHasData@1014 : Boolean;
      Handled@1015 : Boolean;
    BEGIN
      IF ReportAction = ReportAction::Print THEN
        PrinterName := FileName;

      OutTempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);
      OnBeforeMergeDocument(ReportID,ReportAction,InStrXmlData,PrinterName,OutStrWordDoc,Handled,FileName = '');
      IF Handled THEN BEGIN
        IF (FileName <> '') AND OutTempBlob.Blob.HASVALUE THEN
          OutTempBlob.Blob.EXPORT(FileName);
        EXIT;
      END;

      // Temporarily selected layout for Design-time report execution?
      IF ReportLayoutSelection.GetTempLayoutSelected <> '' THEN
        CustomLayoutCode := ReportLayoutSelection.GetTempLayoutSelected
      ELSE  // Normal selection
        IF ReportLayoutSelection.GET(ReportID,COMPANYNAME) AND
           (ReportLayoutSelection.Type = ReportLayoutSelection.Type::"Custom Layout")
        THEN
          CustomLayoutCode := ReportLayoutSelection."Custom Report Layout Code";

      IF CustomLayoutCode <> '' THEN
        IF NOT CustomReportLayout.GET(CustomLayoutCode) THEN
          CustomLayoutCode := '';

      IF CustomLayoutCode = '' THEN
        REPORT.WORDLAYOUT(ReportID,InStrWordDoc)
      ELSE BEGIN
        ValidateAndUpdateWordLayoutOnRecord(CustomReportLayout);
        CustomReportLayout.GetLayoutBlob(InTempBlob);
        InTempBlob.Blob.CREATEINSTREAM(InStrWordDoc);
        ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
      END;

      // By default - throw an error in case of empty dataset
      VerifyXmlHasData := TRUE;
      OnBeforeMergeWordDocument(VerifyXmlHasData);
      IF VerifyXmlHasData THEN
        VerifyXmlContainsDataset(InStrXmlData);

      IF NOT TryXmlMergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) THEN BEGIN
        IF TypeHelper.IsMatch(GETLASTERRORTEXT,UnexpectedHexCharacterRegexErr) THEN
          ERROR(UnexpectedCharInDataErr);

        ERROR(GETLASTERRORTEXT);
      END;

      COMMIT;
      OnAfterMergeWordDocument(ReportID,InStrXmlData,OutTempBlob);

      CurrentFileType := '';
      CASE ReportAction OF
        ReportAction::SaveAsWord:
          CurrentFileType := FileTypeWordTxt;
        ReportAction::SaveAsPdf:
          BEGIN
            CurrentFileType := FileTypePdfTxt;
            ConvertToPdf(OutTempBlob);
          END;
        ReportAction::SaveAsHtml:
          BEGIN
            CurrentFileType := FileTypeHtmlTxt;
            ConvertToHtml(OutTempBlob);
          END;
        ReportAction::SaveAsExcel:
          ERROR(NotImplementedErr);
        ReportAction::Print:
          PrintWordDoc(ReportID,OutTempBlob,PrinterName,TRUE);
        ReportAction::Preview:
          FileMgt.BLOBExport(OutTempBlob,UserFileName(ReportID,CurrentFileType),TRUE);
      END;

      // Export the file to the client of the action generates an output object in which case currentFileType is non-empty.
      IF CurrentFileType <> '' THEN
        IF FileName = '' THEN
          FileMgt.BLOBExport(OutTempBlob,UserFileName(ReportID,CurrentFileType),TRUE)
        ELSE
          // Dont' use FileMgt.BLOBExportToServerFile. It will fail if run through
          // CodeUnit 8800, as the filename will exist in a temp folder.
          OutTempBlob.Blob.EXPORT(FileName);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryXmlMergeWordDocument@3(VAR InStrWordDoc@1001 : InStream;VAR InStrXmlData@1000 : InStream;VAR OutStrWordDoc@1002 : OutStream);
    VAR
      NAVWordXMLMerger@1003 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      OutStrWordDoc := NAVWordXMLMerger.MergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) ;
    END;

    [External]
    PROCEDURE ValidateWordLayout@2(ReportID@1001 : Integer;DocumentStream@1000 : InStream;useConfirm@1004 : Boolean;updateContext@1005 : Boolean) : Boolean;
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF useConfirm THEN BEGIN
          IF NOT CONFIRM(TemplateValidationQst,FALSE,ValidationErrors) THEN
            ERROR(AbortWithValidationErr);
        END ELSE BEGIN
          IF updateContext THEN
            ValidationErrorFormat := TemplateAfterUpdateValidationErr
          ELSE
            ValidationErrorFormat := TemplateValidationErr;

          ERROR(ValidationErrorFormat,ValidationErrors);
        END;

        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateWordLayoutCheckOnly@4(ReportID@1001 : Integer;DocumentStream@1000 : InStream);
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        ValidationErrorFormat := TemplateAfterUpdateValidationErr;
        MESSAGE(ValidationErrorFormat,ValidationErrors);
      END;
    END;

    LOCAL PROCEDURE ValidateAndUpdateWordLayoutOnRecord@7(CustomReportLayout@1001 : Record 9650) : Boolean;
    VAR
      TempBlob@1000 : Record 99008535;
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      DocumentStream@1005 : InStream;
      ValidationErrors@1003 : Text;
    BEGIN
      CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::Word);
      CustomReportLayout.GetLayoutBlob(TempBlob);
      TempBlob.Blob.CREATEINSTREAM(DocumentStream);
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;

      ValidationErrors :=
        NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(CustomReportLayout."Report ID",TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF CONFIRM(TemplateValidationUpdateQst,FALSE,ValidationErrors) THEN BEGIN
          ValidationErrors := CustomReportLayout.TryUpdateLayout(FALSE);
          COMMIT;
          EXIT(TRUE);
        END;
        ERROR(TemplateValidationErr,ValidationErrors);
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE TryUpdateWordLayout@12(DocumentStream@1001 : InStream;VAR UpdateStream@1002 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;
      NAVWordXMLMerger.UpdateWordDocumentLayout(DocumentStream,UpdateStream,CachedCustomPart,CurrentCustomPart,TRUE);
      EXIT(NAVWordXMLMerger.LastUpdateError);
    END;

    [External]
    PROCEDURE TryUpdateRdlcLayout@13(reportId@1001 : Integer;RdlcStream@1002 : InStream;RdlcUpdatedStream@1000 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text;IgnoreDelete@1005 : Boolean) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
    BEGIN
      EXIT(NAVWordXMLMerger.TryUpdateRdlcLayout(reportId,RdlcStream,RdlcUpdatedStream,
          CachedCustomPart,CurrentCustomPart,IgnoreDelete));
    END;

    [External]
    PROCEDURE NewWordLayout@11(ReportId@1000 : Integer;VAR DocumentStream@1001 : OutStream);
    VAR
      NAVWordXmlMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXmlMerger.NewWordDocumentLayout(DocumentStream,REPORT.WORDXMLPART(ReportId));
    END;

    LOCAL PROCEDURE ConvertToPdf@1(VAR TempBlob@1015 : Record 99008535);
    VAR
      TypeHelper@1000 : Codeunit 10;
    BEGIN
      IF NOT TypeHelper.TryConvertWordBlobToPdf(TempBlob) THEN
        ERROR(CompanyInformationPicErr);
    END;

    LOCAL PROCEDURE ConvertToHtml@22(VAR TempBlob@1015 : Record 99008535);
    VAR
      TempBlobHtml@1006 : Record 99008535;
      InStreamWordDoc@1007 : InStream;
      OutStreamHtmlDoc@1008 : OutStream;
      PdfWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      TempBlobHtml.Blob.CREATEOUTSTREAM(OutStreamHtmlDoc);
      PdfWriter.ConvertToHtml(InStreamWordDoc,OutStreamHtmlDoc);
      TempBlob.Blob := TempBlobHtml.Blob;
    END;

    LOCAL PROCEDURE PrintWordDoc@15(ReportID@1003 : Integer;VAR TempBlob@1015 : Record 99008535;PrinterName@1000 : Text;Collate@1002 : Boolean);
    VAR
      FileMgt@1001 : Codeunit 419;
    BEGIN
      IF FileMgt.IsWindowsClient THEN
        PrintWordDocInWord(ReportID,TempBlob,PrinterName,Collate,1)
      ELSE
        IF FileMgt.IsWebOrDeviceClient THEN BEGIN
          ConvertToPdf(TempBlob);
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FileTypePdfTxt),TRUE);
        END ELSE
          PrintWordDocOnServer(TempBlob,PrinterName,Collate);
    END;

    LOCAL PROCEDURE PrintWordDocInWord@17(ReportID@1006 : Integer;TempBlob@1015 : Record 99008535;PrinterName@1004 : Text;Collate@1007 : Boolean;Copies@1008 : Integer);
    VAR
      FileMgt@1005 : Codeunit 419;
      WordApplication@1001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordHelper@1016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      FileName@1003 : Text;
      T0@1002 : DateTime;
    BEGIN
      IF GetWordApplication(WordApplication) AND NOT ISNULL(WordApplication) THEN BEGIN
        FileName := STRSUBSTNO('%1.docx',CREATEGUID);
        FileName := FileMgt.BLOBExport(TempBlob,FileName,FALSE);

        IF PrinterName = '' THEN
          IF NOT SelectPrinter(PrinterName,Collate,Copies) THEN
            EXIT;

        WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
        WordHelper.CallPrintOut(WordDocument,PrinterName,Collate,Copies);

        T0 := CURRENTDATETIME;
        WHILE (WordApplication.BackgroundPrintingStatus > 0) AND (CURRENTDATETIME < T0 + 180000) DO
          SLEEP(250);
        WordHelper.CallQuit(WordApplication,FALSE);
        IF DeleteClientFile(FileName) THEN;
      END ELSE BEGIN
        IF (PrinterName <> '') AND IsValidPrinter(PrinterName) THEN
          PrintWordDocOnServer(TempBlob,PrinterName,Collate) // Don't print on server if the printer has not been setup.
        ELSE
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FileTypeWordTxt),TRUE);
      END;
    END;

    LOCAL PROCEDURE SelectPrinter@8(VAR PrinterName@1006 : Text;VAR Collate@1005 : Boolean;VAR Copies@1004 : Integer) : Boolean;
    VAR
      DotNetPrintDialog@1002 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.PrintDialog" RUNONCLIENT;
      DotNetDialogResult@1001 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.DialogResult" RUNONCLIENT;
      DotNetPrinterSettings@1000 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings" RUNONCLIENT;
      PrintDialogResult@1003 : Integer;
    BEGIN
      DotNetPrinterSettings := DotNetPrinterSettings.PrinterSettings;
      DotNetPrintDialog := DotNetPrintDialog.PrintDialog;

      DotNetPrintDialog.ShowNetwork := TRUE;
      DotNetDialogResult := DotNetPrintDialog.ShowDialog;
      PrintDialogResult := DotNetDialogResult;

      // 1 - means OK
      // 6 - means YES
      IF NOT (PrintDialogResult IN [1,6]) THEN
        EXIT(FALSE);

      DotNetPrinterSettings := DotNetPrintDialog.PrinterSettings;
      PrinterName := DotNetPrinterSettings.PrinterName;
      Collate := DotNetPrinterSettings.Collate;
      Copies := DotNetPrinterSettings.Copies;

      EXIT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE DeleteClientFile@20(FileName@1000 : Text);
    VAR
      FileMgt@1001 : Codeunit 419;
    BEGIN
      FileMgt.DeleteClientFile(FileName);
    END;

    LOCAL PROCEDURE IsValidPrinter@19(PrinterName@1000 : Text) : Boolean;
    VAR
      Printer@1001 : Record 2000000039;
    BEGIN
      Printer.SETFILTER(Name,PrinterName);
      Printer.FINDFIRST;
      EXIT(NOT Printer.ISEMPTY);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetWordApplication@18(VAR WordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT);
    BEGIN
      WordApplication := WordApplication.ApplicationClass;
    END;

    LOCAL PROCEDURE PrintWordDocOnServer@16(TempBlob@1001 : Record 99008535;PrinterName@1000 : Text;Collate@1004 : Boolean);
    VAR
      PdfWriter@1003 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
      InStreamWordDoc@1002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      PdfWriter.PrintWordDoc(InStreamWordDoc,PrinterName,Collate);
    END;

    LOCAL PROCEDURE UserFileName@6(ReportID@1000 : Integer;fileExtension@1003 : Text) : Text;
    VAR
      ReportMetadata@1001 : Record 2000000139;
      FileManagement@1004 : Codeunit 419;
    BEGIN
      ReportMetadata.GET(ReportID);
      IF fileExtension = '' THEN
        fileExtension := FileTypeWordTxt;

      EXIT(FileManagement.GetSafeFileName(ReportMetadata.Caption) + '.' + fileExtension);
    END;

    PROCEDURE ApplyUpgradeToReports@10(VAR ReportUpgradeCollection@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection";testOnly@1000 : Boolean) : Boolean;
    VAR
      CustomReportLayout@1005 : Record 9650;
      ReportUpgrade@1006 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeSet";
      ReportChangeLogCollection@1008 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection";
    BEGIN
      FOREACH ReportUpgrade IN ReportUpgradeCollection DO BEGIN
        CustomReportLayout.SETFILTER("Report ID",FORMAT(ReportUpgrade.ReportId));
        IF CustomReportLayout.FIND('-') THEN
          REPEAT
            CustomReportLayout.ApplyUpgrade(ReportUpgrade,ReportChangeLogCollection,testOnly);
          UNTIL CustomReportLayout.NEXT = 0;
      END;

      IF ISNULL(ReportChangeLogCollection) THEN BEGIN // Don't break upgrade process with user information
        IF (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Background) AND
           (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Management)
        THEN
          MESSAGE(NoReportLayoutUpgradeRequiredMsg);

        EXIT(FALSE);
      END;

      ProcessUpgradeLog(ReportChangeLogCollection);
      EXIT(ReportChangeLogCollection.Count > 0);
    END;

    [External]
    PROCEDURE CalculateUpgradeChangeSet@21(VAR ReportUpgradeCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection");
    VAR
      CustomReportLayout@1000 : Record 9650;
      ReportUpgradeSet@1001 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportUpgradeSet";
    BEGIN
      IF CustomReportLayout.FIND('-') THEN
        REPEAT
          ReportUpgradeSet := ReportUpgradeCollection.AddReport(CustomReportLayout."Report ID"); // runtime will load the current XmlPart from metadata
          IF NOT ISNULL(ReportUpgradeSet) THEN
            ReportUpgradeSet.CalculateAutoChangeSet(CustomReportLayout.GetCustomXmlPart);
        UNTIL CustomReportLayout.NEXT <> 1;
    END;

    LOCAL PROCEDURE ProcessUpgradeLog@9(VAR ReportChangeLogCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection");
    VAR
      ReportLayoutUpdateLog@1001 : Codeunit 9656;
    BEGIN
      IF ISNULL(ReportChangeLogCollection) THEN
        EXIT;

      IF (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Background) AND
         (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Management)
      THEN
        ReportLayoutUpdateLog.ViewLog(ReportChangeLogCollection)
      ELSE
        MESSAGE(UpgradeMessageMsg,FORMAT(ReportChangeLogCollection));
    END;

    PROCEDURE BulkUpgrade@14(testMode@1002 : Boolean);
    VAR
      ReportUpgradeCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=13.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection";
    BEGIN
      ReportUpgradeCollection := ReportUpgradeCollection.ReportUpgradeCollection;
      CalculateUpgradeChangeSet(ReportUpgradeCollection);
      ApplyUpgradeToReports(ReportUpgradeCollection,testMode);
    END;

    LOCAL PROCEDURE VerifyXmlContainsDataset@24(XmlData@1000 : InStream);
    VAR
      XMLDOMManagement@1008 : Codeunit 6224;
      XmlNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF XMLDOMManagement.LoadXMLNodeFromInStream(XmlData,XmlNode) AND
         XMLDOMManagement.FindNode(XmlNode,'DataItems',XmlNode)
      THEN
        IF XmlNode.ChildNodes.Count = 0 THEN
          ERROR(NoOutputErr);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMergeWordDocument@26(ReportID@1001 : Integer;InStrXmlData@1000 : InStream;VAR OutTempBlob@1002 : Record 99008535);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMergeDocument@23(ReportID@1005 : Integer;ReportAction@1004 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print,SaveAsHtml';InStrXmlData@1003 : InStream;PrinterName@1002 : Text;OutStream@1001 : OutStream;VAR Handled@1000 : Boolean;IsFileNameBlank@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMergeWordDocument@25(VAR VerifyXmlHasData@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

