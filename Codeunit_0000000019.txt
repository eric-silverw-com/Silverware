OBJECT Codeunit 19 Gen. Jnl.-Post Preview
{
  OBJECT-PROPERTIES
  {
    Date=09/19/18;
    Time=12:00:00 PM;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NothingToPostMsg@1019 : TextConst 'ENU=There is nothing to post.;ESM=No hay nada que registrar.;FRC=Il n''y a rien … reporter.;ENC=There is nothing to post.';
      PreviewModeErr@1002 : TextConst 'ENU=Preview mode.;ESM=Modo de vista previa;FRC=Mode Aper‡u.;ENC=Preview mode.';
      PostingPreviewEventHandler@1000 : Codeunit 20;
      SubscriberTypeErr@1001 : TextConst 'ENU=Invalid Subscriber type. The type must be CODEUNIT.;ESM=Tipo de suscriptor no v lido. El tipo debe ser CODEUNIT.;FRC=Type abonn‚ non valide. Le type doit ˆtre CODEUNIT.;ENC=Invalid Subscriber type. The type must be CODEUNIT.';
      RecVarTypeErr@1003 : TextConst 'ENU=Invalid RecVar type. The type must be RECORD.;ESM=Tipo RecVar no v lido. El tipo debe ser RECORD.;FRC=Type RecVar non valide. Le type doit ˆtre RECORD.;ENC=Invalid RecVar type. The type must be RECORD.';
      PreviewExitStateErr@1004 : TextConst 'ENU=The posting preview has stopped because of a state that is not valid.;ESM=La vista previa de registro se ha detenido debido a un estado no v lido.;FRC=L''aper‡u du report a cess‚ en raison d''un ‚tat non valide.;ENC=The posting preview has stopped because of a state that is not valid.';

    [External]
    PROCEDURE Preview@6(Subscriber@1002 : Variant;RecVar@1000 : Variant);
    VAR
      RunResult@1003 : Boolean;
    BEGIN
      IF NOT Subscriber.ISCODEUNIT THEN
        ERROR(SubscriberTypeErr);
      IF NOT RecVar.ISRECORD THEN
        ERROR(RecVarTypeErr);

      BINDSUBSCRIPTION(PostingPreviewEventHandler);
      OnAfterBindSubscription;

      RunResult := RunPreview(Subscriber,RecVar);

      UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
      OnAfterUnbindSubscription;

      // The OnRunPreview event expects subscriber following template: Result := <Codeunit>.RUN
      // So we assume RunPreview returns FALSE with the error.
      // To prevent return FALSE without thrown error we check error call stack.
      IF RunResult OR (GETLASTERRORCALLSTACK = '') THEN
        ERROR(PreviewExitStateErr);

      IF GETLASTERRORTEXT <> PreviewModeErr THEN
        ERROR(GETLASTERRORTEXT);
      ShowAllEntries;
      ERROR('');
    END;

    [External]
    PROCEDURE IsActive@8() : Boolean;
    VAR
      EventSubscription@1000 : Record 2000000140;
      Result@1001 : Boolean;
    BEGIN
      EventSubscription.SETRANGE("Subscriber Codeunit ID",CODEUNIT::"Posting Preview Event Handler");
      EventSubscription.SETFILTER("Active Manual Instances",'<>%1',0);
      Result := NOT EventSubscription.ISEMPTY;

      CLEAR(EventSubscription);
      EventSubscription.SETRANGE("Publisher Object ID",CODEUNIT::"Gen. Jnl.-Post Preview");
      EventSubscription.SETFILTER("Active Manual Instances",'<>%1',0);
      Result := Result AND (NOT EventSubscription.ISEMPTY);
      OnAfterIsActive(Result);
      EXIT(Result);
    END;

    LOCAL PROCEDURE RunPreview@5(Subscriber@1000 : Variant;RecVar@1002 : Variant) : Boolean;
    VAR
      Result@1001 : Boolean;
    BEGIN
      OnRunPreview(Result,Subscriber,RecVar);
      EXIT(Result);
    END;

    LOCAL PROCEDURE ShowAllEntries@20();
    VAR
      TempDocumentEntry@1000 : TEMPORARY Record 265;
      GLPostingPreview@1001 : Page 115;
    BEGIN
      PostingPreviewEventHandler.FillDocumentEntry(TempDocumentEntry);
      IF NOT TempDocumentEntry.ISEMPTY THEN BEGIN
        GLPostingPreview.Set(TempDocumentEntry,PostingPreviewEventHandler);
        GLPostingPreview.RUN
      END ELSE
        MESSAGE(NothingToPostMsg);
    END;

    PROCEDURE ShowDimensions@4(TableID@1000 : Integer;EntryNo@1001 : Integer;DimensionSetID@1002 : Integer);
    VAR
      DimMgt@1003 : Codeunit 408;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.OPEN(TableID);
      DimMgt.ShowDimensionSet(DimensionSetID,STRSUBSTNO('%1 %2',RecRef.CAPTION,EntryNo));
    END;

    [External]
    PROCEDURE ThrowError@7();
    BEGIN
      OnBeforeThrowError;
      ERROR(PreviewModeErr);
    END;

    [Integration]
    LOCAL PROCEDURE OnRunPreview@3(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterBindSubscription@1();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUnbindSubscription@2();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsActive@9(VAR Result@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeThrowError@11();
    BEGIN
    END;

    BEGIN
    END.
  }
}

