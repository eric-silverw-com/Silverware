OBJECT Page 9802 Permission Sets
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:12:05 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 9802=d,
                TableData 2000000167=rimd;
    CaptionML=ENU=Permission Sets;
    ApplicationArea=#Basic,#Suite;
    SourceTable=Table9009;
    DelayedInsert=Yes;
    PageType=List;
    UsageCategory=Lists;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             CanManageUsersOnTenant := PermissionManager.CanManageUsersOnTenant(USERSECURITYID);
           END;

    OnOpenPage=VAR
                 PermissionPagesMgt@1000 : Codeunit 9001;
               BEGIN
                 PermissionPagesMgt.CheckAndRaiseNotificationIfAppDBPermissionSetsChanged;
                 FillRecordBuffer;

                 IF PermissionManager.IsIntelligentCloud THEN
                   SETRANGE("Role ID",PermissionManager.GetIntelligentCloudTok);
               END;

    OnAfterGetRecord=BEGIN
                       PermissionEditable := (Type = Type::"User-Defined") AND CanManageUsersOnTenant;
                       IsPermissionSetEditable := PermissionEditable; // PermissionEditable is used instead of doing the same check
                     END;

    OnNewRecord=BEGIN
                  Type := Type::"User-Defined";
                  IsPermissionSetEditable := TRUE;
                  PermissionEditable := TRUE;
                  Scope := Scope::Tenant;
                END;

    OnInsertRecord=VAR
                     TenantPermissionSet@1000 : Record 2000000165;
                     PermissionPagesMgt@1003 : Codeunit 9001;
                     ZeroGUID@1002 : GUID;
                   BEGIN
                     PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;

                     TenantPermissionSet.INIT;
                     TenantPermissionSet."App ID" := ZeroGUID;
                     TenantPermissionSet."Role ID" := "Role ID";
                     TenantPermissionSet.Name := Name;
                     TenantPermissionSet.INSERT;

                     INSERT;
                     GET(Type::"User-Defined","Role ID");
                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     TenantPermissionSet@1000 : Record 2000000165;
                     PermissionPagesMgt@1001 : Codeunit 9001;
                   BEGIN
                     PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;

                     IF Type = Type::"User-Defined" THEN BEGIN
                       TenantPermissionSet.GET(xRec."App ID",xRec."Role ID");
                       IF xRec."Role ID" <> "Role ID" THEN BEGIN
                         TenantPermissionSet.RENAME(xRec."App ID","Role ID");
                         TenantPermissionSet.GET(xRec."App ID","Role ID");
                       END;
                       TenantPermissionSet.Name := Name;
                       TenantPermissionSet.MODIFY;
                       CurrPage.UPDATE(FALSE);
                       EXIT(TRUE);
                     END;
                     EXIT(FALSE); // Causes UI to stop processing the action - we handled it manually
                   END;

    OnDeleteRecord=VAR
                     PermissionSetLink@1002 : Record 9802;
                     TenantPermissionSet@1000 : Record 2000000165;
                     PermissionPagesMgt@1001 : Codeunit 9001;
                   BEGIN
                     PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;

                     IF Type <> Type::"User-Defined" THEN
                       ERROR(CannotDeletePermissionSetErr);

                     PermissionSetLink.SETRANGE("Linked Permission Set ID","Role ID");
                     PermissionSetLink.DELETEALL;

                     TenantPermissionSet.GET("App ID","Role ID");
                     TenantPermissionSet.DELETE;

                     CurrPage.UPDATE;
                     EXIT(TRUE);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           PermissionEditable := (Type = Type::"User-Defined") AND CanManageUsersOnTenant;
                           IsPermissionSetEditable := PermissionEditable; // PermissionEditable is used instead of doing the same check
                         END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=PermissionActions;
                      CaptionML=ENU=Permissions;
                      ActionContainerType=RelatedInformation }
      { 7       ;1   ;ActionGroup;
                      Name=ShowPermissions;
                      CaptionML=ENU=Permissions;
                      Image=Permission }
      { 6       ;2   ;Action    ;
                      Name=Permissions;
                      ShortCutKey=Shift+Ctrl+p;
                      CaptionML=ENU=Permissions;
                      ToolTipML=ENU=View or edit which feature objects users need to access, and set up the related permissions in permission sets that you can assign to the users of the database.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Permission;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 PermissionPagesMgt@1001 : Codeunit 9001;
                               BEGIN
                                 PermissionPagesMgt.ShowPermissions(Scope,"App ID","Role ID",FALSE);
                               END;
                                }
      { 11      ;2   ;Action    ;
                      CaptionML=ENU=Permission Set by User;
                      ToolTipML=ENU=View or edit the available permission sets and apply permission sets to existing users.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9816;
                      Promoted=Yes;
                      Image=Permission;
                      PromotedCategory=Process }
      { 12      ;2   ;Action    ;
                      CaptionML=ENU=Permission Set by User Group;
                      ToolTipML=ENU=View or edit the available permission sets and apply permission sets to existing user groups.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9837;
                      Promoted=Yes;
                      Image=Permission;
                      PromotedCategory=Process }
      { 15      ;1   ;ActionGroup;
                      CaptionML=ENU=User Groups }
      { 14      ;2   ;Action    ;
                      CaptionML=ENU=User by User Group;
                      ToolTipML=ENU=View and assign user groups to users.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9838;
                      Promoted=Yes;
                      Image=User;
                      PromotedCategory=Process }
      { 13      ;2   ;Action    ;
                      Name=UserGroups;
                      CaptionML=ENU=User Groups;
                      ToolTipML=ENU=Set up or modify user groups as a fast way of giving users access to the functionality that is relevant to their work.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 9830;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Users;
                      PromotedCategory=Process }
      { 9       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 5       ;1   ;ActionGroup;
                      Name=<Functions>;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 8       ;2   ;Action    ;
                      Name=CopyPermissionSet;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Permission Set;
                      ToolTipML=ENU=Create a copy of the selected permission set with a name that you specify.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=CanManageUsersOnTenant;
                      Image=Copy;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 AggregatePermissionSet@1035 : Record 2000000167;
                                 CopyPermissionSet@1000 : Report 9802;
                                 ZeroGuid@1001 : GUID;
                               BEGIN
                                 AggregatePermissionSet.SETRANGE(Scope,Scope);
                                 AggregatePermissionSet.SETRANGE("App ID","App ID");
                                 AggregatePermissionSet.SETRANGE("Role ID","Role ID");

                                 CopyPermissionSet.SETTABLEVIEW(AggregatePermissionSet);
                                 CopyPermissionSet.RUNMODAL;

                                 IF AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,ZeroGuid,CopyPermissionSet.GetNewRoleID) THEN BEGIN
                                   INIT;
                                   TRANSFERFIELDS(AggregatePermissionSet);
                                   SetType;
                                   INSERT;
                                   GET(Type,"Role ID");
                                 END;
                               END;
                                }
      { 18      ;2   ;Action    ;
                      Name=ImportPermissionSets;
                      CaptionML=ENU=Import Permission Sets;
                      ToolTipML=ENU=Import a file with permissions.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=CanManageUsersOnTenant;
                      PromotedIsBig=No;
                      Image=Import;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 XMLPORT.RUN(XMLPORT::"Import Tenant Permission Sets",FALSE,TRUE);
                                 FillRecordBuffer;
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=ExportPermissionSets;
                      CaptionML=ENU=Export Permission Sets;
                      ToolTipML=ENU=Export one or more permission sets to a file.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=Export;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 AggregatePermissionSet@1000 : Record 2000000167;
                                 TempBlob@1003 : Record 99008535;
                                 PermissionManager@1002 : Codeunit 9002;
                                 FileManagement@1005 : Codeunit 419;
                                 ExportPermissionSets@1001 : XMLport 9173;
                                 OutStr@1004 : OutStream;
                                 Filter@1006 : Text;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Rec);
                                 IF FINDSET THEN BEGIN
                                   Filter := "Role ID";
                                   IF NEXT <> 0 THEN
                                     REPEAT
                                       Filter += '|' + "Role ID";
                                     UNTIL NEXT = 0
                                 END;
                                 RESET;

                                 AggregatePermissionSet.SETFILTER("Role ID",Filter);
                                 IF PermissionManager.IsSandboxConfiguration THEN
                                   IF CONFIRM(ExportExtensionSchemaQst) THEN BEGIN
                                     TempBlob.INIT;
                                     TempBlob.Blob.CREATEOUTSTREAM(OutStr);
                                     ExportPermissionSets.SetExportToExtensionSchema(TRUE);
                                     ExportPermissionSets.SETTABLEVIEW(AggregatePermissionSet);
                                     ExportPermissionSets.SETDESTINATION(OutStr);
                                     ExportPermissionSets.EXPORT;

                                     FileManagement.BLOBExport(TempBlob,FileManagement.ServerTempFileName('xml'),TRUE);
                                     EXIT;
                                   END;

                                 XMLPORT.RUN(XMLPORT::"Export Permission Sets",FALSE,FALSE,AggregatePermissionSet);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                CaptionML=ENU=Permission Set;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=PermissionSet;
                CaptionML=ENU=Permission Set;
                ToolTipML=ENU=Specifies the permission set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Role ID";
                Editable=IsPermissionSetEditable }

    { 4   ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the name of the record.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Name;
                Editable=IsPermissionSetEditable }

    { 22  ;2   ;Field     ;
                Name=Type;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Type;
                Enabled=FALSE;
                Editable=FALSE }

    { 21  ;2   ;Field     ;
                CaptionML=ENU=Extension Name;
                ToolTipML=ENU=Specifies the name of the extension.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="App Name";
                Editable=FALSE }

    { 16  ;    ;Container ;
                ContainerType=FactBoxArea }

    { 17  ;1   ;Part      ;
                CaptionML=ENU=System Permissions;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Role ID=FIELD(Role ID);
                PagePartID=Page9804;
                Editable=FALSE;
                PartType=Page }

    { 19  ;1   ;Part      ;
                CaptionML=ENU=Tenant Permissions;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Role ID=FIELD(Role ID),
                            App ID=FIELD(App ID);
                PagePartID=Page9840;
                Editable=FALSE;
                PartType=Page }

  }
  CODE
  {
    VAR
      PermissionManager@1001 : Codeunit 9002;
      CanManageUsersOnTenant@1002 : Boolean INDATASET;
      IsPermissionSetEditable@1004 : Boolean INDATASET;
      PermissionEditable@1000 : Boolean INDATASET;
      CannotDeletePermissionSetErr@1005 : TextConst 'ENU=You can only delete user-created or copied permission sets.';
      ExportExtensionSchemaQst@1003 : TextConst 'ENU=Do you want to export permission sets in a schema that is supported by the extension package?';

    BEGIN
    END.
  }
}

