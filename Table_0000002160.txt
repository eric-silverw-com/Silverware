OBJECT Table 2160 Calendar Event
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:14:37 PM;
    Version List=;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Schedule;
             END;

    OnModify=BEGIN
               Schedule;
             END;

    OnDelete=VAR
               CalendarEventMangement@1000 : Codeunit 2160;
             BEGIN
               CheckIfArchived;

               Archived := TRUE;
               MODIFY;

               CalendarEventMangement.DescheduleCalendarEvent(Rec);
             END;

    ReplicateData=No;
    CaptionML=ENU=Calendar Event;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=ENU=No. }
    { 2   ;   ;Scheduled Date      ;Date          ;OnValidate=BEGIN
                                                                CheckIfArchived;
                                                              END;

                                                   CaptionML=ENU=Scheduled Date }
    { 3   ;   ;Archived            ;Boolean       ;CaptionML=ENU=Archived }
    { 4   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                CheckIfArchived;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 5   ;   ;Object ID to Run    ;Integer       ;OnValidate=BEGIN
                                                                CheckIfArchived;
                                                              END;

                                                   CaptionML=ENU=Object ID to Run }
    { 6   ;   ;Record ID to Process;RecordID      ;OnValidate=BEGIN
                                                                CheckIfArchived;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Record ID to Process }
    { 7   ;   ;State               ;Option        ;CaptionML=ENU=State;
                                                   OptionCaptionML=ENU=Queued,In Progress,Completed,Failed,On Hold;
                                                   OptionString=Queued,In Progress,Completed,Failed,On Hold }
    { 8   ;   ;Result              ;Text250       ;CaptionML=ENU=Result }
    { 9   ;   ;User                ;Code50        ;OnValidate=BEGIN
                                                                CheckIfArchived;
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=ENU=User }
    { 10  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=User,System;
                                                   OptionString=User,System }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Scheduled Date,Archived,User             }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Scheduled Date,Description,State         }
  }
  CODE
  {
    VAR
      AlreadyExecutedErr@1000 : TextConst 'ENU=This calendar entry has already been executed and cannot be modified.';

    LOCAL PROCEDURE Schedule@1();
    VAR
      CalendarEventMangement@1000 : Codeunit 2160;
    BEGIN
      IF (State <> State::Queued) OR Archived THEN
        EXIT;

      // Validate entries
      TESTFIELD("Scheduled Date");
      TESTFIELD(Description);
      TESTFIELD("Object ID to Run");
      TESTFIELD(Archived,FALSE);

      User := USERID;

      CalendarEventMangement.CreateOrUpdateJobQueueEntry(Rec)
    END;

    LOCAL PROCEDURE CheckIfArchived@4();
    BEGIN
      IF Archived THEN
        ERROR(AlreadyExecutedErr);
    END;

    BEGIN
    END.
  }
}

