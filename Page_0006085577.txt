OBJECT Page 6085577 Scanning & OCR
{
  OBJECT-PROPERTIES
  {
    Date=04/20/18;
    Time=[ 1:00:00 AM];
    Version List=DCW17.00.00.5.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=Scanning & OCR;
    DeleteAllowed=No;
    SourceTable=Table6085575;
    SourceTableView=WHERE(Drag and Drop Category=CONST(No));
    PageType=Worksheet;
    UsageCategory=Tasks;
    CardPageID=Document Category Card;
    ShowFilter=No;
    OnOpenPage=BEGIN
                 DCSetup.GET;
                 IF DCSetup."Scanner Driver Type" <>  DCSetup."Scanner Driver Type"::None THEN BEGIN
                   ScannerExists := TRUE;
                   CaptureAddinLib.BuildSetDriverTypeCommand(DCSetup."Scanner Driver Type",CaptureXmlDoc);
                   CaptureAddinLib.BuildSetSelectedScannerCommand(ContiniaUserProp.GetSelectedScanner,CaptureXmlDoc);
                   CaptureAddinLib.BuildRefreshScannerListCommand(CaptureXmlDoc);
                   SendCommand(CaptureXmlDoc);
                 END ELSE
                   ScannerExists := FALSE;

                 CODC.IsCompanyActive(FALSE);
               END;

    OnAfterGetRecord=VAR
                       ConnEndpoint@1160040000 : Record 6085620;
                     BEGIN
                       IF DCSetup."Use Cloud OCR" THEN BEGIN
                         Email := '';
                         IF "E-Mail Connection Endpoint" <> '' THEN
                           IF ConnEndpoint.GET("E-Mail Connection Endpoint") THEN
                             Email := CODC.GetOneCategoryEmail(ConnEndpoint);
                       END;

                       UpdateCounters;
                     END;

    ActionList=ACTIONS
    {
      { 1000000026;  ;ActionContainer;
                      Name=<Action1900000003>;
                      ActionContainerType=ActionItems }
      { 6085582 ;1   ;Action    ;
                      Name=Scan;
                      ShortCutKey=Return;
                      CaptionML=ENU=&Scan;
                      Promoted=Yes;
                      Visible=ScannerExists;
                      PromotedIsBig=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 DCSetup@1000000001 : Record 6085573;
                                 Selection@1000000003 : Integer;
                               BEGIN
                                 TESTFIELD("Drag and Drop Category",FALSE);

                                 DCSetup.GET;
                                 DCSetup.TESTFIELD("Scanned File Path for OCR");

                                 Selection := STRMENU(Text006);
                                 IF Selection = 0 THEN
                                   EXIT;

                                 SetSignatureParameters;

                                 CaptureAddinLib.BuildStartScanningCommand(Text003,Selection IN [2,4],Selection IN [3,4],CaptureXmlDoc);
                                 SendCommand(CaptureXmlDoc);
                               END;
                                }
      { 6085581 ;1   ;Action    ;
                      Name=Import Files;
                      CaptionML=ENU=&Import Files;
                      RunObject=Codeunit 6085577;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Process }
      { 6085578 ;1   ;Action    ;
                      Name=Scanner Setup;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=&Scanner Setup;
                      Promoted=Yes;
                      Visible=ScannerExists;
                      PromotedIsBig=Yes;
                      Image=Setup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF ScannerExists THEN BEGIN
                                   CaptureAddinLib.BuildShowScannerSettingCommand(CaptureXmlDoc);
                                   SendCommand(CaptureXmlDoc);
                                 END ELSE
                                   ERROR(MissingScannerErr);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=Content;
                ContainerType=ContentArea }

    { 1000000008;1;Field  ;
                Name=ScannerAddIn;
                CaptionML=ENU=&Scanner;
                SourceExpr=ScannerAddInSource;
                Visible=ScannerExists;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.Scanner;PublicKeyToken=0c53e51c0afe7001];
                OnControlAddIn=VAR
                                 XmlLib@1161054001 : Codeunit 6085573;
                                 InXmlDoc@1161054000 : Codeunit 6192800;
                                 DocumentElement@1001 : Codeunit 6192801;
                               BEGIN
                                 CLEAR(CaptureXmlDoc);
                                 ScannerExists := TRUE;
                                 CaptureAddinLib.TextToXml(InXmlDoc,Data);
                                 InXmlDoc.GetDocumentElement(DocumentElement);
                                 HandleXmlCommand(XmlLib.GetNodeText(DocumentElement,'Command'),InXmlDoc);
                               END;
                                }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                Name=Code;
                SourceExpr=Code }

    { 1000000003;2;Field  ;
                Name=Description;
                SourceExpr=Description }

    { 1160040000;2;Field  ;
                Name=Email;
                CaptionML=ENU=E-Mail (Continia Cloud OCR);
                SourceExpr=Email;
                Visible=FALSE }

    { 1000000009;2;Field  ;
                Name=Documents for OCR;
                BlankZero=Yes;
                SourceExpr="Documents for OCR";
                OnDrillDown=BEGIN
                              OpenFilesForOCR;
                            END;
                             }

    { 1000000010;2;Field  ;
                Name=Documents for Import;
                BlankZero=Yes;
                SourceExpr="Documents for Import";
                OnDrillDown=BEGIN
                              OpenFilesForImport;
                            END;
                             }

    { 161024012;2;Field   ;
                Name=Documents with Error;
                SourceExpr="Documents with Error";
                Style=Unfavorable;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              OpenFilesWithError;
                            END;
                             }

    { 1000000004;2;Field  ;
                Name=Open Documents;
                SourceExpr="Documents to Register";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              OpenOpenDocuments;
                            END;
                             }

    { 1160040001;2;Field  ;
                Name=No. of Documents with UIC;
                SourceExpr="No. of Documents with UIC";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              OpenUICDocuments;
                            END;
                             }

    { 1000000005;2;Field  ;
                Name=Registered Documents;
                SourceExpr="Registered Documents";
                Visible=FALSE;
                OnDrillDown=VAR
                              Document@1160040000 : Record 6085590;
                            BEGIN
                              OpenRegisteredDocuments;
                            END;
                             }

    { 1000000006;2;Field  ;
                Name=Rejected Documents;
                SourceExpr="Rejected Documents";
                Visible=FALSE;
                OnDrillDown=VAR
                              Document@1160040000 : Record 6085590;
                            BEGIN
                              OpenRejectedDocuments;
                            END;
                             }

  }
  CODE
  {
    VAR
      ContiniaUserProp@6085575 : Record 6085780;
      DCSetup@1160040001 : Record 6085573;
      TempCertificateFile@1001 : TEMPORARY Record 6085608;
      CaptureAddinLib@1000000001 : Codeunit 6085660;
      CODC@6085576 : Codeunit 6085617;
      CaptureXmlDoc@1000000002 : Codeunit 6192800;
      TempFileStorage@1002 : Codeunit 6085665;
      Status@1000 : 'OCR,Import,Error';
      ScannerExists@6085579 : Boolean;
      ClientAddInInitialized@6085581 : Boolean;
      CertificateExportPath@6085574 : Text[250];
      ScannerAddInSource@1000000000 : Text;
      Email@1160040000 : Text[250];
      Text001@1000000009 : TextConst 'ENU=No scanner was detected.\\If you have a connected scanner, you could try to switch it off and on again.';
      Text003@1000000007 : TextConst 'ENU=The paper is jammed in the document feeder.\\Do you wish to continue?';
      Text004@1000000006 : TextConst 'ENU=Scanning completed.';
      Text005@1000000005 : TextConst 'ENU=Loading Scanner List...';
      Text006@1000000004 : TextConst 'ENU=Scan single-paged documents (front),Scan multi-paged documents (front),Scan single-paged documents (front and back),Scan multi-paged documents (front and back)';
      Text007@161024012 : TextConst 'ENU=%1 - %2';
      Text009@6085573 : TextConst 'ENU=Password for %1 is wrong in %2.';
      Text010@6085577 : TextConst 'ENU=An error occured when storing the document.';
      Text011@6085582 : TextConst 'ENU=An error occured when uploading the document to Cloud OCR.';
      MissingScannerErr@6085580 : TextConst 'ENU=You cannot access the scanner setup as no scanner was found.';

    PROCEDURE HandleXmlCommand@1000000007(Command@1000000000 : Text[1024];VAR InXmlDoc@1000000001 : Codeunit 6192800);
    VAR
      XmlLib@1000000003 : Codeunit 6085573;
      DocumentElement@1000 : Codeunit 6192801;
      TempFile@1002 : TEMPORARY Record 6085608;
      ScannerCode@6085575 : Code[50];
      FilePath@6085573 : Text[1024];
      ServerFilePath@1160040000 : Text[1024];
      MessageText@6085574 : Text[1024];
      i@1000000013 : Integer;
    BEGIN
      InXmlDoc.GetDocumentElement(DocumentElement);

      CASE Command OF
        'NoScannerFound':
          ScannerExists := FALSE;

        'SelectedScannerChanged':
          BEGIN
            ScannerCode := XmlLib.GetNodeText(DocumentElement,'ScannerCode');
            ContiniaUserProp.SetSelectedScanner(ScannerCode);
            ScannerExists := TRUE;
          END;

        'DocumentScanned':
          BEGIN
            FilePath := XmlLib.GetNodeText(DocumentElement,'FilePath');
            IF DCSetup."Use Cloud OCR" THEN BEGIN
              TempFileStorage.CheckCreateDirectory('SCAN');
              TempFile.CreateFromClientFilePath(FilePath);
              TempFile.DeleteFile;
              TempFile.Path := 'SCAN';
              TempFile."File Location" := TempFile."File Location"::Memory;
              TempFileStorage.AddFile(TempFile);
            END ELSE BEGIN
              TempFile.CreateFromClientFilePath(FilePath);
              IF TempFile.SaveToServer(GetCategoryPath(1)) THEN
                TempFile.DeleteFile
              ELSE
                ERROR(Text010);
            END;
          END;

        'ScanningCompleted':
          BEGIN
            IF DCSetup."Use Cloud OCR" THEN
              UploadFilesInFolderForOCR('SCAN');

            TempCertificateFile.DeleteFile;
            MESSAGE(Text004);
          END;

        'ErrorOccured':
          BEGIN
            IF NOT ClientAddInInitialized THEN
              ScannerExists := FALSE;

            MessageText := XmlLib.GetNodeText(DocumentElement,'Message');
            CASE MessageText OF
              'CertificateWrongPassword' :
                MESSAGE(Text009);
            END;
          END;
      END;

      ClientAddInInitialized := TRUE;

      IF NOT CaptureXmlDoc.IsEmpty THEN
        SendCommand(CaptureXmlDoc);

      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE SendCommand@1000000002(VAR XmlDoc@1000000000 : Codeunit 6192800);
    BEGIN
      CaptureAddinLib.XmlToText(XmlDoc,ScannerAddInSource);
      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE SetSignatureParameters@1160040002();
    BEGIN
      IF NOT DCSetup."Sign Scanned Documents" THEN
        EXIT;

      DCSetup.CALCFIELDS("PDF Signature Certificate");

      IF DCSetup."PDF Signature Certificate".HASVALUE THEN BEGIN
        TempCertificateFile.Data := DCSetup."PDF Signature Certificate";
        CertificateExportPath := TempCertificateFile.GetClientFilePath;
      END;

      CaptureAddinLib.BuildSetSignParametersCommand(CertificateExportPath,DCSetup."PDF Signature Cert. Password",
        'Continia Digital Documents 1.0','1C883351991EF361','','','','',CaptureXmlDoc);
    END;

    BEGIN
    END.
  }
}

