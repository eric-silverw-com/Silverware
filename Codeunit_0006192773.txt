OBJECT Codeunit 6192773 Continia Online License Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=01/09/19;
    Time=[ 6:59:21 PM];
    Modified=Yes;
    Version List=DCW17.00.00.4.50.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ContiniaOnlineMgt@1160040002 : Codeunit 6192772;
      DatabaseReader@1000 : Codeunit 6192774;
      HttpActions@1160040001 : 'PUT,DELETE,GET';
      Text001@1160040003 : TextConst 'ENU=%1 has not been activated correctly. Please activate the company with the function Activate Company on the %1 Setup card.';
      Text003@1160040000 : TextConst 'ENU=Company GUID: %1';
      Text004@1160040005 : TextConst 'ENU=Company Name: %1';
      Text005@1160040009 : TextConst 'ENU=Company Name (Setup): %1';
      Text006@1160040006 : TextConst 'ENU=VAT Registration No.: %1';
      Text007@1160040007 : TextConst 'ENU=NAV Version: %1';
      Text008@1160040008 : TextConst 'ENU=NAV License No.: %1';
      Text009@1160040012 : TextConst 'ENU=%1 and %2 is linked to the same company registration in Continia Online.\\You must either deactivate one of these companies or activate one of them as a new company.';
      CompanyDisabledMsg@1160040004 : TextConst 'ENU=%1 has been deactivated for company %2.';
      ActivationState@1160040010 : 'NeverActivated,NeedReactivation,Activated,OfflineStarted';
      OfflineActivationQst@6085573 : TextConst 'ENU=Continia Online did not respond and %1 could not be activated.\\Do you want to start an offline activation?';
      OfflineActivationFailedErr@6085574 : TextConst 'ENU=No offline activation has been started.';
      InvalidFileErr@6085580 : TextConst 'ENU=The file selected is not a valid response file for offline activation.\\Please select another file.';
      OfflineActivationFileName@6085575 : TextConst 'ENU=Continia Online Activation';
      OfflineActivationWindowSave@6085576 : TextConst 'ENU=Save Offline Activation File';
      OfflineActivationWindowLoad@6085577 : TextConst 'ENU=Load Offline Activation File';
      CompleteOfflineActivationLater@6085578 : TextConst 'ENU=When you have received the activation file, please click activate again and import the file.';
      FinishOfflineActivationQst@6085579 : TextConst 'ENU=An offline activation is currently in progress.\\Do you want to complete it?';
      CompanyAlreadyActivatedErr@1160040011 : TextConst 'ENU=%1 has already been activated.\\Please deactivate the company before you restart the activation process.';

    PROCEDURE IsActive@1160040000(ProductCode@1160040000 : Code[10];ProductName@1160040003 : Text[250];ShowError@1160040001 : Boolean) : Boolean;
    BEGIN
      ActivationState := GetCompanyActivationState(ProductCode,COMPANYNAME);

      IF ActivationState = ActivationState::Activated THEN
        EXIT(TRUE)
      ELSE
        IF ShowError THEN
          ERROR(Text001,ProductName)
        ELSE
          IF ActivationState = ActivationState::NeedReactivation THEN
            MESSAGE(Text001,ProductName);
    END;

    PROCEDURE GetCompanyActivationState@1160040003(ProductCode@1160040004 : Code[10];Company@1160040000 : Text[50]) : Integer;
    VAR
      ContiniaCompanySetup@1160040003 : Record 6192773;
      ContiniaProductActivation@1160040002 : Record 6192772;
    BEGIN
      GetDatabaseReader;
      ContiniaCompanySetup.CHANGECOMPANY(Company);
      IF NOT ContiniaCompanySetup.GET THEN
        EXIT(ActivationState::NeverActivated);

      WITH ContiniaProductActivation DO BEGIN
        SETRANGE("Product Code",ProductCode);
        SETRANGE("Company GUID",ContiniaCompanySetup."Company GUID");
        IF NOT FINDFIRST THEN
          IF NOT GET(ProductCode,UPPERCASE(Company)) THEN
            EXIT(ActivationState::NeverActivated);

        IF "Offline Activation Status" = "Offline Activation Status"::Started THEN
          EXIT(ActivationState::OfflineStarted);

        IF ("Expiration Date" <> 0D) AND ("Expiration Date" < TODAY) THEN
          EXIT(ActivationState::NeedReactivation);

        IF ("Hashed System Identifier" <> HashValue(Company)) THEN
          EXIT(ActivationState::NeedReactivation);
      END;

      EXIT(ActivationState::Activated);
    END;

    PROCEDURE GetStandardLicenseInfo@1160040001(VAR LicenseInfo@1160040000 : ARRAY [100] OF Text[250]) : Integer;
    VAR
      CompInfo@1160040001 : Record 79;
      AppMgt@1160040002 : Codeunit 9015;
    BEGIN
      CompInfo.GET;

      LicenseInfo[1] := STRSUBSTNO(Text004,COMPANYNAME);
      LicenseInfo[2] := STRSUBSTNO(Text005,CompInfo.Name);
      LicenseInfo[3] := STRSUBSTNO(Text006,CompInfo."VAT Registration No.");
      LicenseInfo[4] := STRSUBSTNO(Text007,AppMgt.ApplicationVersion);
      LicenseInfo[5] := STRSUBSTNO(Text008,ContiniaOnlineMgt.GetNavLicenseSN);
      LicenseInfo[6] := STRSUBSTNO(Text003,ContiniaOnlineMgt.GetCompanyGUID);

      EXIT(6);
    END;

    PROCEDURE ActivateProduct@1160040010(ProductCode@1160040000 : Code[10];ProductVersion@1160040001 : Text[250];ProductDescription@1000 : Text[250];LicenseInfo@1160040002 : ARRAY [100] OF Text[250]) : Integer;
    VAR
      ContiniaCompanySetup@1160040005 : Record 6192773;
      ActivateProductPage@1160040003 : Page 6192773;
      COMgt@1160040004 : Codeunit 6192772;
      UserSelection@6085573 : 'New Company,New Test Company,Reactivate';
    BEGIN
      GetDatabaseReader;
      CASE GetCompanyActivationState(ProductCode,COMPANYNAME) OF
        ActivationState::NeverActivated:
          BEGIN
            IF NOT ShowAgreement(ProductDescription,LicenseInfo) THEN
              ERROR('');

            COMgt.CreateNewCompanyGUID;
            AcceptAgreement(ProductCode,ProductVersion,ProductDescription,LicenseInfo,FALSE);
          END;

        ActivationState::OfflineStarted:
          OfflineActivationFinish(ProductCode,ProductDescription);

        ActivationState::NeedReactivation,ActivationState::Activated:
          BEGIN
            ActivateProductPage.InitCard(ProductCode,ProductDescription);
            ActivateProductPage.LOOKUPMODE(TRUE);
            IF ActivateProductPage.RUNMODAL IN [ACTION::LookupOK,ACTION::Yes] THEN BEGIN //Support for ConfirmationDialog
              GetStandardLicenseInfo(LicenseInfo);
              IF NOT ShowAgreement(ProductDescription,LicenseInfo) THEN
                ERROR('');

              IF ActivateProductPage.IsNewCompany THEN BEGIN
                COMgt.CreateNewCompanyGUID;
                AcceptAgreement(ProductCode,ProductVersion,ProductDescription,LicenseInfo,FALSE);
                EXIT(UserSelection::"New Company");
              END ELSE BEGIN
                ContiniaCompanySetup.GET;
                ContiniaCompanySetup."Company GUID" := ActivateProductPage.GetGuid;
                ContiniaCompanySetup.MODIFY;

                VerifyGUIDWithProduct(ProductCode,COMPANYNAME);
                AcceptAgreement(ProductCode,ProductVersion,ProductDescription,LicenseInfo,TRUE);
                EXIT(UserSelection::Reactivate);
              END;
            END ELSE
              ERROR('');
          END;
      END;
    END;

    PROCEDURE OfflineActivateProduct@6085573(ProductCode@1160040000 : Code[10];ProductVersion@1160040001 : Text[250];ProductDescription@1000 : Text[250];LicenseInfo@1160040002 : ARRAY [100] OF Text[250]);
    VAR
      ActivateProductPage@1160040003 : Page 6192773;
      COMgt@1160040004 : Codeunit 6192772;
    BEGIN
      GetDatabaseReader;
      CASE GetCompanyActivationState(ProductCode,COMPANYNAME) OF
        ActivationState::NeverActivated:
          BEGIN
            IF NOT ShowAgreement(ProductDescription,LicenseInfo) THEN
              ERROR('');

            COMgt.CreateNewCompanyGUID;
            OfflineActivationStart(ProductCode,ProductVersion,ProductDescription,LicenseInfo);
          END;

        ActivationState::OfflineStarted:
          OfflineActivationFinish(ProductCode,ProductDescription);

        ActivationState::NeedReactivation,ActivationState::Activated:
          ERROR(CompanyAlreadyActivatedErr,COMPANYNAME);
      END;
    END;

    PROCEDURE DeactivateCompany@1160040009(ProductCode@1160040001 : Code[10];ProductName@1160040006 : Text[250]);
    VAR
      ContiniaCompanySetup@6085573 : Record 6192773;
      ContiniaCompanySetup2@6085574 : Record 6192773;
      Company@6085575 : Record 2000000006;
      ContiniaProductActivation@1160040002 : Record 6192772;
      ContiniaProductActivation2@1160040000 : Record 6192772;
    BEGIN
      IF ContiniaProductActivation.GET(ProductCode,UPPERCASE(COMPANYNAME)) THEN BEGIN
        ContiniaProductActivation2.SETRANGE("Company Name",UPPERCASE(COMPANYNAME));
        ContiniaProductActivation2.SETFILTER("Product Code",'<>%1',ProductCode);
        IF ContiniaProductActivation2.ISEMPTY THEN BEGIN
          Company.SETFILTER(Name,'<>%1',COMPANYNAME);
          IF Company.FINDFIRST THEN
            REPEAT
              ContiniaCompanySetup2.CHANGECOMPANY(Company.Name);
              IF ContiniaCompanySetup2.GET AND (ContiniaCompanySetup."Company GUID" = ContiniaCompanySetup2."Company GUID") THEN BEGIN
                ContiniaOnlineMgt.CreateNewCompanyGUID;
                EXIT;
              END;
            UNTIL Company.NEXT = 0;

          ContiniaOnlineMgt.CreateNewCompanyGUID;
        END;

        ContiniaProductActivation.DELETE;
      END;

      MESSAGE(CompanyDisabledMsg,ProductName,COMPANYNAME);
    END;

    PROCEDURE ShowAgreement@1160040004(ProductVersion@1160040001 : Text[250];LicenseInfo@1160040003 : ARRAY [100] OF Text[250]) : Boolean;
    VAR
      ContiniaLicenseTerms@1160040000 : Page 6086501;
    BEGIN
      ContiniaLicenseTerms.InitCard(ProductVersion,LicenseInfo);
      IF ISSERVICETIER THEN BEGIN
        IF ContiniaLicenseTerms.RUNMODAL = ACTION::OK THEN
          EXIT(ContiniaLicenseTerms.GetIsAccepted);
      END ELSE
        EXIT(ContiniaLicenseTerms.RUNMODAL = ACTION::OK);
    END;

    PROCEDURE AcceptAgreement@1160040002(ProductCode@1160040011 : Code[10];ProductVersion@1160040009 : Text[250];ProductDescription@1000 : Text[250];LicenseInfo@1160040012 : ARRAY [100] OF Text[250];IsUpdate@1160040013 : Boolean) : Boolean;
    VAR
      ContiniaCompanySetup@1160040015 : Record 6192773;
      ContiniaProductActivation@1160040007 : Record 6192772;
      XmlDoc@6085578 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      GenerateLicenseXML(XmlDoc,ProductCode,ProductVersion,ProductDescription,LicenseInfo,IsUpdate);
      IF NOT ContiniaOnlineMgt.ExecuteRequest(GetAcceptUrl,HttpActions::PUT,FALSE,XmlDoc) THEN
        ERROR(ContiniaOnlineMgt.GetLastErrorText);

      CLEAR(XmlDoc);

      ContiniaCompanySetup.GET;
      ContiniaCompanySetup.TESTFIELD("Client ID");
      WITH ContiniaProductActivation DO BEGIN
        IF NOT GET(ProductCode,UPPERCASE(COMPANYNAME)) THEN BEGIN
          SETRANGE("Product Code",ProductCode);
          SETRANGE("Company GUID",ContiniaCompanySetup."Company GUID");
          IF FINDFIRST THEN
            RENAME(ProductCode,UPPERCASE(COMPANYNAME))
          ELSE BEGIN
            "Product Code" := ProductCode;
            "Company Name" := UPPERCASE(COMPANYNAME);
            INSERT;
          END;
        END;

        "Hashed System Identifier" := HashValue(COMPANYNAME);
        IF GetDatabaseReader THEN BEGIN
          "Database Name" := DatabaseReader.GetName;
          "Database Creator" := DatabaseReader.GetCreator;
          "Database Created" := DatabaseReader.GetCreatedDate;
        END ELSE BEGIN
          "Database Name" := '';
          "Database Creator" := '';
          "Database Created" := 0D;
        END;

        "Client ID" := ContiniaCompanySetup."Client ID";
        "Activation Date" := TODAY;
        "Activated by User ID" := USERID;
        "Company GUID" := ContiniaCompanySetup."Company GUID";
        MODIFY;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GenerateLicenseXML@6085574(VAR XmlDoc@6085574 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ProductCode@6085585 : Code[10];ProductVersion@6085584 : Text[250];ProductDescription@6085583 : Text[250];LicenseInfo@6085582 : ARRAY [100] OF Text[250];IsUpdate@6085580 : Boolean);
    VAR
      CompInfo@6085573 : Record 79;
      AppMgt@6085586 : Codeunit 9015;
      XmlLib@6085581 : Codeunit 6085573;
      AgreementNode@6085579 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CompanyNode@6085578 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InfoNode@6085577 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNode@6085576 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@6085575 : Integer;
    BEGIN
      CompInfo.GET;
      XmlDoc := XmlDoc.XmlDocument;

      AgreementNode := XmlDoc.CreateNode('element','LicenseAgreement','');
      XmlLib.SetXmlNodeAttr(AgreementNode,'Update',ContiniaOnlineMgt.GetBoolAsText(IsUpdate));

      XmlLib.CreateXmlNode(AgreementNode,'Company','',CompanyNode);
      XmlLib.SetXmlNodeAttr(CompanyNode,'CompanyGUID',ContiniaOnlineMgt.GetCompanyGUID);
      XmlLib.SetXmlNodeAttr(CompanyNode,'CompanyName',COMPANYNAME);
      XmlLib.SetXmlNodeAttr(CompanyNode,'CompanyInfoName',CompInfo.Name);
      XmlLib.SetXmlNodeAttr(CompanyNode,'VATRegNo',CompInfo."VAT Registration No.");
      XmlLib.SetXmlNodeAttr(CompanyNode,'NavVersion',ProductDescription);
      XmlLib.SetXmlNodeAttr(CompanyNode,'NAVAppVersion',AppMgt.ApplicationVersion);
      XmlLib.SetXmlNodeAttr(CompanyNode,'ProductCode',ProductCode);
      XmlLib.SetXmlNodeAttr(CompanyNode,'ProductVersion',ProductVersion);
      XmlLib.SetXmlNodeAttr(CompanyNode,'NAVLicenseSN',ContiniaOnlineMgt.GetNavLicenseSN);

      XmlLib.CreateXmlNode(AgreementNode,'LicenseInfo','',InfoNode);
      FOR i := 1 TO ARRAYLEN(LicenseInfo) DO BEGIN
        IF LicenseInfo[i] <> '' THEN BEGIN
          XmlLib.CreateXmlNode(InfoNode,'Line','',LineNode);
          XmlLib.SetXmlNodeAttr(LineNode,'Text',LicenseInfo[i]);
        END;
      END;

      XmlDoc.AppendChild(AgreementNode);
    END;

    LOCAL PROCEDURE OfflineActivationStart@6085576(ProductCode@6085576 : Code[10];ProductVersion@6085575 : Text[250];ProductDescription@1160040001 : Text[250];LicenseInfo@6085574 : ARRAY [100] OF Text[250]);
    VAR
      ContiniaCompanySetup@6085578 : Record 6192773;
      ContiniaProductActivation@6085579 : Record 6192772;
      FileMgt@6085581 : Codeunit 419;
      XmlDoc@6085577 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      FileName@6085582 : Text;
      ServerFile@6085585 : Text;
    BEGIN
      ContiniaCompanySetup.GET;
      ContiniaCompanySetup.TESTFIELD("Company GUID");
      ContiniaCompanySetup.TESTFIELD("Client ID");

      WITH ContiniaProductActivation DO BEGIN
        IF NOT GET(ProductCode,UPPERCASE(COMPANYNAME)) THEN BEGIN
          SETRANGE("Product Code",ProductCode);
          SETRANGE("Company GUID",ContiniaCompanySetup."Company GUID");
          IF FINDFIRST THEN
            RENAME(ProductCode,UPPERCASE(COMPANYNAME))
          ELSE BEGIN
            "Product Code" := ProductCode;
            "Company Name" := UPPERCASE(COMPANYNAME);
            INSERT;
          END;
        END;

        "Hashed System Identifier" := HashValue(COMPANYNAME);
        IF GetDatabaseReader THEN BEGIN
          "Database Name" := DatabaseReader.GetName;
          "Database Creator" := DatabaseReader.GetCreator;
          "Database Created" := DatabaseReader.GetCreatedDate;
        END ELSE BEGIN
          "Database Name" := '';
          "Database Creator" := '';
          "Database Created" := 0D;
        END;

        "Client ID" := ContiniaCompanySetup."Client ID";
        "Activation Date" := TODAY;
        "Activated by User ID" := USERID;
        "Company GUID" := ContiniaCompanySetup."Company GUID";
        "Offline Activation Status" := "Offline Activation Status"::Started;
        MODIFY(TRUE);
      END;

      GenerateLicenseXML(XmlDoc,ProductCode,ProductVersion,ProductDescription,LicenseInfo,FALSE);

      FileName := FileMgt.SaveFileDialog(OfflineActivationWindowSave,
        STRSUBSTNO('Continia Activation Request File - %1.xml',ProductCode),'XML|*.xml');
      ServerFile := FileMgt.ServerTempFileName('xml');
      XmlDoc.Save(ServerFile);
      FileMgt.DownloadToFile(ServerFile,FileName);

      MESSAGE(CompleteOfflineActivationLater);
      EXIT;
    END;

    LOCAL PROCEDURE OfflineActivationFinish@6085592(ProductCode@6085578 : Code[10];ProductVersion@6085576 : Text[250]);
    VAR
      ContiniaProductActivation@6085579 : Record 6192772;
      TempBlob@6085574 : TEMPORARY Record 99008535;
      FileMgt@6085581 : Codeunit 419;
      XmlDoc@6085575 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReadStream@6085577 : InStream;
      FileName@6085573 : Text[250];
    BEGIN
      WITH ContiniaProductActivation DO BEGIN
        GET(ProductCode,UPPERCASE(COMPANYNAME));
        IF "Offline Activation Status" <> "Offline Activation Status"::Started THEN
          ERROR(OfflineActivationFailedErr);

        IF NOT CONFIRM(FinishOfflineActivationQst,TRUE) THEN
          ERROR('',ProductVersion);


        FileName := STRSUBSTNO('Continia Activation Response File - %1.xml',ProductCode);
        IF FileMgt.BLOBImport(TempBlob,FileName) = '' THEN
          ERROR('');

        TempBlob.Blob.CREATEINSTREAM(ReadStream);
        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReadStream);

        IF ValidateOfflineActivation(ContiniaProductActivation,XmlDoc) THEN BEGIN
          "Offline Activation Status" := "Offline Activation Status"::Active;
          MODIFY(TRUE);
        END ELSE
          ERROR(InvalidFileErr);
      END;
    END;

    PROCEDURE UpdateLine@1160040012(LineText@1160040002 : Text[1024];ReplaceText@1160040003 : Text[100];ReplaceToText@1160040000 : Text[100]) : Text[1024];
    VAR
      ReplaceLen@1160040001 : Integer;
      ReplaceToLen@1160040004 : Integer;
      Count@1160040005 : Integer;
    BEGIN
      ReplaceLen := STRLEN(ReplaceText);
      ReplaceToLen := STRLEN(ReplaceToText);
      Count := STRPOS(LineText,ReplaceText);

      IF Count <> 0 THEN BEGIN
        LineText := COPYSTR(LineText,1,Count-1) +
          ReplaceToText +
          COPYSTR(LineText,Count+ReplaceLen);

        LineText := COPYSTR(LineText,1,Count-1+ReplaceToLen) +
          UpdateLine(
            COPYSTR(LineText,Count+ReplaceToLen),
            ReplaceText,
            ReplaceToText);
      END;

      EXIT(LineText);
    END;

    PROCEDURE GetLicenseUrl@1160040039() : Text[1024];
    BEGIN
      IF ContiniaOnlineMgt.IsDev THEN
        EXIT('https://devlicense.continiaonline.com/api/v1/LicenseAgreement/')
      ELSE
        IF ContiniaOnlineMgt.IsDemo THEN
          EXIT('https://demolicense.continiaonline.com/api/v1/LicenseAgreement/')
      ELSE
        EXIT('https://license.continiaonline.com/api/v1/LicenseAgreement/');
    END;

    PROCEDURE GetAcceptUrl@1160040040() : Text[1024];
    BEGIN
      EXIT(GetLicenseUrl + 'AcceptLicense');
    END;

    PROCEDURE GetActivationsURL@6085579() : Text[1024];
    BEGIN
      EXIT(GetLicenseUrl + 'Activations');
    END;

    PROCEDURE HashValue@1160040005(Company@1160040001 : Text[50]) : Text[128];
    VAR
      ContiniaCompanySetup@6085573 : Record 6192773;
      ValueToHash@1160040003 : Text[1024];
      Cryptography@1160040000 : Codeunit 6085599;
    BEGIN
      ContiniaCompanySetup.CHANGECOMPANY(Company);
      ContiniaCompanySetup.GET;
      ContiniaCompanySetup.TESTFIELD("Client ID");

      IF GetDatabaseReader THEN
        ValueToHash := UPPERCASE(STRSUBSTNO('%1-%2-%3-%4-%5',
          Company,
          DatabaseReader.GetName,
          DatabaseReader.GetCreator,
          DatabaseReader.GetCreatedDateTxt,
          ContiniaCompanySetup."Client ID"))
      ELSE
        ValueToHash := STRSUBSTNO('%1-%2',UPPERCASE(Company),ContiniaCompanySetup."Client ID");

      EXIT(Cryptography.HashValueSHA1(
        '1C7754F1876B9EADA2BAD610E8B4DF18ECFD19F1EE8389D4BEC768A9EB883627' +
        '983661067DE60965A0C5CB6737AB3E187B5294E64CB1CF3781E8346118148C81',
        ValueToHash));
    END;

    LOCAL PROCEDURE VerifyGUIDWithProduct@6085575(ProductCode@6085577 : Code[10];CurrCompany@1000 : Text[30]);
    VAR
      ContiniaCompanySetup@6085576 : Record 6192773;
      ContiniaCompanySetup2@6085575 : Record 6192773;
      Company@6085574 : Record 2000000006;
      ContiniaProductActivation@1160040000 : Record 6192772;
    BEGIN
      ContiniaCompanySetup.GET;
      Company.SETFILTER(Name,'<>%1',CurrCompany);
      IF Company.FINDFIRST THEN
        REPEAT
          ContiniaCompanySetup2.CHANGECOMPANY(Company.Name);
          IF ContiniaCompanySetup2.GET THEN
            IF (ContiniaCompanySetup."Company GUID" = ContiniaCompanySetup2."Company GUID") THEN BEGIN
              ContiniaProductActivation.SETRANGE("Company GUID",ContiniaCompanySetup2."Company GUID");
              IF NOT ContiniaProductActivation.ISEMPTY THEN
                ERROR(Text009,Company.Name,CurrCompany);
            END;
        UNTIL Company.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateOfflineActivation@6085581(ContiniaProductActivation@6085574 : Record 6192772;XmlDoc@6085573 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      CompanyInformation@6085584 : Record 79;
      ContiniaOnlineMgt@6085575 : Codeunit 6192772;
      Cryptography@6085577 : Codeunit 6085599;
      XmlNode@6085583 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CompanyNameCode@6085579 : Text[30];
      VATRegNo@6085580 : Text[20];
      NAVLicenseSN@6085581 : Text[100];
      CompanyGUID@6085576 : Text[1024];
      ActivationCode@6085578 : Text[128];
    BEGIN
      XmlNode := XmlDoc.SelectSingleNode('LicenseAgreement');
      CASE FALSE OF
        ContiniaOnlineMgt.GetAttribAsText(XmlNode.SelectNodes('Company'),'CompanyName',0,CompanyNameCode),
        ContiniaOnlineMgt.GetAttribAsText(XmlNode.SelectNodes('Company'),'VATRegNo',0,VATRegNo),
        ContiniaOnlineMgt.GetAttribAsText(XmlNode.SelectNodes('Company'),'NAVLicenseSN',0,NAVLicenseSN),
        ContiniaOnlineMgt.GetAttribAsText(XmlNode.SelectNodes('Company'),'CompanyGUID',0,CompanyGUID),
        ContiniaOnlineMgt.GetAttribAsText(XmlNode.SelectNodes('Activation'),'Code',0,ActivationCode):
          EXIT(FALSE);
      END;

      CompanyInformation.GET;
      CASE FALSE OF
        CompanyNameCode = COMPANYNAME,
        VATRegNo = CompanyInformation."VAT Registration No.",
        NAVLicenseSN = ContiniaOnlineMgt.GetNavLicenseSN,
        CompanyGUID = ContiniaOnlineMgt.GetCompanyGUID:
          EXIT(FALSE);
      END;

      IF ActivationCode <> Cryptography.HashValueSHA1(
        '1C7754F1876B9EADA2BAD610E8B4DF18ECFD19F1EE8389D4BEC768A9EB883627' +
        '983661067DE60965A0C5CB6737AB3E187B5294E64CB1CF3781E8346118148C81',
        ContiniaOnlineMgt.GetCompanyGUID)
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetDatabaseReader@1() : Boolean;
    VAR
      ContiniaSIStorage@6085573 : Codeunit 6192778;
      DatabaseReadable@6085574 : ' ,Not Readable,Readable';
    BEGIN
      CASE ContiniaSIStorage.IsDatabaseReadable OF
        DatabaseReadable::" ":
          BEGIN
            IF DatabaseReader.RUN THEN
              ContiniaSIStorage.SetDatabaseReadable(DatabaseReadable::Readable)
            ELSE
              ContiniaSIStorage.SetDatabaseReadable(DatabaseReadable::"Not Readable");
          END;

        DatabaseReadable::"Not Readable":
          EXIT(FALSE);

        DatabaseReadable::Readable:
          DatabaseReader.RUN;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetClientActivations@6085577(VAR ClientActivationsBuffer@6085573 : Record 6192775);
    VAR
      XmlDoc@6085574 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeList@6085576 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@6085575 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@6085577 : Integer;
    BEGIN
      ContiniaOnlineMgt.ExecuteRequest(GetActivationsURL,HttpActions::GET,TRUE,XmlDoc);

      WITH ClientActivationsBuffer DO BEGIN
        XmlNode := XmlDoc.SelectSingleNode('Activations');
        XMLNodeList := XmlNode.SelectNodes('Activation');
        FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
          INIT;
          "Entry No." := i;
          ContiniaOnlineMgt.GetAttribAsText(XMLNodeList,'CompanyName',i,"Company Name");
          "Company GUID" := ContiniaOnlineMgt.GetAttribAsGuid(XMLNodeList,'CompanyGUID',i);
          "Company Code" := ContiniaOnlineMgt.GetAttribAsCode(XMLNodeList,'CompanyCode',i);
          INSERT;
        END;

        IF FINDFIRST THEN;
      END;
    END;

    BEGIN
    END.
  }
}

