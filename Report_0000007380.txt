OBJECT Report 7380 Calculate Phys. Invt. Counting
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:13:24 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calculate Phys. Invt. Counting;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  OKPressed := TRUE;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               PrintPerItemVisible := TRUE;
               SortMethodVisible := TRUE;
               PrintPerItemEnable := TRUE;
               ShowQtyCalcEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;

                   ShowQtyCalcEnable := PrintDoc;
                   PrintPerItemEnable := PrintDoc;
                   SortMethodVisible := SourceJnl = SourceJnl::WhseJnl;
                   PrintPerItemVisible := SourceJnl = SourceJnl::WhseJnl;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 7   ;2   ;Field     ;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date for the posting of this batch job. By default, the system date is entered, but you can change it.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the document number of the entry to be applied.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=NextDocNo }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Items Not on Inventory;
                  ToolTipML=ENU=Specifies if journal lines should be created for items that are not on inventory, that is, items where the value in the Qty. (Calculated) field is 0.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ZeroQty }

      { 9   ;2   ;Group     ;
                  CaptionML=ENU=Print }

      { 1   ;3   ;Field     ;
                  CaptionML=ENU=Print List;
                  ToolTipML=ENU=Specifies that you want to print the lists on which employees record the quantity of items they count in each bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintDoc;
                  OnValidate=BEGIN
                               IF NOT PrintDoc THEN BEGIN
                                 PrintDocPerItem := FALSE;
                                 ShowQtyCalculated := FALSE;
                               END;
                               ShowQtyCalcEnable := PrintDoc;
                               PrintPerItemEnable := PrintDoc;
                             END;
                              }

      { 10  ;3   ;Field     ;
                  Name=ShowQtyCalc;
                  CaptionML=ENU=Show Qty. Calculated;
                  ToolTipML=ENU=Specifies that the calculated quantity is shown on the resulting report.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ShowQtyCalculated;
                  Enabled=ShowQtyCalcEnable }

      { 14  ;3   ;Field     ;
                  Name=PrintPerItem;
                  CaptionML=ENU=Per Item;
                  ToolTipML=ENU=Specifies if you want to sum up the inventory value per item ledger entry or per item.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintDocPerItem;
                  Visible=PrintPerItemVisible;
                  Enabled=PrintPerItemEnable }

      { 12  ;2   ;Field     ;
                  Name=SortMethod;
                  CaptionML=ENU=Sorting Method;
                  ToolTipML=ENU=Specifies how items are sorted on the resulting report.;
                  OptionCaptionML=ENU=" ,Item,Bin";
                  ApplicationArea=#Warehouse;
                  SourceExpr=SortingMethod;
                  Visible=SortMethodVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ItemJnlBatch@1002 : Record 233;
      WhseJnlBatch@1010 : Record 7310;
      NoSeriesMgt@1003 : Codeunit 396;
      PostingDate@1005 : Date;
      SourceJnl@1008 : 'ItemJnl,WhseJnl';
      SortingMethod@1012 : ' ,Item,Bin';
      NextDocNo@1004 : Code[20];
      PrintDoc@1013 : Boolean;
      PrintDocPerItem@1007 : Boolean;
      ShowQtyCalculated@1011 : Boolean;
      ZeroQty@1001 : Boolean;
      OKPressed@1006 : Boolean;
      ShowQtyCalcEnable@19024297 : Boolean INDATASET;
      PrintPerItemEnable@19030051 : Boolean INDATASET;
      SortMethodVisible@19065902 : Boolean INDATASET;
      PrintPerItemVisible@19031923 : Boolean INDATASET;

    [External]
    PROCEDURE GetRequest@1(VAR PostingDate2@1002 : Date;VAR NextDocNo2@1001 : Code[20];VAR SortingMethod2@1006 : ' ,Item,Bin';VAR PrintDoc2@1003 : Boolean;VAR PrintDocPerItem2@1005 : Boolean;VAR ZeroQty2@1000 : Boolean;VAR ShowQtyCalculated2@1004 : Boolean) : Boolean;
    BEGIN
      PostingDate2 := PostingDate;
      NextDocNo2 := NextDocNo;
      SortingMethod2 := SortingMethod;
      PrintDoc2 := PrintDoc;
      PrintDocPerItem2 := PrintDocPerItem;
      ZeroQty2 := ZeroQty;
      ShowQtyCalculated2 := ShowQtyCalculated;
      EXIT(OKPressed);
    END;

    LOCAL PROCEDURE ValidatePostingDate@4();
    BEGIN
      IF SourceJnl = SourceJnl::ItemJnl THEN BEGIN
        IF ItemJnlBatch."No. Series" = '' THEN
          NextDocNo := ''
        ELSE BEGIN
          NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,FALSE);
          CLEAR(NoSeriesMgt);
        END;
      END ELSE
        IF WhseJnlBatch."No. Series" = '' THEN
          NextDocNo := ''
        ELSE BEGIN
          NextDocNo := NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",PostingDate,FALSE);
          CLEAR(NoSeriesMgt);
        END;
    END;

    [External]
    PROCEDURE SetItemJnlLine@2(NewItemJnlBatch@1001 : Record 233);
    BEGIN
      ItemJnlBatch := NewItemJnlBatch;
      SourceJnl := SourceJnl::ItemJnl;
    END;

    [External]
    PROCEDURE SetWhseJnlLine@5(NewWhseJnlBatch@1001 : Record 7310);
    BEGIN
      WhseJnlBatch := NewWhseJnlBatch;
      SourceJnl := SourceJnl::WhseJnl;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

