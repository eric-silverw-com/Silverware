OBJECT Page 7157 Purch. Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:11:38 PM;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Purch. Analysis by Dimensions;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=CurrentItemAnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF ValueType = 0 THEN
                   ValueType := ValueType::"Cost Amount";

                 CurrentAnalysisArea := CurrentAnalysisArea::Purchase;

                 GLSetup.GET;

                 ItemAnalysisMgt.AnalysisViewSelection(
                   CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                   Dim1Filter,Dim2Filter,Dim3Filter);

                 IF (NewItemAnalysisCode <> '') AND (NewItemAnalysisCode <> CurrentItemAnalysisViewCode) THEN BEGIN
                   CurrentItemAnalysisViewCode := NewItemAnalysisCode;
                   ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                   ItemAnalysisMgt.SetItemAnalysisView(
                     CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                     Dim1Filter,Dim2Filter,Dim3Filter);
                 END;

                 ItemAnalysisMgt.SetLineAndColDim(
                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                 UpdateFilterFields;

                 FindPeriod('');

                 NoOfColumns := PurchAnalysisByDimMatrix.GetMatrixDimension;
                 SetPoints(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   EXIT(
                     ItemAnalysisMgt.FindRec(
                       ItemAnalysisView,LineDimOption,Rec,Which,
                       ItemFilter,LocationFilter,PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter));
                 END;

    OnNextRecord=BEGIN
                   EXIT(
                     ItemAnalysisMgt.NextRec(
                       ItemAnalysisView,LineDimOption,Rec,Steps,
                       ItemFilter,LocationFilter,PeriodType,DateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 27      ;1   ;ActionGroup;
                      CaptionML=ENU=&Actions;
                      Image=Action }
      { 36      ;2   ;Action    ;
                      CaptionML=ENU=Reverse Lines and Columns;
                      ToolTipML=ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                      ApplicationArea=#Dimensions;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ItemAnalysisMgt.ValidateLineDimCode(
                                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 ItemAnalysisMgt.ValidateColumnDimCode(
                                   ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 SetPoints(MATRIX_SetWanted::Initial);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the actual analysis report according to the selected filters and options.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CLEAR(PurchAnalysisByDimMatrix);
                                 ShowMatrix;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      Name=PreviousSet;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetPoints(MATRIX_SetWanted::Previous);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=NextSet;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#Dimensions;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetPoints(MATRIX_SetWanted::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 5   ;2   ;Field     ;
                CaptionML=ENU=Analysis View Code;
                ToolTipML=ENU=Specifies the code for the analysis view that the filter belongs to.;
                ApplicationArea=#Dimensions;
                SourceExpr=CurrentItemAnalysisViewCode;
                OnValidate=BEGIN
                             ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                             CurrentItemAnalysisViewCodeOnA;
                           END;

                OnLookup=BEGIN
                           ItemAnalysisMgt.LookupItemAnalysisView(
                             CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                             Dim1Filter,Dim2Filter,Dim3Filter);
                           ItemAnalysisMgt.SetLineAndColDim(
                             ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                           UpdateFilterFields;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Dimensions;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ItemAnalysisMgt.ValidateColumnDimCode(
                                 ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateLineDimCode(
                               ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(LineDimCode,ItemAnalysisView);
                           IF NewCode <> LineDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Dimensions;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ItemAnalysisMgt.ValidateLineDimCode(
                                 ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateColumnDimCode(
                               ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             SetPoints(MATRIX_SetWanted::Initial);
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(ColumnDimCode,ItemAnalysisView);
                           IF NewCode <> ColumnDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 47  ;2   ;Field     ;
                CaptionML=ENU=Show Value As;
                ToolTipML=ENU=Specifies how data is shown in the analysis view.;
                OptionCaptionML=ENU=,Cost Amount,Quantity;
                ApplicationArea=#Dimensions;
                SourceExpr=ValueType }

    { 1907524401;1;Group  ;
                CaptionML=ENU=Filters }

    { 15  ;2   ;Field     ;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Dimensions;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             TextManagement@1000 : Codeunit 41;
                           BEGIN
                             TextManagement.MakeDateFilter(DateFilter);
                             ItemStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             SetPoints(MATRIX_SetWanted::Initial);
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=ENU=Item Filter;
                ToolTipML=ENU=Specifies a filter to specify the items for which values will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             SetPoints(MATRIX_SetWanted::Initial);
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemList@1002 : Page 31;
                         BEGIN
                           ItemList.LOOKUPMODE(TRUE);
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := ItemList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=ENU=Location Filter;
                ToolTipML=ENU=Specifies the filter through which you want to analyze purchase entries.;
                ApplicationArea=#Location;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           LocationList@1002 : Page 15;
                         BEGIN
                           LocationList.LOOKUPMODE(TRUE);
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := LocationList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 17  ;2   ;Field     ;
                CaptionML=ENU=Budget Filter;
                ToolTipML=ENU=Specifies the budget that information in the matrix is shown for.;
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetFilter;
                OnValidate=BEGIN
                             SetPoints(MATRIX_SetWanted::Initial);
                             BudgetFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemBudgetName@1000 : Record 7132;
                         BEGIN
                           ItemBudgetName.FILTERGROUP := 2;
                           ItemBudgetName.SETRANGE("Analysis Area",CurrentAnalysisArea);
                           ItemBudgetName.FILTERGROUP := 0;
                           IF PAGE.RUNMODAL(0,ItemBudgetName) = ACTION::LookupOK THEN BEGIN
                             Text := ItemBudgetName.Name;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 34  ;2   ;Field     ;
                Name=Dim1FilterControl;
                CaptionML=ENU=Dimension 1 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 1 for which entries will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=Dim1Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(1,ItemAnalysisView);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Dimension 1 Filter",Dim1Filter);
                             SetPoints(MATRIX_SetWanted::Initial);
                             Dim1FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2FilterControl;
                CaptionML=ENU=Dimension 2 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 2 for which entries will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=Dim2Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(2,ItemAnalysisView);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Dimension 2 Filter",Dim2Filter);
                             SetPoints(MATRIX_SetWanted::Initial);
                             Dim2FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3FilterControl;
                CaptionML=ENU=Dimension 3 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 3 for which entries will be shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=Dim3Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(3,ItemAnalysisView);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             ItemStatisticsBuffer.SETFILTER("Dimension 3 Filter",Dim3Filter);
                             SetPoints(MATRIX_SetWanted::Initial);
                             Dim3FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=ENU=Options }

    { 32  ;2   ;Field     ;
                CaptionML=ENU=Show;
                ToolTipML=ENU=Specifies if the selected value is shown in the window.;
                OptionCaptionML=ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                ApplicationArea=#Dimensions;
                SourceExpr=ShowActualBudget }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#Dimensions;
                SourceExpr=RoundingFactor }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Show Column Name;
                ToolTipML=ENU=Specifies that the names of columns are shown in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 50  ;2   ;Field     ;
                CaptionML=ENU=Show Opposite Sign;
                ToolTipML=ENU=Specifies whether to show debits as negative amounts (with minus signs) and credits as positive amounts in the matrix window.;
                ApplicationArea=#Dimensions;
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes }

    { 1906098301;1;Group  ;
                CaptionML=ENU=Matrix Options }

    { 19  ;2   ;Field     ;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Dimensions;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             SetPoints(MATRIX_SetWanted::Initial);
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=ColumnSet;
                CaptionML=ENU=Column Set;
                ToolTipML=ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                ApplicationArea=#Dimensions;
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      GLSetup@1025 : Record 98;
      ItemAnalysisView@1011 : Record 7152;
      ItemStatisticsBuffer@1002 : Record 5821;
      ItemAnalysisMgt@1038 : Codeunit 7153;
      MatrixMgt@1031 : Codeunit 9200;
      PurchAnalysisByDimMatrix@1000 : Page 9225;
      CurrentItemAnalysisViewCode@1016 : Code[10];
      CurrentAnalysisArea@1001 : 'Sales,Purchase,Inventory';
      ValueType@1004 : ',Cost Amount,Sales Quantity';
      ShowActualBudget@1027 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      RoundingFactor@1005 : 'None,1,1000,1000000';
      LineDimOption@1007 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      ColumnDimOption@1006 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      BudgetFilter@1026 : Code[250];
      LineDimCode@1020 : Text[30];
      ColumnDimCode@1019 : Text[30];
      InternalDateFilter@1014 : Text[30];
      MatrixColumnCaptions@1022 : ARRAY [32] OF Text[80];
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1029 : Boolean;
      ShowOppositeSign@1030 : Boolean;
      DateFilter@1021 : Text[30];
      Dim1Filter@1043 : Code[250];
      Dim2Filter@1042 : Code[250];
      Dim3Filter@1041 : Code[250];
      ItemFilter@1040 : Code[250];
      LocationFilter@1039 : Code[250];
      FirstColumnDate@1035 : Date;
      LastColumnDate@1032 : Date;
      NoOfColumns@1047 : Integer;
      MATRIX_PKFirstRecInCurrSet@1036 : Text;
      MATRIX_CaptionRange@1046 : Text;
      MATRIX_CodeRange@1023 : Text[250];
      MATRIX_CurrSetLength@1048 : Integer;
      MATRIX_SetWanted@1049 : 'Initial,Previous,Same,Next';
      NewItemAnalysisCode@1037 : Code[10];
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[3]);
    VAR
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      PeriodFormMgt.FindPeriodOnMatrixPage(
        DateFilter,InternalDateFilter,SearchText,PeriodType,
        (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period));
    END;

    LOCAL PROCEDURE RefreshInternalDateFilter@1();
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETRANGE("Date Filter",FirstColumnDate,LastColumnDate);
      IF Item.GETRANGEMIN("Date Filter") = Item.GETRANGEMAX("Date Filter") THEN
        Item.SETRANGE("Date Filter",Item.GETRANGEMIN("Date Filter"));
      InternalDateFilter := COPYSTR(Item.GETFILTER("Date Filter"),1,MAXSTRLEN(InternalDateFilter));
    END;

    LOCAL PROCEDURE UpdateFilterFields@4();
    VAR
      ItemAnalysisViewFilter@1000 : Record 7153;
    BEGIN
      ItemFilter := ItemAnalysisView."Item Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';

      Dim1FilterEnable := ItemAnalysisView."Dimension 1 Code" <> '';
      Dim2FilterEnable := ItemAnalysisView."Dimension 2 Code" <> '';
      Dim3FilterEnable := ItemAnalysisView."Dimension 3 Code" <> '';

      IF Dim1FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 1 Code")
        THEN
          Dim1Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 2 Code")
        THEN
          Dim2Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 3 Code")
        THEN
          Dim3Filter := ItemAnalysisViewFilter."Dimension Value Filter";
    END;

    PROCEDURE SetPoints@5(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      MATRIX_PeriodRecords@1002 : ARRAY [32] OF Record 2000000007;
    BEGIN
      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          SetPointsItem(SetWanted);
        ColumnDimOption::Location:
          SetPointsLocation(SetWanted);
        ColumnDimOption::Period:
          BEGIN
            MatrixMgt.GeneratePeriodMatrixData(SetWanted,NoOfColumns,ShowColumnName,PeriodType,DateFilter,MATRIX_PKFirstRecInCurrSet,
              MatrixColumnCaptions,MATRIX_CaptionRange,MATRIX_CurrSetLength,MATRIX_PeriodRecords);
            IF MATRIX_CurrSetLength > 0 THEN BEGIN
              FirstColumnDate := MATRIX_PeriodRecords[1]."Period Start";
              LastColumnDate := MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period Start";
            END;
            RefreshInternalDateFilter;
          END;
        ColumnDimOption::"Dimension 1":
          SetPointsDim(ItemAnalysisView."Dimension 1 Code",Dim1Filter,SetWanted);
        ColumnDimOption::"Dimension 2":
          SetPointsDim(ItemAnalysisView."Dimension 2 Code",Dim2Filter,SetWanted);
        ColumnDimOption::"Dimension 3":
          SetPointsDim(ItemAnalysisView."Dimension 3 Code",Dim3Filter,SetWanted);
      END;
    END;

    LOCAL PROCEDURE SetPointsItem@22(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      Item@1013 : Record 27;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1002 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      Item.SETFILTER("No.",ItemFilter);
      RecRef.GETTABLE(Item);
      RecRef.SETTABLE(Item);

      IF ShowColumnName THEN
        CaptionFieldNo := Item.FIELDNO(Description)
      ELSE
        CaptionFieldNo := Item.FIELDNO("No.");

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF ShowColumnName THEN
        MATRIX_CodeRange :=
          MatrixMgt.GetPKRange(RecRef,Item.FIELDNO("No."),MATRIX_PKFirstRecInCurrSet,MATRIX_CurrSetLength);
    END;

    LOCAL PROCEDURE SetPointsLocation@6(SetWanted@1002 : 'Initial,Previous,Same,Next');
    VAR
      Location@1013 : Record 14;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1001 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      Location.SETFILTER(Code,LocationFilter);
      RecRef.GETTABLE(Location);
      RecRef.SETTABLE(Location);

      IF ShowColumnName THEN
        CaptionFieldNo := Location.FIELDNO(Name)
      ELSE
        CaptionFieldNo := Location.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF ShowColumnName THEN
        MATRIX_CodeRange :=
          MatrixMgt.GetPKRange(RecRef,Location.FIELDNO(Code),MATRIX_PKFirstRecInCurrSet,MATRIX_CurrSetLength);
    END;

    LOCAL PROCEDURE SetPointsDim@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Code[250];SetWanted@1006 : 'Initial,Previous,Same,Next');
    VAR
      DimVal@1001 : Record 349;
      MatrixMgt@1000 : Codeunit 9200;
      RecRef@1004 : RecordRef;
      CaptionFieldNo@1005 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      IF DimFilter <> '' THEN
        DimVal.SETFILTER(Code,DimFilter);
      RecRef.GETTABLE(DimVal);
      RecRef.SETTABLE(DimVal);

      IF ShowColumnName THEN
        CaptionFieldNo := DimVal.FIELDNO(Name)
      ELSE
        CaptionFieldNo := DimVal.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF ShowColumnName THEN
        MATRIX_CodeRange :=
          MatrixMgt.GetPKRange(RecRef,DimVal.FIELDNO(Code),MATRIX_PKFirstRecInCurrSet,MATRIX_CurrSetLength);
    END;

    LOCAL PROCEDURE ShowMatrix@10();
    VAR
      CurItemFilter@1000 : Text[250];
      CurLocationFilter@1001 : Text[250];
      CurDim1Filter@1002 : Text[250];
      CurDim2Filter@1003 : Text[250];
      CurDim3Filter@1004 : Text[250];
    BEGIN
      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          CurItemFilter := MATRIX_CodeRange;
        ColumnDimOption::Location:
          CurLocationFilter := MATRIX_CodeRange;
        ColumnDimOption::"Dimension 1":
          CurDim1Filter := MATRIX_CodeRange;
        ColumnDimOption::"Dimension 2":
          CurDim2Filter := MATRIX_CodeRange;
        ColumnDimOption::"Dimension 3":
          CurDim3Filter := MATRIX_CodeRange;
        ColumnDimOption::Period:
          PeriodInitialized := TRUE;
      END;
      IF CurItemFilter = '' THEN
        CurItemFilter := ItemFilter;
      IF CurLocationFilter = '' THEN
        CurLocationFilter := LocationFilter;
      IF CurDim1Filter = '' THEN
        CurDim1Filter := Dim1Filter;
      IF CurDim2Filter = '' THEN
        CurDim2Filter := Dim2Filter;
      IF CurDim3Filter = '' THEN
        CurDim3Filter := Dim3Filter;

      PurchAnalysisByDimMatrix.LoadVariables(ItemAnalysisView,
        CurrentItemAnalysisViewCode,CurrentAnalysisArea,
        LineDimOption,ColumnDimOption,PeriodType,ValueType,
        RoundingFactor,ShowActualBudget,MatrixColumnCaptions,
        ShowOppositeSign,PeriodInitialized,ShowColumnName,MATRIX_CurrSetLength);

      PurchAnalysisByDimMatrix.LoadFilters(CurItemFilter,CurLocationFilter,CurDim1Filter,CurDim2Filter,CurDim3Filter,
        DateFilter,BudgetFilter,InternalDateFilter);

      PurchAnalysisByDimMatrix.RUNMODAL;
    END;

    [External]
    PROCEDURE SetCurrentAnalysisViewCode@7(NewAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewItemAnalysisCode := NewAnalysisViewCode;
    END;

    LOCAL PROCEDURE CurrentItemAnalysisViewCodeOnA@19045075();
    BEGIN
      ItemAnalysisMgt.SetItemAnalysisView(
        CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
        Dim1Filter,Dim2Filter,Dim3Filter);
      ItemAnalysisMgt.SetLineAndColDim(
        ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
      UpdateFilterFields;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE Dim2FilterOnAfterValidate@19005475();
    BEGIN
      CurrPage.UPDATE;
      SetPoints(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim1FilterOnAfterValidate@19005240();
    BEGIN
      CurrPage.UPDATE;
      SetPoints(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim3FilterOnAfterValidate@19064950();
    BEGIN
      CurrPage.UPDATE;
      SetPoints(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      ItemStatisticsBuffer.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE(FALSE);
      SetPoints(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      ItemStatisticsBuffer.SETFILTER("Location Filter",LocationFilter);
      CurrPage.UPDATE(FALSE);
      SetPoints(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE BudgetFilterOnAfterValidate@19069837();
    BEGIN
      ItemStatisticsBuffer.SETFILTER("Budget Filter",BudgetFilter);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    BEGIN
      SetPoints(MATRIX_SetWanted::Same);
    END;

    BEGIN
    END.
  }
}

