OBJECT Page 6702 Booking Sync. Setup
{
  OBJECT-PROPERTIES
  {
    Date=11/27/18;
    Time=11:11:35 PM;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    CaptionML=ENU=Booking Sync. Setup;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table6702;
    DataCaptionExpr="Booking Mailbox Name";
    PageType=Card;
    PromotedActionCategoriesML=ENU=New,Process,Report,Navigate,Filter;
    OnInit=VAR
             MarketingSetup@1000 : Record 5079;
           BEGIN
             IF MarketingSetup.GET THEN
               GraphSyncEnabled := MarketingSetup."Sync with Microsoft Graph";
           END;

    OnOpenPage=VAR
                 PermissionManager@1000 : Codeunit 9002;
               BEGIN
                 CheckExistingSetup;
                 GetExchangeAccount;
                 IsSyncUser := "User ID" = USERID;
                 IsSaaS := PermissionManager.SoftwareAsAService;
               END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;ActionGroup;
                      CaptionML=ENU=Process;
                      Image=Action }
      { 22      ;2   ;Action    ;
                      Name=Validate Exchange Connection;
                      CaptionML=ENU=Validate Exchange Connection;
                      ToolTipML=ENU=Test that the provided exchange server connection works.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ValidateEmailLoggingSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF O365SyncManagement.IsO365Setup(FALSE) THEN
                                   O365SyncManagement.ValidateExchangeConnection(ExchangeAccountUserName,ExchangeSync);
                               END;
                                }
      { 28      ;2   ;Action    ;
                      Name=SyncWithBookings;
                      CaptionML=ENU=Sync with Bookings;
                      ToolTipML=ENU=Synchronize changes made in Bookings since the last sync date and last modified date.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 O365SyncManagement@1002 : Codeunit 6700;
                               BEGIN
                                 CLEAR(O365SyncManagement);
                                 IF O365SyncManagement.IsO365Setup(FALSE) THEN BEGIN
                                   IF "Sync Customers" THEN
                                     O365SyncManagement.SyncBookingCustomers(Rec);
                                   IF "Sync Services" THEN
                                     O365SyncManagement.SyncBookingServices(Rec);
                                 END;
                               END;
                                }
      { 23      ;2   ;Action    ;
                      Name=SetSyncUser;
                      CaptionML=ENU=Set Sync. User;
                      ToolTipML=ENU=Set the synchronization user to be you.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=NOT IsSyncUser;
                      Image=User;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF CONFIRM(SetSyncUserQst) THEN BEGIN
                                   VALIDATE("User ID",USERID);
                                   GetExchangeAccount;
                                 END;
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=Invoice Appointments;
                      CaptionML=ENU=Invoice Appointments;
                      ToolTipML=ENU=View Booking appointments and create invoices for your customers.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=IsSaaS;
                      PromotedIsBig=Yes;
                      Image=NewInvoice;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 BookingManager@1003 : Codeunit 6721;
                               BEGIN
                                 BookingManager.InvoiceBookingItems;
                               END;
                                }
      { 16      ;1   ;ActionGroup;
                      CaptionML=ENU=Filter }
      { 17      ;2   ;Action    ;
                      Name=SetCustomerSyncFilter;
                      CaptionML=ENU=Set Customer Sync Filter;
                      ToolTipML=ENU=Set a filter to use when syncing customers.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ContactFilter;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BookingCustomerSync@1000 : Codeunit 6704;
                               BEGIN
                                 CALCFIELDS("Customer Filter");
                                 BookingCustomerSync.GetRequestParameters(Rec);
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=SetServiceSyncFilter;
                      CaptionML=ENU=Set Service Sync Filter;
                      ToolTipML=ENU=Set a filter to use when syncing service items.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Filter;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 BookingServiceSync@1004 : Codeunit 6705;
                               BEGIN
                                 CALCFIELDS("Item Filter");
                                 BookingServiceSync.GetRequestParameters(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=Bookings Company;
                CaptionML=ENU=Bookings Company;
                ToolTipML=ENU=Specifies the Bookings company with which to synchronize customers and services.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Booking Mailbox Name";
                OnValidate=VAR
                             BookingMailbox@1001 : Record 6704;
                             BookingMailboxList@1000 : Page 6704;
                           BEGIN
                             IF FORMAT("Last Customer Sync") + FORMAT("Last Service Sync") <> '' THEN
                               IF NOT CONFIRM(ChangeCompanyQst) THEN BEGIN
                                 "Booking Mailbox Name" := xRec."Booking Mailbox Name";
                                 EXIT;
                               END;

                             O365SyncManagement.GetBookingMailboxes(Rec,TempBookingMailbox,"Booking Mailbox Name");

                             IF TempBookingMailbox.COUNT = 0 THEN
                               ERROR(NoMailboxErr);

                             IF TempBookingMailbox.COUNT = 1 THEN BEGIN
                               "Booking Mailbox Address" := TempBookingMailbox.SmtpAddress;
                               "Booking Mailbox Name" := TempBookingMailbox."Display Name";
                             END ELSE BEGIN
                               BookingMailboxList.SetMailboxes(TempBookingMailbox);
                               BookingMailboxList.LOOKUPMODE(TRUE);
                               IF BookingMailboxList.RUNMODAL IN [ACTION::LookupOK,ACTION::OK] THEN BEGIN
                                 BookingMailboxList.GETRECORD(BookingMailbox);
                                 "Booking Mailbox Address" := BookingMailbox.SmtpAddress;
                                 "Booking Mailbox Name" := BookingMailbox."Display Name";
                               END ELSE
                                 "Booking Mailbox Name" := xRec."Booking Mailbox Name";
                             END;

                             IF "Booking Mailbox Name" <> xRec."Booking Mailbox Name" THEN BEGIN
                               CLEAR("Last Customer Sync");
                               CLEAR("Last Service Sync");
                               MODIFY;
                               CurrPage.UPDATE;
                             END;
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=SyncUser;
                CaptionML=ENU=Synchronization User;
                ToolTipML=ENU=Specifies the user on behalf of which to run the synchronize operation.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User ID";
                Enabled=false;
                Editable=false }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=Enable Background Synchronization;
                ToolTipML=ENU=Specifies whether to allow synchronization to occur periodically in the background.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Enabled }

    { 19  ;1   ;Group     ;
                Name=Synchronize;
                CaptionML=ENU=Synchronize;
                GroupType=Group }

    { 14  ;2   ;Field     ;
                ToolTipML=ENU=Specifies whether to synchronize Bookings customers.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sync Customers";
                Visible=NOT GraphSyncEnabled }

    { 13  ;2   ;Field     ;
                CaptionML=ENU=Default Customer Template;
                ToolTipML=ENU=Specifies the customer template to use when creating new Customers from the Bookings company.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Template Code";
                Visible=NOT GraphSyncEnabled }

    { 9   ;2   ;Field     ;
                ToolTipML=ENU=Specifies whether to synchronize services.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sync Services" }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Default Item Template;
                ToolTipML=ENU=Specifies the template to use when creating new service items from the Bookings company.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Item Template Code" }

  }
  CODE
  {
    VAR
      ExchangeSync@1000 : Record 6700;
      TempBookingMailbox@1002 : TEMPORARY Record 6704;
      O365SyncManagement@1004 : Codeunit 6700;
      ExchangeAccountUserName@1001 : Text[250];
      ChangeCompanyQst@1003 : TextConst 'ENU=The synchronization has been run against the current company. The process will no longer synchronize customer and service records with the current company, and synchronize against the new selected company. Do you want to continue?';
      SetSyncUserQst@1008 : TextConst 'ENU=Setting the synchronization user will assign your Exchange email and password as the credentials that are used to synchronize customers and service items to Bookings for this company. Any user already assigned as the synchronization user will be replaced with your User ID. Do you want to continue?';
      ExchangeSyncErr@1007 : TextConst 'ENU=Exchange sync. must be setup before using Bookings Sync.';
      NoMailboxErr@1010 : TextConst 'ENU=No matching mailboxes found.';
      IsSyncUser@1005 : Boolean;
      GraphSyncEnabled@1006 : Boolean;
      IsSaaS@1009 : Boolean;

    LOCAL PROCEDURE CheckExistingSetup@6();
    BEGIN
      IF NOT ExchangeSync.GET(USERID) OR NOT O365SyncManagement.IsO365Setup(FALSE) THEN
        ERROR(ExchangeSyncErr);

      IF NOT GET THEN BEGIN
        INIT;
        "User ID" := USERID;
        O365SyncManagement.GetBookingMailboxes(Rec,TempBookingMailbox,'');
        IF TempBookingMailbox.COUNT = 1 THEN BEGIN
          "Booking Mailbox Address" := TempBookingMailbox.SmtpAddress;
          "Booking Mailbox Name" := TempBookingMailbox."Display Name";
        END;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetExchangeAccount@1();
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      User.SETRANGE("User Name",USERID);
      IF User.FINDFIRST THEN
        ExchangeAccountUserName := User."Authentication Email";
    END;

    BEGIN
    END.
  }
}

